// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/log/eventpb/changefeed_events.proto

package eventpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CreateChangefeed is an event for any CREATE CHANGEFEED query that
// successfully starts running. Failed CREATE statements will show up as
// ChangefeedFailed events.
//
// Note: in version 26.1, these events will be moved to the `CHANGEFEED` channel.
// To test compatability before this, set the cluster setting
// `log.channel_compatibility_mode.enabled` to false. This will send the
// events to `CHANGEFEED` instead of `TELEMETRY`.
type CreateChangefeed struct {
	CommonChangefeedEventDetails `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	// Flag representing whether the changefeed is using CDC queries.
	Transformation bool `protobuf:"varint,2,opt,name=transformation,proto3" json:",omitempty" redact:"nonsensitive"`
}

func (m *CreateChangefeed) Reset()         { *m = CreateChangefeed{} }
func (m *CreateChangefeed) String() string { return proto.CompactTextString(m) }
func (*CreateChangefeed) ProtoMessage()    {}
func (*CreateChangefeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_395aaca3cdc6ef5d, []int{0}
}
func (m *CreateChangefeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateChangefeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateChangefeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateChangefeed.Merge(m, src)
}
func (m *CreateChangefeed) XXX_Size() int {
	return m.Size()
}
func (m *CreateChangefeed) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateChangefeed.DiscardUnknown(m)
}

var xxx_messageInfo_CreateChangefeed proto.InternalMessageInfo

// AlterChangefeed is an event for any ALTER CHANGEFEED statements that are run.
//
// Note: in version 26.1, these events will be moved to the `CHANGEFEED` channel.
// To test compatability before this, set the cluster setting
// `log.channel_compatibility_mode.enabled` to false. This will send the
// events to `CHANGEFEED` instead of `TELEMETRY`.
type AlterChangefeed struct {
	CommonChangefeedEventDetails `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	// The description of the changefeed job before the ALTER CHANGEFEED.
	PreviousDescription string `protobuf:"bytes,2,opt,name=previous_description,json=previousDescription,proto3" json:",omitempty"`
}

func (m *AlterChangefeed) Reset()         { *m = AlterChangefeed{} }
func (m *AlterChangefeed) String() string { return proto.CompactTextString(m) }
func (*AlterChangefeed) ProtoMessage()    {}
func (*AlterChangefeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_395aaca3cdc6ef5d, []int{1}
}
func (m *AlterChangefeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlterChangefeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AlterChangefeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlterChangefeed.Merge(m, src)
}
func (m *AlterChangefeed) XXX_Size() int {
	return m.Size()
}
func (m *AlterChangefeed) XXX_DiscardUnknown() {
	xxx_messageInfo_AlterChangefeed.DiscardUnknown(m)
}

var xxx_messageInfo_AlterChangefeed proto.InternalMessageInfo

// ChangefeedFailed is an event for any changefeed failure since the plan hook
// was triggered.
//
// Note: in version 26.1, these events will be moved to the `CHANGEFEED` channel.
// To test compatability before this, set the cluster setting
// `log.channel_compatibility_mode.enabled` to false. This will send the
// events to `CHANGEFEED` instead of `TELEMETRY`.
type ChangefeedFailed struct {
	CommonChangefeedEventDetails `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	// The reason / environment with which the changefeed failed
	// (ex: connection_closed, changefeed_behind).
	FailureType string `protobuf:"bytes,2,opt,name=failure_type,json=failureType,proto3" json:",omitempty" redact:"nonsensitive"`
}

func (m *ChangefeedFailed) Reset()         { *m = ChangefeedFailed{} }
func (m *ChangefeedFailed) String() string { return proto.CompactTextString(m) }
func (*ChangefeedFailed) ProtoMessage()    {}
func (*ChangefeedFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_395aaca3cdc6ef5d, []int{2}
}
func (m *ChangefeedFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangefeedFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ChangefeedFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangefeedFailed.Merge(m, src)
}
func (m *ChangefeedFailed) XXX_Size() int {
	return m.Size()
}
func (m *ChangefeedFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangefeedFailed.DiscardUnknown(m)
}

var xxx_messageInfo_ChangefeedFailed proto.InternalMessageInfo

// ChangefeedCanceled is an event for any changefeed cancellations.
//
// Note: in version 26.1, these events will be moved to the `CHANGEFEED` channel.
// To test compatability before this, set the cluster setting
// `log.channel_compatibility_mode.enabled` to false. This will send the
// events to `CHANGEFEED` instead of `TELEMETRY`.
type ChangefeedCanceled struct {
	CommonChangefeedEventDetails `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
}

func (m *ChangefeedCanceled) Reset()         { *m = ChangefeedCanceled{} }
func (m *ChangefeedCanceled) String() string { return proto.CompactTextString(m) }
func (*ChangefeedCanceled) ProtoMessage()    {}
func (*ChangefeedCanceled) Descriptor() ([]byte, []int) {
	return fileDescriptor_395aaca3cdc6ef5d, []int{3}
}
func (m *ChangefeedCanceled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangefeedCanceled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ChangefeedCanceled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangefeedCanceled.Merge(m, src)
}
func (m *ChangefeedCanceled) XXX_Size() int {
	return m.Size()
}
func (m *ChangefeedCanceled) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangefeedCanceled.DiscardUnknown(m)
}

var xxx_messageInfo_ChangefeedCanceled proto.InternalMessageInfo

// ChangefeedEmittedBytes is an event representing the bytes emitted by a changefeed over an interval.
//
// Note: in version 26.1, these events will be moved to the `CHANGEFEED` channel.
// To test compatability before this, set the cluster setting
// `log.channel_compatibility_mode.enabled` to false. This will send the
// events to `CHANGEFEED` instead of `TELEMETRY`.
type ChangefeedEmittedBytes struct {
	CommonChangefeedEventDetails `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	// The number of bytes emitted.
	EmittedBytes int64 `protobuf:"varint,3,opt,name=emitted_bytes,json=emittedBytes,proto3" json:",omitempty" redact:"nonsensitive"`
	// The number of messages emitted.
	EmittedMessages int64 `protobuf:"varint,6,opt,name=emitted_messages,json=emittedMessages,proto3" json:",omitempty" redact:"nonsensitive"`
	// The time period in nanoseconds between emitting telemetry events of this type (per-aggregator).
	LoggingInterval int64 `protobuf:"varint,4,opt,name=logging_interval,json=loggingInterval,proto3" json:",omitempty" redact:"nonsensitive"`
	// Flag to indicate that the changefeed is closing.
	Closing bool `protobuf:"varint,5,opt,name=closing,proto3" json:",omitempty" redact:"nonsensitive"`
}

func (m *ChangefeedEmittedBytes) Reset()         { *m = ChangefeedEmittedBytes{} }
func (m *ChangefeedEmittedBytes) String() string { return proto.CompactTextString(m) }
func (*ChangefeedEmittedBytes) ProtoMessage()    {}
func (*ChangefeedEmittedBytes) Descriptor() ([]byte, []int) {
	return fileDescriptor_395aaca3cdc6ef5d, []int{4}
}
func (m *ChangefeedEmittedBytes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangefeedEmittedBytes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ChangefeedEmittedBytes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangefeedEmittedBytes.Merge(m, src)
}
func (m *ChangefeedEmittedBytes) XXX_Size() int {
	return m.Size()
}
func (m *ChangefeedEmittedBytes) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangefeedEmittedBytes.DiscardUnknown(m)
}

var xxx_messageInfo_ChangefeedEmittedBytes proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CreateChangefeed)(nil), "cockroach.util.log.eventpb.CreateChangefeed")
	proto.RegisterType((*AlterChangefeed)(nil), "cockroach.util.log.eventpb.AlterChangefeed")
	proto.RegisterType((*ChangefeedFailed)(nil), "cockroach.util.log.eventpb.ChangefeedFailed")
	proto.RegisterType((*ChangefeedCanceled)(nil), "cockroach.util.log.eventpb.ChangefeedCanceled")
	proto.RegisterType((*ChangefeedEmittedBytes)(nil), "cockroach.util.log.eventpb.ChangefeedEmittedBytes")
}

func init() {
	proto.RegisterFile("util/log/eventpb/changefeed_events.proto", fileDescriptor_395aaca3cdc6ef5d)
}

var fileDescriptor_395aaca3cdc6ef5d = []byte{
	// 504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x77, 0x9a, 0x1a, 0xeb, 0x34, 0xb6, 0x21, 0x56, 0x59, 0x02, 0x6e, 0xc2, 0x5e, 0xcc,
	0x41, 0x76, 0x41, 0x11, 0xc4, 0x5b, 0x92, 0x2a, 0x58, 0x14, 0x21, 0x08, 0x82, 0x07, 0xc3, 0x64,
	0xf6, 0x65, 0x32, 0x74, 0x76, 0x66, 0x99, 0x99, 0x04, 0xf2, 0x5f, 0xf8, 0xc7, 0x08, 0xde, 0xbc,
	0x78, 0xc9, 0x31, 0xc7, 0x9e, 0x16, 0x4d, 0x6e, 0x3d, 0xfa, 0x17, 0xc8, 0xa6, 0x9b, 0x1f, 0x56,
	0x84, 0xe6, 0x60, 0x6e, 0xc3, 0xf0, 0x3e, 0x9f, 0xef, 0x7b, 0x6f, 0xd9, 0xc1, 0x8d, 0xa1, 0xe5,
	0x22, 0x14, 0x8a, 0x85, 0x30, 0x02, 0x69, 0x93, 0x5e, 0x48, 0x07, 0x44, 0x32, 0xe8, 0x03, 0x44,
	0xdd, 0xc5, 0x95, 0x09, 0x12, 0xad, 0xac, 0xaa, 0x54, 0xa9, 0xa2, 0xe7, 0x5a, 0x11, 0x3a, 0x08,
	0x32, 0x26, 0x10, 0x8a, 0x05, 0x39, 0x53, 0x3d, 0x61, 0x8a, 0xa9, 0x45, 0x59, 0x98, 0x9d, 0xae,
	0x88, 0xea, 0xc3, 0xbf, 0xdc, 0x9b, 0x42, 0xff, 0x3b, 0xc2, 0xe5, 0xb6, 0x06, 0x62, 0xa1, 0xbd,
	0x8a, 0xac, 0x7c, 0xc2, 0x45, 0xaa, 0xe2, 0x58, 0x49, 0x17, 0xd5, 0x51, 0xe3, 0xf0, 0xc9, 0xf3,
	0xe0, 0xdf, 0xb1, 0x41, 0x7b, 0x51, 0xb9, 0xa6, 0x5f, 0x66, 0xf7, 0xa7, 0x60, 0x09, 0x17, 0xa6,
	0x55, 0x9a, 0xa4, 0x35, 0x67, 0x9a, 0xd6, 0xd0, 0x65, 0x5a, 0x73, 0x3a, 0xb9, 0xb5, 0xf2, 0x0e,
	0x1f, 0x59, 0x4d, 0xa4, 0xe9, 0x2b, 0x1d, 0x13, 0xcb, 0x95, 0x74, 0xf7, 0xea, 0xa8, 0x71, 0xd0,
	0x7a, 0x74, 0x99, 0xd6, 0xf0, 0x63, 0x15, 0x73, 0x0b, 0x71, 0x62, 0xc7, 0xbf, 0xd2, 0xda, 0x7d,
	0x0d, 0x11, 0xa1, 0xf6, 0x85, 0x2f, 0x95, 0x34, 0x20, 0x0d, 0xb7, 0x7c, 0x04, 0x7e, 0xe7, 0x1a,
	0xee, 0x7f, 0x41, 0xf8, 0xb8, 0x29, 0x2c, 0xe8, 0x1d, 0x0e, 0xd1, 0xc4, 0x27, 0x89, 0x86, 0x11,
	0x57, 0x43, 0xd3, 0x8d, 0xc0, 0x50, 0xcd, 0x93, 0xd5, 0x28, 0x77, 0x5a, 0x47, 0x7f, 0x8e, 0xd2,
	0xb9, 0xb7, 0xac, 0x3d, 0x5d, 0x97, 0xfa, 0xdf, 0xb2, 0xe5, 0xaf, 0x32, 0x5f, 0x11, 0x2e, 0x76,
	0xd0, 0xf7, 0x19, 0x2e, 0xf5, 0x09, 0x17, 0x43, 0x0d, 0x5d, 0x3b, 0x4e, 0x20, 0xef, 0xf7, 0xc6,
	0xab, 0x3f, 0xcc, 0xe1, 0xf7, 0xe3, 0x04, 0x7c, 0x8b, 0x2b, 0xeb, 0xec, 0x36, 0x91, 0x14, 0x76,
	0x30, 0x81, 0xff, 0xb5, 0x80, 0x1f, 0x6c, 0x00, 0x31, 0xb7, 0x16, 0xa2, 0xd6, 0xd8, 0x82, 0xf9,
	0xef, 0xcb, 0x7b, 0x83, 0xef, 0xc2, 0x55, 0x5e, 0xb7, 0x97, 0x05, 0xba, 0x85, 0x3a, 0x6a, 0x14,
	0x6e, 0xbe, 0xbd, 0x12, 0x6c, 0x76, 0xdb, 0xc1, 0xe5, 0xa5, 0x2d, 0x06, 0x63, 0x08, 0x03, 0xe3,
	0x16, 0xb7, 0x13, 0x1e, 0xe7, 0x82, 0xb7, 0x39, 0x9f, 0x39, 0x85, 0x62, 0x8c, 0x4b, 0xd6, 0xe5,
	0xd2, 0x82, 0x1e, 0x11, 0xe1, 0xee, 0x6f, 0xe9, 0xcc, 0x05, 0xaf, 0x73, 0xbe, 0xd2, 0xc4, 0xb7,
	0xa9, 0x50, 0x86, 0x4b, 0xe6, 0xde, 0xda, 0xee, 0x47, 0x5d, 0x72, 0x67, 0xfb, 0x07, 0x7b, 0xe5,
	0x42, 0xeb, 0xc3, 0xe4, 0xa7, 0xe7, 0x4c, 0x66, 0x1e, 0x9a, 0xce, 0x3c, 0x74, 0x31, 0xf3, 0xd0,
	0x8f, 0x99, 0x87, 0x3e, 0xcf, 0x3d, 0x67, 0x3a, 0xf7, 0x9c, 0x8b, 0xb9, 0xe7, 0x7c, 0x7c, 0xc6,
	0xb8, 0x1d, 0x0c, 0x7b, 0x01, 0x55, 0x71, 0xb8, 0xfa, 0x74, 0x51, 0x6f, 0x7d, 0x0e, 0x93, 0x73,
	0x16, 0x5e, 0x7f, 0xd3, 0x7a, 0xc5, 0xc5, 0x6b, 0xf6, 0xf4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x84, 0x41, 0x9e, 0xcf, 0x4a, 0x05, 0x00, 0x00,
}

func (m *CreateChangefeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChangefeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateChangefeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Transformation {
		i--
		if m.Transformation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.CommonChangefeedEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintChangefeedEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AlterChangefeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlterChangefeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlterChangefeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreviousDescription) > 0 {
		i -= len(m.PreviousDescription)
		copy(dAtA[i:], m.PreviousDescription)
		i = encodeVarintChangefeedEvents(dAtA, i, uint64(len(m.PreviousDescription)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.CommonChangefeedEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintChangefeedEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ChangefeedFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangefeedFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangefeedFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FailureType) > 0 {
		i -= len(m.FailureType)
		copy(dAtA[i:], m.FailureType)
		i = encodeVarintChangefeedEvents(dAtA, i, uint64(len(m.FailureType)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.CommonChangefeedEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintChangefeedEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ChangefeedCanceled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangefeedCanceled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangefeedCanceled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CommonChangefeedEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintChangefeedEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ChangefeedEmittedBytes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangefeedEmittedBytes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangefeedEmittedBytes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EmittedMessages != 0 {
		i = encodeVarintChangefeedEvents(dAtA, i, uint64(m.EmittedMessages))
		i--
		dAtA[i] = 0x30
	}
	if m.Closing {
		i--
		if m.Closing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.LoggingInterval != 0 {
		i = encodeVarintChangefeedEvents(dAtA, i, uint64(m.LoggingInterval))
		i--
		dAtA[i] = 0x20
	}
	if m.EmittedBytes != 0 {
		i = encodeVarintChangefeedEvents(dAtA, i, uint64(m.EmittedBytes))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.CommonChangefeedEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintChangefeedEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintChangefeedEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovChangefeedEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateChangefeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonChangefeedEventDetails.Size()
	n += 1 + l + sovChangefeedEvents(uint64(l))
	if m.Transformation {
		n += 2
	}
	return n
}

func (m *AlterChangefeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonChangefeedEventDetails.Size()
	n += 1 + l + sovChangefeedEvents(uint64(l))
	l = len(m.PreviousDescription)
	if l > 0 {
		n += 1 + l + sovChangefeedEvents(uint64(l))
	}
	return n
}

func (m *ChangefeedFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonChangefeedEventDetails.Size()
	n += 1 + l + sovChangefeedEvents(uint64(l))
	l = len(m.FailureType)
	if l > 0 {
		n += 1 + l + sovChangefeedEvents(uint64(l))
	}
	return n
}

func (m *ChangefeedCanceled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonChangefeedEventDetails.Size()
	n += 1 + l + sovChangefeedEvents(uint64(l))
	return n
}

func (m *ChangefeedEmittedBytes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonChangefeedEventDetails.Size()
	n += 1 + l + sovChangefeedEvents(uint64(l))
	if m.EmittedBytes != 0 {
		n += 1 + sovChangefeedEvents(uint64(m.EmittedBytes))
	}
	if m.LoggingInterval != 0 {
		n += 1 + sovChangefeedEvents(uint64(m.LoggingInterval))
	}
	if m.Closing {
		n += 2
	}
	if m.EmittedMessages != 0 {
		n += 1 + sovChangefeedEvents(uint64(m.EmittedMessages))
	}
	return n
}

func sovChangefeedEvents(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozChangefeedEvents(x uint64) (n int) {
	return sovChangefeedEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateChangefeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangefeedEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChangefeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChangefeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonChangefeedEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeedEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeedEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeedEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonChangefeedEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transformation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeedEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Transformation = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChangefeedEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangefeedEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlterChangefeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangefeedEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlterChangefeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlterChangefeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonChangefeedEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeedEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeedEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeedEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonChangefeedEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeedEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeedEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeedEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangefeedEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangefeedEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangefeedFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangefeedEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangefeedFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangefeedFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonChangefeedEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeedEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeedEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeedEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonChangefeedEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeedEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeedEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeedEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailureType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangefeedEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangefeedEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangefeedCanceled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangefeedEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangefeedCanceled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangefeedCanceled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonChangefeedEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeedEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeedEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeedEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonChangefeedEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangefeedEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangefeedEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangefeedEmittedBytes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangefeedEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangefeedEmittedBytes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangefeedEmittedBytes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonChangefeedEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeedEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeedEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeedEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonChangefeedEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmittedBytes", wireType)
			}
			m.EmittedBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeedEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmittedBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoggingInterval", wireType)
			}
			m.LoggingInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeedEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoggingInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Closing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeedEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Closing = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmittedMessages", wireType)
			}
			m.EmittedMessages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeedEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmittedMessages |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChangefeedEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangefeedEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChangefeedEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChangefeedEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChangefeedEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChangefeedEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChangefeedEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChangefeedEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChangefeedEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChangefeedEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChangefeedEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChangefeedEvents = fmt.Errorf("proto: unexpected end of group")
)

