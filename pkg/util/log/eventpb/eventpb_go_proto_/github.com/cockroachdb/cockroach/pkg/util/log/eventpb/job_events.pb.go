// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/log/eventpb/job_events.proto

package eventpb

import (
	fmt "fmt"
	logpb "github.com/cockroachdb/cockroach/pkg/util/log/logpb"
	github_com_cockroachdb_redact "github.com/cockroachdb/redact"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Import is recorded when an import job is created and successful completion.
// If the job fails, events will be emitted on job creation, failure, and
// successful revert.
type Import struct {
	logpb.CommonEventDetails `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonJobEventDetails    `protobuf:"bytes,2,opt,name=job,proto3,embedded=job" json:""`
}

func (m *Import) Reset()         { *m = Import{} }
func (m *Import) String() string { return proto.CompactTextString(m) }
func (*Import) ProtoMessage()    {}
func (*Import) Descriptor() ([]byte, []int) {
	return fileDescriptor_5417030acfd59c32, []int{0}
}
func (m *Import) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Import) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Import) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Import.Merge(m, src)
}
func (m *Import) XXX_Size() int {
	return m.Size()
}
func (m *Import) XXX_DiscardUnknown() {
	xxx_messageInfo_Import.DiscardUnknown(m)
}

var xxx_messageInfo_Import proto.InternalMessageInfo

// Restore is recorded when a restore job is created and successful completion.
// If the job fails, events will be emitted on job creation, failure, and
// successful revert.
type Restore struct {
	logpb.CommonEventDetails `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonJobEventDetails    `protobuf:"bytes,2,opt,name=job,proto3,embedded=job" json:""`
}

func (m *Restore) Reset()         { *m = Restore{} }
func (m *Restore) String() string { return proto.CompactTextString(m) }
func (*Restore) ProtoMessage()    {}
func (*Restore) Descriptor() ([]byte, []int) {
	return fileDescriptor_5417030acfd59c32, []int{1}
}
func (m *Restore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Restore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Restore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Restore.Merge(m, src)
}
func (m *Restore) XXX_Size() int {
	return m.Size()
}
func (m *Restore) XXX_DiscardUnknown() {
	xxx_messageInfo_Restore.DiscardUnknown(m)
}

var xxx_messageInfo_Restore proto.InternalMessageInfo

// StatusChange is recorded when a job changes statuses.
type StatusChange struct {
	logpb.CommonEventDetails `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	// The ID of the job that is changing statuses.
	JobID int64 `protobuf:"varint,2,opt,name=job_id,json=jobId,proto3" json:",omitempty"`
	// The type of the job that is changing statuses.
	JobType string `protobuf:"bytes,3,opt,name=job_type,json=jobType,proto3" json:",omitempty" redact:"nonsensitive"`
	// A human parsable description of the status change
	Description github_com_cockroachdb_redact.RedactableString `protobuf:"bytes,4,opt,name=description,proto3,customtype=github.com/cockroachdb/redact.RedactableString" json:",omitempty" redact:"mixed"`
	// The status that the job is transitioning out of
	PreviousStatus string `protobuf:"bytes,5,opt,name=previous_status,json=previousStatus,proto3" json:",omitempty" redact:"nonsensitive"`
	// The status that the job has transitioned into
	NewStatus string `protobuf:"bytes,6,opt,name=new_status,json=newStatus,proto3" json:",omitempty" redact:"nonsensitive"`
	// The run number of the job.
	RunNum int32 `protobuf:"varint,7,opt,name=run_num,json=runNum,proto3" json:",includeempty"`
	// An error that may have occurred while the job was running.
	Error string `protobuf:"bytes,8,opt,name=error,proto3" json:",omitempty"`
	// An error that occurred that requires the job to be reverted.
	FinalResumeErr string `protobuf:"bytes,9,opt,name=final_resume_err,json=finalResumeErr,proto3" json:",omitempty"`
}

func (m *StatusChange) Reset()         { *m = StatusChange{} }
func (m *StatusChange) String() string { return proto.CompactTextString(m) }
func (*StatusChange) ProtoMessage()    {}
func (*StatusChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_5417030acfd59c32, []int{2}
}
func (m *StatusChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StatusChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusChange.Merge(m, src)
}
func (m *StatusChange) XXX_Size() int {
	return m.Size()
}
func (m *StatusChange) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusChange.DiscardUnknown(m)
}

var xxx_messageInfo_StatusChange proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Import)(nil), "cockroach.util.log.eventpb.Import")
	proto.RegisterType((*Restore)(nil), "cockroach.util.log.eventpb.Restore")
	proto.RegisterType((*StatusChange)(nil), "cockroach.util.log.eventpb.StatusChange")
}

func init() { proto.RegisterFile("util/log/eventpb/job_events.proto", fileDescriptor_5417030acfd59c32) }

var fileDescriptor_5417030acfd59c32 = []byte{
	// 557 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0xcf, 0x8a, 0xd3, 0x5e,
	0x14, 0xc7, 0x93, 0xdf, 0x4c, 0xd3, 0xe9, 0x9d, 0xf9, 0x55, 0x0d, 0x8a, 0xa1, 0x60, 0x52, 0x8b,
	0x68, 0x91, 0x21, 0x41, 0x45, 0x10, 0x97, 0x99, 0x19, 0xa1, 0x83, 0x88, 0x66, 0x44, 0xc1, 0x4d,
	0xc9, 0x4d, 0xae, 0xe9, 0xed, 0x24, 0xf7, 0x84, 0x9b, 0x9b, 0xce, 0xf4, 0x2d, 0x7c, 0x0d, 0x7d,
	0x92, 0x2e, 0xbb, 0x1c, 0x5c, 0x04, 0x6d, 0x77, 0x5d, 0x89, 0x4f, 0x20, 0xb9, 0xfd, 0xc3, 0x38,
	0x7f, 0x84, 0x01, 0x17, 0xae, 0x72, 0xe0, 0x7c, 0xcf, 0xe7, 0x7c, 0x4f, 0xce, 0xe5, 0xa0, 0xbb,
	0xb9, 0xa0, 0xb1, 0x13, 0x43, 0xe4, 0x90, 0x01, 0x61, 0x22, 0xc5, 0x4e, 0x1f, 0x70, 0x57, 0xc6,
	0x99, 0x9d, 0x72, 0x10, 0xa0, 0x37, 0x02, 0x08, 0x0e, 0x39, 0xf8, 0x41, 0xcf, 0x2e, 0xc5, 0x76,
	0x0c, 0x91, 0xbd, 0x10, 0x37, 0x6e, 0x46, 0x10, 0x81, 0x94, 0x39, 0x65, 0x34, 0xaf, 0x68, 0xdc,
	0x39, 0x07, 0x3d, 0x0d, 0x6c, 0x34, 0x56, 0xe9, 0x18, 0xa2, 0x65, 0x72, 0x9e, 0x6b, 0x7d, 0x56,
	0x91, 0xd6, 0x49, 0x52, 0xe0, 0x42, 0x7f, 0x89, 0xb4, 0x00, 0x92, 0x04, 0x98, 0xa1, 0x36, 0xd5,
	0xf6, 0xe6, 0xe3, 0xfb, 0xf6, 0x05, 0x46, 0x76, 0xa4, 0x62, 0xaf, 0x24, 0xec, 0x12, 0xe1, 0xd3,
	0x38, 0x73, 0xb7, 0x46, 0x85, 0xa5, 0x8c, 0x0b, 0x4b, 0x9d, 0x15, 0x96, 0xe2, 0x2d, 0x18, 0xfa,
	0x1b, 0xb4, 0xd6, 0x07, 0x6c, 0xfc, 0x27, 0x51, 0x8f, 0xec, 0xcb, 0x67, 0x5a, 0x20, 0xf7, 0x01,
	0xff, 0x81, 0x5a, 0xb2, 0x5a, 0x5f, 0x54, 0x54, 0xf5, 0x48, 0x26, 0x80, 0x93, 0x7f, 0xdf, 0xec,
	0x8f, 0x75, 0xb4, 0x75, 0x20, 0x7c, 0x91, 0x67, 0x3b, 0x3d, 0x9f, 0x45, 0x7f, 0xdb, 0xb1, 0x8d,
	0xb4, 0xf2, 0xe1, 0xd0, 0x50, 0x9a, 0x5e, 0x73, 0x6f, 0x4f, 0x0a, 0xab, 0xb2, 0x0f, 0xb8, 0xb3,
	0x3b, 0x2b, 0x2c, 0xb4, 0x0d, 0x09, 0x15, 0x24, 0x49, 0xc5, 0xd0, 0xab, 0xf4, 0x01, 0x77, 0x42,
	0xdd, 0x45, 0x1b, 0xa5, 0x5e, 0x0c, 0x53, 0x62, 0xac, 0x35, 0xd5, 0x76, 0xcd, 0x7d, 0xf0, 0xbb,
	0xf0, 0x67, 0x61, 0xdd, 0xe2, 0x24, 0xf4, 0x03, 0xf1, 0xbc, 0xc5, 0x80, 0x65, 0x84, 0x65, 0x54,
	0xd0, 0x01, 0x69, 0x79, 0xd5, 0x3e, 0xe0, 0xb7, 0xc3, 0x94, 0xe8, 0xc7, 0x68, 0x33, 0x24, 0x59,
	0xc0, 0x69, 0x2a, 0x28, 0x30, 0x63, 0x5d, 0x62, 0xde, 0x95, 0xf6, 0xbe, 0x16, 0x96, 0x1d, 0x51,
	0xd1, 0xcb, 0xb1, 0x1d, 0x40, 0xe2, 0xac, 0x06, 0x0b, 0xb1, 0x33, 0x67, 0xda, 0x9e, 0xfc, 0xf8,
	0x38, 0x26, 0x07, 0x82, 0x53, 0x16, 0x9d, 0x6b, 0x5e, 0x5f, 0x36, 0x4f, 0xe8, 0x31, 0x09, 0x5b,
	0xde, 0xe9, 0x56, 0xfa, 0x6b, 0x74, 0x2d, 0xe5, 0x64, 0x40, 0x21, 0xcf, 0xba, 0x99, 0xfc, 0xa9,
	0x46, 0xe5, 0x6a, 0x43, 0xd4, 0x97, 0xf5, 0xf3, 0x9d, 0xe8, 0x2f, 0x10, 0x62, 0xe4, 0x68, 0x09,
	0xd3, 0xae, 0x06, 0xab, 0x31, 0x72, 0xb4, 0xe0, 0x3c, 0x44, 0x55, 0x9e, 0xb3, 0x2e, 0xcb, 0x13,
	0xa3, 0xda, 0x54, 0xdb, 0x15, 0xf7, 0xc6, 0xac, 0xb0, 0xfe, 0xdf, 0xa6, 0x2c, 0x88, 0xf3, 0x90,
	0xcc, 0x57, 0xa0, 0xf1, 0x9c, 0xbd, 0xca, 0x13, 0xfd, 0x1e, 0xaa, 0x10, 0xce, 0x81, 0x1b, 0x1b,
	0xb2, 0x5d, 0xfd, 0xec, 0xa6, 0x64, 0x52, 0x7f, 0x86, 0xae, 0x7f, 0xa4, 0xcc, 0x8f, 0xbb, 0x9c,
	0x64, 0x79, 0x42, 0xba, 0x84, 0x73, 0xa3, 0x76, 0x61, 0x41, 0x5d, 0xea, 0x3c, 0x29, 0xdb, 0xe3,
	0xdc, 0x7d, 0x3f, 0xfa, 0x6e, 0x2a, 0xa3, 0x89, 0xa9, 0x8e, 0x27, 0xa6, 0x7a, 0x32, 0x31, 0xd5,
	0x6f, 0x13, 0x53, 0xfd, 0x34, 0x35, 0x95, 0xf1, 0xd4, 0x54, 0x4e, 0xa6, 0xa6, 0xf2, 0xe1, 0xe9,
	0x25, 0x4b, 0x5a, 0xc5, 0x4e, 0x7a, 0x18, 0x39, 0x67, 0xaf, 0x09, 0xd6, 0xe4, 0xad, 0x78, 0xf2,
	0x2b, 0x00, 0x00, 0xff, 0xff, 0x92, 0x3f, 0x32, 0xa7, 0xbd, 0x04, 0x00, 0x00,
}

func (m *Import) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Import) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Import) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CommonJobEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintJobEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintJobEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Restore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Restore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Restore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CommonJobEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintJobEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintJobEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StatusChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FinalResumeErr) > 0 {
		i -= len(m.FinalResumeErr)
		copy(dAtA[i:], m.FinalResumeErr)
		i = encodeVarintJobEvents(dAtA, i, uint64(len(m.FinalResumeErr)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintJobEvents(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x42
	}
	if m.RunNum != 0 {
		i = encodeVarintJobEvents(dAtA, i, uint64(m.RunNum))
		i--
		dAtA[i] = 0x38
	}
	if len(m.NewStatus) > 0 {
		i -= len(m.NewStatus)
		copy(dAtA[i:], m.NewStatus)
		i = encodeVarintJobEvents(dAtA, i, uint64(len(m.NewStatus)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PreviousStatus) > 0 {
		i -= len(m.PreviousStatus)
		copy(dAtA[i:], m.PreviousStatus)
		i = encodeVarintJobEvents(dAtA, i, uint64(len(m.PreviousStatus)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintJobEvents(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.JobType) > 0 {
		i -= len(m.JobType)
		copy(dAtA[i:], m.JobType)
		i = encodeVarintJobEvents(dAtA, i, uint64(len(m.JobType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.JobID != 0 {
		i = encodeVarintJobEvents(dAtA, i, uint64(m.JobID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintJobEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintJobEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovJobEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Import) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovJobEvents(uint64(l))
	l = m.CommonJobEventDetails.Size()
	n += 1 + l + sovJobEvents(uint64(l))
	return n
}

func (m *Restore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovJobEvents(uint64(l))
	l = m.CommonJobEventDetails.Size()
	n += 1 + l + sovJobEvents(uint64(l))
	return n
}

func (m *StatusChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovJobEvents(uint64(l))
	if m.JobID != 0 {
		n += 1 + sovJobEvents(uint64(m.JobID))
	}
	l = len(m.JobType)
	if l > 0 {
		n += 1 + l + sovJobEvents(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovJobEvents(uint64(l))
	}
	l = len(m.PreviousStatus)
	if l > 0 {
		n += 1 + l + sovJobEvents(uint64(l))
	}
	l = len(m.NewStatus)
	if l > 0 {
		n += 1 + l + sovJobEvents(uint64(l))
	}
	if m.RunNum != 0 {
		n += 1 + sovJobEvents(uint64(m.RunNum))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovJobEvents(uint64(l))
	}
	l = len(m.FinalResumeErr)
	if l > 0 {
		n += 1 + l + sovJobEvents(uint64(l))
	}
	return n
}

func sovJobEvents(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozJobEvents(x uint64) (n int) {
	return sovJobEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Import) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJobEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Import: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Import: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJobEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJobEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonJobEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJobEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJobEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonJobEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJobEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJobEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Restore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJobEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Restore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Restore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJobEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJobEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonJobEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJobEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJobEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonJobEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJobEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJobEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJobEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJobEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJobEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobID", wireType)
			}
			m.JobID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJobEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJobEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJobEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJobEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = github_com_cockroachdb_redact.RedactableString(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJobEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJobEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJobEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJobEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunNum", wireType)
			}
			m.RunNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJobEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJobEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalResumeErr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJobEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJobEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJobEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalResumeErr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJobEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJobEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJobEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJobEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJobEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJobEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJobEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupJobEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthJobEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthJobEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJobEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupJobEvents = fmt.Errorf("proto: unexpected end of group")
)

