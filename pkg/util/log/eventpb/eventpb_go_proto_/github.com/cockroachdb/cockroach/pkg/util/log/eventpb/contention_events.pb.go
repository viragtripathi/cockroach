// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/log/eventpb/contention_events.proto

package eventpb

import (
	fmt "fmt"
	logpb "github.com/cockroachdb/cockroach/pkg/util/log/logpb"
	github_com_cockroachdb_redact "github.com/cockroachdb/redact"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AggregatedContentionInfo is recorded periodically when contention events
// are resolved.
type AggregatedContentionInfo struct {
	logpb.CommonEventDetails `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	WaitingStmtFingerprintId string                                         `protobuf:"bytes,2,opt,name=waiting_stmt_fingerprint_id,json=waitingStmtFingerprintId,proto3" json:",omitempty" redact:"nonsensitive"`
	WaitingTxnFingerprintId  string                                         `protobuf:"bytes,3,opt,name=waiting_txn_fingerprint_id,json=waitingTxnFingerprintId,proto3" json:",omitempty" redact:"nonsensitive"`
	BlockingTxnFingerprintId string                                         `protobuf:"bytes,4,opt,name=blocking_txn_fingerprint_id,json=blockingTxnFingerprintId,proto3" json:",omitempty" redact:"nonsensitive"`
	ContendedKey             github_com_cockroachdb_redact.RedactableString `protobuf:"bytes,5,opt,name=contended_key,json=contendedKey,proto3,customtype=github.com/cockroachdb/redact.RedactableString" json:",omitempty" redact:"mixed"`
	Duration                 int64                                          `protobuf:"varint,6,opt,name=duration,proto3" json:",omitempty"`
}

func (m *AggregatedContentionInfo) Reset()         { *m = AggregatedContentionInfo{} }
func (m *AggregatedContentionInfo) String() string { return proto.CompactTextString(m) }
func (*AggregatedContentionInfo) ProtoMessage()    {}
func (*AggregatedContentionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d9b0326975a2bb7, []int{0}
}
func (m *AggregatedContentionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregatedContentionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AggregatedContentionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregatedContentionInfo.Merge(m, src)
}
func (m *AggregatedContentionInfo) XXX_Size() int {
	return m.Size()
}
func (m *AggregatedContentionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregatedContentionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AggregatedContentionInfo proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AggregatedContentionInfo)(nil), "cockroach.util.log.eventpb.AggregatedContentionInfo")
}

func init() {
	proto.RegisterFile("util/log/eventpb/contention_events.proto", fileDescriptor_7d9b0326975a2bb7)
}

var fileDescriptor_7d9b0326975a2bb7 = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x31, 0x6f, 0xd3, 0x50,
	0x10, 0x80, 0xfd, 0x68, 0x89, 0xe0, 0x51, 0x3a, 0x58, 0x20, 0x2c, 0x57, 0xb2, 0xa3, 0x0c, 0x10,
	0x21, 0x64, 0x4b, 0x20, 0x16, 0x36, 0x52, 0x40, 0xaa, 0x60, 0x72, 0x11, 0x48, 0x2c, 0x96, 0xed,
	0x77, 0x79, 0x7d, 0x8a, 0xfd, 0xce, 0xb2, 0x2f, 0x25, 0x11, 0x7f, 0x82, 0x7f, 0x45, 0xc6, 0x8c,
	0x15, 0x83, 0x05, 0xc9, 0xd6, 0x91, 0x5f, 0x80, 0x6c, 0x27, 0x46, 0x6d, 0xe9, 0xd0, 0xc9, 0x27,
	0xdf, 0xdd, 0xf7, 0x9d, 0xfd, 0xee, 0xf1, 0xe1, 0x94, 0x54, 0xea, 0xa7, 0x28, 0x7d, 0x38, 0x05,
	0x4d, 0x79, 0xec, 0x27, 0xa8, 0x09, 0x34, 0x29, 0xd4, 0x61, 0xf3, 0xaa, 0xf4, 0xf2, 0x02, 0x09,
	0x4d, 0x3b, 0xc1, 0x64, 0x52, 0x60, 0x94, 0x9c, 0x78, 0x75, 0x8f, 0x97, 0xa2, 0xf4, 0x36, 0x3d,
	0xf6, 0x03, 0x89, 0x12, 0x9b, 0x32, 0xbf, 0x8e, 0xda, 0x0e, 0xdb, 0xee, 0xd8, 0x29, 0xca, 0x3c,
	0x6e, 0x0d, 0x6d, 0x6e, 0xf0, 0x63, 0x97, 0x5b, 0xaf, 0xa5, 0x2c, 0x40, 0x46, 0x04, 0xe2, 0xb0,
	0x73, 0x1e, 0xe9, 0x31, 0x9a, 0x1f, 0x78, 0x2f, 0xc1, 0x2c, 0x43, 0x6d, 0xb1, 0x3e, 0x1b, 0xde,
	0x7b, 0xfe, 0xd8, 0xfb, 0x8f, 0xfb, 0xb0, 0xa9, 0x78, 0x5b, 0x33, 0xdf, 0x00, 0x45, 0x2a, 0x2d,
	0x47, 0x7b, 0x8b, 0xca, 0x35, 0x96, 0x95, 0xcb, 0xce, 0x2b, 0xd7, 0x08, 0x36, 0x0c, 0x73, 0xcc,
	0x0f, 0xbe, 0x46, 0x8a, 0x94, 0x96, 0x61, 0x49, 0x19, 0x85, 0x63, 0xa5, 0x25, 0x14, 0x79, 0xa1,
	0x34, 0x85, 0x4a, 0x58, 0xb7, 0xfa, 0x6c, 0x78, 0x77, 0xf4, 0xe4, 0xbc, 0x72, 0xf9, 0x33, 0xcc,
	0x14, 0x41, 0x96, 0xd3, 0xfc, 0x4f, 0xe5, 0x3e, 0x2c, 0x40, 0x44, 0x09, 0xbd, 0x1a, 0x68, 0xd4,
	0x25, 0xe8, 0x52, 0x91, 0x3a, 0x85, 0x41, 0x60, 0x6d, 0x58, 0xc7, 0x94, 0xd1, 0xbb, 0x7f, 0xa4,
	0x23, 0x61, 0x0a, 0x6e, 0x6f, 0x3d, 0x34, 0xd3, 0x97, 0x35, 0x3b, 0x37, 0xd3, 0x3c, 0xda, 0xa0,
	0x3e, 0xce, 0xf4, 0x45, 0xcb, 0x98, 0x1f, 0xc4, 0x29, 0x26, 0x93, 0x6b, 0x34, 0xbb, 0x37, 0xfc,
	0x9a, 0x2d, 0xeb, 0x8a, 0xe7, 0x1b, 0xbf, 0xdf, 0x6e, 0x82, 0x00, 0x11, 0x4e, 0x60, 0x6e, 0xdd,
	0x6e, 0xc8, 0x9f, 0xea, 0x5f, 0xfc, 0xb3, 0x72, 0x3d, 0xa9, 0xe8, 0x64, 0x1a, 0x7b, 0x09, 0x66,
	0x7e, 0x77, 0x38, 0x22, 0xf6, 0x5b, 0x8d, 0x17, 0x34, 0x8f, 0x28, 0x4e, 0xe1, 0x98, 0x0a, 0xa5,
	0xe5, 0x95, 0x79, 0xf6, 0xb7, 0xf3, 0x64, 0x6a, 0x06, 0x62, 0x10, 0xec, 0x75, 0xb2, 0xf7, 0x30,
	0x37, 0x9f, 0xf2, 0x3b, 0x62, 0x5a, 0x44, 0xf5, 0x42, 0x58, 0xbd, 0x3e, 0x1b, 0xee, 0x8c, 0xf6,
	0x2f, 0x12, 0x82, 0x2e, 0x3f, 0xfa, 0xbc, 0xf8, 0xed, 0x18, 0x8b, 0x95, 0xc3, 0x96, 0x2b, 0x87,
	0x9d, 0xad, 0x1c, 0xf6, 0x6b, 0xe5, 0xb0, 0xef, 0x6b, 0xc7, 0x58, 0xae, 0x1d, 0xe3, 0x6c, 0xed,
	0x18, 0x5f, 0x5e, 0x5e, 0x33, 0x6b, 0x17, 0xfb, 0xf9, 0x44, 0xfa, 0x97, 0x2f, 0x42, 0xdc, 0x6b,
	0x36, 0xf5, 0xc5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x09, 0xb1, 0x98, 0x19, 0x23, 0x03, 0x00,
	0x00,
}

func (m *AggregatedContentionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregatedContentionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregatedContentionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintContentionEvents(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ContendedKey) > 0 {
		i -= len(m.ContendedKey)
		copy(dAtA[i:], m.ContendedKey)
		i = encodeVarintContentionEvents(dAtA, i, uint64(len(m.ContendedKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BlockingTxnFingerprintId) > 0 {
		i -= len(m.BlockingTxnFingerprintId)
		copy(dAtA[i:], m.BlockingTxnFingerprintId)
		i = encodeVarintContentionEvents(dAtA, i, uint64(len(m.BlockingTxnFingerprintId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WaitingTxnFingerprintId) > 0 {
		i -= len(m.WaitingTxnFingerprintId)
		copy(dAtA[i:], m.WaitingTxnFingerprintId)
		i = encodeVarintContentionEvents(dAtA, i, uint64(len(m.WaitingTxnFingerprintId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WaitingStmtFingerprintId) > 0 {
		i -= len(m.WaitingStmtFingerprintId)
		copy(dAtA[i:], m.WaitingStmtFingerprintId)
		i = encodeVarintContentionEvents(dAtA, i, uint64(len(m.WaitingStmtFingerprintId)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintContentionEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintContentionEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovContentionEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AggregatedContentionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovContentionEvents(uint64(l))
	l = len(m.WaitingStmtFingerprintId)
	if l > 0 {
		n += 1 + l + sovContentionEvents(uint64(l))
	}
	l = len(m.WaitingTxnFingerprintId)
	if l > 0 {
		n += 1 + l + sovContentionEvents(uint64(l))
	}
	l = len(m.BlockingTxnFingerprintId)
	if l > 0 {
		n += 1 + l + sovContentionEvents(uint64(l))
	}
	l = len(m.ContendedKey)
	if l > 0 {
		n += 1 + l + sovContentionEvents(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovContentionEvents(uint64(m.Duration))
	}
	return n
}

func sovContentionEvents(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozContentionEvents(x uint64) (n int) {
	return sovContentionEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AggregatedContentionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContentionEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregatedContentionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregatedContentionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContentionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContentionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitingStmtFingerprintId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WaitingStmtFingerprintId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitingTxnFingerprintId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WaitingTxnFingerprintId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockingTxnFingerprintId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockingTxnFingerprintId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContendedKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContendedKey = github_com_cockroachdb_redact.RedactableString(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContentionEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContentionEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContentionEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContentionEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContentionEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContentionEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContentionEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContentionEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContentionEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContentionEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContentionEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContentionEvents = fmt.Errorf("proto: unexpected end of group")
)

