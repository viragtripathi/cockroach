// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/log/eventpb/cluster_events.proto

package eventpb

import (
	fmt "fmt"
	logpb "github.com/cockroachdb/cockroach/pkg/util/log/logpb"
	github_com_cockroachdb_redact "github.com/cockroachdb/redact"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CommonNodeEventDetails contains the fields common to all
// node-level events.
type CommonNodeEventDetails struct {
	// The node ID where the event was originated.
	NodeID int32 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:",omitempty"`
	// The time when this node was last started.
	StartedAt int64 `protobuf:"varint,3,opt,name=started_at,json=startedAt,proto3" json:",omitempty"`
	// The approximate last time the node was up before the last restart.
	LastUp int64 `protobuf:"varint,4,opt,name=last_up,json=lastUp,proto3" json:",omitempty"`
}

func (m *CommonNodeEventDetails) Reset()         { *m = CommonNodeEventDetails{} }
func (m *CommonNodeEventDetails) String() string { return proto.CompactTextString(m) }
func (*CommonNodeEventDetails) ProtoMessage()    {}
func (*CommonNodeEventDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_7419df72f0fda340, []int{0}
}
func (m *CommonNodeEventDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonNodeEventDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CommonNodeEventDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonNodeEventDetails.Merge(m, src)
}
func (m *CommonNodeEventDetails) XXX_Size() int {
	return m.Size()
}
func (m *CommonNodeEventDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonNodeEventDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CommonNodeEventDetails proto.InternalMessageInfo

// NodeJoin is recorded when a node joins the cluster.
type NodeJoin struct {
	logpb.CommonEventDetails `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonNodeEventDetails   `protobuf:"bytes,2,opt,name=node,proto3,embedded=node" json:""`
}

func (m *NodeJoin) Reset()         { *m = NodeJoin{} }
func (m *NodeJoin) String() string { return proto.CompactTextString(m) }
func (*NodeJoin) ProtoMessage()    {}
func (*NodeJoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_7419df72f0fda340, []int{1}
}
func (m *NodeJoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeJoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeJoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeJoin.Merge(m, src)
}
func (m *NodeJoin) XXX_Size() int {
	return m.Size()
}
func (m *NodeJoin) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeJoin.DiscardUnknown(m)
}

var xxx_messageInfo_NodeJoin proto.InternalMessageInfo

// NodeRestart is recorded when an existing node rejoins the cluster
// after being offline.
type NodeRestart struct {
	logpb.CommonEventDetails `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonNodeEventDetails   `protobuf:"bytes,2,opt,name=node,proto3,embedded=node" json:""`
}

func (m *NodeRestart) Reset()         { *m = NodeRestart{} }
func (m *NodeRestart) String() string { return proto.CompactTextString(m) }
func (*NodeRestart) ProtoMessage()    {}
func (*NodeRestart) Descriptor() ([]byte, []int) {
	return fileDescriptor_7419df72f0fda340, []int{2}
}
func (m *NodeRestart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeRestart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeRestart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeRestart.Merge(m, src)
}
func (m *NodeRestart) XXX_Size() int {
	return m.Size()
}
func (m *NodeRestart) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeRestart.DiscardUnknown(m)
}

var xxx_messageInfo_NodeRestart proto.InternalMessageInfo

// NodeShutdownConnectionTimeout is recorded when SQL connections remain open
// during shutdown, after waiting for the server.shutdown.connections.timeout
// to transpire.
type NodeShutdownConnectionTimeout struct {
	logpb.CommonEventDetails `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonNodeEventDetails   `protobuf:"bytes,2,opt,name=node,proto3,embedded=node" json:""`
	// The detailed message, meant to be a human-understandable explanation.
	Detail github_com_cockroachdb_redact.SafeString `protobuf:"bytes,3,opt,name=detail,proto3,customtype=github.com/cockroachdb/redact.SafeString" json:",omitempty" redact:"nonsensitive"`
	// The number of connections still open after waiting for the client to close them.
	ConnectionsRemaining uint32 `protobuf:"varint,4,opt,name=connections_remaining,json=connectionsRemaining,proto3" json:",includeempty"`
	// The amount of time the server waited for the client to close the connections, defined by server.shutdown.connections.timeout.
	TimeoutMillis uint32 `protobuf:"varint,5,opt,name=timeout_millis,json=timeoutMillis,proto3" json:",includeempty"`
}

func (m *NodeShutdownConnectionTimeout) Reset()         { *m = NodeShutdownConnectionTimeout{} }
func (m *NodeShutdownConnectionTimeout) String() string { return proto.CompactTextString(m) }
func (*NodeShutdownConnectionTimeout) ProtoMessage()    {}
func (*NodeShutdownConnectionTimeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_7419df72f0fda340, []int{3}
}
func (m *NodeShutdownConnectionTimeout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeShutdownConnectionTimeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeShutdownConnectionTimeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeShutdownConnectionTimeout.Merge(m, src)
}
func (m *NodeShutdownConnectionTimeout) XXX_Size() int {
	return m.Size()
}
func (m *NodeShutdownConnectionTimeout) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeShutdownConnectionTimeout.DiscardUnknown(m)
}

var xxx_messageInfo_NodeShutdownConnectionTimeout proto.InternalMessageInfo

// NodeShutdownTransactionTimeout is recorded when SQL transactions remain open
// during shutdown, after waiting for the server.shutdown.transactions.timeout
// to transpire.
type NodeShutdownTransactionTimeout struct {
	logpb.CommonEventDetails `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonNodeEventDetails   `protobuf:"bytes,2,opt,name=node,proto3,embedded=node" json:""`
	// The detailed message, meant to be a human-understandable explanation.
	Detail github_com_cockroachdb_redact.SafeString `protobuf:"bytes,3,opt,name=detail,proto3,customtype=github.com/cockroachdb/redact.SafeString" json:",omitempty" redact:"nonsensitive"`
	// The number of connections still running SQL transactions after waiting for the client to end them.
	ConnectionsRemaining uint32 `protobuf:"varint,4,opt,name=connections_remaining,json=connectionsRemaining,proto3" json:",includeempty"`
	// The amount of time the server waited for the client to close the connections, defined by server.shutdown.transactions.timeout.
	TimeoutMillis uint32 `protobuf:"varint,5,opt,name=timeout_millis,json=timeoutMillis,proto3" json:",includeempty"`
}

func (m *NodeShutdownTransactionTimeout) Reset()         { *m = NodeShutdownTransactionTimeout{} }
func (m *NodeShutdownTransactionTimeout) String() string { return proto.CompactTextString(m) }
func (*NodeShutdownTransactionTimeout) ProtoMessage()    {}
func (*NodeShutdownTransactionTimeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_7419df72f0fda340, []int{4}
}
func (m *NodeShutdownTransactionTimeout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeShutdownTransactionTimeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeShutdownTransactionTimeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeShutdownTransactionTimeout.Merge(m, src)
}
func (m *NodeShutdownTransactionTimeout) XXX_Size() int {
	return m.Size()
}
func (m *NodeShutdownTransactionTimeout) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeShutdownTransactionTimeout.DiscardUnknown(m)
}

var xxx_messageInfo_NodeShutdownTransactionTimeout proto.InternalMessageInfo

// CommonNodeDecommissionDetails contains the fields common to all
// node-level decommission/recommission events.
//
// Notes to CockroachDB maintainers: refer to doc.go at the package
// level for more details. Beware that JSON compatibility rules apply
// here, not protobuf.
// *Really look at doc.go before modifying this.*
type CommonNodeDecommissionDetails struct {
	// The node ID where the event was originated.
	RequestingNodeID int32 `protobuf:"varint,1,opt,name=requesting_node_id,json=requestingNodeId,proto3" json:",omitempty"`
	// The node ID affected by the operation.
	TargetNodeID int32 `protobuf:"varint,2,opt,name=target_node_id,json=targetNodeId,proto3" json:",omitempty"`
}

func (m *CommonNodeDecommissionDetails) Reset()         { *m = CommonNodeDecommissionDetails{} }
func (m *CommonNodeDecommissionDetails) String() string { return proto.CompactTextString(m) }
func (*CommonNodeDecommissionDetails) ProtoMessage()    {}
func (*CommonNodeDecommissionDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_7419df72f0fda340, []int{5}
}
func (m *CommonNodeDecommissionDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonNodeDecommissionDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CommonNodeDecommissionDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonNodeDecommissionDetails.Merge(m, src)
}
func (m *CommonNodeDecommissionDetails) XXX_Size() int {
	return m.Size()
}
func (m *CommonNodeDecommissionDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonNodeDecommissionDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CommonNodeDecommissionDetails proto.InternalMessageInfo

// NodeDecommissioning is recorded when a node is marked as
// decommissioning.
type NodeDecommissioning struct {
	logpb.CommonEventDetails      `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonNodeDecommissionDetails `protobuf:"bytes,2,opt,name=node,proto3,embedded=node" json:""`
}

func (m *NodeDecommissioning) Reset()         { *m = NodeDecommissioning{} }
func (m *NodeDecommissioning) String() string { return proto.CompactTextString(m) }
func (*NodeDecommissioning) ProtoMessage()    {}
func (*NodeDecommissioning) Descriptor() ([]byte, []int) {
	return fileDescriptor_7419df72f0fda340, []int{6}
}
func (m *NodeDecommissioning) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeDecommissioning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeDecommissioning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeDecommissioning.Merge(m, src)
}
func (m *NodeDecommissioning) XXX_Size() int {
	return m.Size()
}
func (m *NodeDecommissioning) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeDecommissioning.DiscardUnknown(m)
}

var xxx_messageInfo_NodeDecommissioning proto.InternalMessageInfo

// NodeDecommissioned is recorded when a node is marked as
// decommissioned.
type NodeDecommissioned struct {
	logpb.CommonEventDetails      `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonNodeDecommissionDetails `protobuf:"bytes,2,opt,name=node,proto3,embedded=node" json:""`
}

func (m *NodeDecommissioned) Reset()         { *m = NodeDecommissioned{} }
func (m *NodeDecommissioned) String() string { return proto.CompactTextString(m) }
func (*NodeDecommissioned) ProtoMessage()    {}
func (*NodeDecommissioned) Descriptor() ([]byte, []int) {
	return fileDescriptor_7419df72f0fda340, []int{7}
}
func (m *NodeDecommissioned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeDecommissioned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeDecommissioned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeDecommissioned.Merge(m, src)
}
func (m *NodeDecommissioned) XXX_Size() int {
	return m.Size()
}
func (m *NodeDecommissioned) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeDecommissioned.DiscardUnknown(m)
}

var xxx_messageInfo_NodeDecommissioned proto.InternalMessageInfo

// NodeRecommissioned is recorded when a decommissioning node is
// recommissioned.
type NodeRecommissioned struct {
	logpb.CommonEventDetails      `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonNodeDecommissionDetails `protobuf:"bytes,2,opt,name=node,proto3,embedded=node" json:""`
}

func (m *NodeRecommissioned) Reset()         { *m = NodeRecommissioned{} }
func (m *NodeRecommissioned) String() string { return proto.CompactTextString(m) }
func (*NodeRecommissioned) ProtoMessage()    {}
func (*NodeRecommissioned) Descriptor() ([]byte, []int) {
	return fileDescriptor_7419df72f0fda340, []int{8}
}
func (m *NodeRecommissioned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeRecommissioned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeRecommissioned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeRecommissioned.Merge(m, src)
}
func (m *NodeRecommissioned) XXX_Size() int {
	return m.Size()
}
func (m *NodeRecommissioned) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeRecommissioned.DiscardUnknown(m)
}

var xxx_messageInfo_NodeRecommissioned proto.InternalMessageInfo

// DiskSlownessDetected is recorded when a store observes disk slowness
// events.
type DiskSlownessDetected struct {
	logpb.CommonEventDetails `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	// The node ID where the event was originated.
	NodeID  int32 `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:",omitempty"`
	StoreID int32 `protobuf:"varint,3,opt,name=store_id,json=storeId,proto3" json:",omitempty"`
}

func (m *DiskSlownessDetected) Reset()         { *m = DiskSlownessDetected{} }
func (m *DiskSlownessDetected) String() string { return proto.CompactTextString(m) }
func (*DiskSlownessDetected) ProtoMessage()    {}
func (*DiskSlownessDetected) Descriptor() ([]byte, []int) {
	return fileDescriptor_7419df72f0fda340, []int{9}
}
func (m *DiskSlownessDetected) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiskSlownessDetected) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DiskSlownessDetected) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiskSlownessDetected.Merge(m, src)
}
func (m *DiskSlownessDetected) XXX_Size() int {
	return m.Size()
}
func (m *DiskSlownessDetected) XXX_DiscardUnknown() {
	xxx_messageInfo_DiskSlownessDetected.DiscardUnknown(m)
}

var xxx_messageInfo_DiskSlownessDetected proto.InternalMessageInfo

// DiskSlownessCleared is recorded when disk slowness in a store has cleared.
type DiskSlownessCleared struct {
	logpb.CommonEventDetails `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	// The node ID where the event was originated.
	NodeID  int32 `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:",omitempty"`
	StoreID int32 `protobuf:"varint,3,opt,name=store_id,json=storeId,proto3" json:",omitempty"`
}

func (m *DiskSlownessCleared) Reset()         { *m = DiskSlownessCleared{} }
func (m *DiskSlownessCleared) String() string { return proto.CompactTextString(m) }
func (*DiskSlownessCleared) ProtoMessage()    {}
func (*DiskSlownessCleared) Descriptor() ([]byte, []int) {
	return fileDescriptor_7419df72f0fda340, []int{10}
}
func (m *DiskSlownessCleared) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiskSlownessCleared) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DiskSlownessCleared) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiskSlownessCleared.Merge(m, src)
}
func (m *DiskSlownessCleared) XXX_Size() int {
	return m.Size()
}
func (m *DiskSlownessCleared) XXX_DiscardUnknown() {
	xxx_messageInfo_DiskSlownessCleared.DiscardUnknown(m)
}

var xxx_messageInfo_DiskSlownessCleared proto.InternalMessageInfo

// LowDiskSpace is emitted when a store is reaching capacity, as we reach
// certain thresholds. It is emitted periodically while we are in a low disk
// state.
type LowDiskSpace struct {
	logpb.CommonEventDetails `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	// The node ID where the event was originated.
	NodeID  int32 `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:",omitempty"`
	StoreID int32 `protobuf:"varint,3,opt,name=store_id,json=storeId,proto3" json:",omitempty"`
	// The free space percent threshold that we went under.
	PercentThreshold int32  `protobuf:"varint,4,opt,name=percent_threshold,json=percentThreshold,proto3" json:",omitempty"`
	AvailableBytes   uint64 `protobuf:"varint,5,opt,name=available_bytes,json=availableBytes,proto3" json:",omitempty"`
	TotalBytes       uint64 `protobuf:"varint,6,opt,name=total_bytes,json=totalBytes,proto3" json:",omitempty"`
}

func (m *LowDiskSpace) Reset()         { *m = LowDiskSpace{} }
func (m *LowDiskSpace) String() string { return proto.CompactTextString(m) }
func (*LowDiskSpace) ProtoMessage()    {}
func (*LowDiskSpace) Descriptor() ([]byte, []int) {
	return fileDescriptor_7419df72f0fda340, []int{11}
}
func (m *LowDiskSpace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LowDiskSpace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LowDiskSpace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LowDiskSpace.Merge(m, src)
}
func (m *LowDiskSpace) XXX_Size() int {
	return m.Size()
}
func (m *LowDiskSpace) XXX_DiscardUnknown() {
	xxx_messageInfo_LowDiskSpace.DiscardUnknown(m)
}

var xxx_messageInfo_LowDiskSpace proto.InternalMessageInfo

// CertsReload is recorded when the TLS certificates are
// reloaded/rotated from disk.
type CertsReload struct {
	logpb.CommonEventDetails `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	// Whether the operation completed without errors.
	Success bool `protobuf:"varint,2,opt,name=success,proto3" json:",omitempty"`
	// If an error was encountered, the text of the error.
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:",omitempty"`
}

func (m *CertsReload) Reset()         { *m = CertsReload{} }
func (m *CertsReload) String() string { return proto.CompactTextString(m) }
func (*CertsReload) ProtoMessage()    {}
func (*CertsReload) Descriptor() ([]byte, []int) {
	return fileDescriptor_7419df72f0fda340, []int{12}
}
func (m *CertsReload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertsReload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CertsReload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertsReload.Merge(m, src)
}
func (m *CertsReload) XXX_Size() int {
	return m.Size()
}
func (m *CertsReload) XXX_DiscardUnknown() {
	xxx_messageInfo_CertsReload.DiscardUnknown(m)
}

var xxx_messageInfo_CertsReload proto.InternalMessageInfo

// CommonSharedServiceEventDetails contains the fields common to all
// tenant shared server events.
//
// Notes to CockroachDB maintainers: refer to doc.go at the package
// level for more details. Beware that JSON compatibility rules apply
// here, not protobuf.
// *Really look at doc.go before modifying this.*
type CommonSharedServiceEventDetails struct {
	// The node ID where the event was originated.
	NodeID int32 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:",omitempty"`
	// The ID of the tenant owning the service.
	TenantID uint64 `protobuf:"varint,2,opt,name=tenant_id,json=tenantId,proto3" json:",omitempty"`
	// The ID of the server instance.
	InstanceID int32 `protobuf:"varint,3,opt,name=instance_id,json=instanceId,proto3" json:",omitempty"`
	// The name of the tenant at the time the event was emitted.
	TenantName string `protobuf:"bytes,4,opt,name=tenant_name,json=tenantName,proto3" json:",omitempty"`
}

func (m *CommonSharedServiceEventDetails) Reset()         { *m = CommonSharedServiceEventDetails{} }
func (m *CommonSharedServiceEventDetails) String() string { return proto.CompactTextString(m) }
func (*CommonSharedServiceEventDetails) ProtoMessage()    {}
func (*CommonSharedServiceEventDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_7419df72f0fda340, []int{13}
}
func (m *CommonSharedServiceEventDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonSharedServiceEventDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CommonSharedServiceEventDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonSharedServiceEventDetails.Merge(m, src)
}
func (m *CommonSharedServiceEventDetails) XXX_Size() int {
	return m.Size()
}
func (m *CommonSharedServiceEventDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonSharedServiceEventDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CommonSharedServiceEventDetails proto.InternalMessageInfo

// TenantSharedServiceStart is recorded when a tenant server
// is started inside the same process as the KV layer.
type TenantSharedServiceStart struct {
	logpb.CommonEventDetails        `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonSharedServiceEventDetails `protobuf:"bytes,2,opt,name=shared,proto3,embedded=shared" json:""`
	// Whether the startup was successful.
	OK bool `protobuf:"varint,3,opt,name=ok,proto3" json:",omitempty"`
	// If the startup failed, the text of the error.
	ErrorText github_com_cockroachdb_redact.RedactableString `protobuf:"bytes,4,opt,name=error_text,json=errorText,proto3,customtype=github.com/cockroachdb/redact.RedactableString" json:",omitempty" redact:"mixed"`
}

func (m *TenantSharedServiceStart) Reset()         { *m = TenantSharedServiceStart{} }
func (m *TenantSharedServiceStart) String() string { return proto.CompactTextString(m) }
func (*TenantSharedServiceStart) ProtoMessage()    {}
func (*TenantSharedServiceStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_7419df72f0fda340, []int{14}
}
func (m *TenantSharedServiceStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TenantSharedServiceStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TenantSharedServiceStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TenantSharedServiceStart.Merge(m, src)
}
func (m *TenantSharedServiceStart) XXX_Size() int {
	return m.Size()
}
func (m *TenantSharedServiceStart) XXX_DiscardUnknown() {
	xxx_messageInfo_TenantSharedServiceStart.DiscardUnknown(m)
}

var xxx_messageInfo_TenantSharedServiceStart proto.InternalMessageInfo

// TenantSharedServiceStop is recorded when a tenant server
// is shut down inside the same process as the KV layer.
type TenantSharedServiceStop struct {
	logpb.CommonEventDetails        `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonSharedServiceEventDetails `protobuf:"bytes,2,opt,name=shared,proto3,embedded=shared" json:""`
}

func (m *TenantSharedServiceStop) Reset()         { *m = TenantSharedServiceStop{} }
func (m *TenantSharedServiceStop) String() string { return proto.CompactTextString(m) }
func (*TenantSharedServiceStop) ProtoMessage()    {}
func (*TenantSharedServiceStop) Descriptor() ([]byte, []int) {
	return fileDescriptor_7419df72f0fda340, []int{15}
}
func (m *TenantSharedServiceStop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TenantSharedServiceStop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TenantSharedServiceStop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TenantSharedServiceStop.Merge(m, src)
}
func (m *TenantSharedServiceStop) XXX_Size() int {
	return m.Size()
}
func (m *TenantSharedServiceStop) XXX_DiscardUnknown() {
	xxx_messageInfo_TenantSharedServiceStop.DiscardUnknown(m)
}

var xxx_messageInfo_TenantSharedServiceStop proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CommonNodeEventDetails)(nil), "cockroach.util.log.eventpb.CommonNodeEventDetails")
	proto.RegisterType((*NodeJoin)(nil), "cockroach.util.log.eventpb.NodeJoin")
	proto.RegisterType((*NodeRestart)(nil), "cockroach.util.log.eventpb.NodeRestart")
	proto.RegisterType((*NodeShutdownConnectionTimeout)(nil), "cockroach.util.log.eventpb.NodeShutdownConnectionTimeout")
	proto.RegisterType((*NodeShutdownTransactionTimeout)(nil), "cockroach.util.log.eventpb.NodeShutdownTransactionTimeout")
	proto.RegisterType((*CommonNodeDecommissionDetails)(nil), "cockroach.util.log.eventpb.CommonNodeDecommissionDetails")
	proto.RegisterType((*NodeDecommissioning)(nil), "cockroach.util.log.eventpb.NodeDecommissioning")
	proto.RegisterType((*NodeDecommissioned)(nil), "cockroach.util.log.eventpb.NodeDecommissioned")
	proto.RegisterType((*NodeRecommissioned)(nil), "cockroach.util.log.eventpb.NodeRecommissioned")
	proto.RegisterType((*DiskSlownessDetected)(nil), "cockroach.util.log.eventpb.DiskSlownessDetected")
	proto.RegisterType((*DiskSlownessCleared)(nil), "cockroach.util.log.eventpb.DiskSlownessCleared")
	proto.RegisterType((*LowDiskSpace)(nil), "cockroach.util.log.eventpb.LowDiskSpace")
	proto.RegisterType((*CertsReload)(nil), "cockroach.util.log.eventpb.CertsReload")
	proto.RegisterType((*CommonSharedServiceEventDetails)(nil), "cockroach.util.log.eventpb.CommonSharedServiceEventDetails")
	proto.RegisterType((*TenantSharedServiceStart)(nil), "cockroach.util.log.eventpb.TenantSharedServiceStart")
	proto.RegisterType((*TenantSharedServiceStop)(nil), "cockroach.util.log.eventpb.TenantSharedServiceStop")
}

func init() {
	proto.RegisterFile("util/log/eventpb/cluster_events.proto", fileDescriptor_7419df72f0fda340)
}

var fileDescriptor_7419df72f0fda340 = []byte{
	// 1044 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0x3a, 0x89, 0xe3, 0xbc, 0x7c, 0x90, 0x6e, 0x53, 0x30, 0x11, 0xf5, 0x56, 0x2b, 0x3e,
	0x72, 0x28, 0xb6, 0x68, 0x41, 0x05, 0x2a, 0x0e, 0x38, 0x06, 0xc9, 0xd0, 0x16, 0x64, 0x1b, 0x2a,
	0xc1, 0xc1, 0x1a, 0xef, 0x3e, 0xd6, 0xa3, 0xec, 0xce, 0x98, 0x99, 0xd9, 0x24, 0xfd, 0x2f, 0xf8,
	0x1f, 0xb8, 0x23, 0x71, 0x01, 0x89, 0x0b, 0x1c, 0x23, 0x04, 0x52, 0x8e, 0x15, 0x87, 0x15, 0x6c,
	0x2e, 0x28, 0xe2, 0xc4, 0x1d, 0x09, 0xed, 0xec, 0xda, 0x75, 0xec, 0x0d, 0x54, 0x22, 0x1c, 0x2c,
	0xf5, 0x94, 0xcd, 0xbc, 0xdf, 0xfb, 0xfa, 0xcd, 0xcf, 0xcf, 0x6f, 0x0d, 0x2f, 0x84, 0x8a, 0xfa,
	0x75, 0x9f, 0x7b, 0x75, 0xdc, 0x47, 0xa6, 0x86, 0xfd, 0xba, 0xe3, 0x87, 0x52, 0xa1, 0xe8, 0xe9,
	0xff, 0x65, 0x6d, 0x28, 0xb8, 0xe2, 0xe6, 0xb6, 0xc3, 0x9d, 0x3d, 0xc1, 0x89, 0x33, 0xa8, 0x25,
	0x0e, 0x35, 0x9f, 0x7b, 0xb5, 0xcc, 0x61, 0x7b, 0xcb, 0xe3, 0x1e, 0xd7, 0xb0, 0x7a, 0xf2, 0x94,
	0x7a, 0x6c, 0x6f, 0x8f, 0x03, 0xfb, 0xdc, 0x1b, 0xf6, 0xd3, 0xf0, 0xa9, 0xcd, 0xfe, 0xd2, 0x80,
	0xa7, 0x77, 0x79, 0x10, 0x70, 0x76, 0x8f, 0xbb, 0xf8, 0x4e, 0x62, 0x69, 0xa2, 0x22, 0xd4, 0x97,
	0xe6, 0x2b, 0xb0, 0xcc, 0xb8, 0x8b, 0x3d, 0xea, 0x56, 0x8c, 0x6b, 0xc6, 0xce, 0x52, 0xa3, 0x12,
	0x47, 0x56, 0x29, 0x81, 0xb5, 0x9a, 0xa7, 0x91, 0x05, 0xd7, 0x79, 0x40, 0x15, 0x06, 0x43, 0xf5,
	0xa0, 0x5d, 0x4a, 0x80, 0x2d, 0xd7, 0x7c, 0x19, 0x40, 0x2a, 0x22, 0x14, 0xba, 0x3d, 0xa2, 0x2a,
	0x0b, 0xd7, 0x8c, 0x9d, 0x85, 0xc6, 0xc6, 0x14, 0x76, 0x25, 0x43, 0xbc, 0xad, 0xcc, 0x97, 0x60,
	0xd9, 0x27, 0x52, 0xf5, 0xc2, 0x61, 0x65, 0x31, 0x17, 0x5b, 0x4a, 0xcc, 0x1f, 0x0d, 0xed, 0xaf,
	0x0c, 0x28, 0x27, 0x89, 0xdf, 0xe3, 0x94, 0x99, 0x77, 0xa0, 0xe4, 0xe8, 0x8a, 0x75, 0x59, 0xab,
	0x37, 0x5e, 0xac, 0xe5, 0x30, 0x92, 0xf6, 0x34, 0xd9, 0x4f, 0x63, 0xed, 0x28, 0xb2, 0x0a, 0xc7,
	0x91, 0x65, 0x9c, 0x46, 0x56, 0xa1, 0x9d, 0xc5, 0x30, 0xbb, 0xb0, 0x98, 0x14, 0x5f, 0x29, 0xea,
	0x58, 0x37, 0x6a, 0xe7, 0xb3, 0x5b, 0xcb, 0xe7, 0x69, 0x2a, 0xae, 0x8e, 0x66, 0x7f, 0x6d, 0xc0,
	0x6a, 0x02, 0x6c, 0xa3, 0xee, 0x76, 0x2e, 0x6a, 0xfe, 0x66, 0x01, 0xae, 0x26, 0xc0, 0xce, 0x20,
	0x54, 0x2e, 0x3f, 0x60, 0xbb, 0x9c, 0x31, 0x74, 0x14, 0xe5, 0xac, 0x4b, 0x03, 0xe4, 0xe1, 0x5c,
	0x74, 0x61, 0x72, 0x28, 0xb9, 0xda, 0xac, 0xe5, 0xb7, 0xd2, 0xb8, 0x9f, 0x60, 0x7e, 0x89, 0xac,
	0x1d, 0x8f, 0xaa, 0x41, 0xd8, 0xaf, 0x39, 0x3c, 0xa8, 0x8f, 0x33, 0xb9, 0xfd, 0xba, 0x40, 0x97,
	0x38, 0xaa, 0xd6, 0x21, 0x9f, 0x61, 0x47, 0x09, 0xca, 0xbc, 0xb3, 0x12, 0xfc, 0x33, 0xb2, 0xae,
	0xa4, 0x90, 0x37, 0x6d, 0xc6, 0x99, 0x44, 0x26, 0xa9, 0xa2, 0xfb, 0x68, 0xb7, 0xb3, 0x34, 0xe6,
	0xbb, 0x70, 0xc5, 0x19, 0x33, 0x25, 0x7b, 0x02, 0x03, 0x42, 0x19, 0x65, 0x9e, 0x96, 0xf4, 0x7a,
	0xe3, 0xd2, 0x69, 0x64, 0xad, 0x5f, 0xa7, 0xcc, 0xf1, 0x43, 0x17, 0x53, 0x55, 0x6f, 0x4d, 0xe0,
	0xdb, 0x23, 0xb8, 0xf9, 0x3a, 0x6c, 0xa8, 0x94, 0xe7, 0x5e, 0x40, 0x7d, 0x9f, 0xca, 0xca, 0xd2,
	0x79, 0x01, 0xd6, 0x33, 0xe0, 0x5d, 0x8d, 0xb3, 0xbf, 0x5d, 0x80, 0xea, 0xe4, 0xc5, 0x75, 0x05,
	0x61, 0x92, 0x3c, 0xb9, 0xb9, 0x39, 0xb8, 0x39, 0x03, 0xae, 0x3e, 0x62, 0xa8, 0x89, 0x09, 0xbf,
	0x54, 0x4a, 0xca, 0xd9, 0x68, 0x08, 0x7f, 0x08, 0xa6, 0xc0, 0xcf, 0x43, 0x94, 0x8a, 0x32, 0xaf,
	0x77, 0x76, 0x1e, 0xdb, 0x71, 0x64, 0x6d, 0xb6, 0xc7, 0xd6, 0xdc, 0xc9, 0xbc, 0x29, 0xce, 0xda,
	0x5d, 0xb3, 0x09, 0x1b, 0x8a, 0x08, 0x0f, 0xd5, 0x38, 0x5a, 0x51, 0x47, 0xab, 0xc6, 0x91, 0xb5,
	0xd6, 0xd5, 0x96, 0xdc, 0x48, 0x6b, 0xea, 0x91, 0xcd, 0xb5, 0x7f, 0x30, 0xe0, 0xf2, 0x74, 0xcd,
	0x09, 0x17, 0x17, 0x2b, 0xb4, 0x4f, 0xcf, 0x08, 0xed, 0x8d, 0xc7, 0x13, 0x5a, 0x0e, 0x8d, 0xb9,
	0xf3, 0xee, 0x7b, 0x03, 0xcc, 0x69, 0x3c, 0xba, 0xf3, 0xd8, 0x41, 0x7b, 0x6e, 0x3b, 0xf8, 0xd9,
	0x80, 0xad, 0x26, 0x95, 0x7b, 0x1d, 0x9f, 0x1f, 0x30, 0x94, 0xb2, 0x89, 0x0a, 0x1d, 0x75, 0xe1,
	0x3d, 0x4c, 0xac, 0x32, 0xc5, 0xc7, 0x5c, 0x65, 0x5e, 0x85, 0xb2, 0x54, 0x5c, 0x68, 0x9f, 0x05,
	0xed, 0xf3, 0x6c, 0x1c, 0x59, 0xcb, 0x9d, 0xe4, 0x6c, 0xc6, 0x69, 0x59, 0x43, 0x5b, 0xae, 0xfd,
	0x93, 0x01, 0x97, 0x27, 0xfb, 0xd9, 0xf5, 0x91, 0x88, 0xf9, 0x6d, 0xe7, 0x8f, 0x22, 0xac, 0xdd,
	0xe1, 0x07, 0xba, 0xa3, 0x21, 0x71, 0x70, 0x4e, 0xfb, 0x30, 0x6f, 0xc3, 0xa5, 0x21, 0x0a, 0x07,
	0x99, 0xea, 0xa9, 0x81, 0x40, 0x39, 0xe0, 0xbe, 0xab, 0xa7, 0xfc, 0xd2, 0xcc, 0xca, 0xb9, 0x99,
	0x01, 0xbb, 0x23, 0x9c, 0x79, 0x0b, 0x9e, 0x22, 0xfb, 0x84, 0xfa, 0xa4, 0xef, 0x63, 0xaf, 0xff,
	0x40, 0x61, 0x3a, 0xdf, 0x17, 0x67, 0x5c, 0x37, 0xc6, 0xb0, 0x46, 0x82, 0x32, 0xeb, 0xb0, 0xaa,
	0xb8, 0x22, 0x7e, 0xe6, 0x54, 0xca, 0x75, 0x02, 0x0d, 0xd1, 0x0e, 0xf6, 0x77, 0x06, 0xac, 0xee,
	0xa2, 0x50, 0xb2, 0x8d, 0x3e, 0x27, 0x17, 0xad, 0x9a, 0x1d, 0x58, 0x96, 0xa1, 0xe3, 0xa0, 0x94,
	0x9a, 0xed, 0xf2, 0x4c, 0x29, 0x23, 0xb3, 0x79, 0x13, 0xd6, 0x51, 0x08, 0x2e, 0x7a, 0x01, 0x4a,
	0x49, 0x3c, 0xcc, 0xbe, 0x90, 0xa7, 0xf1, 0x6b, 0x1a, 0x74, 0x37, 0xc5, 0xd8, 0x7f, 0x19, 0x60,
	0xa5, 0xb5, 0x74, 0x06, 0x89, 0xe6, 0x3b, 0x28, 0xf6, 0xa9, 0xf3, 0x9f, 0x5f, 0x29, 0x6e, 0xc1,
	0x8a, 0x42, 0x46, 0x98, 0x1a, 0xa9, 0x64, 0xb1, 0xb1, 0x1d, 0x47, 0x56, 0xb9, 0xab, 0x0f, 0x67,
	0xdc, 0xca, 0x29, 0xb8, 0xe5, 0x9a, 0x6f, 0xc1, 0x2a, 0x65, 0x52, 0x11, 0xe6, 0x4c, 0x88, 0xe5,
	0xb9, 0x38, 0xb2, 0xa0, 0x95, 0x1d, 0xcf, 0x38, 0xc3, 0xc8, 0xa1, 0xe5, 0xea, 0xcb, 0x4b, 0xf3,
	0x32, 0x12, 0xa0, 0x16, 0xcb, 0x4a, 0xce, 0xe5, 0x69, 0xc8, 0x3d, 0x12, 0xa0, 0xfd, 0x7b, 0x11,
	0x2a, 0x69, 0x51, 0x67, 0xfa, 0xef, 0xfc, 0x0f, 0xfb, 0x3f, 0x81, 0x92, 0xd4, 0x39, 0xb2, 0xa1,
	0x7c, 0xfb, 0xdf, 0x87, 0xf2, 0xb9, 0x77, 0x32, 0x9d, 0x22, 0x0d, 0x6c, 0x3e, 0x0f, 0x45, 0xbe,
	0xa7, 0x49, 0x2b, 0x37, 0xb6, 0xe2, 0xc8, 0x2a, 0x7e, 0xf0, 0xfe, 0x54, 0xef, 0x45, 0xbe, 0x67,
	0x86, 0x00, 0xa9, 0x50, 0x14, 0x1e, 0xaa, 0x8c, 0xa3, 0x8f, 0xb3, 0xb5, 0xad, 0xf6, 0xcf, 0x6b,
	0x5b, 0x5b, 0xff, 0x49, 0x3e, 0x2c, 0xe7, 0x2c, 0x6f, 0x1b, 0xa3, 0xe5, 0x2d, 0xa0, 0x87, 0xe8,
	0xda, 0xed, 0x15, 0x9d, 0xa9, 0x8b, 0x87, 0xca, 0xfe, 0xd1, 0x80, 0x67, 0x72, 0xa9, 0xe6, 0xc3,
	0xb9, 0x63, 0xba, 0x71, 0xff, 0xe8, 0xb7, 0x6a, 0xe1, 0x28, 0xae, 0x1a, 0xc7, 0x71, 0xd5, 0x78,
	0x18, 0x57, 0x8d, 0x5f, 0xe3, 0xaa, 0xf1, 0xc5, 0x49, 0xb5, 0x70, 0x7c, 0x52, 0x2d, 0x3c, 0x3c,
	0xa9, 0x16, 0x3e, 0x79, 0xed, 0x1c, 0x26, 0xc7, 0xcf, 0xf5, 0xe1, 0x9e, 0x57, 0x9f, 0xfe, 0xf5,
	0xa0, 0x5f, 0xd2, 0x6f, 0xf8, 0x37, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x3e, 0xee, 0x2f,
	0x58, 0x10, 0x00, 0x00,
}

func (m *CommonNodeEventDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonNodeEventDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonNodeEventDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastUp != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.LastUp))
		i--
		dAtA[i] = 0x20
	}
	if m.StartedAt != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.StartedAt))
		i--
		dAtA[i] = 0x18
	}
	if m.NodeID != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeJoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeJoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeJoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CommonNodeEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeRestart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeRestart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeRestart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CommonNodeEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeShutdownConnectionTimeout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeShutdownConnectionTimeout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeShutdownConnectionTimeout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutMillis != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.TimeoutMillis))
		i--
		dAtA[i] = 0x28
	}
	if m.ConnectionsRemaining != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.ConnectionsRemaining))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Detail) > 0 {
		i -= len(m.Detail)
		copy(dAtA[i:], m.Detail)
		i = encodeVarintClusterEvents(dAtA, i, uint64(len(m.Detail)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.CommonNodeEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeShutdownTransactionTimeout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeShutdownTransactionTimeout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeShutdownTransactionTimeout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutMillis != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.TimeoutMillis))
		i--
		dAtA[i] = 0x28
	}
	if m.ConnectionsRemaining != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.ConnectionsRemaining))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Detail) > 0 {
		i -= len(m.Detail)
		copy(dAtA[i:], m.Detail)
		i = encodeVarintClusterEvents(dAtA, i, uint64(len(m.Detail)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.CommonNodeEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CommonNodeDecommissionDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonNodeDecommissionDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonNodeDecommissionDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetNodeID != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.TargetNodeID))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestingNodeID != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.RequestingNodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeDecommissioning) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeDecommissioning) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeDecommissioning) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CommonNodeDecommissionDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeDecommissioned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeDecommissioned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeDecommissioned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CommonNodeDecommissionDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeRecommissioned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeRecommissioned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeRecommissioned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CommonNodeDecommissionDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DiskSlownessDetected) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiskSlownessDetected) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiskSlownessDetected) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StoreID != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.StoreID))
		i--
		dAtA[i] = 0x18
	}
	if m.NodeID != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DiskSlownessCleared) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiskSlownessCleared) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiskSlownessCleared) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StoreID != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.StoreID))
		i--
		dAtA[i] = 0x18
	}
	if m.NodeID != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LowDiskSpace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LowDiskSpace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LowDiskSpace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalBytes != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.TotalBytes))
		i--
		dAtA[i] = 0x30
	}
	if m.AvailableBytes != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.AvailableBytes))
		i--
		dAtA[i] = 0x28
	}
	if m.PercentThreshold != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.PercentThreshold))
		i--
		dAtA[i] = 0x20
	}
	if m.StoreID != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.StoreID))
		i--
		dAtA[i] = 0x18
	}
	if m.NodeID != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CertsReload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertsReload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertsReload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintClusterEvents(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CommonSharedServiceEventDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonSharedServiceEventDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSharedServiceEventDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TenantName) > 0 {
		i -= len(m.TenantName)
		copy(dAtA[i:], m.TenantName)
		i = encodeVarintClusterEvents(dAtA, i, uint64(len(m.TenantName)))
		i--
		dAtA[i] = 0x22
	}
	if m.InstanceID != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.InstanceID))
		i--
		dAtA[i] = 0x18
	}
	if m.TenantID != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.TenantID))
		i--
		dAtA[i] = 0x10
	}
	if m.NodeID != 0 {
		i = encodeVarintClusterEvents(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TenantSharedServiceStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantSharedServiceStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TenantSharedServiceStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorText) > 0 {
		i -= len(m.ErrorText)
		copy(dAtA[i:], m.ErrorText)
		i = encodeVarintClusterEvents(dAtA, i, uint64(len(m.ErrorText)))
		i--
		dAtA[i] = 0x22
	}
	if m.OK {
		i--
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.CommonSharedServiceEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TenantSharedServiceStop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantSharedServiceStop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TenantSharedServiceStop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CommonSharedServiceEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClusterEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintClusterEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovClusterEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommonNodeEventDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovClusterEvents(uint64(m.NodeID))
	}
	if m.StartedAt != 0 {
		n += 1 + sovClusterEvents(uint64(m.StartedAt))
	}
	if m.LastUp != 0 {
		n += 1 + sovClusterEvents(uint64(m.LastUp))
	}
	return n
}

func (m *NodeJoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	l = m.CommonNodeEventDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	return n
}

func (m *NodeRestart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	l = m.CommonNodeEventDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	return n
}

func (m *NodeShutdownConnectionTimeout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	l = m.CommonNodeEventDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovClusterEvents(uint64(l))
	}
	if m.ConnectionsRemaining != 0 {
		n += 1 + sovClusterEvents(uint64(m.ConnectionsRemaining))
	}
	if m.TimeoutMillis != 0 {
		n += 1 + sovClusterEvents(uint64(m.TimeoutMillis))
	}
	return n
}

func (m *NodeShutdownTransactionTimeout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	l = m.CommonNodeEventDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovClusterEvents(uint64(l))
	}
	if m.ConnectionsRemaining != 0 {
		n += 1 + sovClusterEvents(uint64(m.ConnectionsRemaining))
	}
	if m.TimeoutMillis != 0 {
		n += 1 + sovClusterEvents(uint64(m.TimeoutMillis))
	}
	return n
}

func (m *CommonNodeDecommissionDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestingNodeID != 0 {
		n += 1 + sovClusterEvents(uint64(m.RequestingNodeID))
	}
	if m.TargetNodeID != 0 {
		n += 1 + sovClusterEvents(uint64(m.TargetNodeID))
	}
	return n
}

func (m *NodeDecommissioning) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	l = m.CommonNodeDecommissionDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	return n
}

func (m *NodeDecommissioned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	l = m.CommonNodeDecommissionDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	return n
}

func (m *NodeRecommissioned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	l = m.CommonNodeDecommissionDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	return n
}

func (m *DiskSlownessDetected) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	if m.NodeID != 0 {
		n += 1 + sovClusterEvents(uint64(m.NodeID))
	}
	if m.StoreID != 0 {
		n += 1 + sovClusterEvents(uint64(m.StoreID))
	}
	return n
}

func (m *DiskSlownessCleared) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	if m.NodeID != 0 {
		n += 1 + sovClusterEvents(uint64(m.NodeID))
	}
	if m.StoreID != 0 {
		n += 1 + sovClusterEvents(uint64(m.StoreID))
	}
	return n
}

func (m *LowDiskSpace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	if m.NodeID != 0 {
		n += 1 + sovClusterEvents(uint64(m.NodeID))
	}
	if m.StoreID != 0 {
		n += 1 + sovClusterEvents(uint64(m.StoreID))
	}
	if m.PercentThreshold != 0 {
		n += 1 + sovClusterEvents(uint64(m.PercentThreshold))
	}
	if m.AvailableBytes != 0 {
		n += 1 + sovClusterEvents(uint64(m.AvailableBytes))
	}
	if m.TotalBytes != 0 {
		n += 1 + sovClusterEvents(uint64(m.TotalBytes))
	}
	return n
}

func (m *CertsReload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	if m.Success {
		n += 2
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovClusterEvents(uint64(l))
	}
	return n
}

func (m *CommonSharedServiceEventDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovClusterEvents(uint64(m.NodeID))
	}
	if m.TenantID != 0 {
		n += 1 + sovClusterEvents(uint64(m.TenantID))
	}
	if m.InstanceID != 0 {
		n += 1 + sovClusterEvents(uint64(m.InstanceID))
	}
	l = len(m.TenantName)
	if l > 0 {
		n += 1 + l + sovClusterEvents(uint64(l))
	}
	return n
}

func (m *TenantSharedServiceStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	l = m.CommonSharedServiceEventDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	if m.OK {
		n += 2
	}
	l = len(m.ErrorText)
	if l > 0 {
		n += 1 + l + sovClusterEvents(uint64(l))
	}
	return n
}

func (m *TenantSharedServiceStop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	l = m.CommonSharedServiceEventDetails.Size()
	n += 1 + l + sovClusterEvents(uint64(l))
	return n
}

func sovClusterEvents(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozClusterEvents(x uint64) (n int) {
	return sovClusterEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommonNodeEventDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonNodeEventDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonNodeEventDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			m.StartedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUp", wireType)
			}
			m.LastUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClusterEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeJoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeJoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeJoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonNodeEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonNodeEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeRestart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeRestart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeRestart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonNodeEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonNodeEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeShutdownConnectionTimeout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeShutdownConnectionTimeout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeShutdownConnectionTimeout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonNodeEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonNodeEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = github_com_cockroachdb_redact.SafeString(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionsRemaining", wireType)
			}
			m.ConnectionsRemaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionsRemaining |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutMillis", wireType)
			}
			m.TimeoutMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutMillis |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClusterEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeShutdownTransactionTimeout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeShutdownTransactionTimeout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeShutdownTransactionTimeout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonNodeEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonNodeEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = github_com_cockroachdb_redact.SafeString(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionsRemaining", wireType)
			}
			m.ConnectionsRemaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionsRemaining |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutMillis", wireType)
			}
			m.TimeoutMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutMillis |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClusterEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonNodeDecommissionDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonNodeDecommissionDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonNodeDecommissionDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestingNodeID", wireType)
			}
			m.RequestingNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestingNodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetNodeID", wireType)
			}
			m.TargetNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetNodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClusterEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeDecommissioning) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeDecommissioning: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeDecommissioning: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonNodeDecommissionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonNodeDecommissionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeDecommissioned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeDecommissioned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeDecommissioned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonNodeDecommissionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonNodeDecommissionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeRecommissioned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeRecommissioned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeRecommissioned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonNodeDecommissionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonNodeDecommissionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiskSlownessDetected) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiskSlownessDetected: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiskSlownessDetected: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClusterEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiskSlownessCleared) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiskSlownessCleared: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiskSlownessCleared: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClusterEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LowDiskSpace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LowDiskSpace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LowDiskSpace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentThreshold", wireType)
			}
			m.PercentThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PercentThreshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableBytes", wireType)
			}
			m.AvailableBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvailableBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBytes", wireType)
			}
			m.TotalBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClusterEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertsReload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertsReload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertsReload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonSharedServiceEventDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonSharedServiceEventDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonSharedServiceEventDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantID", wireType)
			}
			m.TenantID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			m.InstanceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstanceID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantSharedServiceStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantSharedServiceStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantSharedServiceStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSharedServiceEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSharedServiceEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorText = github_com_cockroachdb_redact.RedactableString(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantSharedServiceStop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantSharedServiceStop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantSharedServiceStop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSharedServiceEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSharedServiceEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClusterEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClusterEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClusterEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClusterEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClusterEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClusterEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClusterEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClusterEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClusterEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClusterEvents = fmt.Errorf("proto: unexpected end of group")
)

