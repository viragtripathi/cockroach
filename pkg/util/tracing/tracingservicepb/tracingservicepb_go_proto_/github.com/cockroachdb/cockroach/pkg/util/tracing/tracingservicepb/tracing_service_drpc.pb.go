// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// source: util/tracing/tracingservicepb/tracing_service.proto

package tracingservicepb

import (
	bytes "bytes"
	context "context"
	errors "github.com/cockroachdb/errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_util_tracing_tracingservicepb_tracing_service_proto struct{}

func (drpcEncoding_File_util_tracing_tracingservicepb_tracing_service_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_util_tracing_tracingservicepb_tracing_service_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_util_tracing_tracingservicepb_tracing_service_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_util_tracing_tracingservicepb_tracing_service_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCTracingClient interface {
	DRPCConn() drpc.Conn

	GetSpanRecordings(ctx context.Context, in *GetSpanRecordingsRequest) (*GetSpanRecordingsResponse, error)
}

type drpcTracingClient struct {
	cc drpc.Conn
}

func NewDRPCTracingClient(cc drpc.Conn) DRPCTracingClient {
	return &drpcTracingClient{cc}
}

func (c *drpcTracingClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcTracingClient) GetSpanRecordings(ctx context.Context, in *GetSpanRecordingsRequest) (*GetSpanRecordingsResponse, error) {
	out := new(GetSpanRecordingsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.util.tracing.Tracing/GetSpanRecordings", drpcEncoding_File_util_tracing_tracingservicepb_tracing_service_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCTracingServer interface {
	GetSpanRecordings(context.Context, *GetSpanRecordingsRequest) (*GetSpanRecordingsResponse, error)
}

type DRPCTracingUnimplementedServer struct{}

func (s *DRPCTracingUnimplementedServer) GetSpanRecordings(context.Context, *GetSpanRecordingsRequest) (*GetSpanRecordingsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCTracingDescription struct{}

func (DRPCTracingDescription) NumMethods() int { return 1 }

func (DRPCTracingDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.util.tracing.Tracing/GetSpanRecordings", drpcEncoding_File_util_tracing_tracingservicepb_tracing_service_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTracingServer).
					GetSpanRecordings(
						ctx,
						in1.(*GetSpanRecordingsRequest),
					)
			}, DRPCTracingServer.GetSpanRecordings, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterTracing(mux drpc.Mux, impl DRPCTracingServer) error {
	return mux.Register(impl, DRPCTracingDescription{})
}

type DRPCTracing_GetSpanRecordingsStream interface {
	drpc.Stream
	SendAndClose(*GetSpanRecordingsResponse) error
}

type RPCTracing_GetSpanRecordingsStream interface {
	Context() context.Context
	SendAndClose(*GetSpanRecordingsResponse) error
}

type drpcTracing_GetSpanRecordingsStream struct {
	drpc.Stream
}

func (x *drpcTracing_GetSpanRecordingsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTracing_GetSpanRecordingsStream) SendAndClose(m *GetSpanRecordingsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_util_tracing_tracingservicepb_tracing_service_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type RPCTracingClient interface {
	GetSpanRecordings(ctx context.Context, in *GetSpanRecordingsRequest) (*GetSpanRecordingsResponse, error)
}

// Tracing gRPC -> RPC adapter
type grpcTracingClientAdapter tracingClient

func NewGRPCTracingClientAdapter(conn *grpc.ClientConn) RPCTracingClient {
	return (*grpcTracingClientAdapter)(&tracingClient{conn})
}

func (a *grpcTracingClientAdapter) GetSpanRecordings(ctx context.Context, in *GetSpanRecordingsRequest) (*GetSpanRecordingsResponse, error) {
	return (*tracingClient)(a).GetSpanRecordings(ctx, in)
}

// compile-time assertion
var _ RPCTracingClient = (*grpcTracingClientAdapter)(nil)

// Tracing DRPC -> RPC adapter
type drpcTracingClientAdapter drpcTracingClient

func NewDRPCTracingClientAdapter(conn drpc.Conn) RPCTracingClient {
	return (*drpcTracingClientAdapter)(&drpcTracingClient{conn})
}

func (a *drpcTracingClientAdapter) GetSpanRecordings(ctx context.Context, in *GetSpanRecordingsRequest) (*GetSpanRecordingsResponse, error) {
	return (*drpcTracingClient)(a).GetSpanRecordings(ctx, in)
}

// compile-time assertion
var _ RPCTracingClient = (*drpcTracingClientAdapter)(nil)
