// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/vecindex/vecstore/vecstorepb/fullvecfetchspec.proto

package vecstorepb

import (
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb "github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb"
	fetchpb "github.com/cockroachdb/cockroach/pkg/sql/catalog/fetchpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	slices "slices"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetFullVectorsFetchSpec encapsulates the information needed to get a full
// vector from the PK. It is used in store_txn.GetFullVectors() to find the
// unquantized vectors.
type GetFullVectorsFetchSpec struct {
	// Fetch spec into the PK that pulls out the vector column
	FetchSpec fetchpb.IndexFetchSpec `protobuf:"bytes,1,opt,name=fetch_spec,json=fetchSpec,proto3" json:"fetch_spec"`
	// Family ID for the vector column so that we can build a span.Splitter
	FamilyIDs          []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.FamilyID `protobuf:"varint,2,rep,packed,name=family_id,json=familyId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.FamilyID" json:"family_id,omitempty"`
	ExtractPKFetchSpec fetchpb.IndexFetchSpec                                             `protobuf:"bytes,3,opt,name=extract_pk_fetch_spec,json=extractPkFetchSpec,proto3" json:"extract_pk_fetch_spec"`
}

func (m *GetFullVectorsFetchSpec) Reset()         { *m = GetFullVectorsFetchSpec{} }
func (m *GetFullVectorsFetchSpec) String() string { return proto.CompactTextString(m) }
func (*GetFullVectorsFetchSpec) ProtoMessage()    {}
func (*GetFullVectorsFetchSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_10244dcbe0c6ecf0, []int{0}
}
func (m *GetFullVectorsFetchSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFullVectorsFetchSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetFullVectorsFetchSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFullVectorsFetchSpec.Merge(m, src)
}
func (m *GetFullVectorsFetchSpec) XXX_Size() int {
	return m.Size()
}
func (m *GetFullVectorsFetchSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFullVectorsFetchSpec.DiscardUnknown(m)
}

var xxx_messageInfo_GetFullVectorsFetchSpec proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetFullVectorsFetchSpec)(nil), "cockroach.sql.vecindex.vecstore.vecstorepb.GetFullVectorsFetchSpec")
}

func init() {
	proto.RegisterFile("sql/vecindex/vecstore/vecstorepb/fullvecfetchspec.proto", fileDescriptor_10244dcbe0c6ecf0)
}

var fileDescriptor_10244dcbe0c6ecf0 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0x93, 0xf6, 0xea, 0xea, 0x36, 0x57, 0x2c, 0x11, 0x88, 0xaa, 0x83, 0x53, 0x21, 0x55,
	0xaa, 0x18, 0x6c, 0x09, 0x06, 0x56, 0x54, 0xd1, 0xa2, 0xc2, 0x52, 0x8a, 0xc4, 0xc0, 0x12, 0x25,
	0x8e, 0x93, 0x46, 0x71, 0x6b, 0x37, 0x76, 0xab, 0xf2, 0x16, 0x3c, 0x56, 0x25, 0x96, 0x8e, 0x9d,
	0x22, 0x48, 0xdf, 0x82, 0x09, 0xd9, 0xa1, 0x69, 0x59, 0x10, 0x6c, 0xbf, 0x7d, 0xce, 0xf9, 0xfe,
	0xf3, 0xcb, 0xb6, 0x2e, 0xc4, 0x94, 0xa2, 0x39, 0xc1, 0xf1, 0x24, 0x20, 0x0b, 0x25, 0x84, 0x64,
	0x29, 0x29, 0x05, 0xf7, 0x51, 0x38, 0xa3, 0x74, 0x4e, 0x70, 0x48, 0x24, 0x1e, 0x09, 0x4e, 0x30,
	0xe4, 0x29, 0x93, 0xcc, 0x3e, 0xc5, 0x0c, 0x27, 0x29, 0xf3, 0xf0, 0x08, 0x8a, 0x29, 0x85, 0x5b,
	0x04, 0xdc, 0x4e, 0xc2, 0x1d, 0xa2, 0x71, 0x18, 0xb1, 0x88, 0xe9, 0x31, 0xa4, 0x54, 0x41, 0x68,
	0xb4, 0x94, 0x35, 0xf6, 0xa4, 0x47, 0x59, 0x84, 0x34, 0x9e, 0xfb, 0x48, 0x43, 0x5c, 0x7d, 0x2a,
	0xda, 0x4e, 0x5e, 0x2a, 0xd6, 0xf1, 0x35, 0x91, 0xbd, 0x19, 0xa5, 0x0f, 0x04, 0x4b, 0x96, 0x8a,
	0x9e, 0xaa, 0xde, 0x73, 0x82, 0xed, 0x1b, 0xcb, 0xd2, 0xad, 0xae, 0x5a, 0xac, 0x6e, 0x36, 0xcd,
	0xf6, 0xff, 0xb3, 0x16, 0xfc, 0xba, 0x99, 0x98, 0x52, 0xdf, 0x13, 0x04, 0xf6, 0x15, 0xb9, 0x1c,
	0xed, 0xfc, 0x59, 0x66, 0x8e, 0x31, 0xac, 0x85, 0x25, 0x6b, 0x62, 0xd5, 0x42, 0x6f, 0x1c, 0xd3,
	0x27, 0x37, 0x0e, 0xea, 0x95, 0x66, 0xb5, 0x7d, 0xd0, 0xb9, 0xcb, 0x33, 0xa7, 0xd6, 0xd3, 0x97,
	0xfd, 0x2b, 0xf1, 0x9e, 0x39, 0x97, 0x51, 0x2c, 0x47, 0x33, 0x1f, 0x62, 0x36, 0x46, 0xa5, 0x4b,
	0xe0, 0xef, 0x34, 0xe2, 0x49, 0x84, 0xf6, 0x73, 0x05, 0x44, 0x60, 0xee, 0xc3, 0x2d, 0x64, 0xf8,
	0xaf, 0xf0, 0xe8, 0x07, 0xb6, 0xb4, 0x8e, 0xc8, 0x42, 0xa6, 0x1e, 0x96, 0x2e, 0x4f, 0xdc, 0xbd,
	0x18, 0xd5, 0xdf, 0xc4, 0x68, 0xa8, 0x18, 0x79, 0xe6, 0xd8, 0xdd, 0x82, 0x35, 0xb8, 0x2d, 0x6b,
	0x43, 0xfb, 0x93, 0x3f, 0x48, 0x76, 0xfd, 0xd1, 0xf2, 0x0d, 0x18, 0xcb, 0x1c, 0x98, 0xab, 0x1c,
	0x98, 0xeb, 0x1c, 0x98, 0xaf, 0x39, 0x30, 0x9f, 0x37, 0xc0, 0x58, 0x6d, 0x80, 0xb1, 0xde, 0x00,
	0xe3, 0xb1, 0xfb, 0xe3, 0x8c, 0xdf, 0x7d, 0x1b, 0xff, 0xaf, 0x7e, 0xbd, 0xf3, 0x8f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xf1, 0x33, 0x54, 0xeb, 0x61, 0x02, 0x00, 0x00,
}

func (m *GetFullVectorsFetchSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFullVectorsFetchSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFullVectorsFetchSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExtractPKFetchSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFullvecfetchspec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.FamilyIDs) > 0 {
		l := 0
		for _, e := range m.FamilyIDs {
			l += sovFullvecfetchspec(uint64(e))
		}
		i -= l
		if l == len(m.FamilyIDs) {
			dest := dAtA[i : i+len(m.FamilyIDs)]
			for k, num := range m.FamilyIDs {
				dest[k] = uint8(num)
			}
		} else {
			j2 := i
			for _, num := range m.FamilyIDs {
				for num >= 1<<7 {
					dAtA[j2] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j2++
				}
				dAtA[j2] = uint8(num)
				j2++
			}
		}
		i = encodeVarintFullvecfetchspec(dAtA, i, uint64(uint64(l)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.FetchSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFullvecfetchspec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintFullvecfetchspec(dAtA []byte, offset int, v uint64) int {
	offset -= sovFullvecfetchspec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetFullVectorsFetchSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FetchSpec.Size()
	n += 1 + l + sovFullvecfetchspec(uint64(l))
	if len(m.FamilyIDs) > 0 {
		l = 0
		for _, e := range m.FamilyIDs {
			l += sovFullvecfetchspec(uint64(e))
		}
		n += 1 + sovFullvecfetchspec(uint64(l)) + l
	}
	l = m.ExtractPKFetchSpec.Size()
	n += 1 + l + sovFullvecfetchspec(uint64(l))
	return n
}

func sovFullvecfetchspec(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozFullvecfetchspec(x uint64) (n int) {
	return sovFullvecfetchspec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetFullVectorsFetchSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFullvecfetchspec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFullVectorsFetchSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFullVectorsFetchSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFullvecfetchspec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFullvecfetchspec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFullvecfetchspec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FetchSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.FamilyID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFullvecfetchspec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.FamilyID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FamilyIDs = append(m.FamilyIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFullvecfetchspec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFullvecfetchspec
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFullvecfetchspec
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 {
					if m.FamilyIDs == nil {
						m.FamilyIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.FamilyID, 0, elementCount)
					} else {
						m.FamilyIDs = slices.Grow(m.FamilyIDs, elementCount)
					}
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.FamilyID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFullvecfetchspec
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.FamilyID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FamilyIDs = append(m.FamilyIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyIDs", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtractPKFetchSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFullvecfetchspec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFullvecfetchspec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFullvecfetchspec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExtractPKFetchSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFullvecfetchspec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFullvecfetchspec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFullvecfetchspec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFullvecfetchspec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFullvecfetchspec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFullvecfetchspec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFullvecfetchspec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFullvecfetchspec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFullvecfetchspec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFullvecfetchspec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFullvecfetchspec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFullvecfetchspec = fmt.Errorf("proto: unexpected end of group")
)

