// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/vecindex/cspann/memstore/memstore.proto

package memstore

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	cspann "github.com/cockroachdb/cockroach/pkg/sql/vecindex/cspann"
	github_com_cockroachdb_cockroach_pkg_sql_vecindex_cspann "github.com/cockroachdb/cockroach/pkg/sql/vecindex/cspann"
	quantize "github.com/cockroachdb/cockroach/pkg/sql/vecindex/cspann/quantize"
	vecpb "github.com/cockroachdb/cockroach/pkg/sql/vecindex/vecpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	slices "slices"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StoreProto serializes the fields of the in-memory store.
type StoreProto struct {
	Dims           int                                                                   `protobuf:"varint,1,opt,name=dims,proto3,casttype=int" json:"dims,omitempty"`
	Seed           int64                                                                 `protobuf:"varint,2,opt,name=seed,proto3" json:"seed,omitempty"`
	DistanceMetric vecpb.DistanceMetric                                                  `protobuf:"varint,3,opt,name=distance_metric,json=distanceMetric,proto3,enum=cockroach.sql.vecindex.vecpb.DistanceMetric" json:"distance_metric,omitempty"`
	Partitions     []PartitionProto                                                      `protobuf:"bytes,4,rep,name=partitions,proto3" json:"partitions"`
	NextKey        github_com_cockroachdb_cockroach_pkg_sql_vecindex_cspann.PartitionKey `protobuf:"varint,5,opt,name=next_key,json=nextKey,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/vecindex/cspann.PartitionKey" json:"next_key,omitempty"`
	Vectors        []VectorProto                                                         `protobuf:"bytes,6,rep,name=vectors,proto3" json:"vectors"`
	Stats          cspann.IndexStats                                                     `protobuf:"bytes,7,opt,name=stats,proto3" json:"stats"`
}

func (m *StoreProto) Reset()         { *m = StoreProto{} }
func (m *StoreProto) String() string { return proto.CompactTextString(m) }
func (*StoreProto) ProtoMessage()    {}
func (*StoreProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_b277ab52b74c820b, []int{0}
}
func (m *StoreProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StoreProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreProto.Merge(m, src)
}
func (m *StoreProto) XXX_Size() int {
	return m.Size()
}
func (m *StoreProto) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreProto.DiscardUnknown(m)
}

var xxx_messageInfo_StoreProto proto.InternalMessageInfo

// PartitionProto serializes the fields of a partition.
type PartitionProto struct {
	TreeId       TreeID                                                                `protobuf:"varint,1,opt,name=tree_id,json=treeId,proto3,casttype=TreeID" json:"tree_id,omitempty"`
	PartitionKey github_com_cockroachdb_cockroach_pkg_sql_vecindex_cspann.PartitionKey `protobuf:"varint,2,opt,name=partition_key,json=partitionKey,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/vecindex/cspann.PartitionKey" json:"partition_key,omitempty"`
	Metadata     PartitionMetadataProto                                                `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata"`
	RaBitQ       *quantize.RaBitQuantizedVectorSet                                     `protobuf:"bytes,4,opt,name=ra_bit_q,json=raBitQ,proto3" json:"ra_bit_q,omitempty"`
	UnQuantized  *quantize.UnQuantizedVectorSet                                        `protobuf:"bytes,5,opt,name=un_quantized,json=unQuantized,proto3" json:"un_quantized,omitempty"`
	ChildKeys    []cspann.ChildKey                                                     `protobuf:"bytes,6,rep,name=child_keys,json=childKeys,proto3" json:"child_keys"`
	ValueBytes   []github_com_cockroachdb_cockroach_pkg_sql_vecindex_cspann.ValueBytes `protobuf:"bytes,7,rep,name=value_bytes,json=valueBytes,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/vecindex/cspann.ValueBytes" json:"value_bytes,omitempty"`
}

func (m *PartitionProto) Reset()         { *m = PartitionProto{} }
func (m *PartitionProto) String() string { return proto.CompactTextString(m) }
func (*PartitionProto) ProtoMessage()    {}
func (*PartitionProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_b277ab52b74c820b, []int{1}
}
func (m *PartitionProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PartitionProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionProto.Merge(m, src)
}
func (m *PartitionProto) XXX_Size() int {
	return m.Size()
}
func (m *PartitionProto) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionProto.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionProto proto.InternalMessageInfo

// PartitionMetadataProto serializes the fields partition metadata.
type PartitionMetadataProto struct {
	Level   github_com_cockroachdb_cockroach_pkg_sql_vecindex_cspann.Level          `protobuf:"varint,1,opt,name=level,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/vecindex/cspann.Level" json:"level,omitempty"`
	State   github_com_cockroachdb_cockroach_pkg_sql_vecindex_cspann.PartitionState `protobuf:"varint,2,opt,name=state,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/vecindex/cspann.PartitionState" json:"state,omitempty"`
	Target1 github_com_cockroachdb_cockroach_pkg_sql_vecindex_cspann.PartitionKey   `protobuf:"varint,3,opt,name=target1,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/vecindex/cspann.PartitionKey" json:"target1,omitempty"`
	Target2 github_com_cockroachdb_cockroach_pkg_sql_vecindex_cspann.PartitionKey   `protobuf:"varint,4,opt,name=target2,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/vecindex/cspann.PartitionKey" json:"target2,omitempty"`
	Source  github_com_cockroachdb_cockroach_pkg_sql_vecindex_cspann.PartitionKey   `protobuf:"varint,5,opt,name=source,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/vecindex/cspann.PartitionKey" json:"source,omitempty"`
}

func (m *PartitionMetadataProto) Reset()         { *m = PartitionMetadataProto{} }
func (m *PartitionMetadataProto) String() string { return proto.CompactTextString(m) }
func (*PartitionMetadataProto) ProtoMessage()    {}
func (*PartitionMetadataProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_b277ab52b74c820b, []int{2}
}
func (m *PartitionMetadataProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionMetadataProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PartitionMetadataProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionMetadataProto.Merge(m, src)
}
func (m *PartitionMetadataProto) XXX_Size() int {
	return m.Size()
}
func (m *PartitionMetadataProto) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionMetadataProto.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionMetadataProto proto.InternalMessageInfo

// Vector serializes an original, full-size vector and its key bytes.
type VectorProto struct {
	KeyBytes github_com_cockroachdb_cockroach_pkg_sql_vecindex_cspann.KeyBytes `protobuf:"bytes,1,opt,name=key_bytes,json=keyBytes,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/vecindex/cspann.KeyBytes" json:"key_bytes,omitempty"`
	Vector   []float32                                                         `protobuf:"fixed32,2,rep,packed,name=vector,proto3" json:"vector,omitempty"`
}

func (m *VectorProto) Reset()         { *m = VectorProto{} }
func (m *VectorProto) String() string { return proto.CompactTextString(m) }
func (*VectorProto) ProtoMessage()    {}
func (*VectorProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_b277ab52b74c820b, []int{3}
}
func (m *VectorProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VectorProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VectorProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorProto.Merge(m, src)
}
func (m *VectorProto) XXX_Size() int {
	return m.Size()
}
func (m *VectorProto) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorProto.DiscardUnknown(m)
}

var xxx_messageInfo_VectorProto proto.InternalMessageInfo

func init() {
	proto.RegisterType((*StoreProto)(nil), "cockroach.sql.vecindex.cspann.memstore.StoreProto")
	proto.RegisterType((*PartitionProto)(nil), "cockroach.sql.vecindex.cspann.memstore.PartitionProto")
	proto.RegisterType((*PartitionMetadataProto)(nil), "cockroach.sql.vecindex.cspann.memstore.PartitionMetadataProto")
	proto.RegisterType((*VectorProto)(nil), "cockroach.sql.vecindex.cspann.memstore.VectorProto")
}

func init() {
	proto.RegisterFile("sql/vecindex/cspann/memstore/memstore.proto", fileDescriptor_b277ab52b74c820b)
}

var fileDescriptor_b277ab52b74c820b = []byte{
	// 755 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x41, 0x6f, 0xda, 0x4a,
	0x10, 0xc6, 0xe0, 0x00, 0x59, 0x78, 0x79, 0xd2, 0xea, 0x29, 0xb2, 0xf2, 0x9e, 0x6c, 0xc4, 0x93,
	0x5a, 0xaa, 0x56, 0x46, 0x25, 0x6a, 0xd5, 0x53, 0xa4, 0x3a, 0x89, 0x22, 0x44, 0x22, 0xa5, 0xa6,
	0x89, 0xa2, 0xaa, 0x12, 0x35, 0xeb, 0x11, 0x58, 0x80, 0x0d, 0xf6, 0x82, 0x42, 0x8f, 0xbd, 0xf5,
	0xd6, 0x9f, 0x95, 0x63, 0x8e, 0x39, 0x59, 0x2d, 0x39, 0xf7, 0xd6, 0x13, 0xa7, 0x6a, 0xd7, 0x8b,
	0x21, 0x12, 0x51, 0x52, 0x9a, 0x5e, 0xd0, 0xcc, 0xee, 0xcc, 0x37, 0xb3, 0xdf, 0x7c, 0xbb, 0x18,
	0x3d, 0x0d, 0x06, 0xdd, 0xf2, 0x08, 0x88, 0xe3, 0xda, 0x70, 0x5e, 0x26, 0x41, 0xdf, 0x72, 0xdd,
	0x72, 0x0f, 0x7a, 0x01, 0xf5, 0x7c, 0x88, 0x0d, 0xbd, 0xef, 0x7b, 0xd4, 0xc3, 0x8f, 0x88, 0x47,
	0x3a, 0xbe, 0x67, 0x91, 0xb6, 0x1e, 0x0c, 0xba, 0xfa, 0x2c, 0x4d, 0x8f, 0xd2, 0xf4, 0x59, 0xf4,
	0x56, 0x61, 0x19, 0xa8, 0x08, 0xe2, 0x48, 0x5b, 0x4b, 0xcb, 0x0e, 0x86, 0x96, 0x4b, 0x9d, 0x8f,
	0x10, 0x1b, 0x22, 0xf8, 0xbf, 0x1b, 0xc1, 0x23, 0x20, 0xfd, 0x26, 0xfb, 0x15, 0xbb, 0xff, 0xb4,
	0xbc, 0x96, 0xc7, 0xcd, 0x32, 0xb3, 0xa2, 0xd5, 0xe2, 0x8f, 0x14, 0x42, 0x75, 0xd6, 0xcc, 0x31,
	0xef, 0xfc, 0x5f, 0x24, 0xdb, 0x4e, 0x2f, 0x50, 0xa4, 0x82, 0x54, 0x4a, 0x19, 0x99, 0x69, 0xa8,
	0xa5, 0x1c, 0x97, 0x9a, 0x7c, 0x11, 0x63, 0x24, 0x07, 0x00, 0xb6, 0x92, 0x64, 0x9b, 0x26, 0xb7,
	0xf1, 0x09, 0xfa, 0xdb, 0x76, 0x02, 0x6a, 0xb9, 0x04, 0x1a, 0x3d, 0xa0, 0xbe, 0x43, 0x94, 0x54,
	0x41, 0x2a, 0x6d, 0x54, 0x9e, 0xe9, 0xb7, 0x90, 0xc0, 0xfb, 0xd2, 0xf7, 0x44, 0xd2, 0x11, 0xcf,
	0x31, 0x37, 0xec, 0x1b, 0x3e, 0x7e, 0x8f, 0x50, 0xdf, 0xf2, 0xa9, 0x43, 0x1d, 0xcf, 0x0d, 0x14,
	0xb9, 0x90, 0x2a, 0xe5, 0x2a, 0x2f, 0xf5, 0xfb, 0xd1, 0xaa, 0x1f, 0xcf, 0x32, 0xf9, 0x99, 0x0c,
	0xf9, 0x22, 0xd4, 0x12, 0xe6, 0x02, 0x1e, 0xb6, 0x51, 0xd6, 0x85, 0x73, 0xda, 0xe8, 0xc0, 0x58,
	0x59, 0x2b, 0x48, 0x25, 0xd9, 0xa8, 0x4e, 0x43, 0x6d, 0xbf, 0xe5, 0xd0, 0xf6, 0xb0, 0xa9, 0x13,
	0xaf, 0x57, 0x8e, 0x2b, 0xd9, 0xcd, 0xb9, 0x5d, 0xee, 0x77, 0x5a, 0xe5, 0x25, 0x03, 0x99, 0x17,
	0xac, 0xc1, 0xd8, 0xcc, 0x30, 0xe8, 0x1a, 0x8c, 0x71, 0x1d, 0x65, 0x46, 0x40, 0xa8, 0xe7, 0x07,
	0x4a, 0x9a, 0x1f, 0x60, 0xfb, 0xbe, 0x07, 0x38, 0xe5, 0x69, 0x8b, 0xdd, 0xcf, 0x90, 0xf0, 0x3e,
	0x5a, 0x0b, 0xa8, 0x45, 0x03, 0x25, 0x53, 0x90, 0x4a, 0xb9, 0xca, 0x93, 0x3b, 0x20, 0xab, 0xcc,
	0xa9, 0xb3, 0x04, 0x01, 0x14, 0x65, 0x17, 0xbf, 0xcb, 0x68, 0xe3, 0x26, 0x4d, 0xf8, 0x7f, 0x94,
	0xa1, 0x3e, 0x40, 0xc3, 0xb1, 0xf9, 0xf4, 0x65, 0x03, 0x4d, 0x43, 0x2d, 0xfd, 0xd6, 0x07, 0xa8,
	0xee, 0x99, 0x69, 0xb6, 0x55, 0xb5, 0xb1, 0x8b, 0xfe, 0x8a, 0x79, 0xe4, 0xf4, 0x25, 0x1f, 0x9a,
	0xbe, 0x7c, 0x7f, 0xc1, 0xc3, 0x1f, 0x50, 0xb6, 0x07, 0xd4, 0xb2, 0x2d, 0x6a, 0x71, 0x5d, 0xe5,
	0x2a, 0x3b, 0xbf, 0xac, 0x82, 0x23, 0x01, 0xb0, 0xc8, 0x67, 0x8c, 0x8a, 0x4d, 0x94, 0xf5, 0xad,
	0x46, 0xd3, 0xa1, 0x8d, 0x81, 0x22, 0xf3, 0x0a, 0xaf, 0x6e, 0xab, 0x10, 0x5f, 0x37, 0xd3, 0x32,
	0x1c, 0xfa, 0x46, 0x78, 0x76, 0x34, 0xad, 0x3a, 0x50, 0x33, 0xed, 0xf3, 0x0d, 0x7c, 0x86, 0xf2,
	0x43, 0xb7, 0x31, 0x0b, 0xb7, 0xb9, 0xc6, 0x72, 0x95, 0x17, 0x77, 0xe2, 0x9e, 0xb8, 0x4b, 0x40,
	0x73, 0xc3, 0xf9, 0x2a, 0x3e, 0x44, 0x88, 0xb4, 0x9d, 0xae, 0xcd, 0xb8, 0x9f, 0xc9, 0xea, 0xf1,
	0x1d, 0x8c, 0xec, 0xb2, 0x84, 0x1a, 0x8c, 0xc5, 0xd1, 0xd7, 0x89, 0xf0, 0x03, 0xdc, 0x46, 0xb9,
	0x91, 0xd5, 0x1d, 0x42, 0xa3, 0x39, 0xa6, 0xc0, 0x24, 0x95, 0x2a, 0xe5, 0x8d, 0x83, 0x69, 0xa8,
	0xed, 0xae, 0x3c, 0xcb, 0x53, 0x86, 0x67, 0x30, 0x38, 0x13, 0x8d, 0x62, 0xbb, 0xf8, 0x49, 0x46,
	0x9b, 0xcb, 0x07, 0x82, 0xcf, 0xd0, 0x5a, 0x17, 0x46, 0xd0, 0x15, 0xaa, 0x33, 0xa6, 0xa1, 0xb6,
	0xb3, 0x72, 0xf9, 0x43, 0x86, 0x64, 0x46, 0x80, 0xd8, 0x8a, 0xee, 0x0a, 0x08, 0x91, 0xd6, 0xa6,
	0xa1, 0x76, 0xf0, 0xfb, 0x22, 0x65, 0xb7, 0x09, 0xa2, 0x7b, 0x04, 0x98, 0xa0, 0x0c, 0xb5, 0xfc,
	0x16, 0xd0, 0xe7, 0x5c, 0x9e, 0x0f, 0xfb, 0x90, 0x08, 0xe4, 0x79, 0x91, 0x0a, 0x57, 0xe8, 0x9f,
	0x28, 0x52, 0xc1, 0x16, 0x4a, 0x07, 0xde, 0xd0, 0x27, 0xf0, 0xf0, 0x2f, 0xa2, 0x00, 0x2e, 0x7e,
	0x96, 0x50, 0x6e, 0xe1, 0x69, 0xc3, 0x4d, 0xb4, 0xde, 0x81, 0xb1, 0x10, 0x1f, 0x9b, 0x7e, 0xde,
	0xd8, 0x9f, 0x86, 0xda, 0xeb, 0x95, 0xab, 0x32, 0x91, 0x73, 0xe9, 0x65, 0x3b, 0xc2, 0xc2, 0x9b,
	0x28, 0x1d, 0x3d, 0x9d, 0x4a, 0xb2, 0x90, 0x2a, 0x25, 0x4d, 0xe1, 0x19, 0xe4, 0xe2, 0x9b, 0x9a,
	0xb8, 0x98, 0xa8, 0xd2, 0xe5, 0x44, 0x95, 0xae, 0x26, 0xaa, 0xf4, 0x75, 0xa2, 0x4a, 0x5f, 0xae,
	0xd5, 0xc4, 0xe5, 0xb5, 0x9a, 0xb8, 0xba, 0x56, 0x13, 0xef, 0x56, 0x6e, 0x23, 0xfe, 0x1a, 0x68,
	0xa6, 0xf9, 0x7f, 0xec, 0xf6, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x8a, 0x6c, 0xe0, 0x3d,
	0x08, 0x00, 0x00,
}

func (m *StoreProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMemstore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Vectors) > 0 {
		for iNdEx := len(m.Vectors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vectors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMemstore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.NextKey != 0 {
		i = encodeVarintMemstore(dAtA, i, uint64(m.NextKey))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Partitions) > 0 {
		for iNdEx := len(m.Partitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Partitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMemstore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.DistanceMetric != 0 {
		i = encodeVarintMemstore(dAtA, i, uint64(m.DistanceMetric))
		i--
		dAtA[i] = 0x18
	}
	if m.Seed != 0 {
		i = encodeVarintMemstore(dAtA, i, uint64(m.Seed))
		i--
		dAtA[i] = 0x10
	}
	if m.Dims != 0 {
		i = encodeVarintMemstore(dAtA, i, uint64(m.Dims))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PartitionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValueBytes) > 0 {
		for iNdEx := len(m.ValueBytes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValueBytes[iNdEx])
			copy(dAtA[i:], m.ValueBytes[iNdEx])
			i = encodeVarintMemstore(dAtA, i, uint64(len(m.ValueBytes[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ChildKeys) > 0 {
		for iNdEx := len(m.ChildKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChildKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMemstore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.UnQuantized != nil {
		{
			size, err := m.UnQuantized.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMemstore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.RaBitQ != nil {
		{
			size, err := m.RaBitQ.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMemstore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMemstore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PartitionKey != 0 {
		i = encodeVarintMemstore(dAtA, i, uint64(m.PartitionKey))
		i--
		dAtA[i] = 0x10
	}
	if m.TreeId != 0 {
		i = encodeVarintMemstore(dAtA, i, uint64(m.TreeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PartitionMetadataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionMetadataProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionMetadataProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != 0 {
		i = encodeVarintMemstore(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x28
	}
	if m.Target2 != 0 {
		i = encodeVarintMemstore(dAtA, i, uint64(m.Target2))
		i--
		dAtA[i] = 0x20
	}
	if m.Target1 != 0 {
		i = encodeVarintMemstore(dAtA, i, uint64(m.Target1))
		i--
		dAtA[i] = 0x18
	}
	if m.State != 0 {
		i = encodeVarintMemstore(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.Level != 0 {
		i = encodeVarintMemstore(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VectorProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VectorProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VectorProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vector) > 0 {
		for iNdEx := len(m.Vector) - 1; iNdEx >= 0; iNdEx-- {
			f5 := math.Float32bits(float32(m.Vector[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f5))
		}
		i = encodeVarintMemstore(dAtA, i, uint64(len(m.Vector)*4))
		i--
		dAtA[i] = 0x12
	}
	if len(m.KeyBytes) > 0 {
		i -= len(m.KeyBytes)
		copy(dAtA[i:], m.KeyBytes)
		i = encodeVarintMemstore(dAtA, i, uint64(len(m.KeyBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMemstore(dAtA []byte, offset int, v uint64) int {
	offset -= sovMemstore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StoreProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dims != 0 {
		n += 1 + sovMemstore(uint64(m.Dims))
	}
	if m.Seed != 0 {
		n += 1 + sovMemstore(uint64(m.Seed))
	}
	if m.DistanceMetric != 0 {
		n += 1 + sovMemstore(uint64(m.DistanceMetric))
	}
	if len(m.Partitions) > 0 {
		for _, e := range m.Partitions {
			l = e.Size()
			n += 1 + l + sovMemstore(uint64(l))
		}
	}
	if m.NextKey != 0 {
		n += 1 + sovMemstore(uint64(m.NextKey))
	}
	if len(m.Vectors) > 0 {
		for _, e := range m.Vectors {
			l = e.Size()
			n += 1 + l + sovMemstore(uint64(l))
		}
	}
	l = m.Stats.Size()
	n += 1 + l + sovMemstore(uint64(l))
	return n
}

func (m *PartitionProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TreeId != 0 {
		n += 1 + sovMemstore(uint64(m.TreeId))
	}
	if m.PartitionKey != 0 {
		n += 1 + sovMemstore(uint64(m.PartitionKey))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovMemstore(uint64(l))
	if m.RaBitQ != nil {
		l = m.RaBitQ.Size()
		n += 1 + l + sovMemstore(uint64(l))
	}
	if m.UnQuantized != nil {
		l = m.UnQuantized.Size()
		n += 1 + l + sovMemstore(uint64(l))
	}
	if len(m.ChildKeys) > 0 {
		for _, e := range m.ChildKeys {
			l = e.Size()
			n += 1 + l + sovMemstore(uint64(l))
		}
	}
	if len(m.ValueBytes) > 0 {
		for _, b := range m.ValueBytes {
			l = len(b)
			n += 1 + l + sovMemstore(uint64(l))
		}
	}
	return n
}

func (m *PartitionMetadataProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovMemstore(uint64(m.Level))
	}
	if m.State != 0 {
		n += 1 + sovMemstore(uint64(m.State))
	}
	if m.Target1 != 0 {
		n += 1 + sovMemstore(uint64(m.Target1))
	}
	if m.Target2 != 0 {
		n += 1 + sovMemstore(uint64(m.Target2))
	}
	if m.Source != 0 {
		n += 1 + sovMemstore(uint64(m.Source))
	}
	return n
}

func (m *VectorProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyBytes)
	if l > 0 {
		n += 1 + l + sovMemstore(uint64(l))
	}
	if len(m.Vector) > 0 {
		n += 1 + sovMemstore(uint64(len(m.Vector)*4)) + len(m.Vector)*4
	}
	return n
}

func sovMemstore(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozMemstore(x uint64) (n int) {
	return sovMemstore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoreProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dims", wireType)
			}
			m.Dims = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dims |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			m.Seed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistanceMetric", wireType)
			}
			m.DistanceMetric = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistanceMetric |= vecpb.DistanceMetric(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemstore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partitions = append(m.Partitions, PartitionProto{})
			if err := m.Partitions[len(m.Partitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextKey", wireType)
			}
			m.NextKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextKey |= github_com_cockroachdb_cockroach_pkg_sql_vecindex_cspann.PartitionKey(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemstore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vectors = append(m.Vectors, VectorProto{})
			if err := m.Vectors[len(m.Vectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemstore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMemstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMemstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeId", wireType)
			}
			m.TreeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeId |= TreeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionKey", wireType)
			}
			m.PartitionKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionKey |= github_com_cockroachdb_cockroach_pkg_sql_vecindex_cspann.PartitionKey(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemstore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaBitQ", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemstore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RaBitQ == nil {
				m.RaBitQ = &quantize.RaBitQuantizedVectorSet{}
			}
			if err := m.RaBitQ.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnQuantized", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemstore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnQuantized == nil {
				m.UnQuantized = &quantize.UnQuantizedVectorSet{}
			}
			if err := m.UnQuantized.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemstore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMemstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildKeys = append(m.ChildKeys, cspann.ChildKey{})
			if err := m.ChildKeys[len(m.ChildKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMemstore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMemstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueBytes = append(m.ValueBytes, make([]byte, postIndex-iNdEx))
			copy(m.ValueBytes[len(m.ValueBytes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMemstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMemstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionMetadataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionMetadataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionMetadataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= github_com_cockroachdb_cockroach_pkg_sql_vecindex_cspann.Level(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= github_com_cockroachdb_cockroach_pkg_sql_vecindex_cspann.PartitionState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target1", wireType)
			}
			m.Target1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target1 |= github_com_cockroachdb_cockroach_pkg_sql_vecindex_cspann.PartitionKey(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target2", wireType)
			}
			m.Target2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target2 |= github_com_cockroachdb_cockroach_pkg_sql_vecindex_cspann.PartitionKey(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= github_com_cockroachdb_cockroach_pkg_sql_vecindex_cspann.PartitionKey(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMemstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMemstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VectorProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VectorProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VectorProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMemstore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMemstore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyBytes = append(m.KeyBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyBytes == nil {
				m.KeyBytes = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Vector = append(m.Vector, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMemstore
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMemstore
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMemstore
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 {
					if m.Vector == nil {
						m.Vector = make([]float32, 0, elementCount)
					} else {
						m.Vector = slices.Grow(m.Vector, elementCount)
					}
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Vector = append(m.Vector, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Vector", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMemstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMemstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMemstore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMemstore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMemstore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMemstore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMemstore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMemstore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMemstore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMemstore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMemstore = fmt.Errorf("proto: unexpected end of group")
)

