// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/vecindex/cspann/cspann.proto

package cspann

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ChildKey points to a child partition by its key or to an original full-size
// vector stored in a primary index. Each quantized vector in a partition is
// associated with a child key.
type ChildKey struct {
	// PartitionKey references a child partition in the next lower level of the
	// K-means tree. This field is only set in branch/root partitions.
	PartitionKey PartitionKey `protobuf:"varint,1,opt,name=partition_key,json=partitionKey,proto3,casttype=PartitionKey" json:"partition_key,omitempty"`
	// KeyBytes references a row in the primary index that stores the original
	// full-size vector. Its format is store-dependent and typically contains part
	// or all of the row's primary key. This field is only set in leaf partitions.
	KeyBytes KeyBytes `protobuf:"bytes,2,opt,name=key_bytes,json=keyBytes,proto3,casttype=KeyBytes" json:"key_bytes,omitempty"`
}

func (m *ChildKey) Reset()         { *m = ChildKey{} }
func (m *ChildKey) String() string { return proto.CompactTextString(m) }
func (*ChildKey) ProtoMessage()    {}
func (*ChildKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_2df1d4ab35c85adb, []int{0}
}
func (m *ChildKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChildKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ChildKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChildKey.Merge(m, src)
}
func (m *ChildKey) XXX_Size() int {
	return m.Size()
}
func (m *ChildKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ChildKey.DiscardUnknown(m)
}

var xxx_messageInfo_ChildKey proto.InternalMessageInfo

// CVStats track coefficient of variation statistics that measure the "spread"
// of vectors at a given level of the K-means tree.
type CVStats struct {
	// Mean is the average of CV values at a given level of the K-means tree.
	Mean float64 `protobuf:"fixed64,1,opt,name=mean,proto3" json:"mean,omitempty"`
	// Variance is the statistical variance of CV values at a given level of the
	// K-means tree.
	Variance float64 `protobuf:"fixed64,2,opt,name=variance,proto3" json:"variance,omitempty"`
}

func (m *CVStats) Reset()         { *m = CVStats{} }
func (m *CVStats) String() string { return proto.CompactTextString(m) }
func (*CVStats) ProtoMessage()    {}
func (*CVStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_2df1d4ab35c85adb, []int{1}
}
func (m *CVStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CVStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CVStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CVStats.Merge(m, src)
}
func (m *CVStats) XXX_Size() int {
	return m.Size()
}
func (m *CVStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CVStats.DiscardUnknown(m)
}

var xxx_messageInfo_CVStats proto.InternalMessageInfo

// IndexStats tracks index-wide estimated statistics. As the index is updated,
// the stats are periodically updated. This is best effort; the statistics are
// not guaranteed to be exactly accurate.
type IndexStats struct {
	// NumPartitions tracks the total number of partitions in the index. Unlike
	// the other statistics, this number is exact rather than an estimate.
	NumPartitions int64 `protobuf:"varint,1,opt,name=num_partitions,json=numPartitions,proto3" json:"num_partitions,omitempty"`
	// CVStats is a list of statistics for each non-leaf level of the K-means
	// tree that determine how many partitions to search at each level.
	CVStats []CVStats `protobuf:"bytes,2,rep,name=c_v_stats,json=cVStats,proto3" json:"c_v_stats"`
}

func (m *IndexStats) Reset()      { *m = IndexStats{} }
func (*IndexStats) ProtoMessage() {}
func (*IndexStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_2df1d4ab35c85adb, []int{2}
}
func (m *IndexStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IndexStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexStats.Merge(m, src)
}
func (m *IndexStats) XXX_Size() int {
	return m.Size()
}
func (m *IndexStats) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexStats.DiscardUnknown(m)
}

var xxx_messageInfo_IndexStats proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ChildKey)(nil), "cockroach.sql.vecindex.cspann.ChildKey")
	proto.RegisterType((*CVStats)(nil), "cockroach.sql.vecindex.cspann.CVStats")
	proto.RegisterType((*IndexStats)(nil), "cockroach.sql.vecindex.cspann.IndexStats")
}

func init() { proto.RegisterFile("sql/vecindex/cspann/cspann.proto", fileDescriptor_2df1d4ab35c85adb) }

var fileDescriptor_2df1d4ab35c85adb = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0x31, 0x4f, 0xb3, 0x40,
	0x18, 0xe6, 0x5a, 0xf2, 0x95, 0xde, 0x47, 0xbf, 0x7c, 0x21, 0x0e, 0x4d, 0x13, 0x0f, 0xd2, 0x44,
	0x53, 0x17, 0x48, 0x34, 0x26, 0xea, 0x48, 0x17, 0x4d, 0x17, 0x83, 0x89, 0x43, 0x17, 0x02, 0xd7,
	0x0b, 0x25, 0xc0, 0x1d, 0xe5, 0x68, 0x23, 0xb3, 0x7f, 0xc0, 0xd1, 0xd1, 0x9f, 0xd3, 0xb1, 0x63,
	0xa7, 0x46, 0xe9, 0xbf, 0xe8, 0x64, 0x80, 0x16, 0x1d, 0x8c, 0xd3, 0x3d, 0xcf, 0xdd, 0xf3, 0xbc,
	0xef, 0x73, 0xef, 0x0b, 0x35, 0x3e, 0x0b, 0x8d, 0x05, 0xc1, 0x3e, 0x9d, 0x90, 0x27, 0x03, 0xf3,
	0xd8, 0xa1, 0x74, 0x7f, 0xe8, 0x71, 0xc2, 0x52, 0xa6, 0x1c, 0x63, 0x86, 0x83, 0x84, 0x39, 0x78,
	0xaa, 0xf3, 0x59, 0xa8, 0x1f, 0xb4, 0x7a, 0x25, 0xea, 0x1d, 0x79, 0xcc, 0x63, 0xa5, 0xd2, 0x28,
	0x50, 0x65, 0xea, 0x87, 0x50, 0x1a, 0x4e, 0xfd, 0x70, 0x32, 0x22, 0x99, 0x72, 0x09, 0x3b, 0xb1,
	0x93, 0xa4, 0x7e, 0xea, 0x33, 0x6a, 0x07, 0x24, 0xeb, 0x02, 0x0d, 0x0c, 0x44, 0xf3, 0xff, 0x6e,
	0xa3, 0xca, 0xf7, 0x87, 0x87, 0x11, 0xc9, 0x2c, 0x39, 0xfe, 0xc6, 0x94, 0x33, 0xd8, 0x0e, 0x48,
	0x66, 0xbb, 0x59, 0x4a, 0x78, 0xb7, 0xa1, 0x81, 0x81, 0x6c, 0xca, 0xbb, 0x8d, 0x2a, 0x8d, 0x48,
	0x66, 0x16, 0x77, 0x96, 0x14, 0xec, 0x51, 0xff, 0x1a, 0xb6, 0x86, 0x8f, 0x0f, 0xa9, 0x93, 0x72,
	0x45, 0x81, 0x62, 0x44, 0x1c, 0x5a, 0xf6, 0x00, 0x56, 0x89, 0x95, 0x1e, 0x94, 0x16, 0x4e, 0xe2,
	0x3b, 0x14, 0x93, 0xb2, 0x10, 0xb0, 0x6a, 0xde, 0x7f, 0x06, 0x10, 0xde, 0x15, 0xff, 0xa9, 0xec,
	0x27, 0xf0, 0x1f, 0x9d, 0x47, 0x76, 0x1d, 0x84, 0x97, 0x85, 0x9a, 0x56, 0x87, 0xce, 0xa3, 0x3a,
	0x2b, 0x57, 0x6e, 0x61, 0x1b, 0xdb, 0x0b, 0x9b, 0x17, 0x9e, 0x6e, 0x43, 0x6b, 0x0e, 0xfe, 0x9e,
	0x9f, 0xea, 0xbf, 0xce, 0x49, 0xdf, 0x07, 0x34, 0xc5, 0xe5, 0x46, 0x15, 0xac, 0x16, 0xae, 0xe8,
	0x8d, 0xf8, 0xfa, 0xa6, 0x0a, 0xe6, 0x78, 0xf9, 0x81, 0x84, 0x65, 0x8e, 0xc0, 0x2a, 0x47, 0x60,
	0x9d, 0x23, 0xf0, 0x9e, 0x23, 0xf0, 0xb2, 0x45, 0xc2, 0x6a, 0x8b, 0x84, 0xf5, 0x16, 0x09, 0xe3,
	0x2b, 0xcf, 0x4f, 0xa7, 0x73, 0x57, 0xc7, 0x2c, 0x32, 0xea, 0x46, 0x13, 0xf7, 0x0b, 0x1b, 0x71,
	0xe0, 0x19, 0x3f, 0x2c, 0xd3, 0xfd, 0x53, 0x6e, 0xe4, 0xe2, 0x33, 0x00, 0x00, 0xff, 0xff, 0x3d,
	0x0e, 0xaa, 0x07, 0xea, 0x01, 0x00, 0x00,
}

func (m *ChildKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyBytes) > 0 {
		i -= len(m.KeyBytes)
		copy(dAtA[i:], m.KeyBytes)
		i = encodeVarintCspann(dAtA, i, uint64(len(m.KeyBytes)))
		i--
		dAtA[i] = 0x12
	}
	if m.PartitionKey != 0 {
		i = encodeVarintCspann(dAtA, i, uint64(m.PartitionKey))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CVStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CVStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CVStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Variance != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Variance))))
		i--
		dAtA[i] = 0x11
	}
	if m.Mean != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Mean))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *IndexStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CVStats) > 0 {
		for iNdEx := len(m.CVStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CVStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCspann(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NumPartitions != 0 {
		i = encodeVarintCspann(dAtA, i, uint64(m.NumPartitions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCspann(dAtA []byte, offset int, v uint64) int {
	offset -= sovCspann(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChildKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartitionKey != 0 {
		n += 1 + sovCspann(uint64(m.PartitionKey))
	}
	l = len(m.KeyBytes)
	if l > 0 {
		n += 1 + l + sovCspann(uint64(l))
	}
	return n
}

func (m *CVStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mean != 0 {
		n += 9
	}
	if m.Variance != 0 {
		n += 9
	}
	return n
}

func (m *IndexStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumPartitions != 0 {
		n += 1 + sovCspann(uint64(m.NumPartitions))
	}
	if len(m.CVStats) > 0 {
		for _, e := range m.CVStats {
			l = e.Size()
			n += 1 + l + sovCspann(uint64(l))
		}
	}
	return n
}

func sovCspann(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozCspann(x uint64) (n int) {
	return sovCspann(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChildKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCspann
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionKey", wireType)
			}
			m.PartitionKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCspann
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionKey |= PartitionKey(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCspann
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCspann
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCspann
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyBytes = append(m.KeyBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyBytes == nil {
				m.KeyBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCspann(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCspann
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CVStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCspann
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CVStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CVStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mean", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Mean = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variance", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Variance = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCspann(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCspann
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCspann
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPartitions", wireType)
			}
			m.NumPartitions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCspann
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumPartitions |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CVStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCspann
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCspann
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCspann
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CVStats = append(m.CVStats, CVStats{})
			if err := m.CVStats[len(m.CVStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCspann(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCspann
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCspann(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCspann
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCspann
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCspann
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCspann
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCspann
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCspann
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCspann        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCspann          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCspann = fmt.Errorf("proto: unexpected end of group")
)

