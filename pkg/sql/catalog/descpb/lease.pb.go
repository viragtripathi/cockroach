// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/catalog/descpb/lease.proto

package descpb

import (
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_util_uuid "github.com/cockroachdb/cockroach/pkg/util/uuid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WaitStats is a message that tracks stats related to waiting for expired
// descriptor leases to expire. Used in WaitForOneVersion and WaitForNoVersion.
type WaitStats struct {
	// Number of retry attempts made
	NumRetries int32 `protobuf:"varint,1,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"`
	// The number of expired descriptors that still exist in the last call. This
	// will be set to zero when the wait is finished.
	LastCount int32 `protobuf:"varint,2,opt,name=last_count,json=lastCount,proto3" json:"last_count,omitempty"`
	// This is the number of distinct SQL instances that still have unexpired leases.
	NumSqlInstances int32 `protobuf:"varint,3,opt,name=num_sql_instances,json=numSqlInstances,proto3" json:"num_sql_instances,omitempty"`
	// If we are waiting on at least one lease, this is one of the sql_instance_id
	// values we are waiting on. If the count is 0, this value will be 0.
	SampleSqlInstanceId int32 `protobuf:"varint,4,opt,name=sample_sql_instance_id,json=sampleSqlInstanceId,proto3" json:"sample_sql_instance_id,omitempty"`
	// The elapsed time, in milliseconds, spent waiting for the expired leased
	// descriptors to leave.
	ElapsedTimeInMs int64 `protobuf:"varint,5,opt,name=elapsed_time_in_ms,json=elapsedTimeInMs,proto3" json:"elapsed_time_in_ms,omitempty"`
	// UUID to identify these stats for a specific invocation of the wait. The
	// stats can be included in the trace multiple times if it's a long retry.
	Uuid github_com_cockroachdb_cockroach_pkg_util_uuid.UUID `protobuf:"bytes,6,opt,name=uuid,proto3,customtype=github.com/cockroachdb/cockroach/pkg/util/uuid.UUID" json:"uuid"`
	// TargetCount the number of leases we expected to observe, which will be
	// non-zero for wait for initial version.
	TargetCount int32 `protobuf:"varint,7,opt,name=target_count,json=targetCount,proto3" json:"target_count,omitempty"`
}

func (m *WaitStats) Reset()         { *m = WaitStats{} }
func (m *WaitStats) String() string { return proto.CompactTextString(m) }
func (*WaitStats) ProtoMessage()    {}
func (*WaitStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_af4178078545ebe2, []int{0}
}
func (m *WaitStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaitStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WaitStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitStats.Merge(m, src)
}
func (m *WaitStats) XXX_Size() int {
	return m.Size()
}
func (m *WaitStats) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitStats.DiscardUnknown(m)
}

var xxx_messageInfo_WaitStats proto.InternalMessageInfo

func init() {
	proto.RegisterType((*WaitStats)(nil), "cockroach.sql.sqlbase.WaitStats")
}

func init() { proto.RegisterFile("sql/catalog/descpb/lease.proto", fileDescriptor_af4178078545ebe2) }

var fileDescriptor_af4178078545ebe2 = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4b, 0xcb, 0x13, 0x31,
	0x14, 0x86, 0x27, 0xdf, 0x4d, 0xbe, 0xb4, 0x50, 0x8c, 0x17, 0x06, 0xc1, 0xb4, 0xba, 0x2a, 0x0a,
	0x93, 0x45, 0x17, 0x2e, 0xdc, 0x55, 0x37, 0xb3, 0x10, 0x61, 0x6a, 0x11, 0xdd, 0x0c, 0x99, 0x4c,
	0x98, 0x86, 0xe6, 0x32, 0x33, 0x49, 0xfe, 0x87, 0x3f, 0xab, 0x1b, 0xa1, 0xcb, 0xe2, 0xa2, 0xe8,
	0xf4, 0x8f, 0xc8, 0x64, 0xac, 0x17, 0xdc, 0x7c, 0x8b, 0xc0, 0xe1, 0x79, 0xdf, 0x37, 0xc9, 0x39,
	0x07, 0x62, 0xdb, 0x48, 0xc2, 0xa8, 0xa3, 0xd2, 0x54, 0xa4, 0xe4, 0x96, 0xd5, 0x05, 0x91, 0x9c,
	0x5a, 0x9e, 0xd4, 0xad, 0x71, 0x06, 0x3d, 0x62, 0x86, 0x6d, 0x5b, 0x43, 0xd9, 0x26, 0xb1, 0x8d,
	0xec, 0x4f, 0x41, 0x2d, 0x7f, 0xf2, 0xb0, 0x32, 0x95, 0x09, 0x0e, 0xd2, 0x57, 0x83, 0xf9, 0xf9,
	0xd7, 0x0b, 0x78, 0xfb, 0x91, 0x0a, 0xb7, 0x72, 0xd4, 0x59, 0x34, 0x85, 0x23, 0xed, 0x55, 0xde,
	0x72, 0xd7, 0x0a, 0x6e, 0x63, 0x30, 0x03, 0xf3, 0xeb, 0x0c, 0x6a, 0xaf, 0xb2, 0x81, 0xa0, 0xa7,
	0x10, 0x4a, 0x6a, 0x5d, 0xce, 0x8c, 0xd7, 0x2e, 0xbe, 0x08, 0xfa, 0x6d, 0x4f, 0xde, 0xf4, 0x00,
	0xbd, 0x80, 0xf7, 0xfb, 0xbc, 0x6d, 0x64, 0x2e, 0xb4, 0x75, 0x54, 0x33, 0x6e, 0xe3, 0xcb, 0xe0,
	0x9a, 0x68, 0xaf, 0x56, 0x8d, 0x4c, 0xcf, 0x18, 0x2d, 0xe0, 0x63, 0x4b, 0x55, 0x2d, 0xf9, 0x3f,
	0xf6, 0x5c, 0x94, 0xf1, 0x55, 0x08, 0x3c, 0x18, 0xd4, 0xbf, 0x32, 0x69, 0x89, 0x5e, 0x42, 0xc4,
	0x25, 0xad, 0x2d, 0x2f, 0x73, 0x27, 0x14, 0xcf, 0x85, 0xce, 0x95, 0x8d, 0xaf, 0x67, 0x60, 0x7e,
	0x99, 0x4d, 0x7e, 0x29, 0x1f, 0x84, 0xe2, 0xa9, 0x7e, 0x67, 0xd1, 0x7b, 0x78, 0xe5, 0xbd, 0x28,
	0xe3, 0x9b, 0x19, 0x98, 0x8f, 0x97, 0xaf, 0x77, 0xc7, 0x69, 0xf4, 0xed, 0x38, 0x5d, 0x54, 0xc2,
	0x6d, 0x7c, 0x91, 0x30, 0xa3, 0xc8, 0xef, 0x49, 0x95, 0xc5, 0x9f, 0x9a, 0xd4, 0xdb, 0x8a, 0x78,
	0x27, 0x24, 0xe9, 0xd3, 0xc9, 0x7a, 0x9d, 0xbe, 0xcd, 0xc2, 0x45, 0xe8, 0x19, 0x1c, 0x3b, 0xda,
	0x56, 0xfc, 0xdc, 0xff, 0xbd, 0xf0, 0xd1, 0xd1, 0xc0, 0xc2, 0x04, 0x96, 0x9f, 0x76, 0x3f, 0x70,
	0xb4, 0xeb, 0x30, 0xd8, 0x77, 0x18, 0x1c, 0x3a, 0x0c, 0xbe, 0x77, 0x18, 0x7c, 0x39, 0xe1, 0x68,
	0x7f, 0xc2, 0xd1, 0xe1, 0x84, 0xa3, 0xcf, 0xaf, 0xee, 0xf4, 0xfe, 0xff, 0x3b, 0x2e, 0x6e, 0xc2,
	0xc6, 0x16, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x8b, 0x40, 0x60, 0x00, 0x02, 0x00, 0x00,
}

func (m *WaitStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaitStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WaitStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetCount != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.TargetCount))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.Uuid.Size()
		i -= size
		if _, err := m.Uuid.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLease(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.ElapsedTimeInMs != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.ElapsedTimeInMs))
		i--
		dAtA[i] = 0x28
	}
	if m.SampleSqlInstanceId != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.SampleSqlInstanceId))
		i--
		dAtA[i] = 0x20
	}
	if m.NumSqlInstances != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.NumSqlInstances))
		i--
		dAtA[i] = 0x18
	}
	if m.LastCount != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.LastCount))
		i--
		dAtA[i] = 0x10
	}
	if m.NumRetries != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.NumRetries))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLease(dAtA []byte, offset int, v uint64) int {
	offset -= sovLease(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WaitStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumRetries != 0 {
		n += 1 + sovLease(uint64(m.NumRetries))
	}
	if m.LastCount != 0 {
		n += 1 + sovLease(uint64(m.LastCount))
	}
	if m.NumSqlInstances != 0 {
		n += 1 + sovLease(uint64(m.NumSqlInstances))
	}
	if m.SampleSqlInstanceId != 0 {
		n += 1 + sovLease(uint64(m.SampleSqlInstanceId))
	}
	if m.ElapsedTimeInMs != 0 {
		n += 1 + sovLease(uint64(m.ElapsedTimeInMs))
	}
	l = m.Uuid.Size()
	n += 1 + l + sovLease(uint64(l))
	if m.TargetCount != 0 {
		n += 1 + sovLease(uint64(m.TargetCount))
	}
	return n
}

func sovLease(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozLease(x uint64) (n int) {
	return sovLease(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WaitStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLease
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaitStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaitStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRetries", wireType)
			}
			m.NumRetries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRetries |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCount", wireType)
			}
			m.LastCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSqlInstances", wireType)
			}
			m.NumSqlInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSqlInstances |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleSqlInstanceId", wireType)
			}
			m.SampleSqlInstanceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SampleSqlInstanceId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElapsedTimeInMs", wireType)
			}
			m.ElapsedTimeInMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElapsedTimeInMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Uuid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCount", wireType)
			}
			m.TargetCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLease(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLease
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLease(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLease
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLease
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLease
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLease
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLease
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLease
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLease        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLease          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLease = fmt.Errorf("proto: unexpected end of group")
)

