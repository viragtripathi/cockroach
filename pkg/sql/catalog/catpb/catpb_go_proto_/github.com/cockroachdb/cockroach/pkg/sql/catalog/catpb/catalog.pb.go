// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/catalog/catpb/catalog.proto

package catpb

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_sql_sem_catid "github.com/cockroachdb/cockroach/pkg/sql/sem/catid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GeneratedAsIdentityType is an enum representing how the creation of
// a column is associated with the GENERATED {ALWAYS | BY DEFAULT} AS IDENTITY
// syntax.
type GeneratedAsIdentityType int32

const (
	// A column created without `GENERATED ... AS IDENTITY` syntax.
	GeneratedAsIdentityType_NOT_IDENTITY_COLUMN GeneratedAsIdentityType = 0
	// A column created with `GENERATED ALWAYS AS IDENTITY` syntax.
	// Such a column does not allow override without `OVERRIDING SYSTEM VALUE`
	// syntax.
	GeneratedAsIdentityType_GENERATED_ALWAYS GeneratedAsIdentityType = 1
	// A column created with `GENERATED BY DEFAULT AS IDENTITY` syntax.
	// Such a column can be overridden without `OVERRIDING SYSTEM VALUE` syntax.
	GeneratedAsIdentityType_GENERATED_BY_DEFAULT GeneratedAsIdentityType = 2
)

var GeneratedAsIdentityType_name = map[int32]string{
	0: "NOT_IDENTITY_COLUMN",
	1: "GENERATED_ALWAYS",
	2: "GENERATED_BY_DEFAULT",
}

var GeneratedAsIdentityType_value = map[string]int32{
	"NOT_IDENTITY_COLUMN":  0,
	"GENERATED_ALWAYS":     1,
	"GENERATED_BY_DEFAULT": 2,
}

func (x GeneratedAsIdentityType) Enum() *GeneratedAsIdentityType {
	p := new(GeneratedAsIdentityType)
	*p = x
	return p
}

func (x GeneratedAsIdentityType) String() string {
	return proto.EnumName(GeneratedAsIdentityType_name, int32(x))
}

func (x *GeneratedAsIdentityType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GeneratedAsIdentityType_value, data, "GeneratedAsIdentityType")
	if err != nil {
		return err
	}
	*x = GeneratedAsIdentityType(value)
	return nil
}

func (GeneratedAsIdentityType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_98c5e4146b266e21, []int{0}
}

// LocalityConfig is used to figure the locality of a table.
type LocalityConfig struct {
	// Types that are valid to be assigned to Locality:
	//
	//	*LocalityConfig_Global_
	//	*LocalityConfig_RegionalByTable_
	//	*LocalityConfig_RegionalByRow_
	Locality isLocalityConfig_Locality `protobuf_oneof:"locality"`
}

func (m *LocalityConfig) Reset()         { *m = LocalityConfig{} }
func (m *LocalityConfig) String() string { return proto.CompactTextString(m) }
func (*LocalityConfig) ProtoMessage()    {}
func (*LocalityConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_98c5e4146b266e21, []int{0}
}
func (m *LocalityConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalityConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LocalityConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalityConfig.Merge(m, src)
}
func (m *LocalityConfig) XXX_Size() int {
	return m.Size()
}
func (m *LocalityConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalityConfig.DiscardUnknown(m)
}

var xxx_messageInfo_LocalityConfig proto.InternalMessageInfo

type isLocalityConfig_Locality interface {
	isLocalityConfig_Locality()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type LocalityConfig_Global_ struct {
	Global *LocalityConfig_Global `protobuf:"bytes,1,opt,name=global,oneof" json:"global,omitempty"`
}
type LocalityConfig_RegionalByTable_ struct {
	RegionalByTable *LocalityConfig_RegionalByTable `protobuf:"bytes,2,opt,name=regional_by_table,json=regionalByTable,oneof" json:"regional_by_table,omitempty"`
}
type LocalityConfig_RegionalByRow_ struct {
	RegionalByRow *LocalityConfig_RegionalByRow `protobuf:"bytes,3,opt,name=regional_by_row,json=regionalByRow,oneof" json:"regional_by_row,omitempty"`
}

func (*LocalityConfig_Global_) isLocalityConfig_Locality()          {}
func (*LocalityConfig_RegionalByTable_) isLocalityConfig_Locality() {}
func (*LocalityConfig_RegionalByRow_) isLocalityConfig_Locality()   {}

func (m *LocalityConfig) GetLocality() isLocalityConfig_Locality {
	if m != nil {
		return m.Locality
	}
	return nil
}

func (m *LocalityConfig) GetGlobal() *LocalityConfig_Global {
	if x, ok := m.GetLocality().(*LocalityConfig_Global_); ok {
		return x.Global
	}
	return nil
}

func (m *LocalityConfig) GetRegionalByTable() *LocalityConfig_RegionalByTable {
	if x, ok := m.GetLocality().(*LocalityConfig_RegionalByTable_); ok {
		return x.RegionalByTable
	}
	return nil
}

func (m *LocalityConfig) GetRegionalByRow() *LocalityConfig_RegionalByRow {
	if x, ok := m.GetLocality().(*LocalityConfig_RegionalByRow_); ok {
		return x.RegionalByRow
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LocalityConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LocalityConfig_Global_)(nil),
		(*LocalityConfig_RegionalByTable_)(nil),
		(*LocalityConfig_RegionalByRow_)(nil),
	}
}

// REGIONAL BY TABLE tables have an "implicit" bidirectional dependency with
// the multi-region enum. The dependency is described "implicit" because
// even though no column on the table uses the multi-region type descriptor
// to store the homing region, a value from the type descriptor is stored in
// the locality config below (when the table is homed in the non-primary
// region).
// This changes how type dependencies are constructed for table descriptors.
// After the introduction of REGIONAL BY TABLE tables, a column on the table
// descriptor using a type is no longer a necessary (note it is still a
// sufficient) condition to establish a type dependency. As is the case with
// adding and dropping columns, this type dependency must be negotiated. As
// such, switching locality patterns or adding new locality configs must be
// done so that back references to the multi-region type descriptor are
// kept sane.
type LocalityConfig_RegionalByTable struct {
	// Region is set if the table has an affinity with a non-primary region.
	Region *RegionName `protobuf:"bytes,1,opt,name=region,casttype=RegionName" json:"region,omitempty"`
}

func (m *LocalityConfig_RegionalByTable) Reset()         { *m = LocalityConfig_RegionalByTable{} }
func (m *LocalityConfig_RegionalByTable) String() string { return proto.CompactTextString(m) }
func (*LocalityConfig_RegionalByTable) ProtoMessage()    {}
func (*LocalityConfig_RegionalByTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_98c5e4146b266e21, []int{0, 0}
}
func (m *LocalityConfig_RegionalByTable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalityConfig_RegionalByTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LocalityConfig_RegionalByTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalityConfig_RegionalByTable.Merge(m, src)
}
func (m *LocalityConfig_RegionalByTable) XXX_Size() int {
	return m.Size()
}
func (m *LocalityConfig_RegionalByTable) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalityConfig_RegionalByTable.DiscardUnknown(m)
}

var xxx_messageInfo_LocalityConfig_RegionalByTable proto.InternalMessageInfo

type LocalityConfig_RegionalByRow struct {
	// As is set if the table has a REGIONAL BY ROW AS ... set to a specific column.
	As *string `protobuf:"bytes,1,opt,name=as" json:"as,omitempty"`
}

func (m *LocalityConfig_RegionalByRow) Reset()         { *m = LocalityConfig_RegionalByRow{} }
func (m *LocalityConfig_RegionalByRow) String() string { return proto.CompactTextString(m) }
func (*LocalityConfig_RegionalByRow) ProtoMessage()    {}
func (*LocalityConfig_RegionalByRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_98c5e4146b266e21, []int{0, 1}
}
func (m *LocalityConfig_RegionalByRow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalityConfig_RegionalByRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LocalityConfig_RegionalByRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalityConfig_RegionalByRow.Merge(m, src)
}
func (m *LocalityConfig_RegionalByRow) XXX_Size() int {
	return m.Size()
}
func (m *LocalityConfig_RegionalByRow) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalityConfig_RegionalByRow.DiscardUnknown(m)
}

var xxx_messageInfo_LocalityConfig_RegionalByRow proto.InternalMessageInfo

type LocalityConfig_Global struct {
}

func (m *LocalityConfig_Global) Reset()         { *m = LocalityConfig_Global{} }
func (m *LocalityConfig_Global) String() string { return proto.CompactTextString(m) }
func (*LocalityConfig_Global) ProtoMessage()    {}
func (*LocalityConfig_Global) Descriptor() ([]byte, []int) {
	return fileDescriptor_98c5e4146b266e21, []int{0, 2}
}
func (m *LocalityConfig_Global) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalityConfig_Global) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LocalityConfig_Global) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalityConfig_Global.Merge(m, src)
}
func (m *LocalityConfig_Global) XXX_Size() int {
	return m.Size()
}
func (m *LocalityConfig_Global) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalityConfig_Global.DiscardUnknown(m)
}

var xxx_messageInfo_LocalityConfig_Global proto.InternalMessageInfo

// ShardedDescriptor represents an index (either primary or secondary) that is hash
// sharded into a user-specified number of buckets.
//
// As as example, sample field values for the following table:
//
// CREATE TABLE abc (
//
//	a INT PRIMARY KEY USING HASH WITH (bucket_count=10),  // column id: 1
//	b BYTES
//
// );
//
// Sharded descriptor:
//
//	name:          "a_shard"
//	shard_buckets: 10
//	column_names:  ["a"]
type ShardedDescriptor struct {
	// IsSharded indicates whether the index in question is a sharded one.
	IsSharded bool `protobuf:"varint,1,opt,name=is_sharded,json=isSharded" json:"is_sharded"`
	// Name is the name of the shard column.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name"`
	// ShardBuckets indicates the number of shards this index is divided into.
	ShardBuckets int32 `protobuf:"varint,3,opt,name=shard_buckets,json=shardBuckets" json:"shard_buckets"`
	// ColumnNames lists the names of the columns used to compute the shard column's
	// values.
	ColumnNames []string `protobuf:"bytes,4,rep,name=column_names,json=columnNames" json:"column_names,omitempty"`
}

func (m *ShardedDescriptor) Reset()         { *m = ShardedDescriptor{} }
func (m *ShardedDescriptor) String() string { return proto.CompactTextString(m) }
func (*ShardedDescriptor) ProtoMessage()    {}
func (*ShardedDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_98c5e4146b266e21, []int{1}
}
func (m *ShardedDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardedDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShardedDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardedDescriptor.Merge(m, src)
}
func (m *ShardedDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *ShardedDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardedDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_ShardedDescriptor proto.InternalMessageInfo

// ScheduledRowLevelTTLArgs represents the arguments for a row-level TTL
// scheduled job.
type ScheduledRowLevelTTLArgs struct {
	TableID github_com_cockroachdb_cockroach_pkg_sql_sem_catid.DescID `protobuf:"varint,1,opt,name=table_id,json=tableId,casttype=github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID" json:"table_id"`
}

func (m *ScheduledRowLevelTTLArgs) Reset()         { *m = ScheduledRowLevelTTLArgs{} }
func (m *ScheduledRowLevelTTLArgs) String() string { return proto.CompactTextString(m) }
func (*ScheduledRowLevelTTLArgs) ProtoMessage()    {}
func (*ScheduledRowLevelTTLArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_98c5e4146b266e21, []int{2}
}
func (m *ScheduledRowLevelTTLArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduledRowLevelTTLArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ScheduledRowLevelTTLArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduledRowLevelTTLArgs.Merge(m, src)
}
func (m *ScheduledRowLevelTTLArgs) XXX_Size() int {
	return m.Size()
}
func (m *ScheduledRowLevelTTLArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduledRowLevelTTLArgs.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduledRowLevelTTLArgs proto.InternalMessageInfo

// PartitioningDescriptor represents the partitioning of an index into spans
// of keys addressable by a zone config. The key encoding is unchanged. Each
// partition may optionally be itself divided into further partitions, called
// subpartitions.
type PartitioningDescriptor struct {
	// NumColumns is how large of a prefix of the columns in an index are used in
	// the function mapping column values to partitions. If this is a
	// subpartition, this is offset to start from the end of the parent
	// partition's columns. If NumColumns is 0, then there is no partitioning.
	NumColumns uint32 `protobuf:"varint,1,opt,name=num_columns,json=numColumns" json:"num_columns"`
	// NumImplicitColumns specifies the number of columns that implicitly prefix a given index.
	// This occurs if a user specifies a PARTITION BY which is not a prefix of the given index,
	// in which case the ColumnIDs are added in front of the index and this field denotes
	// the number of columns added as a prefix.
	// If NumImplicitColumns is 0, there are no implicit columns defined for the index.
	NumImplicitColumns uint32 `protobuf:"varint,4,opt,name=num_implicit_columns,json=numImplicitColumns" json:"num_implicit_columns"`
	// Exactly one of List or Range is required to be non-empty if NumColumns is
	// non-zero.
	List  []PartitioningDescriptor_List  `protobuf:"bytes,2,rep,name=list" json:"list"`
	Range []PartitioningDescriptor_Range `protobuf:"bytes,3,rep,name=range" json:"range"`
}

func (m *PartitioningDescriptor) Reset()         { *m = PartitioningDescriptor{} }
func (m *PartitioningDescriptor) String() string { return proto.CompactTextString(m) }
func (*PartitioningDescriptor) ProtoMessage()    {}
func (*PartitioningDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_98c5e4146b266e21, []int{3}
}
func (m *PartitioningDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitioningDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PartitioningDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitioningDescriptor.Merge(m, src)
}
func (m *PartitioningDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *PartitioningDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitioningDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_PartitioningDescriptor proto.InternalMessageInfo

// List represents a list partitioning, which maps individual tuples to
// partitions.
type PartitioningDescriptor_List struct {
	// Name is the partition name.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name"`
	// Values is an unordered set of the tuples included in this partition. Each
	// tuple is encoded with the EncDatum value encoding. DEFAULT is encoded as
	// NOT NULL followed by PartitionDefaultVal encoded as a non-sorting
	// uvarint.
	Values [][]byte `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
	// Subpartitioning represents a further partitioning of this list partition.
	Subpartitioning PartitioningDescriptor `protobuf:"bytes,3,opt,name=subpartitioning" json:"subpartitioning"`
}

func (m *PartitioningDescriptor_List) Reset()         { *m = PartitioningDescriptor_List{} }
func (m *PartitioningDescriptor_List) String() string { return proto.CompactTextString(m) }
func (*PartitioningDescriptor_List) ProtoMessage()    {}
func (*PartitioningDescriptor_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_98c5e4146b266e21, []int{3, 0}
}
func (m *PartitioningDescriptor_List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitioningDescriptor_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PartitioningDescriptor_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitioningDescriptor_List.Merge(m, src)
}
func (m *PartitioningDescriptor_List) XXX_Size() int {
	return m.Size()
}
func (m *PartitioningDescriptor_List) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitioningDescriptor_List.DiscardUnknown(m)
}

var xxx_messageInfo_PartitioningDescriptor_List proto.InternalMessageInfo

// Range represents a range partitioning, which maps ranges of tuples to
// partitions by specifying exclusive upper bounds. The range partitions in a
// PartitioningDescriptor are required to be sorted by UpperBound.
type PartitioningDescriptor_Range struct {
	// Name is the partition name.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name"`
	// FromInclusive is the inclusive lower bound of this range partition. It is
	// encoded with the EncDatum value encoding. MINVALUE and MAXVALUE are
	// encoded as NOT NULL followed by a PartitionSpecialValCode encoded as a
	// non-sorting uvarint.
	FromInclusive []byte `protobuf:"bytes,3,opt,name=from_inclusive,json=fromInclusive" json:"from_inclusive,omitempty"`
	// ToExclusive is the exclusive upper bound of this range partition. It is
	// encoded in the same way as From.
	ToExclusive []byte `protobuf:"bytes,2,opt,name=to_exclusive,json=toExclusive" json:"to_exclusive,omitempty"`
}

func (m *PartitioningDescriptor_Range) Reset()         { *m = PartitioningDescriptor_Range{} }
func (m *PartitioningDescriptor_Range) String() string { return proto.CompactTextString(m) }
func (*PartitioningDescriptor_Range) ProtoMessage()    {}
func (*PartitioningDescriptor_Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_98c5e4146b266e21, []int{3, 1}
}
func (m *PartitioningDescriptor_Range) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitioningDescriptor_Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PartitioningDescriptor_Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitioningDescriptor_Range.Merge(m, src)
}
func (m *PartitioningDescriptor_Range) XXX_Size() int {
	return m.Size()
}
func (m *PartitioningDescriptor_Range) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitioningDescriptor_Range.DiscardUnknown(m)
}

var xxx_messageInfo_PartitioningDescriptor_Range proto.InternalMessageInfo

// RowLevelTTL represents the TTL configured on a table.
type RowLevelTTL struct {
	// DurationExpr is the automatically assigned interval for when the TTL should apply to a row.
	DurationExpr Expression `protobuf:"bytes,1,opt,name=duration_expr,json=durationExpr,casttype=Expression" json:"duration_expr"`
	// SelectBatchSize is the amount of rows that should be fetched at a time
	SelectBatchSize int64 `protobuf:"varint,2,opt,name=select_batch_size,json=selectBatchSize" json:"select_batch_size"`
	// DeleteBatchSize is the amount of rows that should be deleted at a time.
	DeleteBatchSize int64 `protobuf:"varint,3,opt,name=delete_batch_size,json=deleteBatchSize" json:"delete_batch_size"`
	// DeletionCron signifies how often the TTL deletion job runs in a cron format.
	DeletionCron string `protobuf:"bytes,4,opt,name=deletion_cron,json=deletionCron" json:"deletion_cron"`
	// ScheduleID is the ID of the row-level TTL job schedule.
	ScheduleID ScheduleID `protobuf:"varint,5,opt,name=schedule_id,json=scheduleId,casttype=ScheduleID" json:"schedule_id"`
	// DeleteRateLimit is the maximum amount of rows to delete per second.
	DeleteRateLimit int64 `protobuf:"varint,7,opt,name=delete_rate_limit,json=deleteRateLimit" json:"delete_rate_limit"`
	// Pause is set if the TTL job should not run.
	Pause bool `protobuf:"varint,8,opt,name=pause" json:"pause"`
	// RowStatsPollInterval is the interval to report row statistics (number of rows on table, number of expired
	// rows on table) during row level TTL. If zero, no statistics are reported.
	RowStatsPollInterval time.Duration `protobuf:"varint,9,opt,name=row_stats_poll_interval,json=rowStatsPollInterval,casttype=time.Duration" json:"row_stats_poll_interval"`
	// LabelMetrics is true if metrics for the TTL job should add a label containing
	// the relation name.
	LabelMetrics bool `protobuf:"varint,10,opt,name=label_metrics,json=labelMetrics" json:"label_metrics"`
	// ExpirationExpr is the custom assigned expression for calculating when the TTL should apply to a row.
	ExpirationExpr Expression `protobuf:"bytes,11,opt,name=expiration_expr,json=expirationExpr,casttype=Expression" json:"expiration_expr"`
	// SelectRateLimit is the maximum amount of rows to select per second.
	SelectRateLimit int64 `protobuf:"varint,12,opt,name=select_rate_limit,json=selectRateLimit" json:"select_rate_limit"`
	// DisableChangefeedReplication disables changefeed replication for the
	// deletes performed by the TTL job.
	DisableChangefeedReplication bool `protobuf:"varint,13,opt,name=disable_changefeed_replication,json=disableChangefeedReplication" json:"disable_changefeed_replication"`
}

func (m *RowLevelTTL) Reset()         { *m = RowLevelTTL{} }
func (m *RowLevelTTL) String() string { return proto.CompactTextString(m) }
func (*RowLevelTTL) ProtoMessage()    {}
func (*RowLevelTTL) Descriptor() ([]byte, []int) {
	return fileDescriptor_98c5e4146b266e21, []int{4}
}
func (m *RowLevelTTL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RowLevelTTL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RowLevelTTL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowLevelTTL.Merge(m, src)
}
func (m *RowLevelTTL) XXX_Size() int {
	return m.Size()
}
func (m *RowLevelTTL) XXX_DiscardUnknown() {
	xxx_messageInfo_RowLevelTTL.DiscardUnknown(m)
}

var xxx_messageInfo_RowLevelTTL proto.InternalMessageInfo

// AutoStatsSettings represents settings related to automatic statistics
// collection specified at the table level, as indicated in the `WITH` clause
// output of `SHOW CREATE TABLE`.
// Each setting is nullable so queries of the descriptor in JSON form
// only list values which have been set. Protobuf type double is float64 in Go.
type AutoStatsSettings struct {
	// Enabled is table setting sql_stats_automatic_collection_enabled.
	Enabled *bool `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	// MinStaleRows is table setting sql_stats_automatic_collection_min_stale_rows.
	MinStaleRows *int64 `protobuf:"varint,2,opt,name=min_stale_rows,json=minStaleRows" json:"min_stale_rows,omitempty"`
	// FractionStaleRows is table setting sql_stats_automatic_collection_fraction_stale_rows.
	FractionStaleRows *float64 `protobuf:"fixed64,3,opt,name=fraction_stale_rows,json=fractionStaleRows" json:"fraction_stale_rows,omitempty"`
	// PartialEnabled is table setting sql_stats_automatic_partial_collection_enabled.
	PartialEnabled *bool `protobuf:"varint,4,opt,name=partial_enabled,json=partialEnabled" json:"partial_enabled,omitempty"`
	// PartialMinStaleRows is table setting sql_stats_automatic_partial_collection_min_stale_rows.
	PartialMinStaleRows *int64 `protobuf:"varint,5,opt,name=partial_min_stale_rows,json=partialMinStaleRows" json:"partial_min_stale_rows,omitempty"`
	// PartialFractionStaleRows is table setting sql_stats_automatic_partial_collection_fraction_stale_rows.
	PartialFractionStaleRows *float64 `protobuf:"fixed64,6,opt,name=partial_fraction_stale_rows,json=partialFractionStaleRows" json:"partial_fraction_stale_rows,omitempty"`
	// FullEnabled is table setting sql_stats_automatic_full_collection_enabled.
	FullEnabled *bool `protobuf:"varint,7,opt,name=full_enabled,json=fullEnabled" json:"full_enabled,omitempty"`
}

func (m *AutoStatsSettings) Reset()         { *m = AutoStatsSettings{} }
func (m *AutoStatsSettings) String() string { return proto.CompactTextString(m) }
func (*AutoStatsSettings) ProtoMessage()    {}
func (*AutoStatsSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_98c5e4146b266e21, []int{5}
}
func (m *AutoStatsSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutoStatsSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AutoStatsSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoStatsSettings.Merge(m, src)
}
func (m *AutoStatsSettings) XXX_Size() int {
	return m.Size()
}
func (m *AutoStatsSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoStatsSettings.DiscardUnknown(m)
}

var xxx_messageInfo_AutoStatsSettings proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.sql.catalog.catpb.GeneratedAsIdentityType", GeneratedAsIdentityType_name, GeneratedAsIdentityType_value)
	proto.RegisterType((*LocalityConfig)(nil), "cockroach.sql.catalog.catpb.LocalityConfig")
	proto.RegisterType((*LocalityConfig_RegionalByTable)(nil), "cockroach.sql.catalog.catpb.LocalityConfig.RegionalByTable")
	proto.RegisterType((*LocalityConfig_RegionalByRow)(nil), "cockroach.sql.catalog.catpb.LocalityConfig.RegionalByRow")
	proto.RegisterType((*LocalityConfig_Global)(nil), "cockroach.sql.catalog.catpb.LocalityConfig.Global")
	proto.RegisterType((*ShardedDescriptor)(nil), "cockroach.sql.catalog.catpb.ShardedDescriptor")
	proto.RegisterType((*ScheduledRowLevelTTLArgs)(nil), "cockroach.sql.catalog.catpb.ScheduledRowLevelTTLArgs")
	proto.RegisterType((*PartitioningDescriptor)(nil), "cockroach.sql.catalog.catpb.PartitioningDescriptor")
	proto.RegisterType((*PartitioningDescriptor_List)(nil), "cockroach.sql.catalog.catpb.PartitioningDescriptor.List")
	proto.RegisterType((*PartitioningDescriptor_Range)(nil), "cockroach.sql.catalog.catpb.PartitioningDescriptor.Range")
	proto.RegisterType((*RowLevelTTL)(nil), "cockroach.sql.catalog.catpb.RowLevelTTL")
	proto.RegisterType((*AutoStatsSettings)(nil), "cockroach.sql.catalog.catpb.AutoStatsSettings")
}

func init() { proto.RegisterFile("sql/catalog/catpb/catalog.proto", fileDescriptor_98c5e4146b266e21) }

var fileDescriptor_98c5e4146b266e21 = []byte{
	// 1229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x17, 0x15, 0x25, 0xf9, 0xef, 0xea, 0xc7, 0xf6, 0xc4, 0x5f, 0x42, 0x38, 0x1f, 0x64, 0xc7, 0x6d,
	0xda, 0xb4, 0x0b, 0xb9, 0x48, 0x80, 0xb4, 0x6e, 0x50, 0x14, 0x92, 0xa5, 0x24, 0x0a, 0x14, 0x27,
	0x18, 0x29, 0x68, 0xd3, 0x0d, 0x41, 0x91, 0x63, 0x7a, 0x90, 0x21, 0x47, 0xe1, 0x0c, 0x2d, 0x3b,
	0xdb, 0xbe, 0x40, 0x1f, 0xa1, 0x40, 0x81, 0x3e, 0x42, 0xd1, 0x6d, 0x77, 0xe9, 0x2e, 0xcb, 0xac,
	0x8c, 0xd6, 0xd9, 0xf4, 0x19, 0xb2, 0x2a, 0x66, 0x38, 0xb4, 0x68, 0x3b, 0x0d, 0x5a, 0x6f, 0x12,
	0xcd, 0xbd, 0xe7, 0x9e, 0x7b, 0x78, 0xe6, 0x5e, 0xd2, 0xb0, 0x26, 0x9e, 0xb3, 0x4d, 0xcf, 0x95,
	0x2e, 0xe3, 0x81, 0xfa, 0x7f, 0x3c, 0xca, 0x4e, 0xcd, 0x71, 0xcc, 0x25, 0x47, 0x57, 0x3d, 0xee,
	0x3d, 0x8b, 0xb9, 0xeb, 0xed, 0x35, 0xc5, 0x73, 0xd6, 0xcc, 0x92, 0x1a, 0xba, 0xba, 0x12, 0xf0,
	0x80, 0x6b, 0xdc, 0xa6, 0xfa, 0x95, 0x96, 0x6c, 0xfc, 0x5a, 0x82, 0x7a, 0x9f, 0x7b, 0x2e, 0xa3,
	0xf2, 0x70, 0x9b, 0x47, 0xbb, 0x34, 0x40, 0x7d, 0x98, 0x0d, 0x18, 0x1f, 0xb9, 0xcc, 0xb6, 0xd6,
	0xad, 0x1b, 0x95, 0x9b, 0x37, 0x9b, 0xef, 0xa1, 0x6d, 0x9e, 0x2e, 0x6e, 0xde, 0xd3, 0x95, 0xf7,
	0x0b, 0xd8, 0x70, 0x20, 0x0a, 0xcb, 0x31, 0x09, 0x28, 0x8f, 0x5c, 0xe6, 0x8c, 0x0e, 0x1d, 0xe9,
	0x8e, 0x18, 0xb1, 0x8b, 0x9a, 0xf8, 0xce, 0x7f, 0x21, 0xc6, 0x86, 0xa4, 0x7d, 0x38, 0x54, 0x14,
	0xf7, 0x0b, 0x78, 0x31, 0x3e, 0x1d, 0x42, 0x1e, 0x2c, 0xe6, 0x5b, 0xc5, 0x7c, 0x62, 0x97, 0x74,
	0xa3, 0xad, 0x8b, 0x35, 0xc2, 0x7c, 0x72, 0xbf, 0x80, 0x6b, 0x71, 0x3e, 0xb0, 0xfa, 0x35, 0x2c,
	0x9e, 0x91, 0x82, 0x3e, 0x82, 0xd9, 0x14, 0xa3, 0x0d, 0x5b, 0x68, 0xd7, 0xdf, 0x1e, 0xad, 0x41,
	0x0a, 0xda, 0x71, 0x43, 0x82, 0x4d, 0xf6, 0xcb, 0xf2, 0x5f, 0x3f, 0xae, 0x59, 0xab, 0xd7, 0xa1,
	0x76, 0xaa, 0x05, 0xaa, 0x43, 0xd1, 0x15, 0x69, 0x29, 0x2e, 0xba, 0xc2, 0xc0, 0xea, 0x30, 0x9b,
	0x7a, 0x99, 0x9e, 0xd3, 0x7f, 0xdb, 0x00, 0xf3, 0xcc, 0xc8, 0xdd, 0xf8, 0xc5, 0x82, 0xe5, 0xc1,
	0x9e, 0x1b, 0xfb, 0xc4, 0xef, 0x10, 0xe1, 0xc5, 0x74, 0x2c, 0x79, 0x8c, 0x3e, 0x00, 0xa0, 0xc2,
	0x11, 0x69, 0x5c, 0xb3, 0xce, 0xb7, 0xcb, 0x2f, 0x8f, 0xd6, 0x0a, 0x78, 0x81, 0x0a, 0x03, 0x47,
	0x36, 0x94, 0x23, 0x37, 0x4c, 0xef, 0x61, 0xc1, 0xa4, 0x75, 0x04, 0x6d, 0x41, 0x4d, 0xd7, 0x3a,
	0xa3, 0xc4, 0x7b, 0x46, 0xa4, 0xd0, 0x0e, 0xce, 0xb4, 0x57, 0x14, 0xe4, 0xf8, 0x68, 0xad, 0xaa,
	0x19, 0xda, 0x69, 0x0e, 0x57, 0x45, 0xee, 0x84, 0xae, 0x41, 0xd5, 0xe3, 0x2c, 0x09, 0x23, 0x47,
	0x31, 0x09, 0xbb, 0xbc, 0x5e, 0xba, 0xb1, 0x80, 0x2b, 0x69, 0x4c, 0x19, 0x61, 0x1e, 0x6d, 0xe3,
	0x7b, 0x0b, 0xec, 0x81, 0xb7, 0x47, 0xfc, 0x84, 0x11, 0x1f, 0xf3, 0x49, 0x9f, 0xec, 0x13, 0x36,
	0x1c, 0xf6, 0x5b, 0x71, 0x20, 0x50, 0x00, 0xf3, 0x7a, 0x46, 0x1c, 0x9a, 0xaa, 0xaf, 0xb5, 0xfb,
	0xa6, 0xf7, 0x9c, 0x76, 0xbb, 0xd7, 0x79, 0x7b, 0xb4, 0xb6, 0x15, 0x50, 0xb9, 0x97, 0x8c, 0x9a,
	0x1e, 0x0f, 0x37, 0x4f, 0xae, 0xd6, 0x1f, 0x4d, 0x7f, 0x6f, 0x8e, 0x9f, 0x05, 0x9b, 0x6a, 0x5d,
	0x04, 0x09, 0xd5, 0x92, 0x50, 0xbf, 0xa9, 0x3c, 0xea, 0x75, 0xf0, 0x9c, 0x66, 0xef, 0xf9, 0x1b,
	0xbf, 0x95, 0xe1, 0xf2, 0x63, 0x37, 0x96, 0x54, 0x52, 0x1e, 0xd1, 0x28, 0xc8, 0x79, 0x78, 0x1d,
	0x2a, 0x51, 0x12, 0x3a, 0xa9, 0x72, 0x61, 0x64, 0xa4, 0x2e, 0x41, 0x94, 0x84, 0xdb, 0x69, 0x1c,
	0xdd, 0x86, 0x15, 0x05, 0xa3, 0xe1, 0x98, 0x51, 0x8f, 0xca, 0x13, 0x7c, 0x39, 0x87, 0x47, 0x51,
	0x12, 0xf6, 0x0c, 0x20, 0xab, 0xc3, 0x50, 0x66, 0x54, 0x48, 0xbb, 0xb8, 0x5e, 0xba, 0x51, 0xb9,
	0xf9, 0xc5, 0x7b, 0x87, 0xf3, 0xdd, 0x0a, 0x9b, 0x7d, 0x2a, 0x64, 0x76, 0x6f, 0x8a, 0x0b, 0x3d,
	0x81, 0x99, 0xd8, 0x8d, 0x02, 0x62, 0x97, 0x34, 0xe9, 0xd6, 0x45, 0x48, 0xb1, 0x22, 0x30, 0xac,
	0x29, 0xdb, 0xea, 0x4f, 0x16, 0x94, 0x55, 0xaf, 0x93, 0x89, 0xb1, 0xce, 0x4d, 0xcc, 0x65, 0x98,
	0xdd, 0x77, 0x59, 0x42, 0x84, 0x7e, 0x9e, 0x2a, 0x36, 0x27, 0xb5, 0x8d, 0x22, 0x19, 0x8d, 0x73,
	0xad, 0xcc, 0x36, 0xde, 0xba, 0x80, 0x36, 0xd3, 0xf1, 0x2c, 0xa3, 0xd9, 0x95, 0xe7, 0x30, 0xa3,
	0xb5, 0xbf, 0x47, 0xe5, 0x75, 0xa8, 0xef, 0xc6, 0x3c, 0x74, 0x68, 0xe4, 0xb1, 0x44, 0xd0, 0x7d,
	0xa2, 0xc5, 0x54, 0x71, 0x4d, 0x45, 0x7b, 0x59, 0x50, 0xcd, 0xb0, 0xe4, 0x0e, 0x39, 0xc8, 0x40,
	0x45, 0x0d, 0xaa, 0x48, 0xde, 0xcd, 0x42, 0xf9, 0x75, 0xdc, 0xf8, 0x79, 0x06, 0x2a, 0xb9, 0x01,
	0x46, 0x9f, 0x43, 0xcd, 0x4f, 0x62, 0x57, 0xa9, 0x73, 0xc8, 0xc1, 0x38, 0x36, 0x42, 0x90, 0x12,
	0xa2, 0x5e, 0x0a, 0xdd, 0x83, 0x71, 0x4c, 0x84, 0xa0, 0x3c, 0xc2, 0xd5, 0x0c, 0xa8, 0x62, 0xe8,
	0x33, 0x58, 0x16, 0x84, 0x11, 0x4f, 0x3a, 0x23, 0x57, 0x7a, 0x7b, 0x8e, 0xa0, 0x2f, 0xd2, 0xe6,
	0xa5, 0x93, 0x27, 0xd7, 0xe9, 0xb6, 0xca, 0x0e, 0xe8, 0x0b, 0xa2, 0x2a, 0x7c, 0xc2, 0x88, 0x24,
	0xf9, 0x8a, 0x52, 0xbe, 0x22, 0x4d, 0x4f, 0x2b, 0x3e, 0x81, 0x9a, 0x0e, 0x29, 0x71, 0x5e, 0xcc,
	0x23, 0x3d, 0xa7, 0x99, 0x4b, 0xd5, 0x2c, 0xb5, 0x1d, 0xf3, 0x08, 0xb5, 0xa0, 0x22, 0xcc, 0x82,
	0xaa, 0x3d, 0x9c, 0xd1, 0xb4, 0xeb, 0x66, 0x0f, 0x21, 0xdb, 0x5d, 0xbd, 0x8a, 0xb9, 0x13, 0x86,
	0xac, 0xa8, 0xe7, 0xe7, 0xf4, 0xc5, 0xae, 0x24, 0x0e, 0xa3, 0x21, 0x95, 0xf6, 0xdc, 0x79, 0x7d,
	0xd8, 0x95, 0xa4, 0xaf, 0x92, 0x68, 0x15, 0x66, 0xc6, 0x6e, 0x22, 0x88, 0x3d, 0x9f, 0x7b, 0x69,
	0xa5, 0x21, 0xd4, 0x87, 0x2b, 0x31, 0x9f, 0x38, 0x42, 0xba, 0x52, 0x38, 0x63, 0xce, 0x98, 0x43,
	0x23, 0x49, 0xe2, 0x7d, 0x97, 0xd9, 0x0b, 0x9a, 0xf3, 0x7f, 0xc6, 0xe2, 0x9a, 0xa4, 0x21, 0x69,
	0x76, 0x8c, 0xb7, 0x78, 0x25, 0xe6, 0x93, 0x81, 0x2a, 0x7a, 0xcc, 0x19, 0xeb, 0x99, 0x12, 0xe5,
	0x04, 0x73, 0x47, 0x84, 0x39, 0x21, 0x91, 0x31, 0xf5, 0x84, 0x0d, 0xb9, 0x8e, 0x55, 0x9d, 0x7a,
	0x98, 0x66, 0xd0, 0x1d, 0x58, 0x24, 0x07, 0x63, 0x9a, 0xbf, 0xd3, 0xca, 0x3f, 0xde, 0x69, 0x7d,
	0x0a, 0x3d, 0x73, 0xab, 0x39, 0x0f, 0xaa, 0xe7, 0x6f, 0x75, 0xea, 0xc1, 0x03, 0x68, 0xf8, 0x54,
	0xe8, 0xf7, 0x9f, 0xb7, 0xa7, 0x46, 0x7a, 0x97, 0x10, 0xdf, 0x89, 0x89, 0x7a, 0x81, 0x68, 0x5e,
	0xbb, 0x96, 0x93, 0xfa, 0x7f, 0x83, 0xdd, 0x3e, 0x81, 0xe2, 0x29, 0x32, 0x1d, 0xd1, 0x07, 0xe5,
	0xf9, 0xd9, 0xa5, 0xb9, 0x8d, 0xdf, 0x8b, 0xb0, 0xdc, 0x4a, 0x24, 0xd7, 0x5e, 0x0c, 0x88, 0x94,
	0x34, 0x0a, 0x04, 0xb2, 0x61, 0x8e, 0x44, 0x8a, 0xc0, 0x7c, 0x28, 0x70, 0x76, 0x44, 0x1f, 0x42,
	0x3d, 0xa4, 0x91, 0xf2, 0x9b, 0x11, 0xf5, 0x21, 0x15, 0xe9, 0x30, 0xe2, 0x6a, 0x48, 0xa3, 0x81,
	0x0a, 0x62, 0x3e, 0x11, 0xa8, 0x09, 0x97, 0x76, 0x63, 0xd7, 0xd3, 0xd6, 0xe4, 0xa0, 0x6a, 0x0a,
	0x2d, 0xbc, 0x9c, 0xa5, 0xa6, 0xf8, 0x8f, 0x61, 0x51, 0x6f, 0xaf, 0xcb, 0x9c, 0xac, 0x6f, 0x59,
	0xf7, 0xad, 0x9b, 0x70, 0xd7, 0xb4, 0xbf, 0x05, 0x97, 0x33, 0xe0, 0x19, 0x19, 0x7a, 0x14, 0xf1,
	0x25, 0x93, 0x7d, 0x98, 0x57, 0xf3, 0x15, 0x5c, 0xcd, 0x8a, 0xde, 0xa5, 0x6a, 0x56, 0xab, 0xb2,
	0x0d, 0xe4, 0xee, 0x39, 0x71, 0xd7, 0xa0, 0xba, 0x9b, 0xb0, 0xa9, 0xb2, 0x39, 0xad, 0xac, 0xa2,
	0x62, 0x46, 0x56, 0xea, 0xe8, 0xa7, 0x23, 0xb8, 0x72, 0x8f, 0x44, 0x44, 0x5d, 0xa9, 0xdf, 0x12,
	0x3d, 0x9f, 0x44, 0x92, 0xca, 0xc3, 0xe1, 0xe1, 0x98, 0xa0, 0x2b, 0x70, 0x69, 0xe7, 0xd1, 0xd0,
	0xe9, 0x75, 0xba, 0x3b, 0xc3, 0xde, 0xf0, 0xa9, 0xb3, 0xfd, 0xa8, 0xff, 0xe4, 0xe1, 0xce, 0x52,
	0x01, 0xad, 0xc0, 0xd2, 0xbd, 0xee, 0x4e, 0x17, 0xb7, 0x86, 0xdd, 0x8e, 0xd3, 0xea, 0x7f, 0xd3,
	0x7a, 0x3a, 0x58, 0xb2, 0x90, 0x0d, 0x2b, 0xd3, 0x68, 0xfb, 0xa9, 0xd3, 0xe9, 0xde, 0x6d, 0x3d,
	0xe9, 0x0f, 0x97, 0x8a, 0xed, 0x6f, 0x5f, 0xfe, 0xd9, 0x28, 0xbc, 0x3c, 0x6e, 0x58, 0xaf, 0x8e,
	0x1b, 0xd6, 0xeb, 0xe3, 0x86, 0xf5, 0xc7, 0x71, 0xc3, 0xfa, 0xe1, 0x4d, 0xa3, 0xf0, 0xea, 0x4d,
	0xa3, 0xf0, 0xfa, 0x4d, 0xa3, 0xf0, 0xdd, 0xed, 0x7f, 0xfd, 0x09, 0x3c, 0xf5, 0x17, 0xe3, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x1a, 0x8b, 0x74, 0x45, 0x0a, 0x00, 0x00,
}

func (this *LocalityConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalityConfig)
	if !ok {
		that2, ok := that.(LocalityConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Locality == nil {
		if this.Locality != nil {
			return false
		}
	} else if this.Locality == nil {
		return false
	} else if !this.Locality.Equal(that1.Locality) {
		return false
	}
	return true
}
func (this *LocalityConfig_Global_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalityConfig_Global_)
	if !ok {
		that2, ok := that.(LocalityConfig_Global_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Global.Equal(that1.Global) {
		return false
	}
	return true
}
func (this *LocalityConfig_RegionalByTable_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalityConfig_RegionalByTable_)
	if !ok {
		that2, ok := that.(LocalityConfig_RegionalByTable_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RegionalByTable.Equal(that1.RegionalByTable) {
		return false
	}
	return true
}
func (this *LocalityConfig_RegionalByRow_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalityConfig_RegionalByRow_)
	if !ok {
		that2, ok := that.(LocalityConfig_RegionalByRow_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RegionalByRow.Equal(that1.RegionalByRow) {
		return false
	}
	return true
}
func (this *LocalityConfig_RegionalByTable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalityConfig_RegionalByTable)
	if !ok {
		that2, ok := that.(LocalityConfig_RegionalByTable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Region != nil && that1.Region != nil {
		if *this.Region != *that1.Region {
			return false
		}
	} else if this.Region != nil {
		return false
	} else if that1.Region != nil {
		return false
	}
	return true
}
func (this *LocalityConfig_RegionalByRow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalityConfig_RegionalByRow)
	if !ok {
		that2, ok := that.(LocalityConfig_RegionalByRow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.As != nil && that1.As != nil {
		if *this.As != *that1.As {
			return false
		}
	} else if this.As != nil {
		return false
	} else if that1.As != nil {
		return false
	}
	return true
}
func (this *LocalityConfig_Global) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalityConfig_Global)
	if !ok {
		that2, ok := that.(LocalityConfig_Global)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ShardedDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShardedDescriptor)
	if !ok {
		that2, ok := that.(ShardedDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsSharded != that1.IsSharded {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ShardBuckets != that1.ShardBuckets {
		return false
	}
	if len(this.ColumnNames) != len(that1.ColumnNames) {
		return false
	}
	for i := range this.ColumnNames {
		if this.ColumnNames[i] != that1.ColumnNames[i] {
			return false
		}
	}
	return true
}
func (this *PartitioningDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PartitioningDescriptor)
	if !ok {
		that2, ok := that.(PartitioningDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NumColumns != that1.NumColumns {
		return false
	}
	if this.NumImplicitColumns != that1.NumImplicitColumns {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(&that1.List[i]) {
			return false
		}
	}
	if len(this.Range) != len(that1.Range) {
		return false
	}
	for i := range this.Range {
		if !this.Range[i].Equal(&that1.Range[i]) {
			return false
		}
	}
	return true
}
func (this *PartitioningDescriptor_List) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PartitioningDescriptor_List)
	if !ok {
		that2, ok := that.(PartitioningDescriptor_List)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !bytes.Equal(this.Values[i], that1.Values[i]) {
			return false
		}
	}
	if !this.Subpartitioning.Equal(&that1.Subpartitioning) {
		return false
	}
	return true
}
func (this *PartitioningDescriptor_Range) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PartitioningDescriptor_Range)
	if !ok {
		that2, ok := that.(PartitioningDescriptor_Range)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !bytes.Equal(this.FromInclusive, that1.FromInclusive) {
		return false
	}
	if !bytes.Equal(this.ToExclusive, that1.ToExclusive) {
		return false
	}
	return true
}
func (this *RowLevelTTL) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RowLevelTTL)
	if !ok {
		that2, ok := that.(RowLevelTTL)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DurationExpr != that1.DurationExpr {
		return false
	}
	if this.SelectBatchSize != that1.SelectBatchSize {
		return false
	}
	if this.DeleteBatchSize != that1.DeleteBatchSize {
		return false
	}
	if this.DeletionCron != that1.DeletionCron {
		return false
	}
	if this.ScheduleID != that1.ScheduleID {
		return false
	}
	if this.DeleteRateLimit != that1.DeleteRateLimit {
		return false
	}
	if this.Pause != that1.Pause {
		return false
	}
	if this.RowStatsPollInterval != that1.RowStatsPollInterval {
		return false
	}
	if this.LabelMetrics != that1.LabelMetrics {
		return false
	}
	if this.ExpirationExpr != that1.ExpirationExpr {
		return false
	}
	if this.SelectRateLimit != that1.SelectRateLimit {
		return false
	}
	if this.DisableChangefeedReplication != that1.DisableChangefeedReplication {
		return false
	}
	return true
}
func (this *AutoStatsSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AutoStatsSettings)
	if !ok {
		that2, ok := that.(AutoStatsSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Enabled != nil && that1.Enabled != nil {
		if *this.Enabled != *that1.Enabled {
			return false
		}
	} else if this.Enabled != nil {
		return false
	} else if that1.Enabled != nil {
		return false
	}
	if this.MinStaleRows != nil && that1.MinStaleRows != nil {
		if *this.MinStaleRows != *that1.MinStaleRows {
			return false
		}
	} else if this.MinStaleRows != nil {
		return false
	} else if that1.MinStaleRows != nil {
		return false
	}
	if this.FractionStaleRows != nil && that1.FractionStaleRows != nil {
		if *this.FractionStaleRows != *that1.FractionStaleRows {
			return false
		}
	} else if this.FractionStaleRows != nil {
		return false
	} else if that1.FractionStaleRows != nil {
		return false
	}
	if this.PartialEnabled != nil && that1.PartialEnabled != nil {
		if *this.PartialEnabled != *that1.PartialEnabled {
			return false
		}
	} else if this.PartialEnabled != nil {
		return false
	} else if that1.PartialEnabled != nil {
		return false
	}
	if this.PartialMinStaleRows != nil && that1.PartialMinStaleRows != nil {
		if *this.PartialMinStaleRows != *that1.PartialMinStaleRows {
			return false
		}
	} else if this.PartialMinStaleRows != nil {
		return false
	} else if that1.PartialMinStaleRows != nil {
		return false
	}
	if this.PartialFractionStaleRows != nil && that1.PartialFractionStaleRows != nil {
		if *this.PartialFractionStaleRows != *that1.PartialFractionStaleRows {
			return false
		}
	} else if this.PartialFractionStaleRows != nil {
		return false
	} else if that1.PartialFractionStaleRows != nil {
		return false
	}
	if this.FullEnabled != nil && that1.FullEnabled != nil {
		if *this.FullEnabled != *that1.FullEnabled {
			return false
		}
	} else if this.FullEnabled != nil {
		return false
	} else if that1.FullEnabled != nil {
		return false
	}
	return true
}
func (m *LocalityConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalityConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalityConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Locality != nil {
		{
			size := m.Locality.Size()
			i -= size
			if _, err := m.Locality.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *LocalityConfig_Global_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalityConfig_Global_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Global != nil {
		{
			size, err := m.Global.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCatalog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *LocalityConfig_RegionalByTable_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalityConfig_RegionalByTable_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegionalByTable != nil {
		{
			size, err := m.RegionalByTable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCatalog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *LocalityConfig_RegionalByRow_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalityConfig_RegionalByRow_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegionalByRow != nil {
		{
			size, err := m.RegionalByRow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCatalog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *LocalityConfig_RegionalByTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalityConfig_RegionalByTable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalityConfig_RegionalByTable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Region != nil {
		i -= len(*m.Region)
		copy(dAtA[i:], *m.Region)
		i = encodeVarintCatalog(dAtA, i, uint64(len(*m.Region)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LocalityConfig_RegionalByRow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalityConfig_RegionalByRow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalityConfig_RegionalByRow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.As != nil {
		i -= len(*m.As)
		copy(dAtA[i:], *m.As)
		i = encodeVarintCatalog(dAtA, i, uint64(len(*m.As)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LocalityConfig_Global) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalityConfig_Global) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalityConfig_Global) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ShardedDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardedDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardedDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ColumnNames) > 0 {
		for iNdEx := len(m.ColumnNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ColumnNames[iNdEx])
			copy(dAtA[i:], m.ColumnNames[iNdEx])
			i = encodeVarintCatalog(dAtA, i, uint64(len(m.ColumnNames[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	i = encodeVarintCatalog(dAtA, i, uint64(m.ShardBuckets))
	i--
	dAtA[i] = 0x18
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintCatalog(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i--
	if m.IsSharded {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ScheduledRowLevelTTLArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduledRowLevelTTLArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduledRowLevelTTLArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCatalog(dAtA, i, uint64(m.TableID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PartitioningDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitioningDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitioningDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCatalog(dAtA, i, uint64(m.NumImplicitColumns))
	i--
	dAtA[i] = 0x20
	if len(m.Range) > 0 {
		for iNdEx := len(m.Range) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Range[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCatalog(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCatalog(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintCatalog(dAtA, i, uint64(m.NumColumns))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PartitioningDescriptor_List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitioningDescriptor_List) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitioningDescriptor_List) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Subpartitioning.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCatalog(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintCatalog(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintCatalog(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PartitioningDescriptor_Range) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitioningDescriptor_Range) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitioningDescriptor_Range) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromInclusive != nil {
		i -= len(m.FromInclusive)
		copy(dAtA[i:], m.FromInclusive)
		i = encodeVarintCatalog(dAtA, i, uint64(len(m.FromInclusive)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ToExclusive != nil {
		i -= len(m.ToExclusive)
		copy(dAtA[i:], m.ToExclusive)
		i = encodeVarintCatalog(dAtA, i, uint64(len(m.ToExclusive)))
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintCatalog(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RowLevelTTL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowLevelTTL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RowLevelTTL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.DisableChangefeedReplication {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x68
	i = encodeVarintCatalog(dAtA, i, uint64(m.SelectRateLimit))
	i--
	dAtA[i] = 0x60
	i -= len(m.ExpirationExpr)
	copy(dAtA[i:], m.ExpirationExpr)
	i = encodeVarintCatalog(dAtA, i, uint64(len(m.ExpirationExpr)))
	i--
	dAtA[i] = 0x5a
	i--
	if m.LabelMetrics {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x50
	i = encodeVarintCatalog(dAtA, i, uint64(m.RowStatsPollInterval))
	i--
	dAtA[i] = 0x48
	i--
	if m.Pause {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x40
	i = encodeVarintCatalog(dAtA, i, uint64(m.DeleteRateLimit))
	i--
	dAtA[i] = 0x38
	i = encodeVarintCatalog(dAtA, i, uint64(m.ScheduleID))
	i--
	dAtA[i] = 0x28
	i -= len(m.DeletionCron)
	copy(dAtA[i:], m.DeletionCron)
	i = encodeVarintCatalog(dAtA, i, uint64(len(m.DeletionCron)))
	i--
	dAtA[i] = 0x22
	i = encodeVarintCatalog(dAtA, i, uint64(m.DeleteBatchSize))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCatalog(dAtA, i, uint64(m.SelectBatchSize))
	i--
	dAtA[i] = 0x10
	i -= len(m.DurationExpr)
	copy(dAtA[i:], m.DurationExpr)
	i = encodeVarintCatalog(dAtA, i, uint64(len(m.DurationExpr)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AutoStatsSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoStatsSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutoStatsSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FullEnabled != nil {
		i--
		if *m.FullEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.PartialFractionStaleRows != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.PartialFractionStaleRows))))
		i--
		dAtA[i] = 0x31
	}
	if m.PartialMinStaleRows != nil {
		i = encodeVarintCatalog(dAtA, i, uint64(*m.PartialMinStaleRows))
		i--
		dAtA[i] = 0x28
	}
	if m.PartialEnabled != nil {
		i--
		if *m.PartialEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.FractionStaleRows != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.FractionStaleRows))))
		i--
		dAtA[i] = 0x19
	}
	if m.MinStaleRows != nil {
		i = encodeVarintCatalog(dAtA, i, uint64(*m.MinStaleRows))
		i--
		dAtA[i] = 0x10
	}
	if m.Enabled != nil {
		i--
		if *m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCatalog(dAtA []byte, offset int, v uint64) int {
	offset -= sovCatalog(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LocalityConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Locality != nil {
		n += m.Locality.Size()
	}
	return n
}

func (m *LocalityConfig_Global_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Global != nil {
		l = m.Global.Size()
		n += 1 + l + sovCatalog(uint64(l))
	}
	return n
}
func (m *LocalityConfig_RegionalByTable_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegionalByTable != nil {
		l = m.RegionalByTable.Size()
		n += 1 + l + sovCatalog(uint64(l))
	}
	return n
}
func (m *LocalityConfig_RegionalByRow_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegionalByRow != nil {
		l = m.RegionalByRow.Size()
		n += 1 + l + sovCatalog(uint64(l))
	}
	return n
}
func (m *LocalityConfig_RegionalByTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Region != nil {
		l = len(*m.Region)
		n += 1 + l + sovCatalog(uint64(l))
	}
	return n
}

func (m *LocalityConfig_RegionalByRow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.As != nil {
		l = len(*m.As)
		n += 1 + l + sovCatalog(uint64(l))
	}
	return n
}

func (m *LocalityConfig_Global) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ShardedDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Name)
	n += 1 + l + sovCatalog(uint64(l))
	n += 1 + sovCatalog(uint64(m.ShardBuckets))
	if len(m.ColumnNames) > 0 {
		for _, s := range m.ColumnNames {
			l = len(s)
			n += 1 + l + sovCatalog(uint64(l))
		}
	}
	return n
}

func (m *ScheduledRowLevelTTLArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCatalog(uint64(m.TableID))
	return n
}

func (m *PartitioningDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCatalog(uint64(m.NumColumns))
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovCatalog(uint64(l))
		}
	}
	if len(m.Range) > 0 {
		for _, e := range m.Range {
			l = e.Size()
			n += 1 + l + sovCatalog(uint64(l))
		}
	}
	n += 1 + sovCatalog(uint64(m.NumImplicitColumns))
	return n
}

func (m *PartitioningDescriptor_List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovCatalog(uint64(l))
	if len(m.Values) > 0 {
		for _, b := range m.Values {
			l = len(b)
			n += 1 + l + sovCatalog(uint64(l))
		}
	}
	l = m.Subpartitioning.Size()
	n += 1 + l + sovCatalog(uint64(l))
	return n
}

func (m *PartitioningDescriptor_Range) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovCatalog(uint64(l))
	if m.ToExclusive != nil {
		l = len(m.ToExclusive)
		n += 1 + l + sovCatalog(uint64(l))
	}
	if m.FromInclusive != nil {
		l = len(m.FromInclusive)
		n += 1 + l + sovCatalog(uint64(l))
	}
	return n
}

func (m *RowLevelTTL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DurationExpr)
	n += 1 + l + sovCatalog(uint64(l))
	n += 1 + sovCatalog(uint64(m.SelectBatchSize))
	n += 1 + sovCatalog(uint64(m.DeleteBatchSize))
	l = len(m.DeletionCron)
	n += 1 + l + sovCatalog(uint64(l))
	n += 1 + sovCatalog(uint64(m.ScheduleID))
	n += 1 + sovCatalog(uint64(m.DeleteRateLimit))
	n += 2
	n += 1 + sovCatalog(uint64(m.RowStatsPollInterval))
	n += 2
	l = len(m.ExpirationExpr)
	n += 1 + l + sovCatalog(uint64(l))
	n += 1 + sovCatalog(uint64(m.SelectRateLimit))
	n += 2
	return n
}

func (m *AutoStatsSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		n += 2
	}
	if m.MinStaleRows != nil {
		n += 1 + sovCatalog(uint64(*m.MinStaleRows))
	}
	if m.FractionStaleRows != nil {
		n += 9
	}
	if m.PartialEnabled != nil {
		n += 2
	}
	if m.PartialMinStaleRows != nil {
		n += 1 + sovCatalog(uint64(*m.PartialMinStaleRows))
	}
	if m.PartialFractionStaleRows != nil {
		n += 9
	}
	if m.FullEnabled != nil {
		n += 2
	}
	return n
}

func sovCatalog(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozCatalog(x uint64) (n int) {
	return sovCatalog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LocalityConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalityConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalityConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Global", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value LocalityConfig_Global_
				field LocalityConfig_Global
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Global = &alloc.field
			m.Locality = &alloc.value
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionalByTable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value LocalityConfig_RegionalByTable_
				field LocalityConfig_RegionalByTable
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.RegionalByTable = &alloc.field
			m.Locality = &alloc.value
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionalByRow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value LocalityConfig_RegionalByRow_
				field LocalityConfig_RegionalByRow
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.RegionalByRow = &alloc.field
			m.Locality = &alloc.value
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalityConfig_RegionalByTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionalByTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionalByTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := RegionName(dAtA[iNdEx:postIndex])
			m.Region = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalityConfig_RegionalByRow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionalByRow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionalByRow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field As", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.As = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalityConfig_Global) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Global: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Global: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardedDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardedDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardedDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSharded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSharded = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardBuckets", wireType)
			}
			m.ShardBuckets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardBuckets |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnNames = append(m.ColumnNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduledRowLevelTTLArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledRowLevelTTLArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledRowLevelTTLArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_sem_catid.DescID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitioningDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitioningDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitioningDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumColumns", wireType)
			}
			m.NumColumns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumColumns |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, PartitioningDescriptor_List{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Range = append(m.Range, PartitioningDescriptor_Range{})
			if err := m.Range[len(m.Range)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumImplicitColumns", wireType)
			}
			m.NumImplicitColumns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumImplicitColumns |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitioningDescriptor_List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, make([]byte, postIndex-iNdEx))
			copy(m.Values[len(m.Values)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subpartitioning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Subpartitioning.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitioningDescriptor_Range) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Range: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Range: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToExclusive", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToExclusive = append(m.ToExclusive[:0], dAtA[iNdEx:postIndex]...)
			if m.ToExclusive == nil {
				m.ToExclusive = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromInclusive", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromInclusive = append(m.FromInclusive[:0], dAtA[iNdEx:postIndex]...)
			if m.FromInclusive == nil {
				m.FromInclusive = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowLevelTTL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowLevelTTL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowLevelTTL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DurationExpr = Expression(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectBatchSize", wireType)
			}
			m.SelectBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelectBatchSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteBatchSize", wireType)
			}
			m.DeleteBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteBatchSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletionCron", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletionCron = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleID", wireType)
			}
			m.ScheduleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleID |= ScheduleID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteRateLimit", wireType)
			}
			m.DeleteRateLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteRateLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pause", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pause = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowStatsPollInterval", wireType)
			}
			m.RowStatsPollInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowStatsPollInterval |= time.Duration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelMetrics", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LabelMetrics = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpirationExpr = Expression(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectRateLimit", wireType)
			}
			m.SelectRateLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelectRateLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableChangefeedReplication", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableChangefeedReplication = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoStatsSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoStatsSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoStatsSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Enabled = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStaleRows", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinStaleRows = &v
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FractionStaleRows", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.FractionStaleRows = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.PartialEnabled = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialMinStaleRows", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PartialMinStaleRows = &v
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialFractionStaleRows", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.PartialFractionStaleRows = &v2
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FullEnabled = &b
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCatalog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCatalog
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCatalog
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCatalog
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCatalog        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCatalog          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCatalog = fmt.Errorf("proto: unexpected end of group")
)

