// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/catalog/catpb/privilege.proto

package catpb

import (
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_security_username "github.com/cockroachdb/cockroach/pkg/security/username"
	github_com_cockroachdb_cockroach_pkg_sql_privilege "github.com/cockroachdb/cockroach/pkg/sql/privilege"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType int32

const (
	DefaultPrivilegeDescriptor_DATABASE DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType = 0
	DefaultPrivilegeDescriptor_SCHEMA   DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType = 1
)

var DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType_name = map[int32]string{
	0: "DATABASE",
	1: "SCHEMA",
}

var DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType_value = map[string]int32{
	"DATABASE": 0,
	"SCHEMA":   1,
}

func (x DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType) Enum() *DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType {
	p := new(DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType)
	*p = x
	return p
}

func (x DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType) String() string {
	return proto.EnumName(DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType_name, int32(x))
}

func (x *DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType_value, data, "DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType")
	if err != nil {
		return err
	}
	*x = DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType(value)
	return nil
}

func (DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_38674e6995c4b96a, []int{3, 0}
}

// UserPrivileges describes the list of privileges available for a given user.
type UserPrivileges struct {
	UserProto github_com_cockroachdb_cockroach_pkg_security_username.SQLUsernameProto `protobuf:"bytes,1,opt,name=user_proto,json=userProto,casttype=github.com/cockroachdb/cockroach/pkg/security/username.SQLUsernameProto" json:"user_proto"`
	// Privileges is a bitfield of 1<<Privilege values.
	Privileges uint64 `protobuf:"varint,2,opt,name=privileges" json:"privileges"`
	// WithGrantOption is a bitfield where each bit corresponds to a bit in
	// Privileges. If the corresponding bit in Privileges is 0, then the
	// WithGrantOption bit is zero. If the corresponding bit in Privileges is 1,
	// then the WithGrantOption bit is either 1, indicating that the privilege can
	// be granted to other users, or 0, indicating that the privilege cannot be
	// granted to other users.
	WithGrantOption uint64 `protobuf:"varint,3,opt,name=with_grant_option,json=withGrantOption" json:"with_grant_option"`
}

func (m *UserPrivileges) Reset()         { *m = UserPrivileges{} }
func (m *UserPrivileges) String() string { return proto.CompactTextString(m) }
func (*UserPrivileges) ProtoMessage()    {}
func (*UserPrivileges) Descriptor() ([]byte, []int) {
	return fileDescriptor_38674e6995c4b96a, []int{0}
}
func (m *UserPrivileges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPrivileges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UserPrivileges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPrivileges.Merge(m, src)
}
func (m *UserPrivileges) XXX_Size() int {
	return m.Size()
}
func (m *UserPrivileges) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPrivileges.DiscardUnknown(m)
}

var xxx_messageInfo_UserPrivileges proto.InternalMessageInfo

// PrivilegeDescriptor describes a list of users and attached
// privileges. The list should be sorted by user for fast access.
type PrivilegeDescriptor struct {
	Users      []UserPrivileges                                                        `protobuf:"bytes,1,rep,name=users" json:"users"`
	OwnerProto github_com_cockroachdb_cockroach_pkg_security_username.SQLUsernameProto `protobuf:"bytes,2,opt,name=owner_proto,json=ownerProto,casttype=github.com/cockroachdb/cockroach/pkg/security/username.SQLUsernameProto" json:"owner_proto"`
	Version    PrivilegeDescVersion                                                    `protobuf:"varint,3,opt,name=version,casttype=PrivilegeDescVersion" json:"version"`
}

func (m *PrivilegeDescriptor) Reset()         { *m = PrivilegeDescriptor{} }
func (m *PrivilegeDescriptor) String() string { return proto.CompactTextString(m) }
func (*PrivilegeDescriptor) ProtoMessage()    {}
func (*PrivilegeDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_38674e6995c4b96a, []int{1}
}
func (m *PrivilegeDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivilegeDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PrivilegeDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivilegeDescriptor.Merge(m, src)
}
func (m *PrivilegeDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *PrivilegeDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivilegeDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_PrivilegeDescriptor proto.InternalMessageInfo

// DefaultPrivilegesForRole contains the default privileges for a role.
// DefaultPrivileges are the set of privileges that an object created by a user
// should have at creation time.
// DefaultPrivilegesForRole is further broken down depending on the object type.
// The object types (TargetObjectType) are:
//
//	1: Tables
//	2: Sequences
//	3: Types
//	4: Schemas
//
// DefaultPrivilegesPerObject are keyed on AlterDefaultPrivilegesTargetObject
// and it's value is a PrivilegeDescriptor that is only used for
// the list of UserPrivileges for that object.
type DefaultPrivilegesForRole struct {
	// Types that are valid to be assigned to Role:
	//	*DefaultPrivilegesForRole_ExplicitRole_
	//	*DefaultPrivilegesForRole_ForAllRoles
	Role                       isDefaultPrivilegesForRole_Role                                                             `protobuf_oneof:"role"`
	DefaultPrivilegesPerObject map[github_com_cockroachdb_cockroach_pkg_sql_privilege.TargetObjectType]PrivilegeDescriptor `protobuf:"bytes,14,rep,name=default_privileges_per_object,json=defaultPrivilegesPerObject,castkey=github.com/cockroachdb/cockroach/pkg/sql/privilege.TargetObjectType" json:"default_privileges_per_object" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DefaultPrivilegesForRole) Reset()         { *m = DefaultPrivilegesForRole{} }
func (m *DefaultPrivilegesForRole) String() string { return proto.CompactTextString(m) }
func (*DefaultPrivilegesForRole) ProtoMessage()    {}
func (*DefaultPrivilegesForRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_38674e6995c4b96a, []int{2}
}
func (m *DefaultPrivilegesForRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultPrivilegesForRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DefaultPrivilegesForRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultPrivilegesForRole.Merge(m, src)
}
func (m *DefaultPrivilegesForRole) XXX_Size() int {
	return m.Size()
}
func (m *DefaultPrivilegesForRole) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultPrivilegesForRole.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultPrivilegesForRole proto.InternalMessageInfo

type isDefaultPrivilegesForRole_Role interface {
	isDefaultPrivilegesForRole_Role()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DefaultPrivilegesForRole_ExplicitRole_ struct {
	ExplicitRole *DefaultPrivilegesForRole_ExplicitRole `protobuf:"bytes,12,opt,name=explicit_role,json=explicitRole,oneof" json:"explicit_role,omitempty"`
}
type DefaultPrivilegesForRole_ForAllRoles struct {
	ForAllRoles *DefaultPrivilegesForRole_ForAllRolesPseudoRole `protobuf:"bytes,13,opt,name=for_all_roles,json=forAllRoles,oneof" json:"for_all_roles,omitempty"`
}

func (*DefaultPrivilegesForRole_ExplicitRole_) isDefaultPrivilegesForRole_Role() {}
func (*DefaultPrivilegesForRole_ForAllRoles) isDefaultPrivilegesForRole_Role()   {}

func (m *DefaultPrivilegesForRole) GetRole() isDefaultPrivilegesForRole_Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *DefaultPrivilegesForRole) GetExplicitRole() *DefaultPrivilegesForRole_ExplicitRole {
	if x, ok := m.GetRole().(*DefaultPrivilegesForRole_ExplicitRole_); ok {
		return x.ExplicitRole
	}
	return nil
}

func (m *DefaultPrivilegesForRole) GetForAllRoles() *DefaultPrivilegesForRole_ForAllRolesPseudoRole {
	if x, ok := m.GetRole().(*DefaultPrivilegesForRole_ForAllRoles); ok {
		return x.ForAllRoles
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DefaultPrivilegesForRole) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DefaultPrivilegesForRole_ExplicitRole_)(nil),
		(*DefaultPrivilegesForRole_ForAllRoles)(nil),
	}
}

// ExplicitRole represents when default privileges are defined for an
// explicit role.
type DefaultPrivilegesForRole_ExplicitRole struct {
	UserProto github_com_cockroachdb_cockroach_pkg_security_username.SQLUsernameProto `protobuf:"bytes,1,opt,name=user_proto,json=userProto,casttype=github.com/cockroachdb/cockroach/pkg/security/username.SQLUsernameProto" json:"user_proto"`
	// These are special cases in Postgres. Public has USAGE on types and
	// the creator role has ALL privileges by default.
	// Under the default cases where all these bools are true, the role can be
	// dropped, however for example alter default privileges revoke SELECT on tables
	// for the role causes it to "own" default privileges as it is no longer
	// the "default" case and the role cannot be dropped until the default case
	// is met.
	// Note: if adding any public_has_* fields in the future, be sure to update
	// checking of these default privileges in addDependentPrivileges.
	PublicHasUsageOnTypes           bool `protobuf:"varint,4,opt,name=public_has_usage_on_types,json=publicHasUsageOnTypes" json:"public_has_usage_on_types"`
	RoleHasAllPrivilegesOnTables    bool `protobuf:"varint,5,opt,name=role_has_all_privileges_on_tables,json=roleHasAllPrivilegesOnTables" json:"role_has_all_privileges_on_tables"`
	RoleHasAllPrivilegesOnSequences bool `protobuf:"varint,6,opt,name=role_has_all_privileges_on_sequences,json=roleHasAllPrivilegesOnSequences" json:"role_has_all_privileges_on_sequences"`
	RoleHasAllPrivilegesOnSchemas   bool `protobuf:"varint,7,opt,name=role_has_all_privileges_on_schemas,json=roleHasAllPrivilegesOnSchemas" json:"role_has_all_privileges_on_schemas"`
	RoleHasAllPrivilegesOnTypes     bool `protobuf:"varint,8,opt,name=role_has_all_privileges_on_types,json=roleHasAllPrivilegesOnTypes" json:"role_has_all_privileges_on_types"`
	RoleHasAllPrivilegesOnFunctions bool `protobuf:"varint,9,opt,name=role_has_all_privileges_on_functions,json=roleHasAllPrivilegesOnFunctions" json:"role_has_all_privileges_on_functions"`
	PublicHasExecuteOnFunctions     bool `protobuf:"varint,10,opt,name=public_has_execute_on_functions,json=publicHasExecuteOnFunctions" json:"public_has_execute_on_functions"`
}

func (m *DefaultPrivilegesForRole_ExplicitRole) Reset()         { *m = DefaultPrivilegesForRole_ExplicitRole{} }
func (m *DefaultPrivilegesForRole_ExplicitRole) String() string { return proto.CompactTextString(m) }
func (*DefaultPrivilegesForRole_ExplicitRole) ProtoMessage()    {}
func (*DefaultPrivilegesForRole_ExplicitRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_38674e6995c4b96a, []int{2, 0}
}
func (m *DefaultPrivilegesForRole_ExplicitRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultPrivilegesForRole_ExplicitRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DefaultPrivilegesForRole_ExplicitRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultPrivilegesForRole_ExplicitRole.Merge(m, src)
}
func (m *DefaultPrivilegesForRole_ExplicitRole) XXX_Size() int {
	return m.Size()
}
func (m *DefaultPrivilegesForRole_ExplicitRole) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultPrivilegesForRole_ExplicitRole.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultPrivilegesForRole_ExplicitRole proto.InternalMessageInfo

// ForAllRoles represents when default privileges are defined
// using FOR ALL ROLES.
type DefaultPrivilegesForRole_ForAllRolesPseudoRole struct {
	// If for_all_roles is specified, we do not need flags to track if the
	// role has privileges on tables/sequences/schemas and types as
	// for_all_roles is not a real role and cannot have grants.
	PublicHasUsageOnTypes       bool `protobuf:"varint,11,opt,name=public_has_usage_on_types,json=publicHasUsageOnTypes" json:"public_has_usage_on_types"`
	PublicHasExecuteOnFunctions bool `protobuf:"varint,12,opt,name=public_has_execute_on_functions,json=publicHasExecuteOnFunctions" json:"public_has_execute_on_functions"`
}

func (m *DefaultPrivilegesForRole_ForAllRolesPseudoRole) Reset() {
	*m = DefaultPrivilegesForRole_ForAllRolesPseudoRole{}
}
func (m *DefaultPrivilegesForRole_ForAllRolesPseudoRole) String() string {
	return proto.CompactTextString(m)
}
func (*DefaultPrivilegesForRole_ForAllRolesPseudoRole) ProtoMessage() {}
func (*DefaultPrivilegesForRole_ForAllRolesPseudoRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_38674e6995c4b96a, []int{2, 1}
}
func (m *DefaultPrivilegesForRole_ForAllRolesPseudoRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultPrivilegesForRole_ForAllRolesPseudoRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DefaultPrivilegesForRole_ForAllRolesPseudoRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultPrivilegesForRole_ForAllRolesPseudoRole.Merge(m, src)
}
func (m *DefaultPrivilegesForRole_ForAllRolesPseudoRole) XXX_Size() int {
	return m.Size()
}
func (m *DefaultPrivilegesForRole_ForAllRolesPseudoRole) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultPrivilegesForRole_ForAllRolesPseudoRole.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultPrivilegesForRole_ForAllRolesPseudoRole proto.InternalMessageInfo

// DefaultPrivilegeDescriptor describes the set of default privileges for a
// given role + object type.
// The DefaultPrivileges list must be sorted for fast access and user lookups.
type DefaultPrivilegeDescriptor struct {
	DefaultPrivilegesPerRole []DefaultPrivilegesForRole                                `protobuf:"bytes,1,rep,name=default_privileges_per_role,json=defaultPrivilegesPerRole" json:"default_privileges_per_role"`
	Type                     DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType `protobuf:"varint,2,opt,name=type,enum=cockroach.sql.sqlbase.DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType" json:"type"`
}

func (m *DefaultPrivilegeDescriptor) Reset()         { *m = DefaultPrivilegeDescriptor{} }
func (m *DefaultPrivilegeDescriptor) String() string { return proto.CompactTextString(m) }
func (*DefaultPrivilegeDescriptor) ProtoMessage()    {}
func (*DefaultPrivilegeDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_38674e6995c4b96a, []int{3}
}
func (m *DefaultPrivilegeDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultPrivilegeDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DefaultPrivilegeDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultPrivilegeDescriptor.Merge(m, src)
}
func (m *DefaultPrivilegeDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *DefaultPrivilegeDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultPrivilegeDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultPrivilegeDescriptor proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.sql.sqlbase.DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType", DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType_name, DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType_value)
	proto.RegisterType((*UserPrivileges)(nil), "cockroach.sql.sqlbase.UserPrivileges")
	proto.RegisterType((*PrivilegeDescriptor)(nil), "cockroach.sql.sqlbase.PrivilegeDescriptor")
	proto.RegisterType((*DefaultPrivilegesForRole)(nil), "cockroach.sql.sqlbase.DefaultPrivilegesForRole")
	proto.RegisterMapType((map[github_com_cockroachdb_cockroach_pkg_sql_privilege.TargetObjectType]PrivilegeDescriptor)(nil), "cockroach.sql.sqlbase.DefaultPrivilegesForRole.DefaultPrivilegesPerObjectEntry")
	proto.RegisterType((*DefaultPrivilegesForRole_ExplicitRole)(nil), "cockroach.sql.sqlbase.DefaultPrivilegesForRole.ExplicitRole")
	proto.RegisterType((*DefaultPrivilegesForRole_ForAllRolesPseudoRole)(nil), "cockroach.sql.sqlbase.DefaultPrivilegesForRole.ForAllRolesPseudoRole")
	proto.RegisterType((*DefaultPrivilegeDescriptor)(nil), "cockroach.sql.sqlbase.DefaultPrivilegeDescriptor")
}

func init() { proto.RegisterFile("sql/catalog/catpb/privilege.proto", fileDescriptor_38674e6995c4b96a) }

var fileDescriptor_38674e6995c4b96a = []byte{
	// 884 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0x3a, 0x4e, 0x9a, 0x3c, 0xdb, 0x21, 0x0c, 0x8d, 0xb4, 0xb8, 0xed, 0xda, 0xb5, 0x8a,
	0x64, 0x71, 0xb0, 0x51, 0x0e, 0x15, 0x8a, 0x10, 0xc2, 0x6e, 0x9c, 0x46, 0x94, 0xca, 0x66, 0x9d,
	0x20, 0xc4, 0x65, 0x35, 0xde, 0x4c, 0xd6, 0xdb, 0x4c, 0x76, 0x36, 0x33, 0xb3, 0x69, 0x7d, 0xe5,
	0xc4, 0x91, 0x9f, 0xc0, 0x0d, 0x71, 0xe0, 0x3f, 0x70, 0xcc, 0xb1, 0xc7, 0x9e, 0x12, 0x48, 0x2e,
	0xfc, 0x06, 0x4e, 0x68, 0x66, 0xd7, 0xf6, 0x06, 0x6c, 0x27, 0x3e, 0xc0, 0xc1, 0xf2, 0xac, 0xe7,
	0xdb, 0xef, 0x7b, 0xef, 0x7b, 0x6f, 0xde, 0x18, 0x1e, 0x8b, 0x53, 0xda, 0x70, 0xb1, 0xc4, 0x94,
	0x79, 0xea, 0x3b, 0xec, 0x37, 0x42, 0xee, 0x9f, 0xf9, 0x94, 0x78, 0xa4, 0x1e, 0x72, 0x26, 0x19,
	0xda, 0x74, 0x99, 0x7b, 0xcc, 0x19, 0x76, 0x07, 0x75, 0x71, 0x4a, 0xd5, 0xa7, 0x8f, 0x05, 0x29,
	0xdd, 0xf7, 0x98, 0xc7, 0x34, 0xa2, 0xa1, 0x56, 0x31, 0xb8, 0x7a, 0x61, 0xc0, 0xfa, 0x81, 0x20,
	0xbc, 0x3b, 0x22, 0x11, 0x28, 0x00, 0x88, 0x04, 0xe1, 0x8e, 0x06, 0x98, 0x46, 0xc5, 0xa8, 0xad,
	0xb5, 0x3a, 0xe7, 0x17, 0xe5, 0xcc, 0x5f, 0x17, 0xe5, 0xe7, 0x9e, 0x2f, 0x07, 0x51, 0xbf, 0xee,
	0xb2, 0x93, 0xc6, 0x58, 0xe6, 0xb0, 0x3f, 0x59, 0x37, 0xc2, 0x63, 0xaf, 0x21, 0x88, 0x1b, 0x71,
	0x5f, 0x0e, 0x1b, 0x8a, 0x27, 0xc0, 0x27, 0xa4, 0xde, 0xfb, 0xfa, 0xab, 0x83, 0x64, 0xdd, 0x55,
	0xb4, 0xf6, 0x5a, 0xa4, 0x45, 0x55, 0xbc, 0x4f, 0x00, 0xc6, 0x29, 0x08, 0x33, 0x5b, 0x31, 0x6a,
	0xb9, 0x56, 0x4e, 0xe9, 0xd9, 0xa9, 0xdf, 0xd1, 0x27, 0xf0, 0xfe, 0x6b, 0x5f, 0x0e, 0x1c, 0x8f,
	0xe3, 0x40, 0x3a, 0x2c, 0x94, 0x3e, 0x0b, 0xcc, 0xa5, 0x14, 0xf8, 0x3d, 0xb5, 0xfd, 0x5c, 0xed,
	0x76, 0xf4, 0xe6, 0x76, 0xee, 0xcf, 0x9f, 0xca, 0x46, 0xf5, 0x87, 0x2c, 0x7c, 0x30, 0x4e, 0x6e,
	0x87, 0x08, 0x97, 0xfb, 0xa1, 0x64, 0x1c, 0x35, 0x61, 0x59, 0x85, 0x20, 0x4c, 0xa3, 0xb2, 0x54,
	0xcb, 0x6f, 0x7d, 0x54, 0x9f, 0xea, 0x5a, 0xfd, 0xa6, 0x37, 0x89, 0x54, 0xfc, 0x26, 0x0a, 0x21,
	0xcf, 0x5e, 0x07, 0x63, 0xa7, 0xb2, 0xff, 0x8d, 0x53, 0xa0, 0x35, 0x62, 0xab, 0x9e, 0xc2, 0xbd,
	0x33, 0xc2, 0xc5, 0x28, 0xf5, 0x62, 0xeb, 0x61, 0xa2, 0x76, 0xff, 0x46, 0x8a, 0xdf, 0xc4, 0x18,
	0x7b, 0x04, 0x4e, 0xac, 0xf8, 0x35, 0x0f, 0xe6, 0x0e, 0x39, 0xc2, 0x11, 0x95, 0x93, 0x94, 0x76,
	0x19, 0xb7, 0x19, 0x25, 0xc8, 0x85, 0x22, 0x79, 0x13, 0x52, 0xdf, 0xf5, 0xa5, 0xc3, 0x19, 0x25,
	0x66, 0xa1, 0x62, 0xd4, 0xf2, 0x5b, 0x9f, 0xcd, 0xf0, 0x65, 0x16, 0x4f, 0xbd, 0x9d, 0x90, 0xa8,
	0x87, 0xbd, 0x8c, 0x5d, 0x20, 0xa9, 0x67, 0x74, 0x0c, 0xc5, 0x23, 0xc6, 0x1d, 0x4c, 0xa9, 0xd6,
	0x10, 0x66, 0x51, 0x8b, 0xb4, 0x17, 0x15, 0xd9, 0x65, 0xbc, 0x49, 0xa9, 0x5a, 0x8a, 0xae, 0x20,
	0xd1, 0x21, 0x4b, 0xd4, 0xf2, 0x47, 0x93, 0x0d, 0x74, 0x69, 0xc0, 0xa3, 0xc3, 0x98, 0xc1, 0x99,
	0x34, 0x92, 0x13, 0x12, 0xee, 0xb0, 0xfe, 0x2b, 0xe2, 0x4a, 0x73, 0x5d, 0x97, 0xbe, 0xb3, 0xa8,
	0xfa, 0xbf, 0x36, 0xba, 0x84, 0x77, 0x34, 0x63, 0x3b, 0x90, 0x7c, 0xd8, 0x7a, 0xa1, 0x8a, 0xf2,
	0xfd, 0x65, 0xf9, 0xd9, 0xdd, 0x5a, 0xe0, 0x94, 0xa6, 0x8e, 0xf0, 0x3e, 0xe6, 0x1e, 0x91, 0x31,
	0xdb, 0xfe, 0x30, 0x24, 0x76, 0xe9, 0x70, 0xa6, 0x5a, 0xe9, 0xe7, 0x65, 0x28, 0xa4, 0xfd, 0xfe,
	0xdf, 0x8f, 0xee, 0xe7, 0xf0, 0x61, 0x18, 0xf5, 0xa9, 0xef, 0x3a, 0x03, 0x2c, 0x9c, 0x48, 0x60,
	0x8f, 0x38, 0x2c, 0x70, 0xe4, 0x30, 0x24, 0xc2, 0xcc, 0x55, 0x8c, 0xda, 0x6a, 0x72, 0x62, 0x36,
	0x63, 0xd8, 0x1e, 0x16, 0x07, 0x0a, 0xd4, 0x09, 0x54, 0x6e, 0x02, 0xbd, 0x84, 0xc7, 0xaa, 0x0f,
	0xf4, 0xdb, 0xaa, 0x29, 0x52, 0x65, 0x52, 0x34, 0xb8, 0xaf, 0x7a, 0x64, 0x39, 0xc5, 0xf3, 0x50,
	0xc1, 0xf7, 0xb0, 0x68, 0x52, 0x3a, 0x31, 0xa4, 0x13, 0xec, 0x6b, 0x24, 0xea, 0xc1, 0x93, 0x39,
	0x74, 0x82, 0x9c, 0x46, 0x24, 0x70, 0x89, 0x30, 0x57, 0x52, 0x8c, 0xe5, 0xe9, 0x8c, 0xbd, 0x11,
	0x18, 0x75, 0xa0, 0x3a, 0x8f, 0xd4, 0x1d, 0x90, 0x13, 0x2c, 0xcc, 0x7b, 0x29, 0xca, 0x47, 0x33,
	0x28, 0x63, 0x28, 0x7a, 0x01, 0x95, 0x79, 0x49, 0x6b, 0xef, 0x56, 0x53, 0x74, 0x0f, 0x66, 0xe4,
	0xac, 0x1d, 0x9c, 0x9f, 0xf2, 0x51, 0x14, 0xb8, 0x6a, 0x16, 0x0a, 0x73, 0xed, 0xf6, 0x94, 0x77,
	0x47, 0x60, 0xf4, 0x25, 0x94, 0x53, 0x65, 0x25, 0x6f, 0x88, 0x1b, 0x49, 0x72, 0x93, 0x0f, 0xd2,
	0x01, 0x8e, 0x8b, 0xdb, 0x8e, 0xa1, 0x29, 0xae, 0x78, 0xf4, 0x94, 0x7e, 0x31, 0x60, 0x73, 0xea,
	0xa1, 0x9d, 0xdf, 0x42, 0xf9, 0xdb, 0x5b, 0xe8, 0x0e, 0xb1, 0x16, 0x16, 0x8b, 0x75, 0x08, 0xe5,
	0x5b, 0x4e, 0x38, 0xda, 0x80, 0xa5, 0x63, 0x32, 0xd4, 0x07, 0xac, 0x68, 0xab, 0x25, 0xfa, 0x02,
	0x96, 0xcf, 0x30, 0x8d, 0x88, 0xbe, 0x05, 0xf2, 0x5b, 0x1f, 0xcf, 0x98, 0x29, 0x53, 0x6e, 0x22,
	0x3b, 0x7e, 0x71, 0x3b, 0xfb, 0xa9, 0x11, 0x07, 0xd0, 0x5a, 0x81, 0x9c, 0xaa, 0x50, 0xf5, 0xb7,
	0x2c, 0x94, 0xfe, 0x19, 0x49, 0xea, 0x06, 0x93, 0xf0, 0x60, 0xc6, 0x78, 0xd3, 0xf3, 0x3b, 0xbe,
	0xd7, 0x1a, 0x0b, 0x0e, 0xb7, 0xc4, 0x26, 0x73, 0xda, 0xd4, 0xd1, 0xf5, 0x7a, 0x05, 0x39, 0x55,
	0x1b, 0x9d, 0xe7, 0xfa, 0x56, 0xf7, 0x8e, 0xf4, 0x93, 0xb0, 0xe7, 0x6c, 0xa9, 0x82, 0x26, 0xfa,
	0x5a, 0xa3, 0xba, 0x0d, 0xd6, 0x7c, 0x34, 0x2a, 0xc0, 0xea, 0x4e, 0x73, 0xbf, 0xd9, 0x6a, 0xf6,
	0xda, 0x1b, 0x19, 0x04, 0xb0, 0xd2, 0x7b, 0xb6, 0xd7, 0x7e, 0xd9, 0xdc, 0x18, 0x59, 0xf9, 0xed,
	0xf9, 0x1f, 0x56, 0xe6, 0xfc, 0xca, 0x32, 0xde, 0x5e, 0x59, 0xc6, 0xbb, 0x2b, 0xcb, 0xf8, 0xfd,
	0xca, 0x32, 0x7e, 0xbc, 0xb6, 0x32, 0x6f, 0xaf, 0xad, 0xcc, 0xbb, 0x6b, 0x2b, 0xf3, 0xdd, 0xd3,
	0x3b, 0x0f, 0xe9, 0x1b, 0xff, 0xba, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x16, 0x24, 0xe2,
	0x89, 0x09, 0x00, 0x00,
}

func (this *UserPrivileges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserPrivileges)
	if !ok {
		that2, ok := that.(UserPrivileges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserProto != that1.UserProto {
		return false
	}
	if this.Privileges != that1.Privileges {
		return false
	}
	if this.WithGrantOption != that1.WithGrantOption {
		return false
	}
	return true
}
func (this *PrivilegeDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrivilegeDescriptor)
	if !ok {
		that2, ok := that.(PrivilegeDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(&that1.Users[i]) {
			return false
		}
	}
	if this.OwnerProto != that1.OwnerProto {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *DefaultPrivilegesForRole) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultPrivilegesForRole)
	if !ok {
		that2, ok := that.(DefaultPrivilegesForRole)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Role == nil {
		if this.Role != nil {
			return false
		}
	} else if this.Role == nil {
		return false
	} else if !this.Role.Equal(that1.Role) {
		return false
	}
	if len(this.DefaultPrivilegesPerObject) != len(that1.DefaultPrivilegesPerObject) {
		return false
	}
	for i := range this.DefaultPrivilegesPerObject {
		a := this.DefaultPrivilegesPerObject[i]
		b := that1.DefaultPrivilegesPerObject[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	return true
}
func (this *DefaultPrivilegesForRole_ExplicitRole_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultPrivilegesForRole_ExplicitRole_)
	if !ok {
		that2, ok := that.(DefaultPrivilegesForRole_ExplicitRole_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExplicitRole.Equal(that1.ExplicitRole) {
		return false
	}
	return true
}
func (this *DefaultPrivilegesForRole_ForAllRoles) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultPrivilegesForRole_ForAllRoles)
	if !ok {
		that2, ok := that.(DefaultPrivilegesForRole_ForAllRoles)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForAllRoles.Equal(that1.ForAllRoles) {
		return false
	}
	return true
}
func (this *DefaultPrivilegesForRole_ExplicitRole) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultPrivilegesForRole_ExplicitRole)
	if !ok {
		that2, ok := that.(DefaultPrivilegesForRole_ExplicitRole)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserProto != that1.UserProto {
		return false
	}
	if this.PublicHasUsageOnTypes != that1.PublicHasUsageOnTypes {
		return false
	}
	if this.RoleHasAllPrivilegesOnTables != that1.RoleHasAllPrivilegesOnTables {
		return false
	}
	if this.RoleHasAllPrivilegesOnSequences != that1.RoleHasAllPrivilegesOnSequences {
		return false
	}
	if this.RoleHasAllPrivilegesOnSchemas != that1.RoleHasAllPrivilegesOnSchemas {
		return false
	}
	if this.RoleHasAllPrivilegesOnTypes != that1.RoleHasAllPrivilegesOnTypes {
		return false
	}
	if this.RoleHasAllPrivilegesOnFunctions != that1.RoleHasAllPrivilegesOnFunctions {
		return false
	}
	if this.PublicHasExecuteOnFunctions != that1.PublicHasExecuteOnFunctions {
		return false
	}
	return true
}
func (this *DefaultPrivilegesForRole_ForAllRolesPseudoRole) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultPrivilegesForRole_ForAllRolesPseudoRole)
	if !ok {
		that2, ok := that.(DefaultPrivilegesForRole_ForAllRolesPseudoRole)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PublicHasUsageOnTypes != that1.PublicHasUsageOnTypes {
		return false
	}
	if this.PublicHasExecuteOnFunctions != that1.PublicHasExecuteOnFunctions {
		return false
	}
	return true
}
func (this *DefaultPrivilegeDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultPrivilegeDescriptor)
	if !ok {
		that2, ok := that.(DefaultPrivilegeDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DefaultPrivilegesPerRole) != len(that1.DefaultPrivilegesPerRole) {
		return false
	}
	for i := range this.DefaultPrivilegesPerRole {
		if !this.DefaultPrivilegesPerRole[i].Equal(&that1.DefaultPrivilegesPerRole[i]) {
			return false
		}
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (m *UserPrivileges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPrivileges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPrivileges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintPrivilege(dAtA, i, uint64(m.WithGrantOption))
	i--
	dAtA[i] = 0x18
	i = encodeVarintPrivilege(dAtA, i, uint64(m.Privileges))
	i--
	dAtA[i] = 0x10
	i -= len(m.UserProto)
	copy(dAtA[i:], m.UserProto)
	i = encodeVarintPrivilege(dAtA, i, uint64(len(m.UserProto)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PrivilegeDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivilegeDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivilegeDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintPrivilege(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x18
	i -= len(m.OwnerProto)
	copy(dAtA[i:], m.OwnerProto)
	i = encodeVarintPrivilege(dAtA, i, uint64(len(m.OwnerProto)))
	i--
	dAtA[i] = 0x12
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPrivilege(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DefaultPrivilegesForRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultPrivilegesForRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultPrivilegesForRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DefaultPrivilegesPerObject) > 0 {
		keysForDefaultPrivilegesPerObject := make([]uint32, 0, len(m.DefaultPrivilegesPerObject))
		for k := range m.DefaultPrivilegesPerObject {
			keysForDefaultPrivilegesPerObject = append(keysForDefaultPrivilegesPerObject, uint32(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint32s(keysForDefaultPrivilegesPerObject)
		for iNdEx := len(keysForDefaultPrivilegesPerObject) - 1; iNdEx >= 0; iNdEx-- {
			v := m.DefaultPrivilegesPerObject[github_com_cockroachdb_cockroach_pkg_sql_privilege.TargetObjectType(keysForDefaultPrivilegesPerObject[iNdEx])]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPrivilege(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintPrivilege(dAtA, i, uint64(keysForDefaultPrivilegesPerObject[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPrivilege(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x72
		}
	}
	if m.Role != nil {
		{
			size := m.Role.Size()
			i -= size
			if _, err := m.Role.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DefaultPrivilegesForRole_ExplicitRole_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultPrivilegesForRole_ExplicitRole_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExplicitRole != nil {
		{
			size, err := m.ExplicitRole.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivilege(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *DefaultPrivilegesForRole_ForAllRoles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultPrivilegesForRole_ForAllRoles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForAllRoles != nil {
		{
			size, err := m.ForAllRoles.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivilege(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *DefaultPrivilegesForRole_ExplicitRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultPrivilegesForRole_ExplicitRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultPrivilegesForRole_ExplicitRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.PublicHasExecuteOnFunctions {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x50
	i--
	if m.RoleHasAllPrivilegesOnFunctions {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x48
	i--
	if m.RoleHasAllPrivilegesOnTypes {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x40
	i--
	if m.RoleHasAllPrivilegesOnSchemas {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i--
	if m.RoleHasAllPrivilegesOnSequences {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	i--
	if m.RoleHasAllPrivilegesOnTables {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i--
	if m.PublicHasUsageOnTypes {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i -= len(m.UserProto)
	copy(dAtA[i:], m.UserProto)
	i = encodeVarintPrivilege(dAtA, i, uint64(len(m.UserProto)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DefaultPrivilegesForRole_ForAllRolesPseudoRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultPrivilegesForRole_ForAllRolesPseudoRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultPrivilegesForRole_ForAllRolesPseudoRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.PublicHasExecuteOnFunctions {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x60
	i--
	if m.PublicHasUsageOnTypes {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x58
	return len(dAtA) - i, nil
}

func (m *DefaultPrivilegeDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultPrivilegeDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultPrivilegeDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintPrivilege(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x10
	if len(m.DefaultPrivilegesPerRole) > 0 {
		for iNdEx := len(m.DefaultPrivilegesPerRole) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultPrivilegesPerRole[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPrivilege(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPrivilege(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrivilege(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserPrivileges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserProto)
	n += 1 + l + sovPrivilege(uint64(l))
	n += 1 + sovPrivilege(uint64(m.Privileges))
	n += 1 + sovPrivilege(uint64(m.WithGrantOption))
	return n
}

func (m *PrivilegeDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovPrivilege(uint64(l))
		}
	}
	l = len(m.OwnerProto)
	n += 1 + l + sovPrivilege(uint64(l))
	n += 1 + sovPrivilege(uint64(m.Version))
	return n
}

func (m *DefaultPrivilegesForRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != nil {
		n += m.Role.Size()
	}
	if len(m.DefaultPrivilegesPerObject) > 0 {
		for k, v := range m.DefaultPrivilegesPerObject {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovPrivilege(uint64(k)) + 1 + l + sovPrivilege(uint64(l))
			n += mapEntrySize + 1 + sovPrivilege(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DefaultPrivilegesForRole_ExplicitRole_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExplicitRole != nil {
		l = m.ExplicitRole.Size()
		n += 1 + l + sovPrivilege(uint64(l))
	}
	return n
}
func (m *DefaultPrivilegesForRole_ForAllRoles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForAllRoles != nil {
		l = m.ForAllRoles.Size()
		n += 1 + l + sovPrivilege(uint64(l))
	}
	return n
}
func (m *DefaultPrivilegesForRole_ExplicitRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserProto)
	n += 1 + l + sovPrivilege(uint64(l))
	n += 2
	n += 2
	n += 2
	n += 2
	n += 2
	n += 2
	n += 2
	return n
}

func (m *DefaultPrivilegesForRole_ForAllRolesPseudoRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 2
	return n
}

func (m *DefaultPrivilegeDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DefaultPrivilegesPerRole) > 0 {
		for _, e := range m.DefaultPrivilegesPerRole {
			l = e.Size()
			n += 1 + l + sovPrivilege(uint64(l))
		}
	}
	n += 1 + sovPrivilege(uint64(m.Type))
	return n
}

func sovPrivilege(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozPrivilege(x uint64) (n int) {
	return sovPrivilege(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserPrivileges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivilege
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPrivileges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPrivileges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserProto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivilege
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivilege
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserProto = github_com_cockroachdb_cockroach_pkg_security_username.SQLUsernameProto(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			m.Privileges = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Privileges |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithGrantOption", wireType)
			}
			m.WithGrantOption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithGrantOption |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrivilege(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrivilege
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivilegeDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivilege
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivilegeDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivilegeDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivilege
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivilege
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, UserPrivileges{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerProto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivilege
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivilege
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerProto = github_com_cockroachdb_cockroach_pkg_security_username.SQLUsernameProto(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= PrivilegeDescVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrivilege(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrivilege
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultPrivilegesForRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivilege
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultPrivilegesForRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultPrivilegesForRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplicitRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivilege
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivilege
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value DefaultPrivilegesForRole_ExplicitRole_
				field DefaultPrivilegesForRole_ExplicitRole
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.ExplicitRole = &alloc.field
			m.Role = &alloc.value
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForAllRoles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivilege
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivilege
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value DefaultPrivilegesForRole_ForAllRoles
				field DefaultPrivilegesForRole_ForAllRolesPseudoRole
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.ForAllRoles = &alloc.field
			m.Role = &alloc.value
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPrivilegesPerObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivilege
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivilege
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultPrivilegesPerObject == nil {
				m.DefaultPrivilegesPerObject = make(map[github_com_cockroachdb_cockroach_pkg_sql_privilege.TargetObjectType]PrivilegeDescriptor)
			}
			var mapkey uint32
			mapvalue := &PrivilegeDescriptor{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPrivilege
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPrivilege
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPrivilege
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPrivilege
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPrivilege
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PrivilegeDescriptor{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPrivilege(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPrivilege
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DefaultPrivilegesPerObject[github_com_cockroachdb_cockroach_pkg_sql_privilege.TargetObjectType(mapkey)] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivilege(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrivilege
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultPrivilegesForRole_ExplicitRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivilege
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExplicitRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExplicitRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserProto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivilege
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivilege
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserProto = github_com_cockroachdb_cockroach_pkg_security_username.SQLUsernameProto(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicHasUsageOnTypes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PublicHasUsageOnTypes = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleHasAllPrivilegesOnTables", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RoleHasAllPrivilegesOnTables = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleHasAllPrivilegesOnSequences", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RoleHasAllPrivilegesOnSequences = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleHasAllPrivilegesOnSchemas", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RoleHasAllPrivilegesOnSchemas = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleHasAllPrivilegesOnTypes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RoleHasAllPrivilegesOnTypes = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleHasAllPrivilegesOnFunctions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RoleHasAllPrivilegesOnFunctions = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicHasExecuteOnFunctions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PublicHasExecuteOnFunctions = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPrivilege(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrivilege
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultPrivilegesForRole_ForAllRolesPseudoRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivilege
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForAllRolesPseudoRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForAllRolesPseudoRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicHasUsageOnTypes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PublicHasUsageOnTypes = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicHasExecuteOnFunctions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PublicHasExecuteOnFunctions = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPrivilege(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrivilege
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultPrivilegeDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivilege
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultPrivilegeDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultPrivilegeDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPrivilegesPerRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivilege
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivilege
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultPrivilegesPerRole = append(m.DefaultPrivilegesPerRole, DefaultPrivilegesForRole{})
			if err := m.DefaultPrivilegesPerRole[len(m.DefaultPrivilegesPerRole)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DefaultPrivilegeDescriptor_DefaultPrivilegeDescriptorType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrivilege(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrivilege
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrivilege(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrivilege
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrivilege
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrivilege
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrivilege
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrivilege        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrivilege          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrivilege = fmt.Errorf("proto: unexpected end of group")
)

