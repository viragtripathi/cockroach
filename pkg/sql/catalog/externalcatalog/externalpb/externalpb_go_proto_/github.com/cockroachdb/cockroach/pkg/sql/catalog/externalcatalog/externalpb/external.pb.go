// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/catalog/externalcatalog/externalpb/external.proto

package externalpb

import (
	fmt "fmt"
	descpb "github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExternalCatalog struct {
	Tables []descpb.TableDescriptor `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables"`
	Types  []descpb.TypeDescriptor  `protobuf:"bytes,2,rep,name=types,proto3" json:"types"`
}

func (m *ExternalCatalog) Reset()         { *m = ExternalCatalog{} }
func (m *ExternalCatalog) String() string { return proto.CompactTextString(m) }
func (*ExternalCatalog) ProtoMessage()    {}
func (*ExternalCatalog) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c29ff27c128651, []int{0}
}
func (m *ExternalCatalog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalCatalog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExternalCatalog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalCatalog.Merge(m, src)
}
func (m *ExternalCatalog) XXX_Size() int {
	return m.Size()
}
func (m *ExternalCatalog) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalCatalog.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalCatalog proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ExternalCatalog)(nil), "cockroach.sql.catalog.externalcatalog.externalpb.ExternalCatalog")
}

func init() {
	proto.RegisterFile("sql/catalog/externalcatalog/externalpb/external.proto", fileDescriptor_e9c29ff27c128651)
}

var fileDescriptor_e9c29ff27c128651 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2d, 0x2e, 0xcc, 0xd1,
	0x4f, 0x4e, 0x2c, 0x49, 0xcc, 0xc9, 0x4f, 0xd7, 0x4f, 0xad, 0x28, 0x49, 0x2d, 0xca, 0x4b, 0xcc,
	0x41, 0xe7, 0x17, 0x24, 0xc1, 0x99, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x06, 0xc9, 0xf9,
	0xc9, 0xd9, 0x45, 0xf9, 0x89, 0xc9, 0x19, 0x7a, 0xc5, 0x85, 0x39, 0x7a, 0x50, 0x0d, 0x7a, 0x68,
	0x06, 0xe8, 0x21, 0x0c, 0x90, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x6b, 0xd6, 0x07, 0xb1, 0x20,
	0xe6, 0x48, 0x29, 0x23, 0x5b, 0x9f, 0x92, 0x5a, 0x9c, 0x5c, 0x90, 0xa4, 0x5f, 0x5c, 0x52, 0x54,
	0x9a, 0x5c, 0x52, 0x5a, 0x94, 0x9a, 0x02, 0x51, 0xa4, 0x34, 0x8b, 0x91, 0x8b, 0xdf, 0x15, 0x6a,
	0x92, 0x33, 0x44, 0xad, 0x90, 0x0b, 0x17, 0x5b, 0x49, 0x62, 0x52, 0x4e, 0x6a, 0xb1, 0x04, 0xa3,
	0x02, 0xb3, 0x06, 0xb7, 0x91, 0x9a, 0x1e, 0xaa, 0x8b, 0x8a, 0x0b, 0x73, 0x92, 0x12, 0x8b, 0x53,
	0xf5, 0x42, 0x40, 0x8a, 0x5c, 0x52, 0x8b, 0x93, 0x8b, 0x32, 0x0b, 0x4a, 0xf2, 0x8b, 0x9c, 0x58,
	0x4e, 0xdc, 0x93, 0x67, 0x08, 0x82, 0xea, 0x15, 0x72, 0xe4, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d,
	0x96, 0x60, 0x02, 0x1b, 0xa2, 0x8a, 0xcb, 0x90, 0xca, 0x02, 0x4c, 0x33, 0x20, 0x3a, 0x9d, 0x72,
	0x4f, 0x3c, 0x94, 0x63, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x1b, 0x8f, 0xe4,
	0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f,
	0xe5, 0x18, 0xa2, 0xbc, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xe1,
	0xe6, 0xa7, 0x24, 0x21, 0xd8, 0xfa, 0x05, 0xd9, 0xe9, 0xfa, 0xc4, 0xc5, 0x43, 0x12, 0x1b, 0x38,
	0x48, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x86, 0xb3, 0x20, 0xb8, 0x01, 0x00, 0x00,
}

func (m *ExternalCatalog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalCatalog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalCatalog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Types[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExternal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Tables) > 0 {
		for iNdEx := len(m.Tables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExternal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintExternal(dAtA []byte, offset int, v uint64) int {
	offset -= sovExternal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExternalCatalog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tables) > 0 {
		for _, e := range m.Tables {
			l = e.Size()
			n += 1 + l + sovExternal(uint64(l))
		}
	}
	if len(m.Types) > 0 {
		for _, e := range m.Types {
			l = e.Size()
			n += 1 + l + sovExternal(uint64(l))
		}
	}
	return n
}

func sovExternal(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozExternal(x uint64) (n int) {
	return sovExternal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExternalCatalog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalCatalog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalCatalog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tables = append(m.Tables, descpb.TableDescriptor{})
			if err := m.Tables[len(m.Tables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = append(m.Types, descpb.TypeDescriptor{})
			if err := m.Types[len(m.Types)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExternal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExternal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExternal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExternal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExternal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExternal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExternal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExternal = fmt.Errorf("proto: unexpected end of group")
)

