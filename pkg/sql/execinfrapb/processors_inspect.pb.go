// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/execinfrapb/processors_inspect.proto

// Beware! This package name must not be changed, even though it doesn't match
// the Go package name, because it defines the Protobuf message names which
// can't be changed without breaking backward compatibility.

package execinfrapb

import (
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_jobs_jobspb "github.com/cockroachdb/cockroach/pkg/jobs/jobspb"
	jobspb "github.com/cockroachdb/cockroach/pkg/jobs/jobspb"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InspectSpec struct {
	// JobID of the job that ran the inspect processor.
	JobID github_com_cockroachdb_cockroach_pkg_jobs_jobspb.JobID `protobuf:"varint,1,opt,name=job_id,json=jobId,casttype=github.com/cockroachdb/cockroach/pkg/jobs/jobspb.JobID" json:"job_id"`
	// InspectDetails are the details of the job that ran the inspect processor.
	InspectDetails jobspb.InspectDetails `protobuf:"bytes,2,opt,name=inspect_details,json=inspectDetails" json:"inspect_details"`
	// Spans determine which records are processed by which nodes in the DistSQL
	// flow.
	Spans []roachpb.Span `protobuf:"bytes,3,rep,name=spans" json:"spans"`
}

func (m *InspectSpec) Reset()         { *m = InspectSpec{} }
func (m *InspectSpec) String() string { return proto.CompactTextString(m) }
func (*InspectSpec) ProtoMessage()    {}
func (*InspectSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ad2bb9f94574313, []int{0}
}
func (m *InspectSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InspectSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InspectSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InspectSpec.Merge(m, src)
}
func (m *InspectSpec) XXX_Size() int {
	return m.Size()
}
func (m *InspectSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_InspectSpec.DiscardUnknown(m)
}

var xxx_messageInfo_InspectSpec proto.InternalMessageInfo

func init() {
	proto.RegisterType((*InspectSpec)(nil), "cockroach.sql.distsqlrun.InspectSpec")
}

func init() {
	proto.RegisterFile("sql/execinfrapb/processors_inspect.proto", fileDescriptor_5ad2bb9f94574313)
}

var fileDescriptor_5ad2bb9f94574313 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x8d, 0x5b, 0xca, 0x90, 0x4a, 0x45, 0x8a, 0x50, 0x89, 0x3a, 0xb8, 0x15, 0x53, 0x58, 0x6c,
	0xa9, 0x20, 0x3e, 0x20, 0xaa, 0x84, 0xca, 0xd8, 0x4a, 0x0c, 0x0c, 0x54, 0xb6, 0x13, 0x52, 0xa7,
	0x21, 0xe7, 0xc6, 0xa9, 0xc4, 0x57, 0x20, 0x3e, 0xab, 0x63, 0xc7, 0x4e, 0x15, 0xa4, 0x7f, 0xc1,
	0x84, 0x9a, 0x58, 0xd0, 0x30, 0xb1, 0xd8, 0xe7, 0xa7, 0x77, 0xf7, 0xde, 0x3d, 0xdb, 0x9e, 0x5e,
	0x26, 0x34, 0x7c, 0x0d, 0x85, 0x4c, 0x9f, 0x33, 0xa6, 0x38, 0x55, 0x19, 0x88, 0x50, 0x6b, 0xc8,
	0xf4, 0x4c, 0xa6, 0x5a, 0x85, 0x22, 0x27, 0x2a, 0x83, 0x1c, 0x1c, 0x57, 0x80, 0x58, 0x64, 0xc0,
	0xc4, 0x9c, 0xe8, 0x65, 0x42, 0x02, 0xa9, 0x73, 0xbd, 0x4c, 0xb2, 0x55, 0xda, 0x3b, 0x8f, 0x20,
	0x82, 0x92, 0x44, 0x0f, 0x55, 0xc5, 0xef, 0x39, 0x25, 0x57, 0x71, 0x1a, 0xb0, 0x9c, 0x19, 0xac,
	0x1b, 0x03, 0xd7, 0xf4, 0x70, 0x28, 0x5e, 0x5e, 0x15, 0x7e, 0xf9, 0xd6, 0xb0, 0xdb, 0xe3, 0x4a,
	0x6d, 0xaa, 0x42, 0xe1, 0x3c, 0xd9, 0xa7, 0x31, 0xf0, 0x99, 0x0c, 0x5c, 0x34, 0x40, 0x5e, 0xd3,
	0xbf, 0x5b, 0xef, 0xfa, 0x56, 0xb1, 0xeb, 0xb7, 0xee, 0x81, 0x8f, 0x47, 0x5f, 0xbb, 0xfe, 0x6d,
	0x24, 0xf3, 0xf9, 0x8a, 0x13, 0x01, 0x2f, 0xf4, 0xc7, 0x57, 0xc0, 0x7f, 0x6b, 0xaa, 0x16, 0x11,
	0x3d, 0x52, 0x23, 0x65, 0xe7, 0xa4, 0x15, 0x03, 0x1f, 0x07, 0x4e, 0x6c, 0x9f, 0x99, 0xe5, 0x66,
	0x41, 0x98, 0x33, 0x99, 0x68, 0xb7, 0x31, 0x40, 0x5e, 0x7b, 0x78, 0x45, 0xea, 0x5b, 0x96, 0x1e,
	0xcd, 0x04, 0x63, 0x70, 0x54, 0x35, 0xf8, 0x5d, 0xe3, 0xa9, 0x53, 0xc7, 0x27, 0x1d, 0x59, 0x7b,
	0x3b, 0xd7, 0x76, 0x4b, 0x2b, 0x96, 0x6a, 0xb7, 0x39, 0x68, 0x7a, 0xed, 0xe1, 0xc5, 0x91, 0x82,
	0x49, 0x88, 0x4c, 0x15, 0x4b, 0xfd, 0x93, 0xc3, 0xbc, 0x49, 0xc5, 0xf5, 0x1f, 0xd6, 0x9f, 0xd8,
	0x5a, 0x17, 0x18, 0x6d, 0x0a, 0x8c, 0xb6, 0x05, 0x46, 0x1f, 0x05, 0x46, 0xef, 0x7b, 0x6c, 0x6d,
	0xf6, 0xd8, 0xda, 0xee, 0xb1, 0xf5, 0x78, 0xf3, 0xaf, 0x04, 0xfe, 0xfc, 0xee, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x2c, 0xf5, 0xd3, 0x15, 0xef, 0x01, 0x00, 0x00,
}

func (m *InspectSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InspectSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InspectSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Spans) > 0 {
		for iNdEx := len(m.Spans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Spans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcessorsInspect(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.InspectDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProcessorsInspect(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i = encodeVarintProcessorsInspect(dAtA, i, uint64(m.JobID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintProcessorsInspect(dAtA []byte, offset int, v uint64) int {
	offset -= sovProcessorsInspect(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InspectSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovProcessorsInspect(uint64(m.JobID))
	l = m.InspectDetails.Size()
	n += 1 + l + sovProcessorsInspect(uint64(l))
	if len(m.Spans) > 0 {
		for _, e := range m.Spans {
			l = e.Size()
			n += 1 + l + sovProcessorsInspect(uint64(l))
		}
	}
	return n
}

func sovProcessorsInspect(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozProcessorsInspect(x uint64) (n int) {
	return sovProcessorsInspect(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InspectSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessorsInspect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InspectSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InspectSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobID", wireType)
			}
			m.JobID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsInspect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobID |= github_com_cockroachdb_cockroach_pkg_jobs_jobspb.JobID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InspectDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsInspect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessorsInspect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessorsInspect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InspectDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsInspect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessorsInspect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessorsInspect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spans = append(m.Spans, roachpb.Span{})
			if err := m.Spans[len(m.Spans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessorsInspect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessorsInspect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProcessorsInspect(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProcessorsInspect
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcessorsInspect
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcessorsInspect
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProcessorsInspect
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProcessorsInspect
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProcessorsInspect
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProcessorsInspect        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProcessorsInspect          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProcessorsInspect = fmt.Errorf("proto: unexpected end of group")
)

