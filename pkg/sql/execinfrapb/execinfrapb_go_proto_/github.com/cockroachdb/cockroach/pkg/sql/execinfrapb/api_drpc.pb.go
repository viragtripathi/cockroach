// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// source: sql/execinfrapb/api.proto

package execinfrapb

import (
	bytes "bytes"
	context "context"
	errors "github.com/cockroachdb/errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_sql_execinfrapb_api_proto struct{}

func (drpcEncoding_File_sql_execinfrapb_api_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_sql_execinfrapb_api_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_sql_execinfrapb_api_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_sql_execinfrapb_api_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCDistSQLClient interface {
	DRPCConn() drpc.Conn

	SetupFlow(ctx context.Context, in *SetupFlowRequest) (*SimpleResponse, error)
	CancelDeadFlows(ctx context.Context, in *CancelDeadFlowsRequest) (*SimpleResponse, error)
	FlowStream(ctx context.Context) (DRPCDistSQL_FlowStreamClient, error)
}

type drpcDistSQLClient struct {
	cc drpc.Conn
}

func NewDRPCDistSQLClient(cc drpc.Conn) DRPCDistSQLClient {
	return &drpcDistSQLClient{cc}
}

func (c *drpcDistSQLClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcDistSQLClient) SetupFlow(ctx context.Context, in *SetupFlowRequest) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/cockroach.sql.distsqlrun.DistSQL/SetupFlow", drpcEncoding_File_sql_execinfrapb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDistSQLClient) CancelDeadFlows(ctx context.Context, in *CancelDeadFlowsRequest) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/cockroach.sql.distsqlrun.DistSQL/CancelDeadFlows", drpcEncoding_File_sql_execinfrapb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDistSQLClient) FlowStream(ctx context.Context) (DRPCDistSQL_FlowStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.sql.distsqlrun.DistSQL/FlowStream", drpcEncoding_File_sql_execinfrapb_api_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcDistSQL_FlowStreamClient{stream}
	return x, nil
}

type DRPCDistSQL_FlowStreamClient interface {
	drpc.Stream
	Send(*ProducerMessage) error
	Recv() (*ConsumerSignal, error)
}

type RPCDistSQL_FlowStreamClient interface {
	Context() context.Context
	CloseSend() error
	Send(*ProducerMessage) error
	Recv() (*ConsumerSignal, error)
}

type drpcDistSQL_FlowStreamClient struct {
	drpc.Stream
}

func (x *drpcDistSQL_FlowStreamClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcDistSQL_FlowStreamClient) Send(m *ProducerMessage) error {
	return x.MsgSend(m, drpcEncoding_File_sql_execinfrapb_api_proto{})
}

func (x *drpcDistSQL_FlowStreamClient) Recv() (*ConsumerSignal, error) {
	m := new(ConsumerSignal)
	if err := x.MsgRecv(m, drpcEncoding_File_sql_execinfrapb_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcDistSQL_FlowStreamClient) RecvMsg(m *ConsumerSignal) error {
	return x.MsgRecv(m, drpcEncoding_File_sql_execinfrapb_api_proto{})
}

type DRPCDistSQLServer interface {
	SetupFlow(context.Context, *SetupFlowRequest) (*SimpleResponse, error)
	CancelDeadFlows(context.Context, *CancelDeadFlowsRequest) (*SimpleResponse, error)
	FlowStream(DRPCDistSQL_FlowStreamStream) error
}

type DRPCDistSQLUnimplementedServer struct{}

func (s *DRPCDistSQLUnimplementedServer) SetupFlow(context.Context, *SetupFlowRequest) (*SimpleResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDistSQLUnimplementedServer) CancelDeadFlows(context.Context, *CancelDeadFlowsRequest) (*SimpleResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDistSQLUnimplementedServer) FlowStream(DRPCDistSQL_FlowStreamStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCDistSQLDescription struct{}

func (DRPCDistSQLDescription) NumMethods() int { return 3 }

func (DRPCDistSQLDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.sql.distsqlrun.DistSQL/SetupFlow", drpcEncoding_File_sql_execinfrapb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDistSQLServer).
					SetupFlow(
						ctx,
						in1.(*SetupFlowRequest),
					)
			}, DRPCDistSQLServer.SetupFlow, true
	case 1:
		return "/cockroach.sql.distsqlrun.DistSQL/CancelDeadFlows", drpcEncoding_File_sql_execinfrapb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDistSQLServer).
					CancelDeadFlows(
						ctx,
						in1.(*CancelDeadFlowsRequest),
					)
			}, DRPCDistSQLServer.CancelDeadFlows, true
	case 2:
		return "/cockroach.sql.distsqlrun.DistSQL/FlowStream", drpcEncoding_File_sql_execinfrapb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCDistSQLServer).
					FlowStream(
						&drpcDistSQL_FlowStreamStream{in1.(drpc.Stream)},
					)
			}, DRPCDistSQLServer.FlowStream, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterDistSQL(mux drpc.Mux, impl DRPCDistSQLServer) error {
	return mux.Register(impl, DRPCDistSQLDescription{})
}

type DRPCDistSQL_SetupFlowStream interface {
	drpc.Stream
	SendAndClose(*SimpleResponse) error
}

type RPCDistSQL_SetupFlowStream interface {
	Context() context.Context
	SendAndClose(*SimpleResponse) error
}

type drpcDistSQL_SetupFlowStream struct {
	drpc.Stream
}

func (x *drpcDistSQL_SetupFlowStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcDistSQL_SetupFlowStream) SendAndClose(m *SimpleResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_sql_execinfrapb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDistSQL_CancelDeadFlowsStream interface {
	drpc.Stream
	SendAndClose(*SimpleResponse) error
}

type RPCDistSQL_CancelDeadFlowsStream interface {
	Context() context.Context
	SendAndClose(*SimpleResponse) error
}

type drpcDistSQL_CancelDeadFlowsStream struct {
	drpc.Stream
}

func (x *drpcDistSQL_CancelDeadFlowsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcDistSQL_CancelDeadFlowsStream) SendAndClose(m *SimpleResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_sql_execinfrapb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDistSQL_FlowStreamStream interface {
	drpc.Stream
	Send(*ConsumerSignal) error
	Recv() (*ProducerMessage, error)
	RecvMsg(interface{}) error
}

type RPCDistSQL_FlowStreamStream interface {
	Context() context.Context
	Send(*ConsumerSignal) error
	Recv() (*ProducerMessage, error)
	RecvMsg(interface{}) error
}

type drpcDistSQL_FlowStreamStream struct {
	drpc.Stream
}

func (x *drpcDistSQL_FlowStreamStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcDistSQL_FlowStreamStream) Send(m *ConsumerSignal) error {
	return x.MsgSend(m, drpcEncoding_File_sql_execinfrapb_api_proto{})
}

func (x *drpcDistSQL_FlowStreamStream) Recv() (*ProducerMessage, error) {
	m := new(ProducerMessage)
	if err := x.MsgRecv(m, drpcEncoding_File_sql_execinfrapb_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcDistSQL_FlowStreamStream) RecvMsg(m interface{}) error {
	return x.MsgRecv(m, drpcEncoding_File_sql_execinfrapb_api_proto{})
}

type RPCDistSQLClient interface {
	SetupFlow(ctx context.Context, in *SetupFlowRequest) (*SimpleResponse, error)
	CancelDeadFlows(ctx context.Context, in *CancelDeadFlowsRequest) (*SimpleResponse, error)
	FlowStream(ctx context.Context) (RPCDistSQL_FlowStreamClient, error)
}

// DistSQL gRPC -> RPC adapter
type grpcDistSQLClientAdapter distSQLClient

func NewGRPCDistSQLClientAdapter(conn *grpc.ClientConn) RPCDistSQLClient {
	return (*grpcDistSQLClientAdapter)(&distSQLClient{conn})
}

func (a *grpcDistSQLClientAdapter) SetupFlow(ctx context.Context, in *SetupFlowRequest) (*SimpleResponse, error) {
	return (*distSQLClient)(a).SetupFlow(ctx, in)
}

func (a *grpcDistSQLClientAdapter) CancelDeadFlows(ctx context.Context, in *CancelDeadFlowsRequest) (*SimpleResponse, error) {
	return (*distSQLClient)(a).CancelDeadFlows(ctx, in)
}

func (a *grpcDistSQLClientAdapter) FlowStream(ctx context.Context) (RPCDistSQL_FlowStreamClient, error) {
	return (*distSQLClient)(a).FlowStream(ctx)
}

// compile-time assertion
var _ RPCDistSQLClient = (*grpcDistSQLClientAdapter)(nil)

// DistSQL DRPC -> RPC adapter
type drpcDistSQLClientAdapter drpcDistSQLClient

func NewDRPCDistSQLClientAdapter(conn drpc.Conn) RPCDistSQLClient {
	return (*drpcDistSQLClientAdapter)(&drpcDistSQLClient{conn})
}

func (a *drpcDistSQLClientAdapter) SetupFlow(ctx context.Context, in *SetupFlowRequest) (*SimpleResponse, error) {
	return (*drpcDistSQLClient)(a).SetupFlow(ctx, in)
}

func (a *drpcDistSQLClientAdapter) CancelDeadFlows(ctx context.Context, in *CancelDeadFlowsRequest) (*SimpleResponse, error) {
	return (*drpcDistSQLClient)(a).CancelDeadFlows(ctx, in)
}

func (a *drpcDistSQLClientAdapter) FlowStream(ctx context.Context) (RPCDistSQL_FlowStreamClient, error) {
	return (*drpcDistSQLClient)(a).FlowStream(ctx)
}

// compile-time assertion
var _ RPCDistSQLClient = (*drpcDistSQLClientAdapter)(nil)
