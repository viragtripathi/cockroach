// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// source: keyvisualizer/keyvispb/key_visualizer.proto

package keyvispb

import (
	bytes "bytes"
	context "context"
	errors "github.com/cockroachdb/errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_keyvisualizer_keyvispb_key_visualizer_proto struct{}

func (drpcEncoding_File_keyvisualizer_keyvispb_key_visualizer_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_keyvisualizer_keyvispb_key_visualizer_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_keyvisualizer_keyvispb_key_visualizer_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_keyvisualizer_keyvispb_key_visualizer_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCKeyVisualizerClient interface {
	DRPCConn() drpc.Conn

	UpdateBoundaries(ctx context.Context, in *UpdateBoundariesRequest) (*UpdateBoundariesResponse, error)
	GetSamples(ctx context.Context, in *GetSamplesRequest) (*GetSamplesResponse, error)
}

type drpcKeyVisualizerClient struct {
	cc drpc.Conn
}

func NewDRPCKeyVisualizerClient(cc drpc.Conn) DRPCKeyVisualizerClient {
	return &drpcKeyVisualizerClient{cc}
}

func (c *drpcKeyVisualizerClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcKeyVisualizerClient) UpdateBoundaries(ctx context.Context, in *UpdateBoundariesRequest) (*UpdateBoundariesResponse, error) {
	out := new(UpdateBoundariesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.keyvisualizer.keyvispb.KeyVisualizer/UpdateBoundaries", drpcEncoding_File_keyvisualizer_keyvispb_key_visualizer_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcKeyVisualizerClient) GetSamples(ctx context.Context, in *GetSamplesRequest) (*GetSamplesResponse, error) {
	out := new(GetSamplesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.keyvisualizer.keyvispb.KeyVisualizer/GetSamples", drpcEncoding_File_keyvisualizer_keyvispb_key_visualizer_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCKeyVisualizerServer interface {
	UpdateBoundaries(context.Context, *UpdateBoundariesRequest) (*UpdateBoundariesResponse, error)
	GetSamples(context.Context, *GetSamplesRequest) (*GetSamplesResponse, error)
}

type DRPCKeyVisualizerUnimplementedServer struct{}

func (s *DRPCKeyVisualizerUnimplementedServer) UpdateBoundaries(context.Context, *UpdateBoundariesRequest) (*UpdateBoundariesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCKeyVisualizerUnimplementedServer) GetSamples(context.Context, *GetSamplesRequest) (*GetSamplesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCKeyVisualizerDescription struct{}

func (DRPCKeyVisualizerDescription) NumMethods() int { return 2 }

func (DRPCKeyVisualizerDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.keyvisualizer.keyvispb.KeyVisualizer/UpdateBoundaries", drpcEncoding_File_keyvisualizer_keyvispb_key_visualizer_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCKeyVisualizerServer).
					UpdateBoundaries(
						ctx,
						in1.(*UpdateBoundariesRequest),
					)
			}, DRPCKeyVisualizerServer.UpdateBoundaries, true
	case 1:
		return "/cockroach.keyvisualizer.keyvispb.KeyVisualizer/GetSamples", drpcEncoding_File_keyvisualizer_keyvispb_key_visualizer_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCKeyVisualizerServer).
					GetSamples(
						ctx,
						in1.(*GetSamplesRequest),
					)
			}, DRPCKeyVisualizerServer.GetSamples, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterKeyVisualizer(mux drpc.Mux, impl DRPCKeyVisualizerServer) error {
	return mux.Register(impl, DRPCKeyVisualizerDescription{})
}

type DRPCKeyVisualizer_UpdateBoundariesStream interface {
	drpc.Stream
	SendAndClose(*UpdateBoundariesResponse) error
}

type RPCKeyVisualizer_UpdateBoundariesStream interface {
	Context() context.Context
	SendAndClose(*UpdateBoundariesResponse) error
}

type drpcKeyVisualizer_UpdateBoundariesStream struct {
	drpc.Stream
}

func (x *drpcKeyVisualizer_UpdateBoundariesStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcKeyVisualizer_UpdateBoundariesStream) SendAndClose(m *UpdateBoundariesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_keyvisualizer_keyvispb_key_visualizer_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCKeyVisualizer_GetSamplesStream interface {
	drpc.Stream
	SendAndClose(*GetSamplesResponse) error
}

type RPCKeyVisualizer_GetSamplesStream interface {
	Context() context.Context
	SendAndClose(*GetSamplesResponse) error
}

type drpcKeyVisualizer_GetSamplesStream struct {
	drpc.Stream
}

func (x *drpcKeyVisualizer_GetSamplesStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcKeyVisualizer_GetSamplesStream) SendAndClose(m *GetSamplesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_keyvisualizer_keyvispb_key_visualizer_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type RPCKeyVisualizerClient interface {
	UpdateBoundaries(ctx context.Context, in *UpdateBoundariesRequest) (*UpdateBoundariesResponse, error)
	GetSamples(ctx context.Context, in *GetSamplesRequest) (*GetSamplesResponse, error)
}

// KeyVisualizer gRPC -> RPC adapter
type grpcKeyVisualizerClientAdapter keyVisualizerClient

func NewGRPCKeyVisualizerClientAdapter(conn *grpc.ClientConn) RPCKeyVisualizerClient {
	return (*grpcKeyVisualizerClientAdapter)(&keyVisualizerClient{conn})
}

func (a *grpcKeyVisualizerClientAdapter) UpdateBoundaries(ctx context.Context, in *UpdateBoundariesRequest) (*UpdateBoundariesResponse, error) {
	return (*keyVisualizerClient)(a).UpdateBoundaries(ctx, in)
}

func (a *grpcKeyVisualizerClientAdapter) GetSamples(ctx context.Context, in *GetSamplesRequest) (*GetSamplesResponse, error) {
	return (*keyVisualizerClient)(a).GetSamples(ctx, in)
}

// compile-time assertion
var _ RPCKeyVisualizerClient = (*grpcKeyVisualizerClientAdapter)(nil)

// KeyVisualizer DRPC -> RPC adapter
type drpcKeyVisualizerClientAdapter drpcKeyVisualizerClient

func NewDRPCKeyVisualizerClientAdapter(conn drpc.Conn) RPCKeyVisualizerClient {
	return (*drpcKeyVisualizerClientAdapter)(&drpcKeyVisualizerClient{conn})
}

func (a *drpcKeyVisualizerClientAdapter) UpdateBoundaries(ctx context.Context, in *UpdateBoundariesRequest) (*UpdateBoundariesResponse, error) {
	return (*drpcKeyVisualizerClient)(a).UpdateBoundaries(ctx, in)
}

func (a *drpcKeyVisualizerClientAdapter) GetSamples(ctx context.Context, in *GetSamplesRequest) (*GetSamplesResponse, error) {
	return (*drpcKeyVisualizerClient)(a).GetSamples(ctx, in)
}

// compile-time assertion
var _ RPCKeyVisualizerClient = (*drpcKeyVisualizerClientAdapter)(nil)
