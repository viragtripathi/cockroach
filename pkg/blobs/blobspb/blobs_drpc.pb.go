// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// source: blobs/blobspb/blobs.proto

package blobspb

import (
	bytes "bytes"
	context "context"
	errors "github.com/cockroachdb/errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_blobs_blobspb_blobs_proto struct{}

func (drpcEncoding_File_blobs_blobspb_blobs_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_blobs_blobspb_blobs_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_blobs_blobspb_blobs_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_blobs_blobspb_blobs_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCBlobClient interface {
	DRPCConn() drpc.Conn

	List(ctx context.Context, in *GlobRequest) (*GlobResponse, error)
	Delete(ctx context.Context, in *DeleteRequest) (*DeleteResponse, error)
	Stat(ctx context.Context, in *StatRequest) (*BlobStat, error)
	GetStream(ctx context.Context, in *GetRequest) (DRPCBlob_GetStreamClient, error)
	PutStream(ctx context.Context) (DRPCBlob_PutStreamClient, error)
}

type drpcBlobClient struct {
	cc drpc.Conn
}

func NewDRPCBlobClient(cc drpc.Conn) DRPCBlobClient {
	return &drpcBlobClient{cc}
}

func (c *drpcBlobClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcBlobClient) List(ctx context.Context, in *GlobRequest) (*GlobResponse, error) {
	out := new(GlobResponse)
	err := c.cc.Invoke(ctx, "/cockroach.blobs.Blob/List", drpcEncoding_File_blobs_blobspb_blobs_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcBlobClient) Delete(ctx context.Context, in *DeleteRequest) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/cockroach.blobs.Blob/Delete", drpcEncoding_File_blobs_blobspb_blobs_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcBlobClient) Stat(ctx context.Context, in *StatRequest) (*BlobStat, error) {
	out := new(BlobStat)
	err := c.cc.Invoke(ctx, "/cockroach.blobs.Blob/Stat", drpcEncoding_File_blobs_blobspb_blobs_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcBlobClient) GetStream(ctx context.Context, in *GetRequest) (DRPCBlob_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.blobs.Blob/GetStream", drpcEncoding_File_blobs_blobspb_blobs_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcBlob_GetStreamClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_blobs_blobspb_blobs_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCBlob_GetStreamClient interface {
	drpc.Stream
	Recv() (*StreamChunk, error)
}

type RPCBlob_GetStreamClient interface {
	Context() context.Context
	CloseSend() error
	Recv() (*StreamChunk, error)
}

type drpcBlob_GetStreamClient struct {
	drpc.Stream
}

func (x *drpcBlob_GetStreamClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcBlob_GetStreamClient) Recv() (*StreamChunk, error) {
	m := new(StreamChunk)
	if err := x.MsgRecv(m, drpcEncoding_File_blobs_blobspb_blobs_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcBlob_GetStreamClient) RecvMsg(m *StreamChunk) error {
	return x.MsgRecv(m, drpcEncoding_File_blobs_blobspb_blobs_proto{})
}

func (c *drpcBlobClient) PutStream(ctx context.Context) (DRPCBlob_PutStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.blobs.Blob/PutStream", drpcEncoding_File_blobs_blobspb_blobs_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcBlob_PutStreamClient{stream}
	return x, nil
}

type DRPCBlob_PutStreamClient interface {
	drpc.Stream
	Send(*StreamChunk) error
	CloseAndRecv() (*StreamResponse, error)
}

type RPCBlob_PutStreamClient interface {
	Context() context.Context
	CloseSend() error
	Send(*StreamChunk) error
	CloseAndRecv() (*StreamResponse, error)
}

type drpcBlob_PutStreamClient struct {
	drpc.Stream
}

func (x *drpcBlob_PutStreamClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcBlob_PutStreamClient) Send(m *StreamChunk) error {
	return x.MsgSend(m, drpcEncoding_File_blobs_blobspb_blobs_proto{})
}

func (x *drpcBlob_PutStreamClient) CloseAndRecv() (*StreamResponse, error) {
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_blobs_blobspb_blobs_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcBlob_PutStreamClient) CloseAndRecvMsg(m *StreamResponse) error {
	if err := x.CloseSend(); err != nil {
		return err
	}
	return x.MsgRecv(m, drpcEncoding_File_blobs_blobspb_blobs_proto{})
}

type DRPCBlobServer interface {
	List(context.Context, *GlobRequest) (*GlobResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Stat(context.Context, *StatRequest) (*BlobStat, error)
	GetStream(*GetRequest, DRPCBlob_GetStreamStream) error
	PutStream(DRPCBlob_PutStreamStream) error
}

type DRPCBlobUnimplementedServer struct{}

func (s *DRPCBlobUnimplementedServer) List(context.Context, *GlobRequest) (*GlobResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCBlobUnimplementedServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCBlobUnimplementedServer) Stat(context.Context, *StatRequest) (*BlobStat, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCBlobUnimplementedServer) GetStream(*GetRequest, DRPCBlob_GetStreamStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCBlobUnimplementedServer) PutStream(DRPCBlob_PutStreamStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCBlobDescription struct{}

func (DRPCBlobDescription) NumMethods() int { return 5 }

func (DRPCBlobDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.blobs.Blob/List", drpcEncoding_File_blobs_blobspb_blobs_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCBlobServer).
					List(
						ctx,
						in1.(*GlobRequest),
					)
			}, DRPCBlobServer.List, true
	case 1:
		return "/cockroach.blobs.Blob/Delete", drpcEncoding_File_blobs_blobspb_blobs_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCBlobServer).
					Delete(
						ctx,
						in1.(*DeleteRequest),
					)
			}, DRPCBlobServer.Delete, true
	case 2:
		return "/cockroach.blobs.Blob/Stat", drpcEncoding_File_blobs_blobspb_blobs_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCBlobServer).
					Stat(
						ctx,
						in1.(*StatRequest),
					)
			}, DRPCBlobServer.Stat, true
	case 3:
		return "/cockroach.blobs.Blob/GetStream", drpcEncoding_File_blobs_blobspb_blobs_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCBlobServer).
					GetStream(
						in1.(*GetRequest),
						&drpcBlob_GetStreamStream{in2.(drpc.Stream)},
					)
			}, DRPCBlobServer.GetStream, true
	case 4:
		return "/cockroach.blobs.Blob/PutStream", drpcEncoding_File_blobs_blobspb_blobs_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCBlobServer).
					PutStream(
						&drpcBlob_PutStreamStream{in1.(drpc.Stream)},
					)
			}, DRPCBlobServer.PutStream, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterBlob(mux drpc.Mux, impl DRPCBlobServer) error {
	return mux.Register(impl, DRPCBlobDescription{})
}

type DRPCBlob_ListStream interface {
	drpc.Stream
	SendAndClose(*GlobResponse) error
}

type RPCBlob_ListStream interface {
	Context() context.Context
	SendAndClose(*GlobResponse) error
}

type drpcBlob_ListStream struct {
	drpc.Stream
}

func (x *drpcBlob_ListStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcBlob_ListStream) SendAndClose(m *GlobResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_blobs_blobspb_blobs_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCBlob_DeleteStream interface {
	drpc.Stream
	SendAndClose(*DeleteResponse) error
}

type RPCBlob_DeleteStream interface {
	Context() context.Context
	SendAndClose(*DeleteResponse) error
}

type drpcBlob_DeleteStream struct {
	drpc.Stream
}

func (x *drpcBlob_DeleteStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcBlob_DeleteStream) SendAndClose(m *DeleteResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_blobs_blobspb_blobs_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCBlob_StatStream interface {
	drpc.Stream
	SendAndClose(*BlobStat) error
}

type RPCBlob_StatStream interface {
	Context() context.Context
	SendAndClose(*BlobStat) error
}

type drpcBlob_StatStream struct {
	drpc.Stream
}

func (x *drpcBlob_StatStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcBlob_StatStream) SendAndClose(m *BlobStat) error {
	if err := x.MsgSend(m, drpcEncoding_File_blobs_blobspb_blobs_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCBlob_GetStreamStream interface {
	drpc.Stream
	Send(*StreamChunk) error
}

type RPCBlob_GetStreamStream interface {
	Context() context.Context
	Send(*StreamChunk) error
}

type drpcBlob_GetStreamStream struct {
	drpc.Stream
}

func (x *drpcBlob_GetStreamStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcBlob_GetStreamStream) Send(m *StreamChunk) error {
	return x.MsgSend(m, drpcEncoding_File_blobs_blobspb_blobs_proto{})
}

type DRPCBlob_PutStreamStream interface {
	drpc.Stream
	SendAndClose(*StreamResponse) error
	Recv() (*StreamChunk, error)
	RecvMsg(interface{}) error
}

type RPCBlob_PutStreamStream interface {
	Context() context.Context
	SendAndClose(*StreamResponse) error
	Recv() (*StreamChunk, error)
	RecvMsg(interface{}) error
}

type drpcBlob_PutStreamStream struct {
	drpc.Stream
}

func (x *drpcBlob_PutStreamStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcBlob_PutStreamStream) SendAndClose(m *StreamResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_blobs_blobspb_blobs_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

func (x *drpcBlob_PutStreamStream) Recv() (*StreamChunk, error) {
	m := new(StreamChunk)
	if err := x.MsgRecv(m, drpcEncoding_File_blobs_blobspb_blobs_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcBlob_PutStreamStream) RecvMsg(m interface{}) error {
	return x.MsgRecv(m, drpcEncoding_File_blobs_blobspb_blobs_proto{})
}

type RPCBlobClient interface {
	List(ctx context.Context, in *GlobRequest) (*GlobResponse, error)
	Delete(ctx context.Context, in *DeleteRequest) (*DeleteResponse, error)
	Stat(ctx context.Context, in *StatRequest) (*BlobStat, error)
	GetStream(ctx context.Context, in *GetRequest) (RPCBlob_GetStreamClient, error)
	PutStream(ctx context.Context) (RPCBlob_PutStreamClient, error)
}

// Blob gRPC -> RPC adapter
type grpcBlobClientAdapter blobClient

func NewGRPCBlobClientAdapter(conn *grpc.ClientConn) RPCBlobClient {
	return (*grpcBlobClientAdapter)(&blobClient{conn})
}

func (a *grpcBlobClientAdapter) List(ctx context.Context, in *GlobRequest) (*GlobResponse, error) {
	return (*blobClient)(a).List(ctx, in)
}

func (a *grpcBlobClientAdapter) Delete(ctx context.Context, in *DeleteRequest) (*DeleteResponse, error) {
	return (*blobClient)(a).Delete(ctx, in)
}

func (a *grpcBlobClientAdapter) Stat(ctx context.Context, in *StatRequest) (*BlobStat, error) {
	return (*blobClient)(a).Stat(ctx, in)
}

func (a *grpcBlobClientAdapter) GetStream(ctx context.Context, in *GetRequest) (RPCBlob_GetStreamClient, error) {
	return (*blobClient)(a).GetStream(ctx, in)
}

func (a *grpcBlobClientAdapter) PutStream(ctx context.Context) (RPCBlob_PutStreamClient, error) {
	return (*blobClient)(a).PutStream(ctx)
}

// compile-time assertion
var _ RPCBlobClient = (*grpcBlobClientAdapter)(nil)

// Blob DRPC -> RPC adapter
type drpcBlobClientAdapter drpcBlobClient

func NewDRPCBlobClientAdapter(conn drpc.Conn) RPCBlobClient {
	return (*drpcBlobClientAdapter)(&drpcBlobClient{conn})
}

func (a *drpcBlobClientAdapter) List(ctx context.Context, in *GlobRequest) (*GlobResponse, error) {
	return (*drpcBlobClient)(a).List(ctx, in)
}

func (a *drpcBlobClientAdapter) Delete(ctx context.Context, in *DeleteRequest) (*DeleteResponse, error) {
	return (*drpcBlobClient)(a).Delete(ctx, in)
}

func (a *drpcBlobClientAdapter) Stat(ctx context.Context, in *StatRequest) (*BlobStat, error) {
	return (*drpcBlobClient)(a).Stat(ctx, in)
}

func (a *drpcBlobClientAdapter) GetStream(ctx context.Context, in *GetRequest) (RPCBlob_GetStreamClient, error) {
	return (*drpcBlobClient)(a).GetStream(ctx, in)
}

func (a *drpcBlobClientAdapter) PutStream(ctx context.Context) (RPCBlob_PutStreamClient, error) {
	return (*drpcBlobClient)(a).PutStream(ctx)
}

// compile-time assertion
var _ RPCBlobClient = (*drpcBlobClientAdapter)(nil)
