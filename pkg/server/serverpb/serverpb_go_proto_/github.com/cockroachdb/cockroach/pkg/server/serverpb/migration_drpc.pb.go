// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// source: server/serverpb/migration.proto

package serverpb

import (
	bytes "bytes"
	context "context"
	errors "github.com/cockroachdb/errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_server_serverpb_migration_proto struct{}

func (drpcEncoding_File_server_serverpb_migration_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_server_serverpb_migration_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_server_serverpb_migration_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_server_serverpb_migration_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCMigrationClient interface {
	DRPCConn() drpc.Conn

	ValidateTargetClusterVersion(ctx context.Context, in *ValidateTargetClusterVersionRequest) (*ValidateTargetClusterVersionResponse, error)
	BumpClusterVersion(ctx context.Context, in *BumpClusterVersionRequest) (*BumpClusterVersionResponse, error)
	SyncAllEngines(ctx context.Context, in *SyncAllEnginesRequest) (*SyncAllEnginesResponse, error)
	PurgeOutdatedReplicas(ctx context.Context, in *PurgeOutdatedReplicasRequest) (*PurgeOutdatedReplicasResponse, error)
	WaitForSpanConfigSubscription(ctx context.Context, in *WaitForSpanConfigSubscriptionRequest) (*WaitForSpanConfigSubscriptionResponse, error)
}

type drpcMigrationClient struct {
	cc drpc.Conn
}

func NewDRPCMigrationClient(cc drpc.Conn) DRPCMigrationClient {
	return &drpcMigrationClient{cc}
}

func (c *drpcMigrationClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcMigrationClient) ValidateTargetClusterVersion(ctx context.Context, in *ValidateTargetClusterVersionRequest) (*ValidateTargetClusterVersionResponse, error) {
	out := new(ValidateTargetClusterVersionResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Migration/ValidateTargetClusterVersion", drpcEncoding_File_server_serverpb_migration_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMigrationClient) BumpClusterVersion(ctx context.Context, in *BumpClusterVersionRequest) (*BumpClusterVersionResponse, error) {
	out := new(BumpClusterVersionResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Migration/BumpClusterVersion", drpcEncoding_File_server_serverpb_migration_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMigrationClient) SyncAllEngines(ctx context.Context, in *SyncAllEnginesRequest) (*SyncAllEnginesResponse, error) {
	out := new(SyncAllEnginesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Migration/SyncAllEngines", drpcEncoding_File_server_serverpb_migration_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMigrationClient) PurgeOutdatedReplicas(ctx context.Context, in *PurgeOutdatedReplicasRequest) (*PurgeOutdatedReplicasResponse, error) {
	out := new(PurgeOutdatedReplicasResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Migration/PurgeOutdatedReplicas", drpcEncoding_File_server_serverpb_migration_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMigrationClient) WaitForSpanConfigSubscription(ctx context.Context, in *WaitForSpanConfigSubscriptionRequest) (*WaitForSpanConfigSubscriptionResponse, error) {
	out := new(WaitForSpanConfigSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Migration/WaitForSpanConfigSubscription", drpcEncoding_File_server_serverpb_migration_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCMigrationServer interface {
	ValidateTargetClusterVersion(context.Context, *ValidateTargetClusterVersionRequest) (*ValidateTargetClusterVersionResponse, error)
	BumpClusterVersion(context.Context, *BumpClusterVersionRequest) (*BumpClusterVersionResponse, error)
	SyncAllEngines(context.Context, *SyncAllEnginesRequest) (*SyncAllEnginesResponse, error)
	PurgeOutdatedReplicas(context.Context, *PurgeOutdatedReplicasRequest) (*PurgeOutdatedReplicasResponse, error)
	WaitForSpanConfigSubscription(context.Context, *WaitForSpanConfigSubscriptionRequest) (*WaitForSpanConfigSubscriptionResponse, error)
}

type DRPCMigrationUnimplementedServer struct{}

func (s *DRPCMigrationUnimplementedServer) ValidateTargetClusterVersion(context.Context, *ValidateTargetClusterVersionRequest) (*ValidateTargetClusterVersionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMigrationUnimplementedServer) BumpClusterVersion(context.Context, *BumpClusterVersionRequest) (*BumpClusterVersionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMigrationUnimplementedServer) SyncAllEngines(context.Context, *SyncAllEnginesRequest) (*SyncAllEnginesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMigrationUnimplementedServer) PurgeOutdatedReplicas(context.Context, *PurgeOutdatedReplicasRequest) (*PurgeOutdatedReplicasResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMigrationUnimplementedServer) WaitForSpanConfigSubscription(context.Context, *WaitForSpanConfigSubscriptionRequest) (*WaitForSpanConfigSubscriptionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCMigrationDescription struct{}

func (DRPCMigrationDescription) NumMethods() int { return 5 }

func (DRPCMigrationDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.server.serverpb.Migration/ValidateTargetClusterVersion", drpcEncoding_File_server_serverpb_migration_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMigrationServer).
					ValidateTargetClusterVersion(
						ctx,
						in1.(*ValidateTargetClusterVersionRequest),
					)
			}, DRPCMigrationServer.ValidateTargetClusterVersion, true
	case 1:
		return "/cockroach.server.serverpb.Migration/BumpClusterVersion", drpcEncoding_File_server_serverpb_migration_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMigrationServer).
					BumpClusterVersion(
						ctx,
						in1.(*BumpClusterVersionRequest),
					)
			}, DRPCMigrationServer.BumpClusterVersion, true
	case 2:
		return "/cockroach.server.serverpb.Migration/SyncAllEngines", drpcEncoding_File_server_serverpb_migration_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMigrationServer).
					SyncAllEngines(
						ctx,
						in1.(*SyncAllEnginesRequest),
					)
			}, DRPCMigrationServer.SyncAllEngines, true
	case 3:
		return "/cockroach.server.serverpb.Migration/PurgeOutdatedReplicas", drpcEncoding_File_server_serverpb_migration_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMigrationServer).
					PurgeOutdatedReplicas(
						ctx,
						in1.(*PurgeOutdatedReplicasRequest),
					)
			}, DRPCMigrationServer.PurgeOutdatedReplicas, true
	case 4:
		return "/cockroach.server.serverpb.Migration/WaitForSpanConfigSubscription", drpcEncoding_File_server_serverpb_migration_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMigrationServer).
					WaitForSpanConfigSubscription(
						ctx,
						in1.(*WaitForSpanConfigSubscriptionRequest),
					)
			}, DRPCMigrationServer.WaitForSpanConfigSubscription, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterMigration(mux drpc.Mux, impl DRPCMigrationServer) error {
	return mux.Register(impl, DRPCMigrationDescription{})
}

type DRPCMigration_ValidateTargetClusterVersionStream interface {
	drpc.Stream
	SendAndClose(*ValidateTargetClusterVersionResponse) error
}

type RPCMigration_ValidateTargetClusterVersionStream interface {
	Context() context.Context
	SendAndClose(*ValidateTargetClusterVersionResponse) error
}

type drpcMigration_ValidateTargetClusterVersionStream struct {
	drpc.Stream
}

func (x *drpcMigration_ValidateTargetClusterVersionStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcMigration_ValidateTargetClusterVersionStream) SendAndClose(m *ValidateTargetClusterVersionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_migration_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMigration_BumpClusterVersionStream interface {
	drpc.Stream
	SendAndClose(*BumpClusterVersionResponse) error
}

type RPCMigration_BumpClusterVersionStream interface {
	Context() context.Context
	SendAndClose(*BumpClusterVersionResponse) error
}

type drpcMigration_BumpClusterVersionStream struct {
	drpc.Stream
}

func (x *drpcMigration_BumpClusterVersionStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcMigration_BumpClusterVersionStream) SendAndClose(m *BumpClusterVersionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_migration_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMigration_SyncAllEnginesStream interface {
	drpc.Stream
	SendAndClose(*SyncAllEnginesResponse) error
}

type RPCMigration_SyncAllEnginesStream interface {
	Context() context.Context
	SendAndClose(*SyncAllEnginesResponse) error
}

type drpcMigration_SyncAllEnginesStream struct {
	drpc.Stream
}

func (x *drpcMigration_SyncAllEnginesStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcMigration_SyncAllEnginesStream) SendAndClose(m *SyncAllEnginesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_migration_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMigration_PurgeOutdatedReplicasStream interface {
	drpc.Stream
	SendAndClose(*PurgeOutdatedReplicasResponse) error
}

type RPCMigration_PurgeOutdatedReplicasStream interface {
	Context() context.Context
	SendAndClose(*PurgeOutdatedReplicasResponse) error
}

type drpcMigration_PurgeOutdatedReplicasStream struct {
	drpc.Stream
}

func (x *drpcMigration_PurgeOutdatedReplicasStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcMigration_PurgeOutdatedReplicasStream) SendAndClose(m *PurgeOutdatedReplicasResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_migration_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMigration_WaitForSpanConfigSubscriptionStream interface {
	drpc.Stream
	SendAndClose(*WaitForSpanConfigSubscriptionResponse) error
}

type RPCMigration_WaitForSpanConfigSubscriptionStream interface {
	Context() context.Context
	SendAndClose(*WaitForSpanConfigSubscriptionResponse) error
}

type drpcMigration_WaitForSpanConfigSubscriptionStream struct {
	drpc.Stream
}

func (x *drpcMigration_WaitForSpanConfigSubscriptionStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcMigration_WaitForSpanConfigSubscriptionStream) SendAndClose(m *WaitForSpanConfigSubscriptionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_migration_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type RPCMigrationClient interface {
	ValidateTargetClusterVersion(ctx context.Context, in *ValidateTargetClusterVersionRequest) (*ValidateTargetClusterVersionResponse, error)
	BumpClusterVersion(ctx context.Context, in *BumpClusterVersionRequest) (*BumpClusterVersionResponse, error)
	SyncAllEngines(ctx context.Context, in *SyncAllEnginesRequest) (*SyncAllEnginesResponse, error)
	PurgeOutdatedReplicas(ctx context.Context, in *PurgeOutdatedReplicasRequest) (*PurgeOutdatedReplicasResponse, error)
	WaitForSpanConfigSubscription(ctx context.Context, in *WaitForSpanConfigSubscriptionRequest) (*WaitForSpanConfigSubscriptionResponse, error)
}

// Migration gRPC -> RPC adapter
type grpcMigrationClientAdapter migrationClient

func NewGRPCMigrationClientAdapter(conn *grpc.ClientConn) RPCMigrationClient {
	return (*grpcMigrationClientAdapter)(&migrationClient{conn})
}

func (a *grpcMigrationClientAdapter) ValidateTargetClusterVersion(ctx context.Context, in *ValidateTargetClusterVersionRequest) (*ValidateTargetClusterVersionResponse, error) {
	return (*migrationClient)(a).ValidateTargetClusterVersion(ctx, in)
}

func (a *grpcMigrationClientAdapter) BumpClusterVersion(ctx context.Context, in *BumpClusterVersionRequest) (*BumpClusterVersionResponse, error) {
	return (*migrationClient)(a).BumpClusterVersion(ctx, in)
}

func (a *grpcMigrationClientAdapter) SyncAllEngines(ctx context.Context, in *SyncAllEnginesRequest) (*SyncAllEnginesResponse, error) {
	return (*migrationClient)(a).SyncAllEngines(ctx, in)
}

func (a *grpcMigrationClientAdapter) PurgeOutdatedReplicas(ctx context.Context, in *PurgeOutdatedReplicasRequest) (*PurgeOutdatedReplicasResponse, error) {
	return (*migrationClient)(a).PurgeOutdatedReplicas(ctx, in)
}

func (a *grpcMigrationClientAdapter) WaitForSpanConfigSubscription(ctx context.Context, in *WaitForSpanConfigSubscriptionRequest) (*WaitForSpanConfigSubscriptionResponse, error) {
	return (*migrationClient)(a).WaitForSpanConfigSubscription(ctx, in)
}

// compile-time assertion
var _ RPCMigrationClient = (*grpcMigrationClientAdapter)(nil)

// Migration DRPC -> RPC adapter
type drpcMigrationClientAdapter drpcMigrationClient

func NewDRPCMigrationClientAdapter(conn drpc.Conn) RPCMigrationClient {
	return (*drpcMigrationClientAdapter)(&drpcMigrationClient{conn})
}

func (a *drpcMigrationClientAdapter) ValidateTargetClusterVersion(ctx context.Context, in *ValidateTargetClusterVersionRequest) (*ValidateTargetClusterVersionResponse, error) {
	return (*drpcMigrationClient)(a).ValidateTargetClusterVersion(ctx, in)
}

func (a *drpcMigrationClientAdapter) BumpClusterVersion(ctx context.Context, in *BumpClusterVersionRequest) (*BumpClusterVersionResponse, error) {
	return (*drpcMigrationClient)(a).BumpClusterVersion(ctx, in)
}

func (a *drpcMigrationClientAdapter) SyncAllEngines(ctx context.Context, in *SyncAllEnginesRequest) (*SyncAllEnginesResponse, error) {
	return (*drpcMigrationClient)(a).SyncAllEngines(ctx, in)
}

func (a *drpcMigrationClientAdapter) PurgeOutdatedReplicas(ctx context.Context, in *PurgeOutdatedReplicasRequest) (*PurgeOutdatedReplicasResponse, error) {
	return (*drpcMigrationClient)(a).PurgeOutdatedReplicas(ctx, in)
}

func (a *drpcMigrationClientAdapter) WaitForSpanConfigSubscription(ctx context.Context, in *WaitForSpanConfigSubscriptionRequest) (*WaitForSpanConfigSubscriptionResponse, error) {
	return (*drpcMigrationClient)(a).WaitForSpanConfigSubscription(ctx, in)
}

// compile-time assertion
var _ RPCMigrationClient = (*drpcMigrationClientAdapter)(nil)
