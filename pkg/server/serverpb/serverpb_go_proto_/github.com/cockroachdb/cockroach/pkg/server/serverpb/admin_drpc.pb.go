// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// source: server/serverpb/admin.proto

package serverpb

import (
	bytes "bytes"
	context "context"
	kvpb "github.com/cockroachdb/cockroach/pkg/kv/kvpb"
	errors "github.com/cockroachdb/errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_server_serverpb_admin_proto struct{}

func (drpcEncoding_File_server_serverpb_admin_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_server_serverpb_admin_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_server_serverpb_admin_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_server_serverpb_admin_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCAdminClient interface {
	DRPCConn() drpc.Conn

	Users(ctx context.Context, in *UsersRequest) (*UsersResponse, error)
	Databases(ctx context.Context, in *DatabasesRequest) (*DatabasesResponse, error)
	DatabaseDetails(ctx context.Context, in *DatabaseDetailsRequest) (*DatabaseDetailsResponse, error)
	TableDetails(ctx context.Context, in *TableDetailsRequest) (*TableDetailsResponse, error)
	TableStats(ctx context.Context, in *TableStatsRequest) (*TableStatsResponse, error)
	NonTableStats(ctx context.Context, in *NonTableStatsRequest) (*NonTableStatsResponse, error)
	Events(ctx context.Context, in *EventsRequest) (*EventsResponse, error)
	SetUIData(ctx context.Context, in *SetUIDataRequest) (*SetUIDataResponse, error)
	GetUIData(ctx context.Context, in *GetUIDataRequest) (*GetUIDataResponse, error)
	Cluster(ctx context.Context, in *ClusterRequest) (*ClusterResponse, error)
	Settings(ctx context.Context, in *SettingsRequest) (*SettingsResponse, error)
	Health(ctx context.Context, in *HealthRequest) (*HealthResponse, error)
	Liveness(ctx context.Context, in *LivenessRequest) (*LivenessResponse, error)
	Jobs(ctx context.Context, in *JobsRequest) (*JobsResponse, error)
	Job(ctx context.Context, in *JobRequest) (*JobResponse, error)
	Locations(ctx context.Context, in *LocationsRequest) (*LocationsResponse, error)
	QueryPlan(ctx context.Context, in *QueryPlanRequest) (*QueryPlanResponse, error)
	Drain(ctx context.Context, in *DrainRequest) (DRPCAdmin_DrainClient, error)
	DecommissionPreCheck(ctx context.Context, in *DecommissionPreCheckRequest) (*DecommissionPreCheckResponse, error)
	Decommission(ctx context.Context, in *DecommissionRequest) (*DecommissionStatusResponse, error)
	DecommissionStatus(ctx context.Context, in *DecommissionStatusRequest) (*DecommissionStatusResponse, error)
	RangeLog(ctx context.Context, in *RangeLogRequest) (*RangeLogResponse, error)
	DataDistribution(ctx context.Context, in *DataDistributionRequest) (*DataDistributionResponse, error)
	AllMetricMetadata(ctx context.Context, in *MetricMetadataRequest) (*MetricMetadataResponse, error)
	ChartCatalog(ctx context.Context, in *ChartCatalogRequest) (*ChartCatalogResponse, error)
	EnqueueRange(ctx context.Context, in *EnqueueRangeRequest) (*EnqueueRangeResponse, error)
	SendKVBatch(ctx context.Context, in *kvpb.BatchRequest) (*kvpb.BatchResponse, error)
	ListTracingSnapshots(ctx context.Context, in *ListTracingSnapshotsRequest) (*ListTracingSnapshotsResponse, error)
	TakeTracingSnapshot(ctx context.Context, in *TakeTracingSnapshotRequest) (*TakeTracingSnapshotResponse, error)
	GetTracingSnapshot(ctx context.Context, in *GetTracingSnapshotRequest) (*GetTracingSnapshotResponse, error)
	GetTrace(ctx context.Context, in *GetTraceRequest) (*GetTraceResponse, error)
	SetTraceRecordingType(ctx context.Context, in *SetTraceRecordingTypeRequest) (*SetTraceRecordingTypeResponse, error)
	RecoveryCollectReplicaInfo(ctx context.Context, in *RecoveryCollectReplicaInfoRequest) (DRPCAdmin_RecoveryCollectReplicaInfoClient, error)
	RecoveryCollectLocalReplicaInfo(ctx context.Context, in *RecoveryCollectLocalReplicaInfoRequest) (DRPCAdmin_RecoveryCollectLocalReplicaInfoClient, error)
	RecoveryStagePlan(ctx context.Context, in *RecoveryStagePlanRequest) (*RecoveryStagePlanResponse, error)
	RecoveryNodeStatus(ctx context.Context, in *RecoveryNodeStatusRequest) (*RecoveryNodeStatusResponse, error)
	RecoveryVerify(ctx context.Context, in *RecoveryVerifyRequest) (*RecoveryVerifyResponse, error)
	ListTenants(ctx context.Context, in *ListTenantsRequest) (*ListTenantsResponse, error)
	ReadFromTenantInfo(ctx context.Context, in *ReadFromTenantInfoRequest) (*ReadFromTenantInfoResponse, error)
}

type drpcAdminClient struct {
	cc drpc.Conn
}

func NewDRPCAdminClient(cc drpc.Conn) DRPCAdminClient {
	return &drpcAdminClient{cc}
}

func (c *drpcAdminClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcAdminClient) Users(ctx context.Context, in *UsersRequest) (*UsersResponse, error) {
	out := new(UsersResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/Users", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) Databases(ctx context.Context, in *DatabasesRequest) (*DatabasesResponse, error) {
	out := new(DatabasesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/Databases", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) DatabaseDetails(ctx context.Context, in *DatabaseDetailsRequest) (*DatabaseDetailsResponse, error) {
	out := new(DatabaseDetailsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/DatabaseDetails", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) TableDetails(ctx context.Context, in *TableDetailsRequest) (*TableDetailsResponse, error) {
	out := new(TableDetailsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/TableDetails", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) TableStats(ctx context.Context, in *TableStatsRequest) (*TableStatsResponse, error) {
	out := new(TableStatsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/TableStats", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) NonTableStats(ctx context.Context, in *NonTableStatsRequest) (*NonTableStatsResponse, error) {
	out := new(NonTableStatsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/NonTableStats", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) Events(ctx context.Context, in *EventsRequest) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/Events", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) SetUIData(ctx context.Context, in *SetUIDataRequest) (*SetUIDataResponse, error) {
	out := new(SetUIDataResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/SetUIData", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) GetUIData(ctx context.Context, in *GetUIDataRequest) (*GetUIDataResponse, error) {
	out := new(GetUIDataResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/GetUIData", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) Cluster(ctx context.Context, in *ClusterRequest) (*ClusterResponse, error) {
	out := new(ClusterResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/Cluster", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) Settings(ctx context.Context, in *SettingsRequest) (*SettingsResponse, error) {
	out := new(SettingsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/Settings", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) Health(ctx context.Context, in *HealthRequest) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/Health", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) Liveness(ctx context.Context, in *LivenessRequest) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/Liveness", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) Jobs(ctx context.Context, in *JobsRequest) (*JobsResponse, error) {
	out := new(JobsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/Jobs", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) Job(ctx context.Context, in *JobRequest) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/Job", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) Locations(ctx context.Context, in *LocationsRequest) (*LocationsResponse, error) {
	out := new(LocationsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/Locations", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) QueryPlan(ctx context.Context, in *QueryPlanRequest) (*QueryPlanResponse, error) {
	out := new(QueryPlanResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/QueryPlan", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) Drain(ctx context.Context, in *DrainRequest) (DRPCAdmin_DrainClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.server.serverpb.Admin/Drain", drpcEncoding_File_server_serverpb_admin_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcAdmin_DrainClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCAdmin_DrainClient interface {
	drpc.Stream
	Recv() (*DrainResponse, error)
}

type RPCAdmin_DrainClient interface {
	Context() context.Context
	CloseSend() error
	Recv() (*DrainResponse, error)
}

type drpcAdmin_DrainClient struct {
	drpc.Stream
}

func (x *drpcAdmin_DrainClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_DrainClient) Recv() (*DrainResponse, error) {
	m := new(DrainResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcAdmin_DrainClient) RecvMsg(m *DrainResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_server_serverpb_admin_proto{})
}

func (c *drpcAdminClient) DecommissionPreCheck(ctx context.Context, in *DecommissionPreCheckRequest) (*DecommissionPreCheckResponse, error) {
	out := new(DecommissionPreCheckResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/DecommissionPreCheck", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) Decommission(ctx context.Context, in *DecommissionRequest) (*DecommissionStatusResponse, error) {
	out := new(DecommissionStatusResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/Decommission", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) DecommissionStatus(ctx context.Context, in *DecommissionStatusRequest) (*DecommissionStatusResponse, error) {
	out := new(DecommissionStatusResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/DecommissionStatus", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) RangeLog(ctx context.Context, in *RangeLogRequest) (*RangeLogResponse, error) {
	out := new(RangeLogResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/RangeLog", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) DataDistribution(ctx context.Context, in *DataDistributionRequest) (*DataDistributionResponse, error) {
	out := new(DataDistributionResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/DataDistribution", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) AllMetricMetadata(ctx context.Context, in *MetricMetadataRequest) (*MetricMetadataResponse, error) {
	out := new(MetricMetadataResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/AllMetricMetadata", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) ChartCatalog(ctx context.Context, in *ChartCatalogRequest) (*ChartCatalogResponse, error) {
	out := new(ChartCatalogResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/ChartCatalog", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) EnqueueRange(ctx context.Context, in *EnqueueRangeRequest) (*EnqueueRangeResponse, error) {
	out := new(EnqueueRangeResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/EnqueueRange", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) SendKVBatch(ctx context.Context, in *kvpb.BatchRequest) (*kvpb.BatchResponse, error) {
	out := new(kvpb.BatchResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/SendKVBatch", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) ListTracingSnapshots(ctx context.Context, in *ListTracingSnapshotsRequest) (*ListTracingSnapshotsResponse, error) {
	out := new(ListTracingSnapshotsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/ListTracingSnapshots", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) TakeTracingSnapshot(ctx context.Context, in *TakeTracingSnapshotRequest) (*TakeTracingSnapshotResponse, error) {
	out := new(TakeTracingSnapshotResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/TakeTracingSnapshot", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) GetTracingSnapshot(ctx context.Context, in *GetTracingSnapshotRequest) (*GetTracingSnapshotResponse, error) {
	out := new(GetTracingSnapshotResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/GetTracingSnapshot", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) GetTrace(ctx context.Context, in *GetTraceRequest) (*GetTraceResponse, error) {
	out := new(GetTraceResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/GetTrace", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) SetTraceRecordingType(ctx context.Context, in *SetTraceRecordingTypeRequest) (*SetTraceRecordingTypeResponse, error) {
	out := new(SetTraceRecordingTypeResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/SetTraceRecordingType", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) RecoveryCollectReplicaInfo(ctx context.Context, in *RecoveryCollectReplicaInfoRequest) (DRPCAdmin_RecoveryCollectReplicaInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.server.serverpb.Admin/RecoveryCollectReplicaInfo", drpcEncoding_File_server_serverpb_admin_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcAdmin_RecoveryCollectReplicaInfoClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCAdmin_RecoveryCollectReplicaInfoClient interface {
	drpc.Stream
	Recv() (*RecoveryCollectReplicaInfoResponse, error)
}

type RPCAdmin_RecoveryCollectReplicaInfoClient interface {
	Context() context.Context
	CloseSend() error
	Recv() (*RecoveryCollectReplicaInfoResponse, error)
}

type drpcAdmin_RecoveryCollectReplicaInfoClient struct {
	drpc.Stream
}

func (x *drpcAdmin_RecoveryCollectReplicaInfoClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_RecoveryCollectReplicaInfoClient) Recv() (*RecoveryCollectReplicaInfoResponse, error) {
	m := new(RecoveryCollectReplicaInfoResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcAdmin_RecoveryCollectReplicaInfoClient) RecvMsg(m *RecoveryCollectReplicaInfoResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_server_serverpb_admin_proto{})
}

func (c *drpcAdminClient) RecoveryCollectLocalReplicaInfo(ctx context.Context, in *RecoveryCollectLocalReplicaInfoRequest) (DRPCAdmin_RecoveryCollectLocalReplicaInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.server.serverpb.Admin/RecoveryCollectLocalReplicaInfo", drpcEncoding_File_server_serverpb_admin_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcAdmin_RecoveryCollectLocalReplicaInfoClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCAdmin_RecoveryCollectLocalReplicaInfoClient interface {
	drpc.Stream
	Recv() (*RecoveryCollectLocalReplicaInfoResponse, error)
}

type RPCAdmin_RecoveryCollectLocalReplicaInfoClient interface {
	Context() context.Context
	CloseSend() error
	Recv() (*RecoveryCollectLocalReplicaInfoResponse, error)
}

type drpcAdmin_RecoveryCollectLocalReplicaInfoClient struct {
	drpc.Stream
}

func (x *drpcAdmin_RecoveryCollectLocalReplicaInfoClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_RecoveryCollectLocalReplicaInfoClient) Recv() (*RecoveryCollectLocalReplicaInfoResponse, error) {
	m := new(RecoveryCollectLocalReplicaInfoResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcAdmin_RecoveryCollectLocalReplicaInfoClient) RecvMsg(m *RecoveryCollectLocalReplicaInfoResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_server_serverpb_admin_proto{})
}

func (c *drpcAdminClient) RecoveryStagePlan(ctx context.Context, in *RecoveryStagePlanRequest) (*RecoveryStagePlanResponse, error) {
	out := new(RecoveryStagePlanResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/RecoveryStagePlan", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) RecoveryNodeStatus(ctx context.Context, in *RecoveryNodeStatusRequest) (*RecoveryNodeStatusResponse, error) {
	out := new(RecoveryNodeStatusResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/RecoveryNodeStatus", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) RecoveryVerify(ctx context.Context, in *RecoveryVerifyRequest) (*RecoveryVerifyResponse, error) {
	out := new(RecoveryVerifyResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/RecoveryVerify", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) ListTenants(ctx context.Context, in *ListTenantsRequest) (*ListTenantsResponse, error) {
	out := new(ListTenantsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/ListTenants", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminClient) ReadFromTenantInfo(ctx context.Context, in *ReadFromTenantInfoRequest) (*ReadFromTenantInfoResponse, error) {
	out := new(ReadFromTenantInfoResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Admin/ReadFromTenantInfo", drpcEncoding_File_server_serverpb_admin_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCAdminServer interface {
	Users(context.Context, *UsersRequest) (*UsersResponse, error)
	Databases(context.Context, *DatabasesRequest) (*DatabasesResponse, error)
	DatabaseDetails(context.Context, *DatabaseDetailsRequest) (*DatabaseDetailsResponse, error)
	TableDetails(context.Context, *TableDetailsRequest) (*TableDetailsResponse, error)
	TableStats(context.Context, *TableStatsRequest) (*TableStatsResponse, error)
	NonTableStats(context.Context, *NonTableStatsRequest) (*NonTableStatsResponse, error)
	Events(context.Context, *EventsRequest) (*EventsResponse, error)
	SetUIData(context.Context, *SetUIDataRequest) (*SetUIDataResponse, error)
	GetUIData(context.Context, *GetUIDataRequest) (*GetUIDataResponse, error)
	Cluster(context.Context, *ClusterRequest) (*ClusterResponse, error)
	Settings(context.Context, *SettingsRequest) (*SettingsResponse, error)
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	Jobs(context.Context, *JobsRequest) (*JobsResponse, error)
	Job(context.Context, *JobRequest) (*JobResponse, error)
	Locations(context.Context, *LocationsRequest) (*LocationsResponse, error)
	QueryPlan(context.Context, *QueryPlanRequest) (*QueryPlanResponse, error)
	Drain(*DrainRequest, DRPCAdmin_DrainStream) error
	DecommissionPreCheck(context.Context, *DecommissionPreCheckRequest) (*DecommissionPreCheckResponse, error)
	Decommission(context.Context, *DecommissionRequest) (*DecommissionStatusResponse, error)
	DecommissionStatus(context.Context, *DecommissionStatusRequest) (*DecommissionStatusResponse, error)
	RangeLog(context.Context, *RangeLogRequest) (*RangeLogResponse, error)
	DataDistribution(context.Context, *DataDistributionRequest) (*DataDistributionResponse, error)
	AllMetricMetadata(context.Context, *MetricMetadataRequest) (*MetricMetadataResponse, error)
	ChartCatalog(context.Context, *ChartCatalogRequest) (*ChartCatalogResponse, error)
	EnqueueRange(context.Context, *EnqueueRangeRequest) (*EnqueueRangeResponse, error)
	SendKVBatch(context.Context, *kvpb.BatchRequest) (*kvpb.BatchResponse, error)
	ListTracingSnapshots(context.Context, *ListTracingSnapshotsRequest) (*ListTracingSnapshotsResponse, error)
	TakeTracingSnapshot(context.Context, *TakeTracingSnapshotRequest) (*TakeTracingSnapshotResponse, error)
	GetTracingSnapshot(context.Context, *GetTracingSnapshotRequest) (*GetTracingSnapshotResponse, error)
	GetTrace(context.Context, *GetTraceRequest) (*GetTraceResponse, error)
	SetTraceRecordingType(context.Context, *SetTraceRecordingTypeRequest) (*SetTraceRecordingTypeResponse, error)
	RecoveryCollectReplicaInfo(*RecoveryCollectReplicaInfoRequest, DRPCAdmin_RecoveryCollectReplicaInfoStream) error
	RecoveryCollectLocalReplicaInfo(*RecoveryCollectLocalReplicaInfoRequest, DRPCAdmin_RecoveryCollectLocalReplicaInfoStream) error
	RecoveryStagePlan(context.Context, *RecoveryStagePlanRequest) (*RecoveryStagePlanResponse, error)
	RecoveryNodeStatus(context.Context, *RecoveryNodeStatusRequest) (*RecoveryNodeStatusResponse, error)
	RecoveryVerify(context.Context, *RecoveryVerifyRequest) (*RecoveryVerifyResponse, error)
	ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error)
	ReadFromTenantInfo(context.Context, *ReadFromTenantInfoRequest) (*ReadFromTenantInfoResponse, error)
}

type DRPCAdminUnimplementedServer struct{}

func (s *DRPCAdminUnimplementedServer) Users(context.Context, *UsersRequest) (*UsersResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) Databases(context.Context, *DatabasesRequest) (*DatabasesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) DatabaseDetails(context.Context, *DatabaseDetailsRequest) (*DatabaseDetailsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) TableDetails(context.Context, *TableDetailsRequest) (*TableDetailsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) TableStats(context.Context, *TableStatsRequest) (*TableStatsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) NonTableStats(context.Context, *NonTableStatsRequest) (*NonTableStatsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) Events(context.Context, *EventsRequest) (*EventsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) SetUIData(context.Context, *SetUIDataRequest) (*SetUIDataResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) GetUIData(context.Context, *GetUIDataRequest) (*GetUIDataResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) Cluster(context.Context, *ClusterRequest) (*ClusterResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) Settings(context.Context, *SettingsRequest) (*SettingsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) Jobs(context.Context, *JobsRequest) (*JobsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) Job(context.Context, *JobRequest) (*JobResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) Locations(context.Context, *LocationsRequest) (*LocationsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) QueryPlan(context.Context, *QueryPlanRequest) (*QueryPlanResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) Drain(*DrainRequest, DRPCAdmin_DrainStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) DecommissionPreCheck(context.Context, *DecommissionPreCheckRequest) (*DecommissionPreCheckResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) Decommission(context.Context, *DecommissionRequest) (*DecommissionStatusResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) DecommissionStatus(context.Context, *DecommissionStatusRequest) (*DecommissionStatusResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) RangeLog(context.Context, *RangeLogRequest) (*RangeLogResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) DataDistribution(context.Context, *DataDistributionRequest) (*DataDistributionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) AllMetricMetadata(context.Context, *MetricMetadataRequest) (*MetricMetadataResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) ChartCatalog(context.Context, *ChartCatalogRequest) (*ChartCatalogResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) EnqueueRange(context.Context, *EnqueueRangeRequest) (*EnqueueRangeResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) SendKVBatch(context.Context, *kvpb.BatchRequest) (*kvpb.BatchResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) ListTracingSnapshots(context.Context, *ListTracingSnapshotsRequest) (*ListTracingSnapshotsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) TakeTracingSnapshot(context.Context, *TakeTracingSnapshotRequest) (*TakeTracingSnapshotResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) GetTracingSnapshot(context.Context, *GetTracingSnapshotRequest) (*GetTracingSnapshotResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) GetTrace(context.Context, *GetTraceRequest) (*GetTraceResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) SetTraceRecordingType(context.Context, *SetTraceRecordingTypeRequest) (*SetTraceRecordingTypeResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) RecoveryCollectReplicaInfo(*RecoveryCollectReplicaInfoRequest, DRPCAdmin_RecoveryCollectReplicaInfoStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) RecoveryCollectLocalReplicaInfo(*RecoveryCollectLocalReplicaInfoRequest, DRPCAdmin_RecoveryCollectLocalReplicaInfoStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) RecoveryStagePlan(context.Context, *RecoveryStagePlanRequest) (*RecoveryStagePlanResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) RecoveryNodeStatus(context.Context, *RecoveryNodeStatusRequest) (*RecoveryNodeStatusResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) RecoveryVerify(context.Context, *RecoveryVerifyRequest) (*RecoveryVerifyResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminUnimplementedServer) ReadFromTenantInfo(context.Context, *ReadFromTenantInfoRequest) (*ReadFromTenantInfoResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCAdminDescription struct{}

func (DRPCAdminDescription) NumMethods() int { return 39 }

func (DRPCAdminDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.server.serverpb.Admin/Users", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					Users(
						ctx,
						in1.(*UsersRequest),
					)
			}, DRPCAdminServer.Users, true
	case 1:
		return "/cockroach.server.serverpb.Admin/Databases", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					Databases(
						ctx,
						in1.(*DatabasesRequest),
					)
			}, DRPCAdminServer.Databases, true
	case 2:
		return "/cockroach.server.serverpb.Admin/DatabaseDetails", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					DatabaseDetails(
						ctx,
						in1.(*DatabaseDetailsRequest),
					)
			}, DRPCAdminServer.DatabaseDetails, true
	case 3:
		return "/cockroach.server.serverpb.Admin/TableDetails", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					TableDetails(
						ctx,
						in1.(*TableDetailsRequest),
					)
			}, DRPCAdminServer.TableDetails, true
	case 4:
		return "/cockroach.server.serverpb.Admin/TableStats", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					TableStats(
						ctx,
						in1.(*TableStatsRequest),
					)
			}, DRPCAdminServer.TableStats, true
	case 5:
		return "/cockroach.server.serverpb.Admin/NonTableStats", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					NonTableStats(
						ctx,
						in1.(*NonTableStatsRequest),
					)
			}, DRPCAdminServer.NonTableStats, true
	case 6:
		return "/cockroach.server.serverpb.Admin/Events", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					Events(
						ctx,
						in1.(*EventsRequest),
					)
			}, DRPCAdminServer.Events, true
	case 7:
		return "/cockroach.server.serverpb.Admin/SetUIData", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					SetUIData(
						ctx,
						in1.(*SetUIDataRequest),
					)
			}, DRPCAdminServer.SetUIData, true
	case 8:
		return "/cockroach.server.serverpb.Admin/GetUIData", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					GetUIData(
						ctx,
						in1.(*GetUIDataRequest),
					)
			}, DRPCAdminServer.GetUIData, true
	case 9:
		return "/cockroach.server.serverpb.Admin/Cluster", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					Cluster(
						ctx,
						in1.(*ClusterRequest),
					)
			}, DRPCAdminServer.Cluster, true
	case 10:
		return "/cockroach.server.serverpb.Admin/Settings", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					Settings(
						ctx,
						in1.(*SettingsRequest),
					)
			}, DRPCAdminServer.Settings, true
	case 11:
		return "/cockroach.server.serverpb.Admin/Health", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					Health(
						ctx,
						in1.(*HealthRequest),
					)
			}, DRPCAdminServer.Health, true
	case 12:
		return "/cockroach.server.serverpb.Admin/Liveness", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					Liveness(
						ctx,
						in1.(*LivenessRequest),
					)
			}, DRPCAdminServer.Liveness, true
	case 13:
		return "/cockroach.server.serverpb.Admin/Jobs", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					Jobs(
						ctx,
						in1.(*JobsRequest),
					)
			}, DRPCAdminServer.Jobs, true
	case 14:
		return "/cockroach.server.serverpb.Admin/Job", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					Job(
						ctx,
						in1.(*JobRequest),
					)
			}, DRPCAdminServer.Job, true
	case 15:
		return "/cockroach.server.serverpb.Admin/Locations", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					Locations(
						ctx,
						in1.(*LocationsRequest),
					)
			}, DRPCAdminServer.Locations, true
	case 16:
		return "/cockroach.server.serverpb.Admin/QueryPlan", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					QueryPlan(
						ctx,
						in1.(*QueryPlanRequest),
					)
			}, DRPCAdminServer.QueryPlan, true
	case 17:
		return "/cockroach.server.serverpb.Admin/Drain", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCAdminServer).
					Drain(
						in1.(*DrainRequest),
						&drpcAdmin_DrainStream{in2.(drpc.Stream)},
					)
			}, DRPCAdminServer.Drain, true
	case 18:
		return "/cockroach.server.serverpb.Admin/DecommissionPreCheck", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					DecommissionPreCheck(
						ctx,
						in1.(*DecommissionPreCheckRequest),
					)
			}, DRPCAdminServer.DecommissionPreCheck, true
	case 19:
		return "/cockroach.server.serverpb.Admin/Decommission", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					Decommission(
						ctx,
						in1.(*DecommissionRequest),
					)
			}, DRPCAdminServer.Decommission, true
	case 20:
		return "/cockroach.server.serverpb.Admin/DecommissionStatus", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					DecommissionStatus(
						ctx,
						in1.(*DecommissionStatusRequest),
					)
			}, DRPCAdminServer.DecommissionStatus, true
	case 21:
		return "/cockroach.server.serverpb.Admin/RangeLog", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					RangeLog(
						ctx,
						in1.(*RangeLogRequest),
					)
			}, DRPCAdminServer.RangeLog, true
	case 22:
		return "/cockroach.server.serverpb.Admin/DataDistribution", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					DataDistribution(
						ctx,
						in1.(*DataDistributionRequest),
					)
			}, DRPCAdminServer.DataDistribution, true
	case 23:
		return "/cockroach.server.serverpb.Admin/AllMetricMetadata", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					AllMetricMetadata(
						ctx,
						in1.(*MetricMetadataRequest),
					)
			}, DRPCAdminServer.AllMetricMetadata, true
	case 24:
		return "/cockroach.server.serverpb.Admin/ChartCatalog", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					ChartCatalog(
						ctx,
						in1.(*ChartCatalogRequest),
					)
			}, DRPCAdminServer.ChartCatalog, true
	case 25:
		return "/cockroach.server.serverpb.Admin/EnqueueRange", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					EnqueueRange(
						ctx,
						in1.(*EnqueueRangeRequest),
					)
			}, DRPCAdminServer.EnqueueRange, true
	case 26:
		return "/cockroach.server.serverpb.Admin/SendKVBatch", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					SendKVBatch(
						ctx,
						in1.(*kvpb.BatchRequest),
					)
			}, DRPCAdminServer.SendKVBatch, true
	case 27:
		return "/cockroach.server.serverpb.Admin/ListTracingSnapshots", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					ListTracingSnapshots(
						ctx,
						in1.(*ListTracingSnapshotsRequest),
					)
			}, DRPCAdminServer.ListTracingSnapshots, true
	case 28:
		return "/cockroach.server.serverpb.Admin/TakeTracingSnapshot", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					TakeTracingSnapshot(
						ctx,
						in1.(*TakeTracingSnapshotRequest),
					)
			}, DRPCAdminServer.TakeTracingSnapshot, true
	case 29:
		return "/cockroach.server.serverpb.Admin/GetTracingSnapshot", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					GetTracingSnapshot(
						ctx,
						in1.(*GetTracingSnapshotRequest),
					)
			}, DRPCAdminServer.GetTracingSnapshot, true
	case 30:
		return "/cockroach.server.serverpb.Admin/GetTrace", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					GetTrace(
						ctx,
						in1.(*GetTraceRequest),
					)
			}, DRPCAdminServer.GetTrace, true
	case 31:
		return "/cockroach.server.serverpb.Admin/SetTraceRecordingType", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					SetTraceRecordingType(
						ctx,
						in1.(*SetTraceRecordingTypeRequest),
					)
			}, DRPCAdminServer.SetTraceRecordingType, true
	case 32:
		return "/cockroach.server.serverpb.Admin/RecoveryCollectReplicaInfo", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCAdminServer).
					RecoveryCollectReplicaInfo(
						in1.(*RecoveryCollectReplicaInfoRequest),
						&drpcAdmin_RecoveryCollectReplicaInfoStream{in2.(drpc.Stream)},
					)
			}, DRPCAdminServer.RecoveryCollectReplicaInfo, true
	case 33:
		return "/cockroach.server.serverpb.Admin/RecoveryCollectLocalReplicaInfo", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCAdminServer).
					RecoveryCollectLocalReplicaInfo(
						in1.(*RecoveryCollectLocalReplicaInfoRequest),
						&drpcAdmin_RecoveryCollectLocalReplicaInfoStream{in2.(drpc.Stream)},
					)
			}, DRPCAdminServer.RecoveryCollectLocalReplicaInfo, true
	case 34:
		return "/cockroach.server.serverpb.Admin/RecoveryStagePlan", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					RecoveryStagePlan(
						ctx,
						in1.(*RecoveryStagePlanRequest),
					)
			}, DRPCAdminServer.RecoveryStagePlan, true
	case 35:
		return "/cockroach.server.serverpb.Admin/RecoveryNodeStatus", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					RecoveryNodeStatus(
						ctx,
						in1.(*RecoveryNodeStatusRequest),
					)
			}, DRPCAdminServer.RecoveryNodeStatus, true
	case 36:
		return "/cockroach.server.serverpb.Admin/RecoveryVerify", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					RecoveryVerify(
						ctx,
						in1.(*RecoveryVerifyRequest),
					)
			}, DRPCAdminServer.RecoveryVerify, true
	case 37:
		return "/cockroach.server.serverpb.Admin/ListTenants", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					ListTenants(
						ctx,
						in1.(*ListTenantsRequest),
					)
			}, DRPCAdminServer.ListTenants, true
	case 38:
		return "/cockroach.server.serverpb.Admin/ReadFromTenantInfo", drpcEncoding_File_server_serverpb_admin_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServer).
					ReadFromTenantInfo(
						ctx,
						in1.(*ReadFromTenantInfoRequest),
					)
			}, DRPCAdminServer.ReadFromTenantInfo, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterAdmin(mux drpc.Mux, impl DRPCAdminServer) error {
	return mux.Register(impl, DRPCAdminDescription{})
}

type DRPCAdmin_UsersStream interface {
	drpc.Stream
	SendAndClose(*UsersResponse) error
}

type RPCAdmin_UsersStream interface {
	Context() context.Context
	SendAndClose(*UsersResponse) error
}

type drpcAdmin_UsersStream struct {
	drpc.Stream
}

func (x *drpcAdmin_UsersStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_UsersStream) SendAndClose(m *UsersResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_DatabasesStream interface {
	drpc.Stream
	SendAndClose(*DatabasesResponse) error
}

type RPCAdmin_DatabasesStream interface {
	Context() context.Context
	SendAndClose(*DatabasesResponse) error
}

type drpcAdmin_DatabasesStream struct {
	drpc.Stream
}

func (x *drpcAdmin_DatabasesStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_DatabasesStream) SendAndClose(m *DatabasesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_DatabaseDetailsStream interface {
	drpc.Stream
	SendAndClose(*DatabaseDetailsResponse) error
}

type RPCAdmin_DatabaseDetailsStream interface {
	Context() context.Context
	SendAndClose(*DatabaseDetailsResponse) error
}

type drpcAdmin_DatabaseDetailsStream struct {
	drpc.Stream
}

func (x *drpcAdmin_DatabaseDetailsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_DatabaseDetailsStream) SendAndClose(m *DatabaseDetailsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_TableDetailsStream interface {
	drpc.Stream
	SendAndClose(*TableDetailsResponse) error
}

type RPCAdmin_TableDetailsStream interface {
	Context() context.Context
	SendAndClose(*TableDetailsResponse) error
}

type drpcAdmin_TableDetailsStream struct {
	drpc.Stream
}

func (x *drpcAdmin_TableDetailsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_TableDetailsStream) SendAndClose(m *TableDetailsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_TableStatsStream interface {
	drpc.Stream
	SendAndClose(*TableStatsResponse) error
}

type RPCAdmin_TableStatsStream interface {
	Context() context.Context
	SendAndClose(*TableStatsResponse) error
}

type drpcAdmin_TableStatsStream struct {
	drpc.Stream
}

func (x *drpcAdmin_TableStatsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_TableStatsStream) SendAndClose(m *TableStatsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_NonTableStatsStream interface {
	drpc.Stream
	SendAndClose(*NonTableStatsResponse) error
}

type RPCAdmin_NonTableStatsStream interface {
	Context() context.Context
	SendAndClose(*NonTableStatsResponse) error
}

type drpcAdmin_NonTableStatsStream struct {
	drpc.Stream
}

func (x *drpcAdmin_NonTableStatsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_NonTableStatsStream) SendAndClose(m *NonTableStatsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_EventsStream interface {
	drpc.Stream
	SendAndClose(*EventsResponse) error
}

type RPCAdmin_EventsStream interface {
	Context() context.Context
	SendAndClose(*EventsResponse) error
}

type drpcAdmin_EventsStream struct {
	drpc.Stream
}

func (x *drpcAdmin_EventsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_EventsStream) SendAndClose(m *EventsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_SetUIDataStream interface {
	drpc.Stream
	SendAndClose(*SetUIDataResponse) error
}

type RPCAdmin_SetUIDataStream interface {
	Context() context.Context
	SendAndClose(*SetUIDataResponse) error
}

type drpcAdmin_SetUIDataStream struct {
	drpc.Stream
}

func (x *drpcAdmin_SetUIDataStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_SetUIDataStream) SendAndClose(m *SetUIDataResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_GetUIDataStream interface {
	drpc.Stream
	SendAndClose(*GetUIDataResponse) error
}

type RPCAdmin_GetUIDataStream interface {
	Context() context.Context
	SendAndClose(*GetUIDataResponse) error
}

type drpcAdmin_GetUIDataStream struct {
	drpc.Stream
}

func (x *drpcAdmin_GetUIDataStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_GetUIDataStream) SendAndClose(m *GetUIDataResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_ClusterStream interface {
	drpc.Stream
	SendAndClose(*ClusterResponse) error
}

type RPCAdmin_ClusterStream interface {
	Context() context.Context
	SendAndClose(*ClusterResponse) error
}

type drpcAdmin_ClusterStream struct {
	drpc.Stream
}

func (x *drpcAdmin_ClusterStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_ClusterStream) SendAndClose(m *ClusterResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_SettingsStream interface {
	drpc.Stream
	SendAndClose(*SettingsResponse) error
}

type RPCAdmin_SettingsStream interface {
	Context() context.Context
	SendAndClose(*SettingsResponse) error
}

type drpcAdmin_SettingsStream struct {
	drpc.Stream
}

func (x *drpcAdmin_SettingsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_SettingsStream) SendAndClose(m *SettingsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_HealthStream interface {
	drpc.Stream
	SendAndClose(*HealthResponse) error
}

type RPCAdmin_HealthStream interface {
	Context() context.Context
	SendAndClose(*HealthResponse) error
}

type drpcAdmin_HealthStream struct {
	drpc.Stream
}

func (x *drpcAdmin_HealthStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_HealthStream) SendAndClose(m *HealthResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_LivenessStream interface {
	drpc.Stream
	SendAndClose(*LivenessResponse) error
}

type RPCAdmin_LivenessStream interface {
	Context() context.Context
	SendAndClose(*LivenessResponse) error
}

type drpcAdmin_LivenessStream struct {
	drpc.Stream
}

func (x *drpcAdmin_LivenessStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_LivenessStream) SendAndClose(m *LivenessResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_JobsStream interface {
	drpc.Stream
	SendAndClose(*JobsResponse) error
}

type RPCAdmin_JobsStream interface {
	Context() context.Context
	SendAndClose(*JobsResponse) error
}

type drpcAdmin_JobsStream struct {
	drpc.Stream
}

func (x *drpcAdmin_JobsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_JobsStream) SendAndClose(m *JobsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_JobStream interface {
	drpc.Stream
	SendAndClose(*JobResponse) error
}

type RPCAdmin_JobStream interface {
	Context() context.Context
	SendAndClose(*JobResponse) error
}

type drpcAdmin_JobStream struct {
	drpc.Stream
}

func (x *drpcAdmin_JobStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_JobStream) SendAndClose(m *JobResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_LocationsStream interface {
	drpc.Stream
	SendAndClose(*LocationsResponse) error
}

type RPCAdmin_LocationsStream interface {
	Context() context.Context
	SendAndClose(*LocationsResponse) error
}

type drpcAdmin_LocationsStream struct {
	drpc.Stream
}

func (x *drpcAdmin_LocationsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_LocationsStream) SendAndClose(m *LocationsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_QueryPlanStream interface {
	drpc.Stream
	SendAndClose(*QueryPlanResponse) error
}

type RPCAdmin_QueryPlanStream interface {
	Context() context.Context
	SendAndClose(*QueryPlanResponse) error
}

type drpcAdmin_QueryPlanStream struct {
	drpc.Stream
}

func (x *drpcAdmin_QueryPlanStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_QueryPlanStream) SendAndClose(m *QueryPlanResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_DrainStream interface {
	drpc.Stream
	Send(*DrainResponse) error
}

type RPCAdmin_DrainStream interface {
	Context() context.Context
	Send(*DrainResponse) error
}

type drpcAdmin_DrainStream struct {
	drpc.Stream
}

func (x *drpcAdmin_DrainStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_DrainStream) Send(m *DrainResponse) error {
	return x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{})
}

type DRPCAdmin_DecommissionPreCheckStream interface {
	drpc.Stream
	SendAndClose(*DecommissionPreCheckResponse) error
}

type RPCAdmin_DecommissionPreCheckStream interface {
	Context() context.Context
	SendAndClose(*DecommissionPreCheckResponse) error
}

type drpcAdmin_DecommissionPreCheckStream struct {
	drpc.Stream
}

func (x *drpcAdmin_DecommissionPreCheckStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_DecommissionPreCheckStream) SendAndClose(m *DecommissionPreCheckResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_DecommissionStream interface {
	drpc.Stream
	SendAndClose(*DecommissionStatusResponse) error
}

type RPCAdmin_DecommissionStream interface {
	Context() context.Context
	SendAndClose(*DecommissionStatusResponse) error
}

type drpcAdmin_DecommissionStream struct {
	drpc.Stream
}

func (x *drpcAdmin_DecommissionStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_DecommissionStream) SendAndClose(m *DecommissionStatusResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_DecommissionStatusStream interface {
	drpc.Stream
	SendAndClose(*DecommissionStatusResponse) error
}

type RPCAdmin_DecommissionStatusStream interface {
	Context() context.Context
	SendAndClose(*DecommissionStatusResponse) error
}

type drpcAdmin_DecommissionStatusStream struct {
	drpc.Stream
}

func (x *drpcAdmin_DecommissionStatusStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_DecommissionStatusStream) SendAndClose(m *DecommissionStatusResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_RangeLogStream interface {
	drpc.Stream
	SendAndClose(*RangeLogResponse) error
}

type RPCAdmin_RangeLogStream interface {
	Context() context.Context
	SendAndClose(*RangeLogResponse) error
}

type drpcAdmin_RangeLogStream struct {
	drpc.Stream
}

func (x *drpcAdmin_RangeLogStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_RangeLogStream) SendAndClose(m *RangeLogResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_DataDistributionStream interface {
	drpc.Stream
	SendAndClose(*DataDistributionResponse) error
}

type RPCAdmin_DataDistributionStream interface {
	Context() context.Context
	SendAndClose(*DataDistributionResponse) error
}

type drpcAdmin_DataDistributionStream struct {
	drpc.Stream
}

func (x *drpcAdmin_DataDistributionStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_DataDistributionStream) SendAndClose(m *DataDistributionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_AllMetricMetadataStream interface {
	drpc.Stream
	SendAndClose(*MetricMetadataResponse) error
}

type RPCAdmin_AllMetricMetadataStream interface {
	Context() context.Context
	SendAndClose(*MetricMetadataResponse) error
}

type drpcAdmin_AllMetricMetadataStream struct {
	drpc.Stream
}

func (x *drpcAdmin_AllMetricMetadataStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_AllMetricMetadataStream) SendAndClose(m *MetricMetadataResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_ChartCatalogStream interface {
	drpc.Stream
	SendAndClose(*ChartCatalogResponse) error
}

type RPCAdmin_ChartCatalogStream interface {
	Context() context.Context
	SendAndClose(*ChartCatalogResponse) error
}

type drpcAdmin_ChartCatalogStream struct {
	drpc.Stream
}

func (x *drpcAdmin_ChartCatalogStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_ChartCatalogStream) SendAndClose(m *ChartCatalogResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_EnqueueRangeStream interface {
	drpc.Stream
	SendAndClose(*EnqueueRangeResponse) error
}

type RPCAdmin_EnqueueRangeStream interface {
	Context() context.Context
	SendAndClose(*EnqueueRangeResponse) error
}

type drpcAdmin_EnqueueRangeStream struct {
	drpc.Stream
}

func (x *drpcAdmin_EnqueueRangeStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_EnqueueRangeStream) SendAndClose(m *EnqueueRangeResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_SendKVBatchStream interface {
	drpc.Stream
	SendAndClose(*kvpb.BatchResponse) error
}

type RPCAdmin_SendKVBatchStream interface {
	Context() context.Context
	SendAndClose(*kvpb.BatchResponse) error
}

type drpcAdmin_SendKVBatchStream struct {
	drpc.Stream
}

func (x *drpcAdmin_SendKVBatchStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_SendKVBatchStream) SendAndClose(m *kvpb.BatchResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_ListTracingSnapshotsStream interface {
	drpc.Stream
	SendAndClose(*ListTracingSnapshotsResponse) error
}

type RPCAdmin_ListTracingSnapshotsStream interface {
	Context() context.Context
	SendAndClose(*ListTracingSnapshotsResponse) error
}

type drpcAdmin_ListTracingSnapshotsStream struct {
	drpc.Stream
}

func (x *drpcAdmin_ListTracingSnapshotsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_ListTracingSnapshotsStream) SendAndClose(m *ListTracingSnapshotsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_TakeTracingSnapshotStream interface {
	drpc.Stream
	SendAndClose(*TakeTracingSnapshotResponse) error
}

type RPCAdmin_TakeTracingSnapshotStream interface {
	Context() context.Context
	SendAndClose(*TakeTracingSnapshotResponse) error
}

type drpcAdmin_TakeTracingSnapshotStream struct {
	drpc.Stream
}

func (x *drpcAdmin_TakeTracingSnapshotStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_TakeTracingSnapshotStream) SendAndClose(m *TakeTracingSnapshotResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_GetTracingSnapshotStream interface {
	drpc.Stream
	SendAndClose(*GetTracingSnapshotResponse) error
}

type RPCAdmin_GetTracingSnapshotStream interface {
	Context() context.Context
	SendAndClose(*GetTracingSnapshotResponse) error
}

type drpcAdmin_GetTracingSnapshotStream struct {
	drpc.Stream
}

func (x *drpcAdmin_GetTracingSnapshotStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_GetTracingSnapshotStream) SendAndClose(m *GetTracingSnapshotResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_GetTraceStream interface {
	drpc.Stream
	SendAndClose(*GetTraceResponse) error
}

type RPCAdmin_GetTraceStream interface {
	Context() context.Context
	SendAndClose(*GetTraceResponse) error
}

type drpcAdmin_GetTraceStream struct {
	drpc.Stream
}

func (x *drpcAdmin_GetTraceStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_GetTraceStream) SendAndClose(m *GetTraceResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_SetTraceRecordingTypeStream interface {
	drpc.Stream
	SendAndClose(*SetTraceRecordingTypeResponse) error
}

type RPCAdmin_SetTraceRecordingTypeStream interface {
	Context() context.Context
	SendAndClose(*SetTraceRecordingTypeResponse) error
}

type drpcAdmin_SetTraceRecordingTypeStream struct {
	drpc.Stream
}

func (x *drpcAdmin_SetTraceRecordingTypeStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_SetTraceRecordingTypeStream) SendAndClose(m *SetTraceRecordingTypeResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_RecoveryCollectReplicaInfoStream interface {
	drpc.Stream
	Send(*RecoveryCollectReplicaInfoResponse) error
}

type RPCAdmin_RecoveryCollectReplicaInfoStream interface {
	Context() context.Context
	Send(*RecoveryCollectReplicaInfoResponse) error
}

type drpcAdmin_RecoveryCollectReplicaInfoStream struct {
	drpc.Stream
}

func (x *drpcAdmin_RecoveryCollectReplicaInfoStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_RecoveryCollectReplicaInfoStream) Send(m *RecoveryCollectReplicaInfoResponse) error {
	return x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{})
}

type DRPCAdmin_RecoveryCollectLocalReplicaInfoStream interface {
	drpc.Stream
	Send(*RecoveryCollectLocalReplicaInfoResponse) error
}

type RPCAdmin_RecoveryCollectLocalReplicaInfoStream interface {
	Context() context.Context
	Send(*RecoveryCollectLocalReplicaInfoResponse) error
}

type drpcAdmin_RecoveryCollectLocalReplicaInfoStream struct {
	drpc.Stream
}

func (x *drpcAdmin_RecoveryCollectLocalReplicaInfoStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_RecoveryCollectLocalReplicaInfoStream) Send(m *RecoveryCollectLocalReplicaInfoResponse) error {
	return x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{})
}

type DRPCAdmin_RecoveryStagePlanStream interface {
	drpc.Stream
	SendAndClose(*RecoveryStagePlanResponse) error
}

type RPCAdmin_RecoveryStagePlanStream interface {
	Context() context.Context
	SendAndClose(*RecoveryStagePlanResponse) error
}

type drpcAdmin_RecoveryStagePlanStream struct {
	drpc.Stream
}

func (x *drpcAdmin_RecoveryStagePlanStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_RecoveryStagePlanStream) SendAndClose(m *RecoveryStagePlanResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_RecoveryNodeStatusStream interface {
	drpc.Stream
	SendAndClose(*RecoveryNodeStatusResponse) error
}

type RPCAdmin_RecoveryNodeStatusStream interface {
	Context() context.Context
	SendAndClose(*RecoveryNodeStatusResponse) error
}

type drpcAdmin_RecoveryNodeStatusStream struct {
	drpc.Stream
}

func (x *drpcAdmin_RecoveryNodeStatusStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_RecoveryNodeStatusStream) SendAndClose(m *RecoveryNodeStatusResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_RecoveryVerifyStream interface {
	drpc.Stream
	SendAndClose(*RecoveryVerifyResponse) error
}

type RPCAdmin_RecoveryVerifyStream interface {
	Context() context.Context
	SendAndClose(*RecoveryVerifyResponse) error
}

type drpcAdmin_RecoveryVerifyStream struct {
	drpc.Stream
}

func (x *drpcAdmin_RecoveryVerifyStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_RecoveryVerifyStream) SendAndClose(m *RecoveryVerifyResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_ListTenantsStream interface {
	drpc.Stream
	SendAndClose(*ListTenantsResponse) error
}

type RPCAdmin_ListTenantsStream interface {
	Context() context.Context
	SendAndClose(*ListTenantsResponse) error
}

type drpcAdmin_ListTenantsStream struct {
	drpc.Stream
}

func (x *drpcAdmin_ListTenantsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_ListTenantsStream) SendAndClose(m *ListTenantsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdmin_ReadFromTenantInfoStream interface {
	drpc.Stream
	SendAndClose(*ReadFromTenantInfoResponse) error
}

type RPCAdmin_ReadFromTenantInfoStream interface {
	Context() context.Context
	SendAndClose(*ReadFromTenantInfoResponse) error
}

type drpcAdmin_ReadFromTenantInfoStream struct {
	drpc.Stream
}

func (x *drpcAdmin_ReadFromTenantInfoStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcAdmin_ReadFromTenantInfoStream) SendAndClose(m *ReadFromTenantInfoResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_admin_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type RPCAdminClient interface {
	Users(ctx context.Context, in *UsersRequest) (*UsersResponse, error)
	Databases(ctx context.Context, in *DatabasesRequest) (*DatabasesResponse, error)
	DatabaseDetails(ctx context.Context, in *DatabaseDetailsRequest) (*DatabaseDetailsResponse, error)
	TableDetails(ctx context.Context, in *TableDetailsRequest) (*TableDetailsResponse, error)
	TableStats(ctx context.Context, in *TableStatsRequest) (*TableStatsResponse, error)
	NonTableStats(ctx context.Context, in *NonTableStatsRequest) (*NonTableStatsResponse, error)
	Events(ctx context.Context, in *EventsRequest) (*EventsResponse, error)
	SetUIData(ctx context.Context, in *SetUIDataRequest) (*SetUIDataResponse, error)
	GetUIData(ctx context.Context, in *GetUIDataRequest) (*GetUIDataResponse, error)
	Cluster(ctx context.Context, in *ClusterRequest) (*ClusterResponse, error)
	Settings(ctx context.Context, in *SettingsRequest) (*SettingsResponse, error)
	Health(ctx context.Context, in *HealthRequest) (*HealthResponse, error)
	Liveness(ctx context.Context, in *LivenessRequest) (*LivenessResponse, error)
	Jobs(ctx context.Context, in *JobsRequest) (*JobsResponse, error)
	Job(ctx context.Context, in *JobRequest) (*JobResponse, error)
	Locations(ctx context.Context, in *LocationsRequest) (*LocationsResponse, error)
	QueryPlan(ctx context.Context, in *QueryPlanRequest) (*QueryPlanResponse, error)
	Drain(ctx context.Context, in *DrainRequest) (RPCAdmin_DrainClient, error)
	DecommissionPreCheck(ctx context.Context, in *DecommissionPreCheckRequest) (*DecommissionPreCheckResponse, error)
	Decommission(ctx context.Context, in *DecommissionRequest) (*DecommissionStatusResponse, error)
	DecommissionStatus(ctx context.Context, in *DecommissionStatusRequest) (*DecommissionStatusResponse, error)
	RangeLog(ctx context.Context, in *RangeLogRequest) (*RangeLogResponse, error)
	DataDistribution(ctx context.Context, in *DataDistributionRequest) (*DataDistributionResponse, error)
	AllMetricMetadata(ctx context.Context, in *MetricMetadataRequest) (*MetricMetadataResponse, error)
	ChartCatalog(ctx context.Context, in *ChartCatalogRequest) (*ChartCatalogResponse, error)
	EnqueueRange(ctx context.Context, in *EnqueueRangeRequest) (*EnqueueRangeResponse, error)
	SendKVBatch(ctx context.Context, in *kvpb.BatchRequest) (*kvpb.BatchResponse, error)
	ListTracingSnapshots(ctx context.Context, in *ListTracingSnapshotsRequest) (*ListTracingSnapshotsResponse, error)
	TakeTracingSnapshot(ctx context.Context, in *TakeTracingSnapshotRequest) (*TakeTracingSnapshotResponse, error)
	GetTracingSnapshot(ctx context.Context, in *GetTracingSnapshotRequest) (*GetTracingSnapshotResponse, error)
	GetTrace(ctx context.Context, in *GetTraceRequest) (*GetTraceResponse, error)
	SetTraceRecordingType(ctx context.Context, in *SetTraceRecordingTypeRequest) (*SetTraceRecordingTypeResponse, error)
	RecoveryCollectReplicaInfo(ctx context.Context, in *RecoveryCollectReplicaInfoRequest) (RPCAdmin_RecoveryCollectReplicaInfoClient, error)
	RecoveryCollectLocalReplicaInfo(ctx context.Context, in *RecoveryCollectLocalReplicaInfoRequest) (RPCAdmin_RecoveryCollectLocalReplicaInfoClient, error)
	RecoveryStagePlan(ctx context.Context, in *RecoveryStagePlanRequest) (*RecoveryStagePlanResponse, error)
	RecoveryNodeStatus(ctx context.Context, in *RecoveryNodeStatusRequest) (*RecoveryNodeStatusResponse, error)
	RecoveryVerify(ctx context.Context, in *RecoveryVerifyRequest) (*RecoveryVerifyResponse, error)
	ListTenants(ctx context.Context, in *ListTenantsRequest) (*ListTenantsResponse, error)
	ReadFromTenantInfo(ctx context.Context, in *ReadFromTenantInfoRequest) (*ReadFromTenantInfoResponse, error)
}

// Admin gRPC -> RPC adapter
type grpcAdminClientAdapter adminClient

func NewGRPCAdminClientAdapter(conn *grpc.ClientConn) RPCAdminClient {
	return (*grpcAdminClientAdapter)(&adminClient{conn})
}

func (a *grpcAdminClientAdapter) Users(ctx context.Context, in *UsersRequest) (*UsersResponse, error) {
	return (*adminClient)(a).Users(ctx, in)
}

func (a *grpcAdminClientAdapter) Databases(ctx context.Context, in *DatabasesRequest) (*DatabasesResponse, error) {
	return (*adminClient)(a).Databases(ctx, in)
}

func (a *grpcAdminClientAdapter) DatabaseDetails(ctx context.Context, in *DatabaseDetailsRequest) (*DatabaseDetailsResponse, error) {
	return (*adminClient)(a).DatabaseDetails(ctx, in)
}

func (a *grpcAdminClientAdapter) TableDetails(ctx context.Context, in *TableDetailsRequest) (*TableDetailsResponse, error) {
	return (*adminClient)(a).TableDetails(ctx, in)
}

func (a *grpcAdminClientAdapter) TableStats(ctx context.Context, in *TableStatsRequest) (*TableStatsResponse, error) {
	return (*adminClient)(a).TableStats(ctx, in)
}

func (a *grpcAdminClientAdapter) NonTableStats(ctx context.Context, in *NonTableStatsRequest) (*NonTableStatsResponse, error) {
	return (*adminClient)(a).NonTableStats(ctx, in)
}

func (a *grpcAdminClientAdapter) Events(ctx context.Context, in *EventsRequest) (*EventsResponse, error) {
	return (*adminClient)(a).Events(ctx, in)
}

func (a *grpcAdminClientAdapter) SetUIData(ctx context.Context, in *SetUIDataRequest) (*SetUIDataResponse, error) {
	return (*adminClient)(a).SetUIData(ctx, in)
}

func (a *grpcAdminClientAdapter) GetUIData(ctx context.Context, in *GetUIDataRequest) (*GetUIDataResponse, error) {
	return (*adminClient)(a).GetUIData(ctx, in)
}

func (a *grpcAdminClientAdapter) Cluster(ctx context.Context, in *ClusterRequest) (*ClusterResponse, error) {
	return (*adminClient)(a).Cluster(ctx, in)
}

func (a *grpcAdminClientAdapter) Settings(ctx context.Context, in *SettingsRequest) (*SettingsResponse, error) {
	return (*adminClient)(a).Settings(ctx, in)
}

func (a *grpcAdminClientAdapter) Health(ctx context.Context, in *HealthRequest) (*HealthResponse, error) {
	return (*adminClient)(a).Health(ctx, in)
}

func (a *grpcAdminClientAdapter) Liveness(ctx context.Context, in *LivenessRequest) (*LivenessResponse, error) {
	return (*adminClient)(a).Liveness(ctx, in)
}

func (a *grpcAdminClientAdapter) Jobs(ctx context.Context, in *JobsRequest) (*JobsResponse, error) {
	return (*adminClient)(a).Jobs(ctx, in)
}

func (a *grpcAdminClientAdapter) Job(ctx context.Context, in *JobRequest) (*JobResponse, error) {
	return (*adminClient)(a).Job(ctx, in)
}

func (a *grpcAdminClientAdapter) Locations(ctx context.Context, in *LocationsRequest) (*LocationsResponse, error) {
	return (*adminClient)(a).Locations(ctx, in)
}

func (a *grpcAdminClientAdapter) QueryPlan(ctx context.Context, in *QueryPlanRequest) (*QueryPlanResponse, error) {
	return (*adminClient)(a).QueryPlan(ctx, in)
}

func (a *grpcAdminClientAdapter) Drain(ctx context.Context, in *DrainRequest) (RPCAdmin_DrainClient, error) {
	return (*adminClient)(a).Drain(ctx, in)
}

func (a *grpcAdminClientAdapter) DecommissionPreCheck(ctx context.Context, in *DecommissionPreCheckRequest) (*DecommissionPreCheckResponse, error) {
	return (*adminClient)(a).DecommissionPreCheck(ctx, in)
}

func (a *grpcAdminClientAdapter) Decommission(ctx context.Context, in *DecommissionRequest) (*DecommissionStatusResponse, error) {
	return (*adminClient)(a).Decommission(ctx, in)
}

func (a *grpcAdminClientAdapter) DecommissionStatus(ctx context.Context, in *DecommissionStatusRequest) (*DecommissionStatusResponse, error) {
	return (*adminClient)(a).DecommissionStatus(ctx, in)
}

func (a *grpcAdminClientAdapter) RangeLog(ctx context.Context, in *RangeLogRequest) (*RangeLogResponse, error) {
	return (*adminClient)(a).RangeLog(ctx, in)
}

func (a *grpcAdminClientAdapter) DataDistribution(ctx context.Context, in *DataDistributionRequest) (*DataDistributionResponse, error) {
	return (*adminClient)(a).DataDistribution(ctx, in)
}

func (a *grpcAdminClientAdapter) AllMetricMetadata(ctx context.Context, in *MetricMetadataRequest) (*MetricMetadataResponse, error) {
	return (*adminClient)(a).AllMetricMetadata(ctx, in)
}

func (a *grpcAdminClientAdapter) ChartCatalog(ctx context.Context, in *ChartCatalogRequest) (*ChartCatalogResponse, error) {
	return (*adminClient)(a).ChartCatalog(ctx, in)
}

func (a *grpcAdminClientAdapter) EnqueueRange(ctx context.Context, in *EnqueueRangeRequest) (*EnqueueRangeResponse, error) {
	return (*adminClient)(a).EnqueueRange(ctx, in)
}

func (a *grpcAdminClientAdapter) SendKVBatch(ctx context.Context, in *kvpb.BatchRequest) (*kvpb.BatchResponse, error) {
	return (*adminClient)(a).SendKVBatch(ctx, in)
}

func (a *grpcAdminClientAdapter) ListTracingSnapshots(ctx context.Context, in *ListTracingSnapshotsRequest) (*ListTracingSnapshotsResponse, error) {
	return (*adminClient)(a).ListTracingSnapshots(ctx, in)
}

func (a *grpcAdminClientAdapter) TakeTracingSnapshot(ctx context.Context, in *TakeTracingSnapshotRequest) (*TakeTracingSnapshotResponse, error) {
	return (*adminClient)(a).TakeTracingSnapshot(ctx, in)
}

func (a *grpcAdminClientAdapter) GetTracingSnapshot(ctx context.Context, in *GetTracingSnapshotRequest) (*GetTracingSnapshotResponse, error) {
	return (*adminClient)(a).GetTracingSnapshot(ctx, in)
}

func (a *grpcAdminClientAdapter) GetTrace(ctx context.Context, in *GetTraceRequest) (*GetTraceResponse, error) {
	return (*adminClient)(a).GetTrace(ctx, in)
}

func (a *grpcAdminClientAdapter) SetTraceRecordingType(ctx context.Context, in *SetTraceRecordingTypeRequest) (*SetTraceRecordingTypeResponse, error) {
	return (*adminClient)(a).SetTraceRecordingType(ctx, in)
}

func (a *grpcAdminClientAdapter) RecoveryCollectReplicaInfo(ctx context.Context, in *RecoveryCollectReplicaInfoRequest) (RPCAdmin_RecoveryCollectReplicaInfoClient, error) {
	return (*adminClient)(a).RecoveryCollectReplicaInfo(ctx, in)
}

func (a *grpcAdminClientAdapter) RecoveryCollectLocalReplicaInfo(ctx context.Context, in *RecoveryCollectLocalReplicaInfoRequest) (RPCAdmin_RecoveryCollectLocalReplicaInfoClient, error) {
	return (*adminClient)(a).RecoveryCollectLocalReplicaInfo(ctx, in)
}

func (a *grpcAdminClientAdapter) RecoveryStagePlan(ctx context.Context, in *RecoveryStagePlanRequest) (*RecoveryStagePlanResponse, error) {
	return (*adminClient)(a).RecoveryStagePlan(ctx, in)
}

func (a *grpcAdminClientAdapter) RecoveryNodeStatus(ctx context.Context, in *RecoveryNodeStatusRequest) (*RecoveryNodeStatusResponse, error) {
	return (*adminClient)(a).RecoveryNodeStatus(ctx, in)
}

func (a *grpcAdminClientAdapter) RecoveryVerify(ctx context.Context, in *RecoveryVerifyRequest) (*RecoveryVerifyResponse, error) {
	return (*adminClient)(a).RecoveryVerify(ctx, in)
}

func (a *grpcAdminClientAdapter) ListTenants(ctx context.Context, in *ListTenantsRequest) (*ListTenantsResponse, error) {
	return (*adminClient)(a).ListTenants(ctx, in)
}

func (a *grpcAdminClientAdapter) ReadFromTenantInfo(ctx context.Context, in *ReadFromTenantInfoRequest) (*ReadFromTenantInfoResponse, error) {
	return (*adminClient)(a).ReadFromTenantInfo(ctx, in)
}

// compile-time assertion
var _ RPCAdminClient = (*grpcAdminClientAdapter)(nil)

// Admin DRPC -> RPC adapter
type drpcAdminClientAdapter drpcAdminClient

func NewDRPCAdminClientAdapter(conn drpc.Conn) RPCAdminClient {
	return (*drpcAdminClientAdapter)(&drpcAdminClient{conn})
}

func (a *drpcAdminClientAdapter) Users(ctx context.Context, in *UsersRequest) (*UsersResponse, error) {
	return (*drpcAdminClient)(a).Users(ctx, in)
}

func (a *drpcAdminClientAdapter) Databases(ctx context.Context, in *DatabasesRequest) (*DatabasesResponse, error) {
	return (*drpcAdminClient)(a).Databases(ctx, in)
}

func (a *drpcAdminClientAdapter) DatabaseDetails(ctx context.Context, in *DatabaseDetailsRequest) (*DatabaseDetailsResponse, error) {
	return (*drpcAdminClient)(a).DatabaseDetails(ctx, in)
}

func (a *drpcAdminClientAdapter) TableDetails(ctx context.Context, in *TableDetailsRequest) (*TableDetailsResponse, error) {
	return (*drpcAdminClient)(a).TableDetails(ctx, in)
}

func (a *drpcAdminClientAdapter) TableStats(ctx context.Context, in *TableStatsRequest) (*TableStatsResponse, error) {
	return (*drpcAdminClient)(a).TableStats(ctx, in)
}

func (a *drpcAdminClientAdapter) NonTableStats(ctx context.Context, in *NonTableStatsRequest) (*NonTableStatsResponse, error) {
	return (*drpcAdminClient)(a).NonTableStats(ctx, in)
}

func (a *drpcAdminClientAdapter) Events(ctx context.Context, in *EventsRequest) (*EventsResponse, error) {
	return (*drpcAdminClient)(a).Events(ctx, in)
}

func (a *drpcAdminClientAdapter) SetUIData(ctx context.Context, in *SetUIDataRequest) (*SetUIDataResponse, error) {
	return (*drpcAdminClient)(a).SetUIData(ctx, in)
}

func (a *drpcAdminClientAdapter) GetUIData(ctx context.Context, in *GetUIDataRequest) (*GetUIDataResponse, error) {
	return (*drpcAdminClient)(a).GetUIData(ctx, in)
}

func (a *drpcAdminClientAdapter) Cluster(ctx context.Context, in *ClusterRequest) (*ClusterResponse, error) {
	return (*drpcAdminClient)(a).Cluster(ctx, in)
}

func (a *drpcAdminClientAdapter) Settings(ctx context.Context, in *SettingsRequest) (*SettingsResponse, error) {
	return (*drpcAdminClient)(a).Settings(ctx, in)
}

func (a *drpcAdminClientAdapter) Health(ctx context.Context, in *HealthRequest) (*HealthResponse, error) {
	return (*drpcAdminClient)(a).Health(ctx, in)
}

func (a *drpcAdminClientAdapter) Liveness(ctx context.Context, in *LivenessRequest) (*LivenessResponse, error) {
	return (*drpcAdminClient)(a).Liveness(ctx, in)
}

func (a *drpcAdminClientAdapter) Jobs(ctx context.Context, in *JobsRequest) (*JobsResponse, error) {
	return (*drpcAdminClient)(a).Jobs(ctx, in)
}

func (a *drpcAdminClientAdapter) Job(ctx context.Context, in *JobRequest) (*JobResponse, error) {
	return (*drpcAdminClient)(a).Job(ctx, in)
}

func (a *drpcAdminClientAdapter) Locations(ctx context.Context, in *LocationsRequest) (*LocationsResponse, error) {
	return (*drpcAdminClient)(a).Locations(ctx, in)
}

func (a *drpcAdminClientAdapter) QueryPlan(ctx context.Context, in *QueryPlanRequest) (*QueryPlanResponse, error) {
	return (*drpcAdminClient)(a).QueryPlan(ctx, in)
}

func (a *drpcAdminClientAdapter) Drain(ctx context.Context, in *DrainRequest) (RPCAdmin_DrainClient, error) {
	return (*drpcAdminClient)(a).Drain(ctx, in)
}

func (a *drpcAdminClientAdapter) DecommissionPreCheck(ctx context.Context, in *DecommissionPreCheckRequest) (*DecommissionPreCheckResponse, error) {
	return (*drpcAdminClient)(a).DecommissionPreCheck(ctx, in)
}

func (a *drpcAdminClientAdapter) Decommission(ctx context.Context, in *DecommissionRequest) (*DecommissionStatusResponse, error) {
	return (*drpcAdminClient)(a).Decommission(ctx, in)
}

func (a *drpcAdminClientAdapter) DecommissionStatus(ctx context.Context, in *DecommissionStatusRequest) (*DecommissionStatusResponse, error) {
	return (*drpcAdminClient)(a).DecommissionStatus(ctx, in)
}

func (a *drpcAdminClientAdapter) RangeLog(ctx context.Context, in *RangeLogRequest) (*RangeLogResponse, error) {
	return (*drpcAdminClient)(a).RangeLog(ctx, in)
}

func (a *drpcAdminClientAdapter) DataDistribution(ctx context.Context, in *DataDistributionRequest) (*DataDistributionResponse, error) {
	return (*drpcAdminClient)(a).DataDistribution(ctx, in)
}

func (a *drpcAdminClientAdapter) AllMetricMetadata(ctx context.Context, in *MetricMetadataRequest) (*MetricMetadataResponse, error) {
	return (*drpcAdminClient)(a).AllMetricMetadata(ctx, in)
}

func (a *drpcAdminClientAdapter) ChartCatalog(ctx context.Context, in *ChartCatalogRequest) (*ChartCatalogResponse, error) {
	return (*drpcAdminClient)(a).ChartCatalog(ctx, in)
}

func (a *drpcAdminClientAdapter) EnqueueRange(ctx context.Context, in *EnqueueRangeRequest) (*EnqueueRangeResponse, error) {
	return (*drpcAdminClient)(a).EnqueueRange(ctx, in)
}

func (a *drpcAdminClientAdapter) SendKVBatch(ctx context.Context, in *kvpb.BatchRequest) (*kvpb.BatchResponse, error) {
	return (*drpcAdminClient)(a).SendKVBatch(ctx, in)
}

func (a *drpcAdminClientAdapter) ListTracingSnapshots(ctx context.Context, in *ListTracingSnapshotsRequest) (*ListTracingSnapshotsResponse, error) {
	return (*drpcAdminClient)(a).ListTracingSnapshots(ctx, in)
}

func (a *drpcAdminClientAdapter) TakeTracingSnapshot(ctx context.Context, in *TakeTracingSnapshotRequest) (*TakeTracingSnapshotResponse, error) {
	return (*drpcAdminClient)(a).TakeTracingSnapshot(ctx, in)
}

func (a *drpcAdminClientAdapter) GetTracingSnapshot(ctx context.Context, in *GetTracingSnapshotRequest) (*GetTracingSnapshotResponse, error) {
	return (*drpcAdminClient)(a).GetTracingSnapshot(ctx, in)
}

func (a *drpcAdminClientAdapter) GetTrace(ctx context.Context, in *GetTraceRequest) (*GetTraceResponse, error) {
	return (*drpcAdminClient)(a).GetTrace(ctx, in)
}

func (a *drpcAdminClientAdapter) SetTraceRecordingType(ctx context.Context, in *SetTraceRecordingTypeRequest) (*SetTraceRecordingTypeResponse, error) {
	return (*drpcAdminClient)(a).SetTraceRecordingType(ctx, in)
}

func (a *drpcAdminClientAdapter) RecoveryCollectReplicaInfo(ctx context.Context, in *RecoveryCollectReplicaInfoRequest) (RPCAdmin_RecoveryCollectReplicaInfoClient, error) {
	return (*drpcAdminClient)(a).RecoveryCollectReplicaInfo(ctx, in)
}

func (a *drpcAdminClientAdapter) RecoveryCollectLocalReplicaInfo(ctx context.Context, in *RecoveryCollectLocalReplicaInfoRequest) (RPCAdmin_RecoveryCollectLocalReplicaInfoClient, error) {
	return (*drpcAdminClient)(a).RecoveryCollectLocalReplicaInfo(ctx, in)
}

func (a *drpcAdminClientAdapter) RecoveryStagePlan(ctx context.Context, in *RecoveryStagePlanRequest) (*RecoveryStagePlanResponse, error) {
	return (*drpcAdminClient)(a).RecoveryStagePlan(ctx, in)
}

func (a *drpcAdminClientAdapter) RecoveryNodeStatus(ctx context.Context, in *RecoveryNodeStatusRequest) (*RecoveryNodeStatusResponse, error) {
	return (*drpcAdminClient)(a).RecoveryNodeStatus(ctx, in)
}

func (a *drpcAdminClientAdapter) RecoveryVerify(ctx context.Context, in *RecoveryVerifyRequest) (*RecoveryVerifyResponse, error) {
	return (*drpcAdminClient)(a).RecoveryVerify(ctx, in)
}

func (a *drpcAdminClientAdapter) ListTenants(ctx context.Context, in *ListTenantsRequest) (*ListTenantsResponse, error) {
	return (*drpcAdminClient)(a).ListTenants(ctx, in)
}

func (a *drpcAdminClientAdapter) ReadFromTenantInfo(ctx context.Context, in *ReadFromTenantInfoRequest) (*ReadFromTenantInfoResponse, error) {
	return (*drpcAdminClient)(a).ReadFromTenantInfo(ctx, in)
}

// compile-time assertion
var _ RPCAdminClient = (*drpcAdminClientAdapter)(nil)
