// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// source: server/serverpb/init.proto

package serverpb

import (
	bytes "bytes"
	context "context"
	errors "github.com/cockroachdb/errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_server_serverpb_init_proto struct{}

func (drpcEncoding_File_server_serverpb_init_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_server_serverpb_init_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_server_serverpb_init_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_server_serverpb_init_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCInitClient interface {
	DRPCConn() drpc.Conn

	Bootstrap(ctx context.Context, in *BootstrapRequest) (*BootstrapResponse, error)
}

type drpcInitClient struct {
	cc drpc.Conn
}

func NewDRPCInitClient(cc drpc.Conn) DRPCInitClient {
	return &drpcInitClient{cc}
}

func (c *drpcInitClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcInitClient) Bootstrap(ctx context.Context, in *BootstrapRequest) (*BootstrapResponse, error) {
	out := new(BootstrapResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Init/Bootstrap", drpcEncoding_File_server_serverpb_init_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCInitServer interface {
	Bootstrap(context.Context, *BootstrapRequest) (*BootstrapResponse, error)
}

type DRPCInitUnimplementedServer struct{}

func (s *DRPCInitUnimplementedServer) Bootstrap(context.Context, *BootstrapRequest) (*BootstrapResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCInitDescription struct{}

func (DRPCInitDescription) NumMethods() int { return 1 }

func (DRPCInitDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.server.serverpb.Init/Bootstrap", drpcEncoding_File_server_serverpb_init_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInitServer).
					Bootstrap(
						ctx,
						in1.(*BootstrapRequest),
					)
			}, DRPCInitServer.Bootstrap, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterInit(mux drpc.Mux, impl DRPCInitServer) error {
	return mux.Register(impl, DRPCInitDescription{})
}

type DRPCInit_BootstrapStream interface {
	drpc.Stream
	SendAndClose(*BootstrapResponse) error
}

type RPCInit_BootstrapStream interface {
	Context() context.Context
	SendAndClose(*BootstrapResponse) error
}

type drpcInit_BootstrapStream struct {
	drpc.Stream
}

func (x *drpcInit_BootstrapStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInit_BootstrapStream) SendAndClose(m *BootstrapResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_init_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type RPCInitClient interface {
	Bootstrap(ctx context.Context, in *BootstrapRequest) (*BootstrapResponse, error)
}

// Init gRPC -> RPC adapter
type grpcInitClientAdapter initClient

func NewGRPCInitClientAdapter(conn *grpc.ClientConn) RPCInitClient {
	return (*grpcInitClientAdapter)(&initClient{conn})
}

func (a *grpcInitClientAdapter) Bootstrap(ctx context.Context, in *BootstrapRequest) (*BootstrapResponse, error) {
	return (*initClient)(a).Bootstrap(ctx, in)
}

// compile-time assertion
var _ RPCInitClient = (*grpcInitClientAdapter)(nil)

// Init DRPC -> RPC adapter
type drpcInitClientAdapter drpcInitClient

func NewDRPCInitClientAdapter(conn drpc.Conn) RPCInitClient {
	return (*drpcInitClientAdapter)(&drpcInitClient{conn})
}

func (a *drpcInitClientAdapter) Bootstrap(ctx context.Context, in *BootstrapRequest) (*BootstrapResponse, error) {
	return (*drpcInitClient)(a).Bootstrap(ctx, in)
}

// compile-time assertion
var _ RPCInitClient = (*drpcInitClientAdapter)(nil)
