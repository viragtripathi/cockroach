// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// source: server/serverpb/status.proto

package serverpb

import (
	bytes "bytes"
	context "context"
	gossip "github.com/cockroachdb/cockroach/pkg/gossip"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	diagnosticspb "github.com/cockroachdb/cockroach/pkg/server/diagnostics/diagnosticspb"
	statuspb "github.com/cockroachdb/cockroach/pkg/server/status/statuspb"
	errors "github.com/cockroachdb/errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_server_serverpb_status_proto struct{}

func (drpcEncoding_File_server_serverpb_status_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_server_serverpb_status_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_server_serverpb_status_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_server_serverpb_status_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCStatusClient interface {
	DRPCConn() drpc.Conn

	Certificates(ctx context.Context, in *CertificatesRequest) (*CertificatesResponse, error)
	Details(ctx context.Context, in *DetailsRequest) (*DetailsResponse, error)
	Regions(ctx context.Context, in *RegionsRequest) (*RegionsResponse, error)
	NodesList(ctx context.Context, in *NodesListRequest) (*NodesListResponse, error)
	Nodes(ctx context.Context, in *NodesRequest) (*NodesResponse, error)
	Node(ctx context.Context, in *NodeRequest) (*statuspb.NodeStatus, error)
	NodesUI(ctx context.Context, in *NodesRequest) (*NodesResponseExternal, error)
	NodeUI(ctx context.Context, in *NodeRequest) (*NodeResponse, error)
	RaftDebug(ctx context.Context, in *RaftDebugRequest) (*RaftDebugResponse, error)
	Ranges(ctx context.Context, in *RangesRequest) (*RangesResponse, error)
	TenantServiceStatus(ctx context.Context, in *TenantServiceStatusRequest) (*TenantServiceStatusResponse, error)
	TenantRanges(ctx context.Context, in *TenantRangesRequest) (*TenantRangesResponse, error)
	Gossip(ctx context.Context, in *GossipRequest) (*gossip.InfoStatus, error)
	EngineStats(ctx context.Context, in *EngineStatsRequest) (*EngineStatsResponse, error)
	Allocator(ctx context.Context, in *AllocatorRequest) (*AllocatorResponse, error)
	AllocatorRange(ctx context.Context, in *AllocatorRangeRequest) (*AllocatorRangeResponse, error)
	ListSessions(ctx context.Context, in *ListSessionsRequest) (*ListSessionsResponse, error)
	ListLocalSessions(ctx context.Context, in *ListSessionsRequest) (*ListSessionsResponse, error)
	CancelQuery(ctx context.Context, in *CancelQueryRequest) (*CancelQueryResponse, error)
	CancelQueryByKey(ctx context.Context, in *CancelQueryByKeyRequest) (*CancelQueryByKeyResponse, error)
	ListContentionEvents(ctx context.Context, in *ListContentionEventsRequest) (*ListContentionEventsResponse, error)
	ListLocalContentionEvents(ctx context.Context, in *ListContentionEventsRequest) (*ListContentionEventsResponse, error)
	ListDistSQLFlows(ctx context.Context, in *ListDistSQLFlowsRequest) (*ListDistSQLFlowsResponse, error)
	ListLocalDistSQLFlows(ctx context.Context, in *ListDistSQLFlowsRequest) (*ListDistSQLFlowsResponse, error)
	CancelSession(ctx context.Context, in *CancelSessionRequest) (*CancelSessionResponse, error)
	SpanStats(ctx context.Context, in *roachpb.SpanStatsRequest) (*roachpb.SpanStatsResponse, error)
	CriticalNodes(ctx context.Context, in *CriticalNodesRequest) (*CriticalNodesResponse, error)
	Stacks(ctx context.Context, in *StacksRequest) (*JSONResponse, error)
	Profile(ctx context.Context, in *ProfileRequest) (*JSONResponse, error)
	Metrics(ctx context.Context, in *MetricsRequest) (*JSONResponse, error)
	GetFiles(ctx context.Context, in *GetFilesRequest) (*GetFilesResponse, error)
	LogFilesList(ctx context.Context, in *LogFilesListRequest) (*LogFilesListResponse, error)
	LogFile(ctx context.Context, in *LogFileRequest) (*LogEntriesResponse, error)
	Logs(ctx context.Context, in *LogsRequest) (*LogEntriesResponse, error)
	ProblemRanges(ctx context.Context, in *ProblemRangesRequest) (*ProblemRangesResponse, error)
	DownloadSpan(ctx context.Context, in *DownloadSpanRequest) (*DownloadSpanResponse, error)
	HotRangesV2(ctx context.Context, in *HotRangesRequest) (*HotRangesResponseV2, error)
	KeyVisSamples(ctx context.Context, in *KeyVisSamplesRequest) (*KeyVisSamplesResponse, error)
	Range(ctx context.Context, in *RangeRequest) (*RangeResponse, error)
	Diagnostics(ctx context.Context, in *DiagnosticsRequest) (*diagnosticspb.DiagnosticReport, error)
	Stores(ctx context.Context, in *StoresRequest) (*StoresResponse, error)
	Statements(ctx context.Context, in *StatementsRequest) (*StatementsResponse, error)
	CombinedStatementStats(ctx context.Context, in *CombinedStatementsStatsRequest) (*StatementsResponse, error)
	StatementDetails(ctx context.Context, in *StatementDetailsRequest) (*StatementDetailsResponse, error)
	CreateStatementDiagnosticsReport(ctx context.Context, in *CreateStatementDiagnosticsReportRequest) (*CreateStatementDiagnosticsReportResponse, error)
	CancelStatementDiagnosticsReport(ctx context.Context, in *CancelStatementDiagnosticsReportRequest) (*CancelStatementDiagnosticsReportResponse, error)
	StatementDiagnosticsRequests(ctx context.Context, in *StatementDiagnosticsReportsRequest) (*StatementDiagnosticsReportsResponse, error)
	StatementDiagnostics(ctx context.Context, in *StatementDiagnosticsRequest) (*StatementDiagnosticsResponse, error)
	JobRegistryStatus(ctx context.Context, in *JobRegistryStatusRequest) (*JobRegistryStatusResponse, error)
	JobStatus(ctx context.Context, in *JobStatusRequest) (*JobStatusResponse, error)
	ResetSQLStats(ctx context.Context, in *ResetSQLStatsRequest) (*ResetSQLStatsResponse, error)
	DrainSqlStats(ctx context.Context, in *DrainSqlStatsRequest) (*DrainStatsResponse, error)
	IndexUsageStatistics(ctx context.Context, in *IndexUsageStatisticsRequest) (*IndexUsageStatisticsResponse, error)
	ResetIndexUsageStats(ctx context.Context, in *ResetIndexUsageStatsRequest) (*ResetIndexUsageStatsResponse, error)
	TableIndexStats(ctx context.Context, in *TableIndexStatsRequest) (*TableIndexStatsResponse, error)
	UserSQLRoles(ctx context.Context, in *UserSQLRolesRequest) (*UserSQLRolesResponse, error)
	TxnIDResolution(ctx context.Context, in *TxnIDResolutionRequest) (*TxnIDResolutionResponse, error)
	TransactionContentionEvents(ctx context.Context, in *TransactionContentionEventsRequest) (*TransactionContentionEventsResponse, error)
	ListExecutionInsights(ctx context.Context, in *ListExecutionInsightsRequest) (*ListExecutionInsightsResponse, error)
	NetworkConnectivity(ctx context.Context, in *NetworkConnectivityRequest) (*NetworkConnectivityResponse, error)
	RequestJobProfilerExecutionDetails(ctx context.Context, in *RequestJobProfilerExecutionDetailsRequest) (*RequestJobProfilerExecutionDetailsResponse, error)
	GetJobProfilerExecutionDetails(ctx context.Context, in *GetJobProfilerExecutionDetailRequest) (*GetJobProfilerExecutionDetailResponse, error)
	ListJobProfilerExecutionDetails(ctx context.Context, in *ListJobProfilerExecutionDetailsRequest) (*ListJobProfilerExecutionDetailsResponse, error)
	UpdateTableMetadataCache(ctx context.Context, in *UpdateTableMetadataCacheRequest) (*UpdateTableMetadataCacheResponse, error)
	GetThrottlingMetadata(ctx context.Context, in *GetThrottlingMetadataRequest) (*GetThrottlingMetadataResponse, error)
}

type drpcStatusClient struct {
	cc drpc.Conn
}

func NewDRPCStatusClient(cc drpc.Conn) DRPCStatusClient {
	return &drpcStatusClient{cc}
}

func (c *drpcStatusClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcStatusClient) Certificates(ctx context.Context, in *CertificatesRequest) (*CertificatesResponse, error) {
	out := new(CertificatesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/Certificates", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) Details(ctx context.Context, in *DetailsRequest) (*DetailsResponse, error) {
	out := new(DetailsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/Details", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) Regions(ctx context.Context, in *RegionsRequest) (*RegionsResponse, error) {
	out := new(RegionsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/Regions", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) NodesList(ctx context.Context, in *NodesListRequest) (*NodesListResponse, error) {
	out := new(NodesListResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/NodesList", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) Nodes(ctx context.Context, in *NodesRequest) (*NodesResponse, error) {
	out := new(NodesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/Nodes", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) Node(ctx context.Context, in *NodeRequest) (*statuspb.NodeStatus, error) {
	out := new(statuspb.NodeStatus)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/Node", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) NodesUI(ctx context.Context, in *NodesRequest) (*NodesResponseExternal, error) {
	out := new(NodesResponseExternal)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/NodesUI", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) NodeUI(ctx context.Context, in *NodeRequest) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/NodeUI", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) RaftDebug(ctx context.Context, in *RaftDebugRequest) (*RaftDebugResponse, error) {
	out := new(RaftDebugResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/RaftDebug", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) Ranges(ctx context.Context, in *RangesRequest) (*RangesResponse, error) {
	out := new(RangesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/Ranges", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) TenantServiceStatus(ctx context.Context, in *TenantServiceStatusRequest) (*TenantServiceStatusResponse, error) {
	out := new(TenantServiceStatusResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/TenantServiceStatus", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) TenantRanges(ctx context.Context, in *TenantRangesRequest) (*TenantRangesResponse, error) {
	out := new(TenantRangesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/TenantRanges", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) Gossip(ctx context.Context, in *GossipRequest) (*gossip.InfoStatus, error) {
	out := new(gossip.InfoStatus)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/Gossip", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) EngineStats(ctx context.Context, in *EngineStatsRequest) (*EngineStatsResponse, error) {
	out := new(EngineStatsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/EngineStats", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) Allocator(ctx context.Context, in *AllocatorRequest) (*AllocatorResponse, error) {
	out := new(AllocatorResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/Allocator", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) AllocatorRange(ctx context.Context, in *AllocatorRangeRequest) (*AllocatorRangeResponse, error) {
	out := new(AllocatorRangeResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/AllocatorRange", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) ListSessions(ctx context.Context, in *ListSessionsRequest) (*ListSessionsResponse, error) {
	out := new(ListSessionsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/ListSessions", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) ListLocalSessions(ctx context.Context, in *ListSessionsRequest) (*ListSessionsResponse, error) {
	out := new(ListSessionsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/ListLocalSessions", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) CancelQuery(ctx context.Context, in *CancelQueryRequest) (*CancelQueryResponse, error) {
	out := new(CancelQueryResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/CancelQuery", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) CancelQueryByKey(ctx context.Context, in *CancelQueryByKeyRequest) (*CancelQueryByKeyResponse, error) {
	out := new(CancelQueryByKeyResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/CancelQueryByKey", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) ListContentionEvents(ctx context.Context, in *ListContentionEventsRequest) (*ListContentionEventsResponse, error) {
	out := new(ListContentionEventsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/ListContentionEvents", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) ListLocalContentionEvents(ctx context.Context, in *ListContentionEventsRequest) (*ListContentionEventsResponse, error) {
	out := new(ListContentionEventsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/ListLocalContentionEvents", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) ListDistSQLFlows(ctx context.Context, in *ListDistSQLFlowsRequest) (*ListDistSQLFlowsResponse, error) {
	out := new(ListDistSQLFlowsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/ListDistSQLFlows", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) ListLocalDistSQLFlows(ctx context.Context, in *ListDistSQLFlowsRequest) (*ListDistSQLFlowsResponse, error) {
	out := new(ListDistSQLFlowsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/ListLocalDistSQLFlows", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) CancelSession(ctx context.Context, in *CancelSessionRequest) (*CancelSessionResponse, error) {
	out := new(CancelSessionResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/CancelSession", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) SpanStats(ctx context.Context, in *roachpb.SpanStatsRequest) (*roachpb.SpanStatsResponse, error) {
	out := new(roachpb.SpanStatsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/SpanStats", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) CriticalNodes(ctx context.Context, in *CriticalNodesRequest) (*CriticalNodesResponse, error) {
	out := new(CriticalNodesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/CriticalNodes", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) Stacks(ctx context.Context, in *StacksRequest) (*JSONResponse, error) {
	out := new(JSONResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/Stacks", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) Profile(ctx context.Context, in *ProfileRequest) (*JSONResponse, error) {
	out := new(JSONResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/Profile", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) Metrics(ctx context.Context, in *MetricsRequest) (*JSONResponse, error) {
	out := new(JSONResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/Metrics", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) GetFiles(ctx context.Context, in *GetFilesRequest) (*GetFilesResponse, error) {
	out := new(GetFilesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/GetFiles", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) LogFilesList(ctx context.Context, in *LogFilesListRequest) (*LogFilesListResponse, error) {
	out := new(LogFilesListResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/LogFilesList", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) LogFile(ctx context.Context, in *LogFileRequest) (*LogEntriesResponse, error) {
	out := new(LogEntriesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/LogFile", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) Logs(ctx context.Context, in *LogsRequest) (*LogEntriesResponse, error) {
	out := new(LogEntriesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/Logs", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) ProblemRanges(ctx context.Context, in *ProblemRangesRequest) (*ProblemRangesResponse, error) {
	out := new(ProblemRangesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/ProblemRanges", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) DownloadSpan(ctx context.Context, in *DownloadSpanRequest) (*DownloadSpanResponse, error) {
	out := new(DownloadSpanResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/DownloadSpan", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) HotRangesV2(ctx context.Context, in *HotRangesRequest) (*HotRangesResponseV2, error) {
	out := new(HotRangesResponseV2)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/HotRangesV2", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) KeyVisSamples(ctx context.Context, in *KeyVisSamplesRequest) (*KeyVisSamplesResponse, error) {
	out := new(KeyVisSamplesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/KeyVisSamples", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) Range(ctx context.Context, in *RangeRequest) (*RangeResponse, error) {
	out := new(RangeResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/Range", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) Diagnostics(ctx context.Context, in *DiagnosticsRequest) (*diagnosticspb.DiagnosticReport, error) {
	out := new(diagnosticspb.DiagnosticReport)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/Diagnostics", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) Stores(ctx context.Context, in *StoresRequest) (*StoresResponse, error) {
	out := new(StoresResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/Stores", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) Statements(ctx context.Context, in *StatementsRequest) (*StatementsResponse, error) {
	out := new(StatementsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/Statements", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) CombinedStatementStats(ctx context.Context, in *CombinedStatementsStatsRequest) (*StatementsResponse, error) {
	out := new(StatementsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/CombinedStatementStats", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) StatementDetails(ctx context.Context, in *StatementDetailsRequest) (*StatementDetailsResponse, error) {
	out := new(StatementDetailsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/StatementDetails", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) CreateStatementDiagnosticsReport(ctx context.Context, in *CreateStatementDiagnosticsReportRequest) (*CreateStatementDiagnosticsReportResponse, error) {
	out := new(CreateStatementDiagnosticsReportResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/CreateStatementDiagnosticsReport", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) CancelStatementDiagnosticsReport(ctx context.Context, in *CancelStatementDiagnosticsReportRequest) (*CancelStatementDiagnosticsReportResponse, error) {
	out := new(CancelStatementDiagnosticsReportResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/CancelStatementDiagnosticsReport", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) StatementDiagnosticsRequests(ctx context.Context, in *StatementDiagnosticsReportsRequest) (*StatementDiagnosticsReportsResponse, error) {
	out := new(StatementDiagnosticsReportsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/StatementDiagnosticsRequests", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) StatementDiagnostics(ctx context.Context, in *StatementDiagnosticsRequest) (*StatementDiagnosticsResponse, error) {
	out := new(StatementDiagnosticsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/StatementDiagnostics", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) JobRegistryStatus(ctx context.Context, in *JobRegistryStatusRequest) (*JobRegistryStatusResponse, error) {
	out := new(JobRegistryStatusResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/JobRegistryStatus", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) JobStatus(ctx context.Context, in *JobStatusRequest) (*JobStatusResponse, error) {
	out := new(JobStatusResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/JobStatus", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) ResetSQLStats(ctx context.Context, in *ResetSQLStatsRequest) (*ResetSQLStatsResponse, error) {
	out := new(ResetSQLStatsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/ResetSQLStats", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) DrainSqlStats(ctx context.Context, in *DrainSqlStatsRequest) (*DrainStatsResponse, error) {
	out := new(DrainStatsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/DrainSqlStats", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) IndexUsageStatistics(ctx context.Context, in *IndexUsageStatisticsRequest) (*IndexUsageStatisticsResponse, error) {
	out := new(IndexUsageStatisticsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/IndexUsageStatistics", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) ResetIndexUsageStats(ctx context.Context, in *ResetIndexUsageStatsRequest) (*ResetIndexUsageStatsResponse, error) {
	out := new(ResetIndexUsageStatsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/ResetIndexUsageStats", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) TableIndexStats(ctx context.Context, in *TableIndexStatsRequest) (*TableIndexStatsResponse, error) {
	out := new(TableIndexStatsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/TableIndexStats", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) UserSQLRoles(ctx context.Context, in *UserSQLRolesRequest) (*UserSQLRolesResponse, error) {
	out := new(UserSQLRolesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/UserSQLRoles", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) TxnIDResolution(ctx context.Context, in *TxnIDResolutionRequest) (*TxnIDResolutionResponse, error) {
	out := new(TxnIDResolutionResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/TxnIDResolution", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) TransactionContentionEvents(ctx context.Context, in *TransactionContentionEventsRequest) (*TransactionContentionEventsResponse, error) {
	out := new(TransactionContentionEventsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/TransactionContentionEvents", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) ListExecutionInsights(ctx context.Context, in *ListExecutionInsightsRequest) (*ListExecutionInsightsResponse, error) {
	out := new(ListExecutionInsightsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/ListExecutionInsights", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) NetworkConnectivity(ctx context.Context, in *NetworkConnectivityRequest) (*NetworkConnectivityResponse, error) {
	out := new(NetworkConnectivityResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/NetworkConnectivity", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) RequestJobProfilerExecutionDetails(ctx context.Context, in *RequestJobProfilerExecutionDetailsRequest) (*RequestJobProfilerExecutionDetailsResponse, error) {
	out := new(RequestJobProfilerExecutionDetailsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/RequestJobProfilerExecutionDetails", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) GetJobProfilerExecutionDetails(ctx context.Context, in *GetJobProfilerExecutionDetailRequest) (*GetJobProfilerExecutionDetailResponse, error) {
	out := new(GetJobProfilerExecutionDetailResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/GetJobProfilerExecutionDetails", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) ListJobProfilerExecutionDetails(ctx context.Context, in *ListJobProfilerExecutionDetailsRequest) (*ListJobProfilerExecutionDetailsResponse, error) {
	out := new(ListJobProfilerExecutionDetailsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/ListJobProfilerExecutionDetails", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) UpdateTableMetadataCache(ctx context.Context, in *UpdateTableMetadataCacheRequest) (*UpdateTableMetadataCacheResponse, error) {
	out := new(UpdateTableMetadataCacheResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/UpdateTableMetadataCache", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStatusClient) GetThrottlingMetadata(ctx context.Context, in *GetThrottlingMetadataRequest) (*GetThrottlingMetadataResponse, error) {
	out := new(GetThrottlingMetadataResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Status/GetThrottlingMetadata", drpcEncoding_File_server_serverpb_status_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCStatusServer interface {
	Certificates(context.Context, *CertificatesRequest) (*CertificatesResponse, error)
	Details(context.Context, *DetailsRequest) (*DetailsResponse, error)
	Regions(context.Context, *RegionsRequest) (*RegionsResponse, error)
	NodesList(context.Context, *NodesListRequest) (*NodesListResponse, error)
	Nodes(context.Context, *NodesRequest) (*NodesResponse, error)
	Node(context.Context, *NodeRequest) (*statuspb.NodeStatus, error)
	NodesUI(context.Context, *NodesRequest) (*NodesResponseExternal, error)
	NodeUI(context.Context, *NodeRequest) (*NodeResponse, error)
	RaftDebug(context.Context, *RaftDebugRequest) (*RaftDebugResponse, error)
	Ranges(context.Context, *RangesRequest) (*RangesResponse, error)
	TenantServiceStatus(context.Context, *TenantServiceStatusRequest) (*TenantServiceStatusResponse, error)
	TenantRanges(context.Context, *TenantRangesRequest) (*TenantRangesResponse, error)
	Gossip(context.Context, *GossipRequest) (*gossip.InfoStatus, error)
	EngineStats(context.Context, *EngineStatsRequest) (*EngineStatsResponse, error)
	Allocator(context.Context, *AllocatorRequest) (*AllocatorResponse, error)
	AllocatorRange(context.Context, *AllocatorRangeRequest) (*AllocatorRangeResponse, error)
	ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error)
	ListLocalSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error)
	CancelQuery(context.Context, *CancelQueryRequest) (*CancelQueryResponse, error)
	CancelQueryByKey(context.Context, *CancelQueryByKeyRequest) (*CancelQueryByKeyResponse, error)
	ListContentionEvents(context.Context, *ListContentionEventsRequest) (*ListContentionEventsResponse, error)
	ListLocalContentionEvents(context.Context, *ListContentionEventsRequest) (*ListContentionEventsResponse, error)
	ListDistSQLFlows(context.Context, *ListDistSQLFlowsRequest) (*ListDistSQLFlowsResponse, error)
	ListLocalDistSQLFlows(context.Context, *ListDistSQLFlowsRequest) (*ListDistSQLFlowsResponse, error)
	CancelSession(context.Context, *CancelSessionRequest) (*CancelSessionResponse, error)
	SpanStats(context.Context, *roachpb.SpanStatsRequest) (*roachpb.SpanStatsResponse, error)
	CriticalNodes(context.Context, *CriticalNodesRequest) (*CriticalNodesResponse, error)
	Stacks(context.Context, *StacksRequest) (*JSONResponse, error)
	Profile(context.Context, *ProfileRequest) (*JSONResponse, error)
	Metrics(context.Context, *MetricsRequest) (*JSONResponse, error)
	GetFiles(context.Context, *GetFilesRequest) (*GetFilesResponse, error)
	LogFilesList(context.Context, *LogFilesListRequest) (*LogFilesListResponse, error)
	LogFile(context.Context, *LogFileRequest) (*LogEntriesResponse, error)
	Logs(context.Context, *LogsRequest) (*LogEntriesResponse, error)
	ProblemRanges(context.Context, *ProblemRangesRequest) (*ProblemRangesResponse, error)
	DownloadSpan(context.Context, *DownloadSpanRequest) (*DownloadSpanResponse, error)
	HotRangesV2(context.Context, *HotRangesRequest) (*HotRangesResponseV2, error)
	KeyVisSamples(context.Context, *KeyVisSamplesRequest) (*KeyVisSamplesResponse, error)
	Range(context.Context, *RangeRequest) (*RangeResponse, error)
	Diagnostics(context.Context, *DiagnosticsRequest) (*diagnosticspb.DiagnosticReport, error)
	Stores(context.Context, *StoresRequest) (*StoresResponse, error)
	Statements(context.Context, *StatementsRequest) (*StatementsResponse, error)
	CombinedStatementStats(context.Context, *CombinedStatementsStatsRequest) (*StatementsResponse, error)
	StatementDetails(context.Context, *StatementDetailsRequest) (*StatementDetailsResponse, error)
	CreateStatementDiagnosticsReport(context.Context, *CreateStatementDiagnosticsReportRequest) (*CreateStatementDiagnosticsReportResponse, error)
	CancelStatementDiagnosticsReport(context.Context, *CancelStatementDiagnosticsReportRequest) (*CancelStatementDiagnosticsReportResponse, error)
	StatementDiagnosticsRequests(context.Context, *StatementDiagnosticsReportsRequest) (*StatementDiagnosticsReportsResponse, error)
	StatementDiagnostics(context.Context, *StatementDiagnosticsRequest) (*StatementDiagnosticsResponse, error)
	JobRegistryStatus(context.Context, *JobRegistryStatusRequest) (*JobRegistryStatusResponse, error)
	JobStatus(context.Context, *JobStatusRequest) (*JobStatusResponse, error)
	ResetSQLStats(context.Context, *ResetSQLStatsRequest) (*ResetSQLStatsResponse, error)
	DrainSqlStats(context.Context, *DrainSqlStatsRequest) (*DrainStatsResponse, error)
	IndexUsageStatistics(context.Context, *IndexUsageStatisticsRequest) (*IndexUsageStatisticsResponse, error)
	ResetIndexUsageStats(context.Context, *ResetIndexUsageStatsRequest) (*ResetIndexUsageStatsResponse, error)
	TableIndexStats(context.Context, *TableIndexStatsRequest) (*TableIndexStatsResponse, error)
	UserSQLRoles(context.Context, *UserSQLRolesRequest) (*UserSQLRolesResponse, error)
	TxnIDResolution(context.Context, *TxnIDResolutionRequest) (*TxnIDResolutionResponse, error)
	TransactionContentionEvents(context.Context, *TransactionContentionEventsRequest) (*TransactionContentionEventsResponse, error)
	ListExecutionInsights(context.Context, *ListExecutionInsightsRequest) (*ListExecutionInsightsResponse, error)
	NetworkConnectivity(context.Context, *NetworkConnectivityRequest) (*NetworkConnectivityResponse, error)
	RequestJobProfilerExecutionDetails(context.Context, *RequestJobProfilerExecutionDetailsRequest) (*RequestJobProfilerExecutionDetailsResponse, error)
	GetJobProfilerExecutionDetails(context.Context, *GetJobProfilerExecutionDetailRequest) (*GetJobProfilerExecutionDetailResponse, error)
	ListJobProfilerExecutionDetails(context.Context, *ListJobProfilerExecutionDetailsRequest) (*ListJobProfilerExecutionDetailsResponse, error)
	UpdateTableMetadataCache(context.Context, *UpdateTableMetadataCacheRequest) (*UpdateTableMetadataCacheResponse, error)
	GetThrottlingMetadata(context.Context, *GetThrottlingMetadataRequest) (*GetThrottlingMetadataResponse, error)
}

type DRPCStatusUnimplementedServer struct{}

func (s *DRPCStatusUnimplementedServer) Certificates(context.Context, *CertificatesRequest) (*CertificatesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) Details(context.Context, *DetailsRequest) (*DetailsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) Regions(context.Context, *RegionsRequest) (*RegionsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) NodesList(context.Context, *NodesListRequest) (*NodesListResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) Nodes(context.Context, *NodesRequest) (*NodesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) Node(context.Context, *NodeRequest) (*statuspb.NodeStatus, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) NodesUI(context.Context, *NodesRequest) (*NodesResponseExternal, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) NodeUI(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) RaftDebug(context.Context, *RaftDebugRequest) (*RaftDebugResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) Ranges(context.Context, *RangesRequest) (*RangesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) TenantServiceStatus(context.Context, *TenantServiceStatusRequest) (*TenantServiceStatusResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) TenantRanges(context.Context, *TenantRangesRequest) (*TenantRangesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) Gossip(context.Context, *GossipRequest) (*gossip.InfoStatus, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) EngineStats(context.Context, *EngineStatsRequest) (*EngineStatsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) Allocator(context.Context, *AllocatorRequest) (*AllocatorResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) AllocatorRange(context.Context, *AllocatorRangeRequest) (*AllocatorRangeResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) ListLocalSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) CancelQuery(context.Context, *CancelQueryRequest) (*CancelQueryResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) CancelQueryByKey(context.Context, *CancelQueryByKeyRequest) (*CancelQueryByKeyResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) ListContentionEvents(context.Context, *ListContentionEventsRequest) (*ListContentionEventsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) ListLocalContentionEvents(context.Context, *ListContentionEventsRequest) (*ListContentionEventsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) ListDistSQLFlows(context.Context, *ListDistSQLFlowsRequest) (*ListDistSQLFlowsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) ListLocalDistSQLFlows(context.Context, *ListDistSQLFlowsRequest) (*ListDistSQLFlowsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) CancelSession(context.Context, *CancelSessionRequest) (*CancelSessionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) SpanStats(context.Context, *roachpb.SpanStatsRequest) (*roachpb.SpanStatsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) CriticalNodes(context.Context, *CriticalNodesRequest) (*CriticalNodesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) Stacks(context.Context, *StacksRequest) (*JSONResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) Profile(context.Context, *ProfileRequest) (*JSONResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) Metrics(context.Context, *MetricsRequest) (*JSONResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) GetFiles(context.Context, *GetFilesRequest) (*GetFilesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) LogFilesList(context.Context, *LogFilesListRequest) (*LogFilesListResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) LogFile(context.Context, *LogFileRequest) (*LogEntriesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) Logs(context.Context, *LogsRequest) (*LogEntriesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) ProblemRanges(context.Context, *ProblemRangesRequest) (*ProblemRangesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) DownloadSpan(context.Context, *DownloadSpanRequest) (*DownloadSpanResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) HotRangesV2(context.Context, *HotRangesRequest) (*HotRangesResponseV2, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) KeyVisSamples(context.Context, *KeyVisSamplesRequest) (*KeyVisSamplesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) Range(context.Context, *RangeRequest) (*RangeResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) Diagnostics(context.Context, *DiagnosticsRequest) (*diagnosticspb.DiagnosticReport, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) Stores(context.Context, *StoresRequest) (*StoresResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) Statements(context.Context, *StatementsRequest) (*StatementsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) CombinedStatementStats(context.Context, *CombinedStatementsStatsRequest) (*StatementsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) StatementDetails(context.Context, *StatementDetailsRequest) (*StatementDetailsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) CreateStatementDiagnosticsReport(context.Context, *CreateStatementDiagnosticsReportRequest) (*CreateStatementDiagnosticsReportResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) CancelStatementDiagnosticsReport(context.Context, *CancelStatementDiagnosticsReportRequest) (*CancelStatementDiagnosticsReportResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) StatementDiagnosticsRequests(context.Context, *StatementDiagnosticsReportsRequest) (*StatementDiagnosticsReportsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) StatementDiagnostics(context.Context, *StatementDiagnosticsRequest) (*StatementDiagnosticsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) JobRegistryStatus(context.Context, *JobRegistryStatusRequest) (*JobRegistryStatusResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) JobStatus(context.Context, *JobStatusRequest) (*JobStatusResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) ResetSQLStats(context.Context, *ResetSQLStatsRequest) (*ResetSQLStatsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) DrainSqlStats(context.Context, *DrainSqlStatsRequest) (*DrainStatsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) IndexUsageStatistics(context.Context, *IndexUsageStatisticsRequest) (*IndexUsageStatisticsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) ResetIndexUsageStats(context.Context, *ResetIndexUsageStatsRequest) (*ResetIndexUsageStatsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) TableIndexStats(context.Context, *TableIndexStatsRequest) (*TableIndexStatsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) UserSQLRoles(context.Context, *UserSQLRolesRequest) (*UserSQLRolesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) TxnIDResolution(context.Context, *TxnIDResolutionRequest) (*TxnIDResolutionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) TransactionContentionEvents(context.Context, *TransactionContentionEventsRequest) (*TransactionContentionEventsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) ListExecutionInsights(context.Context, *ListExecutionInsightsRequest) (*ListExecutionInsightsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) NetworkConnectivity(context.Context, *NetworkConnectivityRequest) (*NetworkConnectivityResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) RequestJobProfilerExecutionDetails(context.Context, *RequestJobProfilerExecutionDetailsRequest) (*RequestJobProfilerExecutionDetailsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) GetJobProfilerExecutionDetails(context.Context, *GetJobProfilerExecutionDetailRequest) (*GetJobProfilerExecutionDetailResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) ListJobProfilerExecutionDetails(context.Context, *ListJobProfilerExecutionDetailsRequest) (*ListJobProfilerExecutionDetailsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) UpdateTableMetadataCache(context.Context, *UpdateTableMetadataCacheRequest) (*UpdateTableMetadataCacheResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStatusUnimplementedServer) GetThrottlingMetadata(context.Context, *GetThrottlingMetadataRequest) (*GetThrottlingMetadataResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCStatusDescription struct{}

func (DRPCStatusDescription) NumMethods() int { return 65 }

func (DRPCStatusDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.server.serverpb.Status/Certificates", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					Certificates(
						ctx,
						in1.(*CertificatesRequest),
					)
			}, DRPCStatusServer.Certificates, true
	case 1:
		return "/cockroach.server.serverpb.Status/Details", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					Details(
						ctx,
						in1.(*DetailsRequest),
					)
			}, DRPCStatusServer.Details, true
	case 2:
		return "/cockroach.server.serverpb.Status/Regions", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					Regions(
						ctx,
						in1.(*RegionsRequest),
					)
			}, DRPCStatusServer.Regions, true
	case 3:
		return "/cockroach.server.serverpb.Status/NodesList", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					NodesList(
						ctx,
						in1.(*NodesListRequest),
					)
			}, DRPCStatusServer.NodesList, true
	case 4:
		return "/cockroach.server.serverpb.Status/Nodes", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					Nodes(
						ctx,
						in1.(*NodesRequest),
					)
			}, DRPCStatusServer.Nodes, true
	case 5:
		return "/cockroach.server.serverpb.Status/Node", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					Node(
						ctx,
						in1.(*NodeRequest),
					)
			}, DRPCStatusServer.Node, true
	case 6:
		return "/cockroach.server.serverpb.Status/NodesUI", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					NodesUI(
						ctx,
						in1.(*NodesRequest),
					)
			}, DRPCStatusServer.NodesUI, true
	case 7:
		return "/cockroach.server.serverpb.Status/NodeUI", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					NodeUI(
						ctx,
						in1.(*NodeRequest),
					)
			}, DRPCStatusServer.NodeUI, true
	case 8:
		return "/cockroach.server.serverpb.Status/RaftDebug", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					RaftDebug(
						ctx,
						in1.(*RaftDebugRequest),
					)
			}, DRPCStatusServer.RaftDebug, true
	case 9:
		return "/cockroach.server.serverpb.Status/Ranges", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					Ranges(
						ctx,
						in1.(*RangesRequest),
					)
			}, DRPCStatusServer.Ranges, true
	case 10:
		return "/cockroach.server.serverpb.Status/TenantServiceStatus", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					TenantServiceStatus(
						ctx,
						in1.(*TenantServiceStatusRequest),
					)
			}, DRPCStatusServer.TenantServiceStatus, true
	case 11:
		return "/cockroach.server.serverpb.Status/TenantRanges", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					TenantRanges(
						ctx,
						in1.(*TenantRangesRequest),
					)
			}, DRPCStatusServer.TenantRanges, true
	case 12:
		return "/cockroach.server.serverpb.Status/Gossip", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					Gossip(
						ctx,
						in1.(*GossipRequest),
					)
			}, DRPCStatusServer.Gossip, true
	case 13:
		return "/cockroach.server.serverpb.Status/EngineStats", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					EngineStats(
						ctx,
						in1.(*EngineStatsRequest),
					)
			}, DRPCStatusServer.EngineStats, true
	case 14:
		return "/cockroach.server.serverpb.Status/Allocator", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					Allocator(
						ctx,
						in1.(*AllocatorRequest),
					)
			}, DRPCStatusServer.Allocator, true
	case 15:
		return "/cockroach.server.serverpb.Status/AllocatorRange", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					AllocatorRange(
						ctx,
						in1.(*AllocatorRangeRequest),
					)
			}, DRPCStatusServer.AllocatorRange, true
	case 16:
		return "/cockroach.server.serverpb.Status/ListSessions", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					ListSessions(
						ctx,
						in1.(*ListSessionsRequest),
					)
			}, DRPCStatusServer.ListSessions, true
	case 17:
		return "/cockroach.server.serverpb.Status/ListLocalSessions", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					ListLocalSessions(
						ctx,
						in1.(*ListSessionsRequest),
					)
			}, DRPCStatusServer.ListLocalSessions, true
	case 18:
		return "/cockroach.server.serverpb.Status/CancelQuery", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					CancelQuery(
						ctx,
						in1.(*CancelQueryRequest),
					)
			}, DRPCStatusServer.CancelQuery, true
	case 19:
		return "/cockroach.server.serverpb.Status/CancelQueryByKey", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					CancelQueryByKey(
						ctx,
						in1.(*CancelQueryByKeyRequest),
					)
			}, DRPCStatusServer.CancelQueryByKey, true
	case 20:
		return "/cockroach.server.serverpb.Status/ListContentionEvents", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					ListContentionEvents(
						ctx,
						in1.(*ListContentionEventsRequest),
					)
			}, DRPCStatusServer.ListContentionEvents, true
	case 21:
		return "/cockroach.server.serverpb.Status/ListLocalContentionEvents", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					ListLocalContentionEvents(
						ctx,
						in1.(*ListContentionEventsRequest),
					)
			}, DRPCStatusServer.ListLocalContentionEvents, true
	case 22:
		return "/cockroach.server.serverpb.Status/ListDistSQLFlows", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					ListDistSQLFlows(
						ctx,
						in1.(*ListDistSQLFlowsRequest),
					)
			}, DRPCStatusServer.ListDistSQLFlows, true
	case 23:
		return "/cockroach.server.serverpb.Status/ListLocalDistSQLFlows", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					ListLocalDistSQLFlows(
						ctx,
						in1.(*ListDistSQLFlowsRequest),
					)
			}, DRPCStatusServer.ListLocalDistSQLFlows, true
	case 24:
		return "/cockroach.server.serverpb.Status/CancelSession", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					CancelSession(
						ctx,
						in1.(*CancelSessionRequest),
					)
			}, DRPCStatusServer.CancelSession, true
	case 25:
		return "/cockroach.server.serverpb.Status/SpanStats", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					SpanStats(
						ctx,
						in1.(*roachpb.SpanStatsRequest),
					)
			}, DRPCStatusServer.SpanStats, true
	case 26:
		return "/cockroach.server.serverpb.Status/CriticalNodes", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					CriticalNodes(
						ctx,
						in1.(*CriticalNodesRequest),
					)
			}, DRPCStatusServer.CriticalNodes, true
	case 27:
		return "/cockroach.server.serverpb.Status/Stacks", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					Stacks(
						ctx,
						in1.(*StacksRequest),
					)
			}, DRPCStatusServer.Stacks, true
	case 28:
		return "/cockroach.server.serverpb.Status/Profile", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					Profile(
						ctx,
						in1.(*ProfileRequest),
					)
			}, DRPCStatusServer.Profile, true
	case 29:
		return "/cockroach.server.serverpb.Status/Metrics", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					Metrics(
						ctx,
						in1.(*MetricsRequest),
					)
			}, DRPCStatusServer.Metrics, true
	case 30:
		return "/cockroach.server.serverpb.Status/GetFiles", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					GetFiles(
						ctx,
						in1.(*GetFilesRequest),
					)
			}, DRPCStatusServer.GetFiles, true
	case 31:
		return "/cockroach.server.serverpb.Status/LogFilesList", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					LogFilesList(
						ctx,
						in1.(*LogFilesListRequest),
					)
			}, DRPCStatusServer.LogFilesList, true
	case 32:
		return "/cockroach.server.serverpb.Status/LogFile", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					LogFile(
						ctx,
						in1.(*LogFileRequest),
					)
			}, DRPCStatusServer.LogFile, true
	case 33:
		return "/cockroach.server.serverpb.Status/Logs", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					Logs(
						ctx,
						in1.(*LogsRequest),
					)
			}, DRPCStatusServer.Logs, true
	case 34:
		return "/cockroach.server.serverpb.Status/ProblemRanges", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					ProblemRanges(
						ctx,
						in1.(*ProblemRangesRequest),
					)
			}, DRPCStatusServer.ProblemRanges, true
	case 35:
		return "/cockroach.server.serverpb.Status/DownloadSpan", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					DownloadSpan(
						ctx,
						in1.(*DownloadSpanRequest),
					)
			}, DRPCStatusServer.DownloadSpan, true
	case 36:
		return "/cockroach.server.serverpb.Status/HotRangesV2", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					HotRangesV2(
						ctx,
						in1.(*HotRangesRequest),
					)
			}, DRPCStatusServer.HotRangesV2, true
	case 37:
		return "/cockroach.server.serverpb.Status/KeyVisSamples", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					KeyVisSamples(
						ctx,
						in1.(*KeyVisSamplesRequest),
					)
			}, DRPCStatusServer.KeyVisSamples, true
	case 38:
		return "/cockroach.server.serverpb.Status/Range", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					Range(
						ctx,
						in1.(*RangeRequest),
					)
			}, DRPCStatusServer.Range, true
	case 39:
		return "/cockroach.server.serverpb.Status/Diagnostics", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					Diagnostics(
						ctx,
						in1.(*DiagnosticsRequest),
					)
			}, DRPCStatusServer.Diagnostics, true
	case 40:
		return "/cockroach.server.serverpb.Status/Stores", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					Stores(
						ctx,
						in1.(*StoresRequest),
					)
			}, DRPCStatusServer.Stores, true
	case 41:
		return "/cockroach.server.serverpb.Status/Statements", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					Statements(
						ctx,
						in1.(*StatementsRequest),
					)
			}, DRPCStatusServer.Statements, true
	case 42:
		return "/cockroach.server.serverpb.Status/CombinedStatementStats", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					CombinedStatementStats(
						ctx,
						in1.(*CombinedStatementsStatsRequest),
					)
			}, DRPCStatusServer.CombinedStatementStats, true
	case 43:
		return "/cockroach.server.serverpb.Status/StatementDetails", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					StatementDetails(
						ctx,
						in1.(*StatementDetailsRequest),
					)
			}, DRPCStatusServer.StatementDetails, true
	case 44:
		return "/cockroach.server.serverpb.Status/CreateStatementDiagnosticsReport", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					CreateStatementDiagnosticsReport(
						ctx,
						in1.(*CreateStatementDiagnosticsReportRequest),
					)
			}, DRPCStatusServer.CreateStatementDiagnosticsReport, true
	case 45:
		return "/cockroach.server.serverpb.Status/CancelStatementDiagnosticsReport", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					CancelStatementDiagnosticsReport(
						ctx,
						in1.(*CancelStatementDiagnosticsReportRequest),
					)
			}, DRPCStatusServer.CancelStatementDiagnosticsReport, true
	case 46:
		return "/cockroach.server.serverpb.Status/StatementDiagnosticsRequests", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					StatementDiagnosticsRequests(
						ctx,
						in1.(*StatementDiagnosticsReportsRequest),
					)
			}, DRPCStatusServer.StatementDiagnosticsRequests, true
	case 47:
		return "/cockroach.server.serverpb.Status/StatementDiagnostics", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					StatementDiagnostics(
						ctx,
						in1.(*StatementDiagnosticsRequest),
					)
			}, DRPCStatusServer.StatementDiagnostics, true
	case 48:
		return "/cockroach.server.serverpb.Status/JobRegistryStatus", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					JobRegistryStatus(
						ctx,
						in1.(*JobRegistryStatusRequest),
					)
			}, DRPCStatusServer.JobRegistryStatus, true
	case 49:
		return "/cockroach.server.serverpb.Status/JobStatus", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					JobStatus(
						ctx,
						in1.(*JobStatusRequest),
					)
			}, DRPCStatusServer.JobStatus, true
	case 50:
		return "/cockroach.server.serverpb.Status/ResetSQLStats", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					ResetSQLStats(
						ctx,
						in1.(*ResetSQLStatsRequest),
					)
			}, DRPCStatusServer.ResetSQLStats, true
	case 51:
		return "/cockroach.server.serverpb.Status/DrainSqlStats", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					DrainSqlStats(
						ctx,
						in1.(*DrainSqlStatsRequest),
					)
			}, DRPCStatusServer.DrainSqlStats, true
	case 52:
		return "/cockroach.server.serverpb.Status/IndexUsageStatistics", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					IndexUsageStatistics(
						ctx,
						in1.(*IndexUsageStatisticsRequest),
					)
			}, DRPCStatusServer.IndexUsageStatistics, true
	case 53:
		return "/cockroach.server.serverpb.Status/ResetIndexUsageStats", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					ResetIndexUsageStats(
						ctx,
						in1.(*ResetIndexUsageStatsRequest),
					)
			}, DRPCStatusServer.ResetIndexUsageStats, true
	case 54:
		return "/cockroach.server.serverpb.Status/TableIndexStats", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					TableIndexStats(
						ctx,
						in1.(*TableIndexStatsRequest),
					)
			}, DRPCStatusServer.TableIndexStats, true
	case 55:
		return "/cockroach.server.serverpb.Status/UserSQLRoles", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					UserSQLRoles(
						ctx,
						in1.(*UserSQLRolesRequest),
					)
			}, DRPCStatusServer.UserSQLRoles, true
	case 56:
		return "/cockroach.server.serverpb.Status/TxnIDResolution", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					TxnIDResolution(
						ctx,
						in1.(*TxnIDResolutionRequest),
					)
			}, DRPCStatusServer.TxnIDResolution, true
	case 57:
		return "/cockroach.server.serverpb.Status/TransactionContentionEvents", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					TransactionContentionEvents(
						ctx,
						in1.(*TransactionContentionEventsRequest),
					)
			}, DRPCStatusServer.TransactionContentionEvents, true
	case 58:
		return "/cockroach.server.serverpb.Status/ListExecutionInsights", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					ListExecutionInsights(
						ctx,
						in1.(*ListExecutionInsightsRequest),
					)
			}, DRPCStatusServer.ListExecutionInsights, true
	case 59:
		return "/cockroach.server.serverpb.Status/NetworkConnectivity", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					NetworkConnectivity(
						ctx,
						in1.(*NetworkConnectivityRequest),
					)
			}, DRPCStatusServer.NetworkConnectivity, true
	case 60:
		return "/cockroach.server.serverpb.Status/RequestJobProfilerExecutionDetails", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					RequestJobProfilerExecutionDetails(
						ctx,
						in1.(*RequestJobProfilerExecutionDetailsRequest),
					)
			}, DRPCStatusServer.RequestJobProfilerExecutionDetails, true
	case 61:
		return "/cockroach.server.serverpb.Status/GetJobProfilerExecutionDetails", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					GetJobProfilerExecutionDetails(
						ctx,
						in1.(*GetJobProfilerExecutionDetailRequest),
					)
			}, DRPCStatusServer.GetJobProfilerExecutionDetails, true
	case 62:
		return "/cockroach.server.serverpb.Status/ListJobProfilerExecutionDetails", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					ListJobProfilerExecutionDetails(
						ctx,
						in1.(*ListJobProfilerExecutionDetailsRequest),
					)
			}, DRPCStatusServer.ListJobProfilerExecutionDetails, true
	case 63:
		return "/cockroach.server.serverpb.Status/UpdateTableMetadataCache", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					UpdateTableMetadataCache(
						ctx,
						in1.(*UpdateTableMetadataCacheRequest),
					)
			}, DRPCStatusServer.UpdateTableMetadataCache, true
	case 64:
		return "/cockroach.server.serverpb.Status/GetThrottlingMetadata", drpcEncoding_File_server_serverpb_status_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStatusServer).
					GetThrottlingMetadata(
						ctx,
						in1.(*GetThrottlingMetadataRequest),
					)
			}, DRPCStatusServer.GetThrottlingMetadata, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterStatus(mux drpc.Mux, impl DRPCStatusServer) error {
	return mux.Register(impl, DRPCStatusDescription{})
}

type DRPCStatus_CertificatesStream interface {
	drpc.Stream
	SendAndClose(*CertificatesResponse) error
}

type RPCStatus_CertificatesStream interface {
	Context() context.Context
	SendAndClose(*CertificatesResponse) error
}

type drpcStatus_CertificatesStream struct {
	drpc.Stream
}

func (x *drpcStatus_CertificatesStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_CertificatesStream) SendAndClose(m *CertificatesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_DetailsStream interface {
	drpc.Stream
	SendAndClose(*DetailsResponse) error
}

type RPCStatus_DetailsStream interface {
	Context() context.Context
	SendAndClose(*DetailsResponse) error
}

type drpcStatus_DetailsStream struct {
	drpc.Stream
}

func (x *drpcStatus_DetailsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_DetailsStream) SendAndClose(m *DetailsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_RegionsStream interface {
	drpc.Stream
	SendAndClose(*RegionsResponse) error
}

type RPCStatus_RegionsStream interface {
	Context() context.Context
	SendAndClose(*RegionsResponse) error
}

type drpcStatus_RegionsStream struct {
	drpc.Stream
}

func (x *drpcStatus_RegionsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_RegionsStream) SendAndClose(m *RegionsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_NodesListStream interface {
	drpc.Stream
	SendAndClose(*NodesListResponse) error
}

type RPCStatus_NodesListStream interface {
	Context() context.Context
	SendAndClose(*NodesListResponse) error
}

type drpcStatus_NodesListStream struct {
	drpc.Stream
}

func (x *drpcStatus_NodesListStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_NodesListStream) SendAndClose(m *NodesListResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_NodesStream interface {
	drpc.Stream
	SendAndClose(*NodesResponse) error
}

type RPCStatus_NodesStream interface {
	Context() context.Context
	SendAndClose(*NodesResponse) error
}

type drpcStatus_NodesStream struct {
	drpc.Stream
}

func (x *drpcStatus_NodesStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_NodesStream) SendAndClose(m *NodesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_NodeStream interface {
	drpc.Stream
	SendAndClose(*statuspb.NodeStatus) error
}

type RPCStatus_NodeStream interface {
	Context() context.Context
	SendAndClose(*statuspb.NodeStatus) error
}

type drpcStatus_NodeStream struct {
	drpc.Stream
}

func (x *drpcStatus_NodeStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_NodeStream) SendAndClose(m *statuspb.NodeStatus) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_NodesUIStream interface {
	drpc.Stream
	SendAndClose(*NodesResponseExternal) error
}

type RPCStatus_NodesUIStream interface {
	Context() context.Context
	SendAndClose(*NodesResponseExternal) error
}

type drpcStatus_NodesUIStream struct {
	drpc.Stream
}

func (x *drpcStatus_NodesUIStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_NodesUIStream) SendAndClose(m *NodesResponseExternal) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_NodeUIStream interface {
	drpc.Stream
	SendAndClose(*NodeResponse) error
}

type RPCStatus_NodeUIStream interface {
	Context() context.Context
	SendAndClose(*NodeResponse) error
}

type drpcStatus_NodeUIStream struct {
	drpc.Stream
}

func (x *drpcStatus_NodeUIStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_NodeUIStream) SendAndClose(m *NodeResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_RaftDebugStream interface {
	drpc.Stream
	SendAndClose(*RaftDebugResponse) error
}

type RPCStatus_RaftDebugStream interface {
	Context() context.Context
	SendAndClose(*RaftDebugResponse) error
}

type drpcStatus_RaftDebugStream struct {
	drpc.Stream
}

func (x *drpcStatus_RaftDebugStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_RaftDebugStream) SendAndClose(m *RaftDebugResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_RangesStream interface {
	drpc.Stream
	SendAndClose(*RangesResponse) error
}

type RPCStatus_RangesStream interface {
	Context() context.Context
	SendAndClose(*RangesResponse) error
}

type drpcStatus_RangesStream struct {
	drpc.Stream
}

func (x *drpcStatus_RangesStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_RangesStream) SendAndClose(m *RangesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_TenantServiceStatusStream interface {
	drpc.Stream
	SendAndClose(*TenantServiceStatusResponse) error
}

type RPCStatus_TenantServiceStatusStream interface {
	Context() context.Context
	SendAndClose(*TenantServiceStatusResponse) error
}

type drpcStatus_TenantServiceStatusStream struct {
	drpc.Stream
}

func (x *drpcStatus_TenantServiceStatusStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_TenantServiceStatusStream) SendAndClose(m *TenantServiceStatusResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_TenantRangesStream interface {
	drpc.Stream
	SendAndClose(*TenantRangesResponse) error
}

type RPCStatus_TenantRangesStream interface {
	Context() context.Context
	SendAndClose(*TenantRangesResponse) error
}

type drpcStatus_TenantRangesStream struct {
	drpc.Stream
}

func (x *drpcStatus_TenantRangesStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_TenantRangesStream) SendAndClose(m *TenantRangesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_GossipStream interface {
	drpc.Stream
	SendAndClose(*gossip.InfoStatus) error
}

type RPCStatus_GossipStream interface {
	Context() context.Context
	SendAndClose(*gossip.InfoStatus) error
}

type drpcStatus_GossipStream struct {
	drpc.Stream
}

func (x *drpcStatus_GossipStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_GossipStream) SendAndClose(m *gossip.InfoStatus) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_EngineStatsStream interface {
	drpc.Stream
	SendAndClose(*EngineStatsResponse) error
}

type RPCStatus_EngineStatsStream interface {
	Context() context.Context
	SendAndClose(*EngineStatsResponse) error
}

type drpcStatus_EngineStatsStream struct {
	drpc.Stream
}

func (x *drpcStatus_EngineStatsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_EngineStatsStream) SendAndClose(m *EngineStatsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_AllocatorStream interface {
	drpc.Stream
	SendAndClose(*AllocatorResponse) error
}

type RPCStatus_AllocatorStream interface {
	Context() context.Context
	SendAndClose(*AllocatorResponse) error
}

type drpcStatus_AllocatorStream struct {
	drpc.Stream
}

func (x *drpcStatus_AllocatorStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_AllocatorStream) SendAndClose(m *AllocatorResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_AllocatorRangeStream interface {
	drpc.Stream
	SendAndClose(*AllocatorRangeResponse) error
}

type RPCStatus_AllocatorRangeStream interface {
	Context() context.Context
	SendAndClose(*AllocatorRangeResponse) error
}

type drpcStatus_AllocatorRangeStream struct {
	drpc.Stream
}

func (x *drpcStatus_AllocatorRangeStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_AllocatorRangeStream) SendAndClose(m *AllocatorRangeResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_ListSessionsStream interface {
	drpc.Stream
	SendAndClose(*ListSessionsResponse) error
}

type RPCStatus_ListSessionsStream interface {
	Context() context.Context
	SendAndClose(*ListSessionsResponse) error
}

type drpcStatus_ListSessionsStream struct {
	drpc.Stream
}

func (x *drpcStatus_ListSessionsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_ListSessionsStream) SendAndClose(m *ListSessionsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_ListLocalSessionsStream interface {
	drpc.Stream
	SendAndClose(*ListSessionsResponse) error
}

type RPCStatus_ListLocalSessionsStream interface {
	Context() context.Context
	SendAndClose(*ListSessionsResponse) error
}

type drpcStatus_ListLocalSessionsStream struct {
	drpc.Stream
}

func (x *drpcStatus_ListLocalSessionsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_ListLocalSessionsStream) SendAndClose(m *ListSessionsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_CancelQueryStream interface {
	drpc.Stream
	SendAndClose(*CancelQueryResponse) error
}

type RPCStatus_CancelQueryStream interface {
	Context() context.Context
	SendAndClose(*CancelQueryResponse) error
}

type drpcStatus_CancelQueryStream struct {
	drpc.Stream
}

func (x *drpcStatus_CancelQueryStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_CancelQueryStream) SendAndClose(m *CancelQueryResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_CancelQueryByKeyStream interface {
	drpc.Stream
	SendAndClose(*CancelQueryByKeyResponse) error
}

type RPCStatus_CancelQueryByKeyStream interface {
	Context() context.Context
	SendAndClose(*CancelQueryByKeyResponse) error
}

type drpcStatus_CancelQueryByKeyStream struct {
	drpc.Stream
}

func (x *drpcStatus_CancelQueryByKeyStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_CancelQueryByKeyStream) SendAndClose(m *CancelQueryByKeyResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_ListContentionEventsStream interface {
	drpc.Stream
	SendAndClose(*ListContentionEventsResponse) error
}

type RPCStatus_ListContentionEventsStream interface {
	Context() context.Context
	SendAndClose(*ListContentionEventsResponse) error
}

type drpcStatus_ListContentionEventsStream struct {
	drpc.Stream
}

func (x *drpcStatus_ListContentionEventsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_ListContentionEventsStream) SendAndClose(m *ListContentionEventsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_ListLocalContentionEventsStream interface {
	drpc.Stream
	SendAndClose(*ListContentionEventsResponse) error
}

type RPCStatus_ListLocalContentionEventsStream interface {
	Context() context.Context
	SendAndClose(*ListContentionEventsResponse) error
}

type drpcStatus_ListLocalContentionEventsStream struct {
	drpc.Stream
}

func (x *drpcStatus_ListLocalContentionEventsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_ListLocalContentionEventsStream) SendAndClose(m *ListContentionEventsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_ListDistSQLFlowsStream interface {
	drpc.Stream
	SendAndClose(*ListDistSQLFlowsResponse) error
}

type RPCStatus_ListDistSQLFlowsStream interface {
	Context() context.Context
	SendAndClose(*ListDistSQLFlowsResponse) error
}

type drpcStatus_ListDistSQLFlowsStream struct {
	drpc.Stream
}

func (x *drpcStatus_ListDistSQLFlowsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_ListDistSQLFlowsStream) SendAndClose(m *ListDistSQLFlowsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_ListLocalDistSQLFlowsStream interface {
	drpc.Stream
	SendAndClose(*ListDistSQLFlowsResponse) error
}

type RPCStatus_ListLocalDistSQLFlowsStream interface {
	Context() context.Context
	SendAndClose(*ListDistSQLFlowsResponse) error
}

type drpcStatus_ListLocalDistSQLFlowsStream struct {
	drpc.Stream
}

func (x *drpcStatus_ListLocalDistSQLFlowsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_ListLocalDistSQLFlowsStream) SendAndClose(m *ListDistSQLFlowsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_CancelSessionStream interface {
	drpc.Stream
	SendAndClose(*CancelSessionResponse) error
}

type RPCStatus_CancelSessionStream interface {
	Context() context.Context
	SendAndClose(*CancelSessionResponse) error
}

type drpcStatus_CancelSessionStream struct {
	drpc.Stream
}

func (x *drpcStatus_CancelSessionStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_CancelSessionStream) SendAndClose(m *CancelSessionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_SpanStatsStream interface {
	drpc.Stream
	SendAndClose(*roachpb.SpanStatsResponse) error
}

type RPCStatus_SpanStatsStream interface {
	Context() context.Context
	SendAndClose(*roachpb.SpanStatsResponse) error
}

type drpcStatus_SpanStatsStream struct {
	drpc.Stream
}

func (x *drpcStatus_SpanStatsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_SpanStatsStream) SendAndClose(m *roachpb.SpanStatsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_CriticalNodesStream interface {
	drpc.Stream
	SendAndClose(*CriticalNodesResponse) error
}

type RPCStatus_CriticalNodesStream interface {
	Context() context.Context
	SendAndClose(*CriticalNodesResponse) error
}

type drpcStatus_CriticalNodesStream struct {
	drpc.Stream
}

func (x *drpcStatus_CriticalNodesStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_CriticalNodesStream) SendAndClose(m *CriticalNodesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_StacksStream interface {
	drpc.Stream
	SendAndClose(*JSONResponse) error
}

type RPCStatus_StacksStream interface {
	Context() context.Context
	SendAndClose(*JSONResponse) error
}

type drpcStatus_StacksStream struct {
	drpc.Stream
}

func (x *drpcStatus_StacksStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_StacksStream) SendAndClose(m *JSONResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_ProfileStream interface {
	drpc.Stream
	SendAndClose(*JSONResponse) error
}

type RPCStatus_ProfileStream interface {
	Context() context.Context
	SendAndClose(*JSONResponse) error
}

type drpcStatus_ProfileStream struct {
	drpc.Stream
}

func (x *drpcStatus_ProfileStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_ProfileStream) SendAndClose(m *JSONResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_MetricsStream interface {
	drpc.Stream
	SendAndClose(*JSONResponse) error
}

type RPCStatus_MetricsStream interface {
	Context() context.Context
	SendAndClose(*JSONResponse) error
}

type drpcStatus_MetricsStream struct {
	drpc.Stream
}

func (x *drpcStatus_MetricsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_MetricsStream) SendAndClose(m *JSONResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_GetFilesStream interface {
	drpc.Stream
	SendAndClose(*GetFilesResponse) error
}

type RPCStatus_GetFilesStream interface {
	Context() context.Context
	SendAndClose(*GetFilesResponse) error
}

type drpcStatus_GetFilesStream struct {
	drpc.Stream
}

func (x *drpcStatus_GetFilesStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_GetFilesStream) SendAndClose(m *GetFilesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_LogFilesListStream interface {
	drpc.Stream
	SendAndClose(*LogFilesListResponse) error
}

type RPCStatus_LogFilesListStream interface {
	Context() context.Context
	SendAndClose(*LogFilesListResponse) error
}

type drpcStatus_LogFilesListStream struct {
	drpc.Stream
}

func (x *drpcStatus_LogFilesListStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_LogFilesListStream) SendAndClose(m *LogFilesListResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_LogFileStream interface {
	drpc.Stream
	SendAndClose(*LogEntriesResponse) error
}

type RPCStatus_LogFileStream interface {
	Context() context.Context
	SendAndClose(*LogEntriesResponse) error
}

type drpcStatus_LogFileStream struct {
	drpc.Stream
}

func (x *drpcStatus_LogFileStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_LogFileStream) SendAndClose(m *LogEntriesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_LogsStream interface {
	drpc.Stream
	SendAndClose(*LogEntriesResponse) error
}

type RPCStatus_LogsStream interface {
	Context() context.Context
	SendAndClose(*LogEntriesResponse) error
}

type drpcStatus_LogsStream struct {
	drpc.Stream
}

func (x *drpcStatus_LogsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_LogsStream) SendAndClose(m *LogEntriesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_ProblemRangesStream interface {
	drpc.Stream
	SendAndClose(*ProblemRangesResponse) error
}

type RPCStatus_ProblemRangesStream interface {
	Context() context.Context
	SendAndClose(*ProblemRangesResponse) error
}

type drpcStatus_ProblemRangesStream struct {
	drpc.Stream
}

func (x *drpcStatus_ProblemRangesStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_ProblemRangesStream) SendAndClose(m *ProblemRangesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_DownloadSpanStream interface {
	drpc.Stream
	SendAndClose(*DownloadSpanResponse) error
}

type RPCStatus_DownloadSpanStream interface {
	Context() context.Context
	SendAndClose(*DownloadSpanResponse) error
}

type drpcStatus_DownloadSpanStream struct {
	drpc.Stream
}

func (x *drpcStatus_DownloadSpanStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_DownloadSpanStream) SendAndClose(m *DownloadSpanResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_HotRangesV2Stream interface {
	drpc.Stream
	SendAndClose(*HotRangesResponseV2) error
}

type RPCStatus_HotRangesV2Stream interface {
	Context() context.Context
	SendAndClose(*HotRangesResponseV2) error
}

type drpcStatus_HotRangesV2Stream struct {
	drpc.Stream
}

func (x *drpcStatus_HotRangesV2Stream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_HotRangesV2Stream) SendAndClose(m *HotRangesResponseV2) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_KeyVisSamplesStream interface {
	drpc.Stream
	SendAndClose(*KeyVisSamplesResponse) error
}

type RPCStatus_KeyVisSamplesStream interface {
	Context() context.Context
	SendAndClose(*KeyVisSamplesResponse) error
}

type drpcStatus_KeyVisSamplesStream struct {
	drpc.Stream
}

func (x *drpcStatus_KeyVisSamplesStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_KeyVisSamplesStream) SendAndClose(m *KeyVisSamplesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_RangeStream interface {
	drpc.Stream
	SendAndClose(*RangeResponse) error
}

type RPCStatus_RangeStream interface {
	Context() context.Context
	SendAndClose(*RangeResponse) error
}

type drpcStatus_RangeStream struct {
	drpc.Stream
}

func (x *drpcStatus_RangeStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_RangeStream) SendAndClose(m *RangeResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_DiagnosticsStream interface {
	drpc.Stream
	SendAndClose(*diagnosticspb.DiagnosticReport) error
}

type RPCStatus_DiagnosticsStream interface {
	Context() context.Context
	SendAndClose(*diagnosticspb.DiagnosticReport) error
}

type drpcStatus_DiagnosticsStream struct {
	drpc.Stream
}

func (x *drpcStatus_DiagnosticsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_DiagnosticsStream) SendAndClose(m *diagnosticspb.DiagnosticReport) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_StoresStream interface {
	drpc.Stream
	SendAndClose(*StoresResponse) error
}

type RPCStatus_StoresStream interface {
	Context() context.Context
	SendAndClose(*StoresResponse) error
}

type drpcStatus_StoresStream struct {
	drpc.Stream
}

func (x *drpcStatus_StoresStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_StoresStream) SendAndClose(m *StoresResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_StatementsStream interface {
	drpc.Stream
	SendAndClose(*StatementsResponse) error
}

type RPCStatus_StatementsStream interface {
	Context() context.Context
	SendAndClose(*StatementsResponse) error
}

type drpcStatus_StatementsStream struct {
	drpc.Stream
}

func (x *drpcStatus_StatementsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_StatementsStream) SendAndClose(m *StatementsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_CombinedStatementStatsStream interface {
	drpc.Stream
	SendAndClose(*StatementsResponse) error
}

type RPCStatus_CombinedStatementStatsStream interface {
	Context() context.Context
	SendAndClose(*StatementsResponse) error
}

type drpcStatus_CombinedStatementStatsStream struct {
	drpc.Stream
}

func (x *drpcStatus_CombinedStatementStatsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_CombinedStatementStatsStream) SendAndClose(m *StatementsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_StatementDetailsStream interface {
	drpc.Stream
	SendAndClose(*StatementDetailsResponse) error
}

type RPCStatus_StatementDetailsStream interface {
	Context() context.Context
	SendAndClose(*StatementDetailsResponse) error
}

type drpcStatus_StatementDetailsStream struct {
	drpc.Stream
}

func (x *drpcStatus_StatementDetailsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_StatementDetailsStream) SendAndClose(m *StatementDetailsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_CreateStatementDiagnosticsReportStream interface {
	drpc.Stream
	SendAndClose(*CreateStatementDiagnosticsReportResponse) error
}

type RPCStatus_CreateStatementDiagnosticsReportStream interface {
	Context() context.Context
	SendAndClose(*CreateStatementDiagnosticsReportResponse) error
}

type drpcStatus_CreateStatementDiagnosticsReportStream struct {
	drpc.Stream
}

func (x *drpcStatus_CreateStatementDiagnosticsReportStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_CreateStatementDiagnosticsReportStream) SendAndClose(m *CreateStatementDiagnosticsReportResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_CancelStatementDiagnosticsReportStream interface {
	drpc.Stream
	SendAndClose(*CancelStatementDiagnosticsReportResponse) error
}

type RPCStatus_CancelStatementDiagnosticsReportStream interface {
	Context() context.Context
	SendAndClose(*CancelStatementDiagnosticsReportResponse) error
}

type drpcStatus_CancelStatementDiagnosticsReportStream struct {
	drpc.Stream
}

func (x *drpcStatus_CancelStatementDiagnosticsReportStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_CancelStatementDiagnosticsReportStream) SendAndClose(m *CancelStatementDiagnosticsReportResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_StatementDiagnosticsRequestsStream interface {
	drpc.Stream
	SendAndClose(*StatementDiagnosticsReportsResponse) error
}

type RPCStatus_StatementDiagnosticsRequestsStream interface {
	Context() context.Context
	SendAndClose(*StatementDiagnosticsReportsResponse) error
}

type drpcStatus_StatementDiagnosticsRequestsStream struct {
	drpc.Stream
}

func (x *drpcStatus_StatementDiagnosticsRequestsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_StatementDiagnosticsRequestsStream) SendAndClose(m *StatementDiagnosticsReportsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_StatementDiagnosticsStream interface {
	drpc.Stream
	SendAndClose(*StatementDiagnosticsResponse) error
}

type RPCStatus_StatementDiagnosticsStream interface {
	Context() context.Context
	SendAndClose(*StatementDiagnosticsResponse) error
}

type drpcStatus_StatementDiagnosticsStream struct {
	drpc.Stream
}

func (x *drpcStatus_StatementDiagnosticsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_StatementDiagnosticsStream) SendAndClose(m *StatementDiagnosticsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_JobRegistryStatusStream interface {
	drpc.Stream
	SendAndClose(*JobRegistryStatusResponse) error
}

type RPCStatus_JobRegistryStatusStream interface {
	Context() context.Context
	SendAndClose(*JobRegistryStatusResponse) error
}

type drpcStatus_JobRegistryStatusStream struct {
	drpc.Stream
}

func (x *drpcStatus_JobRegistryStatusStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_JobRegistryStatusStream) SendAndClose(m *JobRegistryStatusResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_JobStatusStream interface {
	drpc.Stream
	SendAndClose(*JobStatusResponse) error
}

type RPCStatus_JobStatusStream interface {
	Context() context.Context
	SendAndClose(*JobStatusResponse) error
}

type drpcStatus_JobStatusStream struct {
	drpc.Stream
}

func (x *drpcStatus_JobStatusStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_JobStatusStream) SendAndClose(m *JobStatusResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_ResetSQLStatsStream interface {
	drpc.Stream
	SendAndClose(*ResetSQLStatsResponse) error
}

type RPCStatus_ResetSQLStatsStream interface {
	Context() context.Context
	SendAndClose(*ResetSQLStatsResponse) error
}

type drpcStatus_ResetSQLStatsStream struct {
	drpc.Stream
}

func (x *drpcStatus_ResetSQLStatsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_ResetSQLStatsStream) SendAndClose(m *ResetSQLStatsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_DrainSqlStatsStream interface {
	drpc.Stream
	SendAndClose(*DrainStatsResponse) error
}

type RPCStatus_DrainSqlStatsStream interface {
	Context() context.Context
	SendAndClose(*DrainStatsResponse) error
}

type drpcStatus_DrainSqlStatsStream struct {
	drpc.Stream
}

func (x *drpcStatus_DrainSqlStatsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_DrainSqlStatsStream) SendAndClose(m *DrainStatsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_IndexUsageStatisticsStream interface {
	drpc.Stream
	SendAndClose(*IndexUsageStatisticsResponse) error
}

type RPCStatus_IndexUsageStatisticsStream interface {
	Context() context.Context
	SendAndClose(*IndexUsageStatisticsResponse) error
}

type drpcStatus_IndexUsageStatisticsStream struct {
	drpc.Stream
}

func (x *drpcStatus_IndexUsageStatisticsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_IndexUsageStatisticsStream) SendAndClose(m *IndexUsageStatisticsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_ResetIndexUsageStatsStream interface {
	drpc.Stream
	SendAndClose(*ResetIndexUsageStatsResponse) error
}

type RPCStatus_ResetIndexUsageStatsStream interface {
	Context() context.Context
	SendAndClose(*ResetIndexUsageStatsResponse) error
}

type drpcStatus_ResetIndexUsageStatsStream struct {
	drpc.Stream
}

func (x *drpcStatus_ResetIndexUsageStatsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_ResetIndexUsageStatsStream) SendAndClose(m *ResetIndexUsageStatsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_TableIndexStatsStream interface {
	drpc.Stream
	SendAndClose(*TableIndexStatsResponse) error
}

type RPCStatus_TableIndexStatsStream interface {
	Context() context.Context
	SendAndClose(*TableIndexStatsResponse) error
}

type drpcStatus_TableIndexStatsStream struct {
	drpc.Stream
}

func (x *drpcStatus_TableIndexStatsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_TableIndexStatsStream) SendAndClose(m *TableIndexStatsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_UserSQLRolesStream interface {
	drpc.Stream
	SendAndClose(*UserSQLRolesResponse) error
}

type RPCStatus_UserSQLRolesStream interface {
	Context() context.Context
	SendAndClose(*UserSQLRolesResponse) error
}

type drpcStatus_UserSQLRolesStream struct {
	drpc.Stream
}

func (x *drpcStatus_UserSQLRolesStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_UserSQLRolesStream) SendAndClose(m *UserSQLRolesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_TxnIDResolutionStream interface {
	drpc.Stream
	SendAndClose(*TxnIDResolutionResponse) error
}

type RPCStatus_TxnIDResolutionStream interface {
	Context() context.Context
	SendAndClose(*TxnIDResolutionResponse) error
}

type drpcStatus_TxnIDResolutionStream struct {
	drpc.Stream
}

func (x *drpcStatus_TxnIDResolutionStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_TxnIDResolutionStream) SendAndClose(m *TxnIDResolutionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_TransactionContentionEventsStream interface {
	drpc.Stream
	SendAndClose(*TransactionContentionEventsResponse) error
}

type RPCStatus_TransactionContentionEventsStream interface {
	Context() context.Context
	SendAndClose(*TransactionContentionEventsResponse) error
}

type drpcStatus_TransactionContentionEventsStream struct {
	drpc.Stream
}

func (x *drpcStatus_TransactionContentionEventsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_TransactionContentionEventsStream) SendAndClose(m *TransactionContentionEventsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_ListExecutionInsightsStream interface {
	drpc.Stream
	SendAndClose(*ListExecutionInsightsResponse) error
}

type RPCStatus_ListExecutionInsightsStream interface {
	Context() context.Context
	SendAndClose(*ListExecutionInsightsResponse) error
}

type drpcStatus_ListExecutionInsightsStream struct {
	drpc.Stream
}

func (x *drpcStatus_ListExecutionInsightsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_ListExecutionInsightsStream) SendAndClose(m *ListExecutionInsightsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_NetworkConnectivityStream interface {
	drpc.Stream
	SendAndClose(*NetworkConnectivityResponse) error
}

type RPCStatus_NetworkConnectivityStream interface {
	Context() context.Context
	SendAndClose(*NetworkConnectivityResponse) error
}

type drpcStatus_NetworkConnectivityStream struct {
	drpc.Stream
}

func (x *drpcStatus_NetworkConnectivityStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_NetworkConnectivityStream) SendAndClose(m *NetworkConnectivityResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_RequestJobProfilerExecutionDetailsStream interface {
	drpc.Stream
	SendAndClose(*RequestJobProfilerExecutionDetailsResponse) error
}

type RPCStatus_RequestJobProfilerExecutionDetailsStream interface {
	Context() context.Context
	SendAndClose(*RequestJobProfilerExecutionDetailsResponse) error
}

type drpcStatus_RequestJobProfilerExecutionDetailsStream struct {
	drpc.Stream
}

func (x *drpcStatus_RequestJobProfilerExecutionDetailsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_RequestJobProfilerExecutionDetailsStream) SendAndClose(m *RequestJobProfilerExecutionDetailsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_GetJobProfilerExecutionDetailsStream interface {
	drpc.Stream
	SendAndClose(*GetJobProfilerExecutionDetailResponse) error
}

type RPCStatus_GetJobProfilerExecutionDetailsStream interface {
	Context() context.Context
	SendAndClose(*GetJobProfilerExecutionDetailResponse) error
}

type drpcStatus_GetJobProfilerExecutionDetailsStream struct {
	drpc.Stream
}

func (x *drpcStatus_GetJobProfilerExecutionDetailsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_GetJobProfilerExecutionDetailsStream) SendAndClose(m *GetJobProfilerExecutionDetailResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_ListJobProfilerExecutionDetailsStream interface {
	drpc.Stream
	SendAndClose(*ListJobProfilerExecutionDetailsResponse) error
}

type RPCStatus_ListJobProfilerExecutionDetailsStream interface {
	Context() context.Context
	SendAndClose(*ListJobProfilerExecutionDetailsResponse) error
}

type drpcStatus_ListJobProfilerExecutionDetailsStream struct {
	drpc.Stream
}

func (x *drpcStatus_ListJobProfilerExecutionDetailsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_ListJobProfilerExecutionDetailsStream) SendAndClose(m *ListJobProfilerExecutionDetailsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_UpdateTableMetadataCacheStream interface {
	drpc.Stream
	SendAndClose(*UpdateTableMetadataCacheResponse) error
}

type RPCStatus_UpdateTableMetadataCacheStream interface {
	Context() context.Context
	SendAndClose(*UpdateTableMetadataCacheResponse) error
}

type drpcStatus_UpdateTableMetadataCacheStream struct {
	drpc.Stream
}

func (x *drpcStatus_UpdateTableMetadataCacheStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_UpdateTableMetadataCacheStream) SendAndClose(m *UpdateTableMetadataCacheResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStatus_GetThrottlingMetadataStream interface {
	drpc.Stream
	SendAndClose(*GetThrottlingMetadataResponse) error
}

type RPCStatus_GetThrottlingMetadataStream interface {
	Context() context.Context
	SendAndClose(*GetThrottlingMetadataResponse) error
}

type drpcStatus_GetThrottlingMetadataStream struct {
	drpc.Stream
}

func (x *drpcStatus_GetThrottlingMetadataStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStatus_GetThrottlingMetadataStream) SendAndClose(m *GetThrottlingMetadataResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_status_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type RPCStatusClient interface {
	Certificates(ctx context.Context, in *CertificatesRequest) (*CertificatesResponse, error)
	Details(ctx context.Context, in *DetailsRequest) (*DetailsResponse, error)
	Regions(ctx context.Context, in *RegionsRequest) (*RegionsResponse, error)
	NodesList(ctx context.Context, in *NodesListRequest) (*NodesListResponse, error)
	Nodes(ctx context.Context, in *NodesRequest) (*NodesResponse, error)
	Node(ctx context.Context, in *NodeRequest) (*statuspb.NodeStatus, error)
	NodesUI(ctx context.Context, in *NodesRequest) (*NodesResponseExternal, error)
	NodeUI(ctx context.Context, in *NodeRequest) (*NodeResponse, error)
	RaftDebug(ctx context.Context, in *RaftDebugRequest) (*RaftDebugResponse, error)
	Ranges(ctx context.Context, in *RangesRequest) (*RangesResponse, error)
	TenantServiceStatus(ctx context.Context, in *TenantServiceStatusRequest) (*TenantServiceStatusResponse, error)
	TenantRanges(ctx context.Context, in *TenantRangesRequest) (*TenantRangesResponse, error)
	Gossip(ctx context.Context, in *GossipRequest) (*gossip.InfoStatus, error)
	EngineStats(ctx context.Context, in *EngineStatsRequest) (*EngineStatsResponse, error)
	Allocator(ctx context.Context, in *AllocatorRequest) (*AllocatorResponse, error)
	AllocatorRange(ctx context.Context, in *AllocatorRangeRequest) (*AllocatorRangeResponse, error)
	ListSessions(ctx context.Context, in *ListSessionsRequest) (*ListSessionsResponse, error)
	ListLocalSessions(ctx context.Context, in *ListSessionsRequest) (*ListSessionsResponse, error)
	CancelQuery(ctx context.Context, in *CancelQueryRequest) (*CancelQueryResponse, error)
	CancelQueryByKey(ctx context.Context, in *CancelQueryByKeyRequest) (*CancelQueryByKeyResponse, error)
	ListContentionEvents(ctx context.Context, in *ListContentionEventsRequest) (*ListContentionEventsResponse, error)
	ListLocalContentionEvents(ctx context.Context, in *ListContentionEventsRequest) (*ListContentionEventsResponse, error)
	ListDistSQLFlows(ctx context.Context, in *ListDistSQLFlowsRequest) (*ListDistSQLFlowsResponse, error)
	ListLocalDistSQLFlows(ctx context.Context, in *ListDistSQLFlowsRequest) (*ListDistSQLFlowsResponse, error)
	CancelSession(ctx context.Context, in *CancelSessionRequest) (*CancelSessionResponse, error)
	SpanStats(ctx context.Context, in *roachpb.SpanStatsRequest) (*roachpb.SpanStatsResponse, error)
	CriticalNodes(ctx context.Context, in *CriticalNodesRequest) (*CriticalNodesResponse, error)
	Stacks(ctx context.Context, in *StacksRequest) (*JSONResponse, error)
	Profile(ctx context.Context, in *ProfileRequest) (*JSONResponse, error)
	Metrics(ctx context.Context, in *MetricsRequest) (*JSONResponse, error)
	GetFiles(ctx context.Context, in *GetFilesRequest) (*GetFilesResponse, error)
	LogFilesList(ctx context.Context, in *LogFilesListRequest) (*LogFilesListResponse, error)
	LogFile(ctx context.Context, in *LogFileRequest) (*LogEntriesResponse, error)
	Logs(ctx context.Context, in *LogsRequest) (*LogEntriesResponse, error)
	ProblemRanges(ctx context.Context, in *ProblemRangesRequest) (*ProblemRangesResponse, error)
	DownloadSpan(ctx context.Context, in *DownloadSpanRequest) (*DownloadSpanResponse, error)
	HotRangesV2(ctx context.Context, in *HotRangesRequest) (*HotRangesResponseV2, error)
	KeyVisSamples(ctx context.Context, in *KeyVisSamplesRequest) (*KeyVisSamplesResponse, error)
	Range(ctx context.Context, in *RangeRequest) (*RangeResponse, error)
	Diagnostics(ctx context.Context, in *DiagnosticsRequest) (*diagnosticspb.DiagnosticReport, error)
	Stores(ctx context.Context, in *StoresRequest) (*StoresResponse, error)
	Statements(ctx context.Context, in *StatementsRequest) (*StatementsResponse, error)
	CombinedStatementStats(ctx context.Context, in *CombinedStatementsStatsRequest) (*StatementsResponse, error)
	StatementDetails(ctx context.Context, in *StatementDetailsRequest) (*StatementDetailsResponse, error)
	CreateStatementDiagnosticsReport(ctx context.Context, in *CreateStatementDiagnosticsReportRequest) (*CreateStatementDiagnosticsReportResponse, error)
	CancelStatementDiagnosticsReport(ctx context.Context, in *CancelStatementDiagnosticsReportRequest) (*CancelStatementDiagnosticsReportResponse, error)
	StatementDiagnosticsRequests(ctx context.Context, in *StatementDiagnosticsReportsRequest) (*StatementDiagnosticsReportsResponse, error)
	StatementDiagnostics(ctx context.Context, in *StatementDiagnosticsRequest) (*StatementDiagnosticsResponse, error)
	JobRegistryStatus(ctx context.Context, in *JobRegistryStatusRequest) (*JobRegistryStatusResponse, error)
	JobStatus(ctx context.Context, in *JobStatusRequest) (*JobStatusResponse, error)
	ResetSQLStats(ctx context.Context, in *ResetSQLStatsRequest) (*ResetSQLStatsResponse, error)
	DrainSqlStats(ctx context.Context, in *DrainSqlStatsRequest) (*DrainStatsResponse, error)
	IndexUsageStatistics(ctx context.Context, in *IndexUsageStatisticsRequest) (*IndexUsageStatisticsResponse, error)
	ResetIndexUsageStats(ctx context.Context, in *ResetIndexUsageStatsRequest) (*ResetIndexUsageStatsResponse, error)
	TableIndexStats(ctx context.Context, in *TableIndexStatsRequest) (*TableIndexStatsResponse, error)
	UserSQLRoles(ctx context.Context, in *UserSQLRolesRequest) (*UserSQLRolesResponse, error)
	TxnIDResolution(ctx context.Context, in *TxnIDResolutionRequest) (*TxnIDResolutionResponse, error)
	TransactionContentionEvents(ctx context.Context, in *TransactionContentionEventsRequest) (*TransactionContentionEventsResponse, error)
	ListExecutionInsights(ctx context.Context, in *ListExecutionInsightsRequest) (*ListExecutionInsightsResponse, error)
	NetworkConnectivity(ctx context.Context, in *NetworkConnectivityRequest) (*NetworkConnectivityResponse, error)
	RequestJobProfilerExecutionDetails(ctx context.Context, in *RequestJobProfilerExecutionDetailsRequest) (*RequestJobProfilerExecutionDetailsResponse, error)
	GetJobProfilerExecutionDetails(ctx context.Context, in *GetJobProfilerExecutionDetailRequest) (*GetJobProfilerExecutionDetailResponse, error)
	ListJobProfilerExecutionDetails(ctx context.Context, in *ListJobProfilerExecutionDetailsRequest) (*ListJobProfilerExecutionDetailsResponse, error)
	UpdateTableMetadataCache(ctx context.Context, in *UpdateTableMetadataCacheRequest) (*UpdateTableMetadataCacheResponse, error)
	GetThrottlingMetadata(ctx context.Context, in *GetThrottlingMetadataRequest) (*GetThrottlingMetadataResponse, error)
}

// Status gRPC -> RPC adapter
type grpcStatusClientAdapter statusClient

func NewGRPCStatusClientAdapter(conn *grpc.ClientConn) RPCStatusClient {
	return (*grpcStatusClientAdapter)(&statusClient{conn})
}

func (a *grpcStatusClientAdapter) Certificates(ctx context.Context, in *CertificatesRequest) (*CertificatesResponse, error) {
	return (*statusClient)(a).Certificates(ctx, in)
}

func (a *grpcStatusClientAdapter) Details(ctx context.Context, in *DetailsRequest) (*DetailsResponse, error) {
	return (*statusClient)(a).Details(ctx, in)
}

func (a *grpcStatusClientAdapter) Regions(ctx context.Context, in *RegionsRequest) (*RegionsResponse, error) {
	return (*statusClient)(a).Regions(ctx, in)
}

func (a *grpcStatusClientAdapter) NodesList(ctx context.Context, in *NodesListRequest) (*NodesListResponse, error) {
	return (*statusClient)(a).NodesList(ctx, in)
}

func (a *grpcStatusClientAdapter) Nodes(ctx context.Context, in *NodesRequest) (*NodesResponse, error) {
	return (*statusClient)(a).Nodes(ctx, in)
}

func (a *grpcStatusClientAdapter) Node(ctx context.Context, in *NodeRequest) (*statuspb.NodeStatus, error) {
	return (*statusClient)(a).Node(ctx, in)
}

func (a *grpcStatusClientAdapter) NodesUI(ctx context.Context, in *NodesRequest) (*NodesResponseExternal, error) {
	return (*statusClient)(a).NodesUI(ctx, in)
}

func (a *grpcStatusClientAdapter) NodeUI(ctx context.Context, in *NodeRequest) (*NodeResponse, error) {
	return (*statusClient)(a).NodeUI(ctx, in)
}

func (a *grpcStatusClientAdapter) RaftDebug(ctx context.Context, in *RaftDebugRequest) (*RaftDebugResponse, error) {
	return (*statusClient)(a).RaftDebug(ctx, in)
}

func (a *grpcStatusClientAdapter) Ranges(ctx context.Context, in *RangesRequest) (*RangesResponse, error) {
	return (*statusClient)(a).Ranges(ctx, in)
}

func (a *grpcStatusClientAdapter) TenantServiceStatus(ctx context.Context, in *TenantServiceStatusRequest) (*TenantServiceStatusResponse, error) {
	return (*statusClient)(a).TenantServiceStatus(ctx, in)
}

func (a *grpcStatusClientAdapter) TenantRanges(ctx context.Context, in *TenantRangesRequest) (*TenantRangesResponse, error) {
	return (*statusClient)(a).TenantRanges(ctx, in)
}

func (a *grpcStatusClientAdapter) Gossip(ctx context.Context, in *GossipRequest) (*gossip.InfoStatus, error) {
	return (*statusClient)(a).Gossip(ctx, in)
}

func (a *grpcStatusClientAdapter) EngineStats(ctx context.Context, in *EngineStatsRequest) (*EngineStatsResponse, error) {
	return (*statusClient)(a).EngineStats(ctx, in)
}

func (a *grpcStatusClientAdapter) Allocator(ctx context.Context, in *AllocatorRequest) (*AllocatorResponse, error) {
	return (*statusClient)(a).Allocator(ctx, in)
}

func (a *grpcStatusClientAdapter) AllocatorRange(ctx context.Context, in *AllocatorRangeRequest) (*AllocatorRangeResponse, error) {
	return (*statusClient)(a).AllocatorRange(ctx, in)
}

func (a *grpcStatusClientAdapter) ListSessions(ctx context.Context, in *ListSessionsRequest) (*ListSessionsResponse, error) {
	return (*statusClient)(a).ListSessions(ctx, in)
}

func (a *grpcStatusClientAdapter) ListLocalSessions(ctx context.Context, in *ListSessionsRequest) (*ListSessionsResponse, error) {
	return (*statusClient)(a).ListLocalSessions(ctx, in)
}

func (a *grpcStatusClientAdapter) CancelQuery(ctx context.Context, in *CancelQueryRequest) (*CancelQueryResponse, error) {
	return (*statusClient)(a).CancelQuery(ctx, in)
}

func (a *grpcStatusClientAdapter) CancelQueryByKey(ctx context.Context, in *CancelQueryByKeyRequest) (*CancelQueryByKeyResponse, error) {
	return (*statusClient)(a).CancelQueryByKey(ctx, in)
}

func (a *grpcStatusClientAdapter) ListContentionEvents(ctx context.Context, in *ListContentionEventsRequest) (*ListContentionEventsResponse, error) {
	return (*statusClient)(a).ListContentionEvents(ctx, in)
}

func (a *grpcStatusClientAdapter) ListLocalContentionEvents(ctx context.Context, in *ListContentionEventsRequest) (*ListContentionEventsResponse, error) {
	return (*statusClient)(a).ListLocalContentionEvents(ctx, in)
}

func (a *grpcStatusClientAdapter) ListDistSQLFlows(ctx context.Context, in *ListDistSQLFlowsRequest) (*ListDistSQLFlowsResponse, error) {
	return (*statusClient)(a).ListDistSQLFlows(ctx, in)
}

func (a *grpcStatusClientAdapter) ListLocalDistSQLFlows(ctx context.Context, in *ListDistSQLFlowsRequest) (*ListDistSQLFlowsResponse, error) {
	return (*statusClient)(a).ListLocalDistSQLFlows(ctx, in)
}

func (a *grpcStatusClientAdapter) CancelSession(ctx context.Context, in *CancelSessionRequest) (*CancelSessionResponse, error) {
	return (*statusClient)(a).CancelSession(ctx, in)
}

func (a *grpcStatusClientAdapter) SpanStats(ctx context.Context, in *roachpb.SpanStatsRequest) (*roachpb.SpanStatsResponse, error) {
	return (*statusClient)(a).SpanStats(ctx, in)
}

func (a *grpcStatusClientAdapter) CriticalNodes(ctx context.Context, in *CriticalNodesRequest) (*CriticalNodesResponse, error) {
	return (*statusClient)(a).CriticalNodes(ctx, in)
}

func (a *grpcStatusClientAdapter) Stacks(ctx context.Context, in *StacksRequest) (*JSONResponse, error) {
	return (*statusClient)(a).Stacks(ctx, in)
}

func (a *grpcStatusClientAdapter) Profile(ctx context.Context, in *ProfileRequest) (*JSONResponse, error) {
	return (*statusClient)(a).Profile(ctx, in)
}

func (a *grpcStatusClientAdapter) Metrics(ctx context.Context, in *MetricsRequest) (*JSONResponse, error) {
	return (*statusClient)(a).Metrics(ctx, in)
}

func (a *grpcStatusClientAdapter) GetFiles(ctx context.Context, in *GetFilesRequest) (*GetFilesResponse, error) {
	return (*statusClient)(a).GetFiles(ctx, in)
}

func (a *grpcStatusClientAdapter) LogFilesList(ctx context.Context, in *LogFilesListRequest) (*LogFilesListResponse, error) {
	return (*statusClient)(a).LogFilesList(ctx, in)
}

func (a *grpcStatusClientAdapter) LogFile(ctx context.Context, in *LogFileRequest) (*LogEntriesResponse, error) {
	return (*statusClient)(a).LogFile(ctx, in)
}

func (a *grpcStatusClientAdapter) Logs(ctx context.Context, in *LogsRequest) (*LogEntriesResponse, error) {
	return (*statusClient)(a).Logs(ctx, in)
}

func (a *grpcStatusClientAdapter) ProblemRanges(ctx context.Context, in *ProblemRangesRequest) (*ProblemRangesResponse, error) {
	return (*statusClient)(a).ProblemRanges(ctx, in)
}

func (a *grpcStatusClientAdapter) DownloadSpan(ctx context.Context, in *DownloadSpanRequest) (*DownloadSpanResponse, error) {
	return (*statusClient)(a).DownloadSpan(ctx, in)
}

func (a *grpcStatusClientAdapter) HotRangesV2(ctx context.Context, in *HotRangesRequest) (*HotRangesResponseV2, error) {
	return (*statusClient)(a).HotRangesV2(ctx, in)
}

func (a *grpcStatusClientAdapter) KeyVisSamples(ctx context.Context, in *KeyVisSamplesRequest) (*KeyVisSamplesResponse, error) {
	return (*statusClient)(a).KeyVisSamples(ctx, in)
}

func (a *grpcStatusClientAdapter) Range(ctx context.Context, in *RangeRequest) (*RangeResponse, error) {
	return (*statusClient)(a).Range(ctx, in)
}

func (a *grpcStatusClientAdapter) Diagnostics(ctx context.Context, in *DiagnosticsRequest) (*diagnosticspb.DiagnosticReport, error) {
	return (*statusClient)(a).Diagnostics(ctx, in)
}

func (a *grpcStatusClientAdapter) Stores(ctx context.Context, in *StoresRequest) (*StoresResponse, error) {
	return (*statusClient)(a).Stores(ctx, in)
}

func (a *grpcStatusClientAdapter) Statements(ctx context.Context, in *StatementsRequest) (*StatementsResponse, error) {
	return (*statusClient)(a).Statements(ctx, in)
}

func (a *grpcStatusClientAdapter) CombinedStatementStats(ctx context.Context, in *CombinedStatementsStatsRequest) (*StatementsResponse, error) {
	return (*statusClient)(a).CombinedStatementStats(ctx, in)
}

func (a *grpcStatusClientAdapter) StatementDetails(ctx context.Context, in *StatementDetailsRequest) (*StatementDetailsResponse, error) {
	return (*statusClient)(a).StatementDetails(ctx, in)
}

func (a *grpcStatusClientAdapter) CreateStatementDiagnosticsReport(ctx context.Context, in *CreateStatementDiagnosticsReportRequest) (*CreateStatementDiagnosticsReportResponse, error) {
	return (*statusClient)(a).CreateStatementDiagnosticsReport(ctx, in)
}

func (a *grpcStatusClientAdapter) CancelStatementDiagnosticsReport(ctx context.Context, in *CancelStatementDiagnosticsReportRequest) (*CancelStatementDiagnosticsReportResponse, error) {
	return (*statusClient)(a).CancelStatementDiagnosticsReport(ctx, in)
}

func (a *grpcStatusClientAdapter) StatementDiagnosticsRequests(ctx context.Context, in *StatementDiagnosticsReportsRequest) (*StatementDiagnosticsReportsResponse, error) {
	return (*statusClient)(a).StatementDiagnosticsRequests(ctx, in)
}

func (a *grpcStatusClientAdapter) StatementDiagnostics(ctx context.Context, in *StatementDiagnosticsRequest) (*StatementDiagnosticsResponse, error) {
	return (*statusClient)(a).StatementDiagnostics(ctx, in)
}

func (a *grpcStatusClientAdapter) JobRegistryStatus(ctx context.Context, in *JobRegistryStatusRequest) (*JobRegistryStatusResponse, error) {
	return (*statusClient)(a).JobRegistryStatus(ctx, in)
}

func (a *grpcStatusClientAdapter) JobStatus(ctx context.Context, in *JobStatusRequest) (*JobStatusResponse, error) {
	return (*statusClient)(a).JobStatus(ctx, in)
}

func (a *grpcStatusClientAdapter) ResetSQLStats(ctx context.Context, in *ResetSQLStatsRequest) (*ResetSQLStatsResponse, error) {
	return (*statusClient)(a).ResetSQLStats(ctx, in)
}

func (a *grpcStatusClientAdapter) DrainSqlStats(ctx context.Context, in *DrainSqlStatsRequest) (*DrainStatsResponse, error) {
	return (*statusClient)(a).DrainSqlStats(ctx, in)
}

func (a *grpcStatusClientAdapter) IndexUsageStatistics(ctx context.Context, in *IndexUsageStatisticsRequest) (*IndexUsageStatisticsResponse, error) {
	return (*statusClient)(a).IndexUsageStatistics(ctx, in)
}

func (a *grpcStatusClientAdapter) ResetIndexUsageStats(ctx context.Context, in *ResetIndexUsageStatsRequest) (*ResetIndexUsageStatsResponse, error) {
	return (*statusClient)(a).ResetIndexUsageStats(ctx, in)
}

func (a *grpcStatusClientAdapter) TableIndexStats(ctx context.Context, in *TableIndexStatsRequest) (*TableIndexStatsResponse, error) {
	return (*statusClient)(a).TableIndexStats(ctx, in)
}

func (a *grpcStatusClientAdapter) UserSQLRoles(ctx context.Context, in *UserSQLRolesRequest) (*UserSQLRolesResponse, error) {
	return (*statusClient)(a).UserSQLRoles(ctx, in)
}

func (a *grpcStatusClientAdapter) TxnIDResolution(ctx context.Context, in *TxnIDResolutionRequest) (*TxnIDResolutionResponse, error) {
	return (*statusClient)(a).TxnIDResolution(ctx, in)
}

func (a *grpcStatusClientAdapter) TransactionContentionEvents(ctx context.Context, in *TransactionContentionEventsRequest) (*TransactionContentionEventsResponse, error) {
	return (*statusClient)(a).TransactionContentionEvents(ctx, in)
}

func (a *grpcStatusClientAdapter) ListExecutionInsights(ctx context.Context, in *ListExecutionInsightsRequest) (*ListExecutionInsightsResponse, error) {
	return (*statusClient)(a).ListExecutionInsights(ctx, in)
}

func (a *grpcStatusClientAdapter) NetworkConnectivity(ctx context.Context, in *NetworkConnectivityRequest) (*NetworkConnectivityResponse, error) {
	return (*statusClient)(a).NetworkConnectivity(ctx, in)
}

func (a *grpcStatusClientAdapter) RequestJobProfilerExecutionDetails(ctx context.Context, in *RequestJobProfilerExecutionDetailsRequest) (*RequestJobProfilerExecutionDetailsResponse, error) {
	return (*statusClient)(a).RequestJobProfilerExecutionDetails(ctx, in)
}

func (a *grpcStatusClientAdapter) GetJobProfilerExecutionDetails(ctx context.Context, in *GetJobProfilerExecutionDetailRequest) (*GetJobProfilerExecutionDetailResponse, error) {
	return (*statusClient)(a).GetJobProfilerExecutionDetails(ctx, in)
}

func (a *grpcStatusClientAdapter) ListJobProfilerExecutionDetails(ctx context.Context, in *ListJobProfilerExecutionDetailsRequest) (*ListJobProfilerExecutionDetailsResponse, error) {
	return (*statusClient)(a).ListJobProfilerExecutionDetails(ctx, in)
}

func (a *grpcStatusClientAdapter) UpdateTableMetadataCache(ctx context.Context, in *UpdateTableMetadataCacheRequest) (*UpdateTableMetadataCacheResponse, error) {
	return (*statusClient)(a).UpdateTableMetadataCache(ctx, in)
}

func (a *grpcStatusClientAdapter) GetThrottlingMetadata(ctx context.Context, in *GetThrottlingMetadataRequest) (*GetThrottlingMetadataResponse, error) {
	return (*statusClient)(a).GetThrottlingMetadata(ctx, in)
}

// compile-time assertion
var _ RPCStatusClient = (*grpcStatusClientAdapter)(nil)

// Status DRPC -> RPC adapter
type drpcStatusClientAdapter drpcStatusClient

func NewDRPCStatusClientAdapter(conn drpc.Conn) RPCStatusClient {
	return (*drpcStatusClientAdapter)(&drpcStatusClient{conn})
}

func (a *drpcStatusClientAdapter) Certificates(ctx context.Context, in *CertificatesRequest) (*CertificatesResponse, error) {
	return (*drpcStatusClient)(a).Certificates(ctx, in)
}

func (a *drpcStatusClientAdapter) Details(ctx context.Context, in *DetailsRequest) (*DetailsResponse, error) {
	return (*drpcStatusClient)(a).Details(ctx, in)
}

func (a *drpcStatusClientAdapter) Regions(ctx context.Context, in *RegionsRequest) (*RegionsResponse, error) {
	return (*drpcStatusClient)(a).Regions(ctx, in)
}

func (a *drpcStatusClientAdapter) NodesList(ctx context.Context, in *NodesListRequest) (*NodesListResponse, error) {
	return (*drpcStatusClient)(a).NodesList(ctx, in)
}

func (a *drpcStatusClientAdapter) Nodes(ctx context.Context, in *NodesRequest) (*NodesResponse, error) {
	return (*drpcStatusClient)(a).Nodes(ctx, in)
}

func (a *drpcStatusClientAdapter) Node(ctx context.Context, in *NodeRequest) (*statuspb.NodeStatus, error) {
	return (*drpcStatusClient)(a).Node(ctx, in)
}

func (a *drpcStatusClientAdapter) NodesUI(ctx context.Context, in *NodesRequest) (*NodesResponseExternal, error) {
	return (*drpcStatusClient)(a).NodesUI(ctx, in)
}

func (a *drpcStatusClientAdapter) NodeUI(ctx context.Context, in *NodeRequest) (*NodeResponse, error) {
	return (*drpcStatusClient)(a).NodeUI(ctx, in)
}

func (a *drpcStatusClientAdapter) RaftDebug(ctx context.Context, in *RaftDebugRequest) (*RaftDebugResponse, error) {
	return (*drpcStatusClient)(a).RaftDebug(ctx, in)
}

func (a *drpcStatusClientAdapter) Ranges(ctx context.Context, in *RangesRequest) (*RangesResponse, error) {
	return (*drpcStatusClient)(a).Ranges(ctx, in)
}

func (a *drpcStatusClientAdapter) TenantServiceStatus(ctx context.Context, in *TenantServiceStatusRequest) (*TenantServiceStatusResponse, error) {
	return (*drpcStatusClient)(a).TenantServiceStatus(ctx, in)
}

func (a *drpcStatusClientAdapter) TenantRanges(ctx context.Context, in *TenantRangesRequest) (*TenantRangesResponse, error) {
	return (*drpcStatusClient)(a).TenantRanges(ctx, in)
}

func (a *drpcStatusClientAdapter) Gossip(ctx context.Context, in *GossipRequest) (*gossip.InfoStatus, error) {
	return (*drpcStatusClient)(a).Gossip(ctx, in)
}

func (a *drpcStatusClientAdapter) EngineStats(ctx context.Context, in *EngineStatsRequest) (*EngineStatsResponse, error) {
	return (*drpcStatusClient)(a).EngineStats(ctx, in)
}

func (a *drpcStatusClientAdapter) Allocator(ctx context.Context, in *AllocatorRequest) (*AllocatorResponse, error) {
	return (*drpcStatusClient)(a).Allocator(ctx, in)
}

func (a *drpcStatusClientAdapter) AllocatorRange(ctx context.Context, in *AllocatorRangeRequest) (*AllocatorRangeResponse, error) {
	return (*drpcStatusClient)(a).AllocatorRange(ctx, in)
}

func (a *drpcStatusClientAdapter) ListSessions(ctx context.Context, in *ListSessionsRequest) (*ListSessionsResponse, error) {
	return (*drpcStatusClient)(a).ListSessions(ctx, in)
}

func (a *drpcStatusClientAdapter) ListLocalSessions(ctx context.Context, in *ListSessionsRequest) (*ListSessionsResponse, error) {
	return (*drpcStatusClient)(a).ListLocalSessions(ctx, in)
}

func (a *drpcStatusClientAdapter) CancelQuery(ctx context.Context, in *CancelQueryRequest) (*CancelQueryResponse, error) {
	return (*drpcStatusClient)(a).CancelQuery(ctx, in)
}

func (a *drpcStatusClientAdapter) CancelQueryByKey(ctx context.Context, in *CancelQueryByKeyRequest) (*CancelQueryByKeyResponse, error) {
	return (*drpcStatusClient)(a).CancelQueryByKey(ctx, in)
}

func (a *drpcStatusClientAdapter) ListContentionEvents(ctx context.Context, in *ListContentionEventsRequest) (*ListContentionEventsResponse, error) {
	return (*drpcStatusClient)(a).ListContentionEvents(ctx, in)
}

func (a *drpcStatusClientAdapter) ListLocalContentionEvents(ctx context.Context, in *ListContentionEventsRequest) (*ListContentionEventsResponse, error) {
	return (*drpcStatusClient)(a).ListLocalContentionEvents(ctx, in)
}

func (a *drpcStatusClientAdapter) ListDistSQLFlows(ctx context.Context, in *ListDistSQLFlowsRequest) (*ListDistSQLFlowsResponse, error) {
	return (*drpcStatusClient)(a).ListDistSQLFlows(ctx, in)
}

func (a *drpcStatusClientAdapter) ListLocalDistSQLFlows(ctx context.Context, in *ListDistSQLFlowsRequest) (*ListDistSQLFlowsResponse, error) {
	return (*drpcStatusClient)(a).ListLocalDistSQLFlows(ctx, in)
}

func (a *drpcStatusClientAdapter) CancelSession(ctx context.Context, in *CancelSessionRequest) (*CancelSessionResponse, error) {
	return (*drpcStatusClient)(a).CancelSession(ctx, in)
}

func (a *drpcStatusClientAdapter) SpanStats(ctx context.Context, in *roachpb.SpanStatsRequest) (*roachpb.SpanStatsResponse, error) {
	return (*drpcStatusClient)(a).SpanStats(ctx, in)
}

func (a *drpcStatusClientAdapter) CriticalNodes(ctx context.Context, in *CriticalNodesRequest) (*CriticalNodesResponse, error) {
	return (*drpcStatusClient)(a).CriticalNodes(ctx, in)
}

func (a *drpcStatusClientAdapter) Stacks(ctx context.Context, in *StacksRequest) (*JSONResponse, error) {
	return (*drpcStatusClient)(a).Stacks(ctx, in)
}

func (a *drpcStatusClientAdapter) Profile(ctx context.Context, in *ProfileRequest) (*JSONResponse, error) {
	return (*drpcStatusClient)(a).Profile(ctx, in)
}

func (a *drpcStatusClientAdapter) Metrics(ctx context.Context, in *MetricsRequest) (*JSONResponse, error) {
	return (*drpcStatusClient)(a).Metrics(ctx, in)
}

func (a *drpcStatusClientAdapter) GetFiles(ctx context.Context, in *GetFilesRequest) (*GetFilesResponse, error) {
	return (*drpcStatusClient)(a).GetFiles(ctx, in)
}

func (a *drpcStatusClientAdapter) LogFilesList(ctx context.Context, in *LogFilesListRequest) (*LogFilesListResponse, error) {
	return (*drpcStatusClient)(a).LogFilesList(ctx, in)
}

func (a *drpcStatusClientAdapter) LogFile(ctx context.Context, in *LogFileRequest) (*LogEntriesResponse, error) {
	return (*drpcStatusClient)(a).LogFile(ctx, in)
}

func (a *drpcStatusClientAdapter) Logs(ctx context.Context, in *LogsRequest) (*LogEntriesResponse, error) {
	return (*drpcStatusClient)(a).Logs(ctx, in)
}

func (a *drpcStatusClientAdapter) ProblemRanges(ctx context.Context, in *ProblemRangesRequest) (*ProblemRangesResponse, error) {
	return (*drpcStatusClient)(a).ProblemRanges(ctx, in)
}

func (a *drpcStatusClientAdapter) DownloadSpan(ctx context.Context, in *DownloadSpanRequest) (*DownloadSpanResponse, error) {
	return (*drpcStatusClient)(a).DownloadSpan(ctx, in)
}

func (a *drpcStatusClientAdapter) HotRangesV2(ctx context.Context, in *HotRangesRequest) (*HotRangesResponseV2, error) {
	return (*drpcStatusClient)(a).HotRangesV2(ctx, in)
}

func (a *drpcStatusClientAdapter) KeyVisSamples(ctx context.Context, in *KeyVisSamplesRequest) (*KeyVisSamplesResponse, error) {
	return (*drpcStatusClient)(a).KeyVisSamples(ctx, in)
}

func (a *drpcStatusClientAdapter) Range(ctx context.Context, in *RangeRequest) (*RangeResponse, error) {
	return (*drpcStatusClient)(a).Range(ctx, in)
}

func (a *drpcStatusClientAdapter) Diagnostics(ctx context.Context, in *DiagnosticsRequest) (*diagnosticspb.DiagnosticReport, error) {
	return (*drpcStatusClient)(a).Diagnostics(ctx, in)
}

func (a *drpcStatusClientAdapter) Stores(ctx context.Context, in *StoresRequest) (*StoresResponse, error) {
	return (*drpcStatusClient)(a).Stores(ctx, in)
}

func (a *drpcStatusClientAdapter) Statements(ctx context.Context, in *StatementsRequest) (*StatementsResponse, error) {
	return (*drpcStatusClient)(a).Statements(ctx, in)
}

func (a *drpcStatusClientAdapter) CombinedStatementStats(ctx context.Context, in *CombinedStatementsStatsRequest) (*StatementsResponse, error) {
	return (*drpcStatusClient)(a).CombinedStatementStats(ctx, in)
}

func (a *drpcStatusClientAdapter) StatementDetails(ctx context.Context, in *StatementDetailsRequest) (*StatementDetailsResponse, error) {
	return (*drpcStatusClient)(a).StatementDetails(ctx, in)
}

func (a *drpcStatusClientAdapter) CreateStatementDiagnosticsReport(ctx context.Context, in *CreateStatementDiagnosticsReportRequest) (*CreateStatementDiagnosticsReportResponse, error) {
	return (*drpcStatusClient)(a).CreateStatementDiagnosticsReport(ctx, in)
}

func (a *drpcStatusClientAdapter) CancelStatementDiagnosticsReport(ctx context.Context, in *CancelStatementDiagnosticsReportRequest) (*CancelStatementDiagnosticsReportResponse, error) {
	return (*drpcStatusClient)(a).CancelStatementDiagnosticsReport(ctx, in)
}

func (a *drpcStatusClientAdapter) StatementDiagnosticsRequests(ctx context.Context, in *StatementDiagnosticsReportsRequest) (*StatementDiagnosticsReportsResponse, error) {
	return (*drpcStatusClient)(a).StatementDiagnosticsRequests(ctx, in)
}

func (a *drpcStatusClientAdapter) StatementDiagnostics(ctx context.Context, in *StatementDiagnosticsRequest) (*StatementDiagnosticsResponse, error) {
	return (*drpcStatusClient)(a).StatementDiagnostics(ctx, in)
}

func (a *drpcStatusClientAdapter) JobRegistryStatus(ctx context.Context, in *JobRegistryStatusRequest) (*JobRegistryStatusResponse, error) {
	return (*drpcStatusClient)(a).JobRegistryStatus(ctx, in)
}

func (a *drpcStatusClientAdapter) JobStatus(ctx context.Context, in *JobStatusRequest) (*JobStatusResponse, error) {
	return (*drpcStatusClient)(a).JobStatus(ctx, in)
}

func (a *drpcStatusClientAdapter) ResetSQLStats(ctx context.Context, in *ResetSQLStatsRequest) (*ResetSQLStatsResponse, error) {
	return (*drpcStatusClient)(a).ResetSQLStats(ctx, in)
}

func (a *drpcStatusClientAdapter) DrainSqlStats(ctx context.Context, in *DrainSqlStatsRequest) (*DrainStatsResponse, error) {
	return (*drpcStatusClient)(a).DrainSqlStats(ctx, in)
}

func (a *drpcStatusClientAdapter) IndexUsageStatistics(ctx context.Context, in *IndexUsageStatisticsRequest) (*IndexUsageStatisticsResponse, error) {
	return (*drpcStatusClient)(a).IndexUsageStatistics(ctx, in)
}

func (a *drpcStatusClientAdapter) ResetIndexUsageStats(ctx context.Context, in *ResetIndexUsageStatsRequest) (*ResetIndexUsageStatsResponse, error) {
	return (*drpcStatusClient)(a).ResetIndexUsageStats(ctx, in)
}

func (a *drpcStatusClientAdapter) TableIndexStats(ctx context.Context, in *TableIndexStatsRequest) (*TableIndexStatsResponse, error) {
	return (*drpcStatusClient)(a).TableIndexStats(ctx, in)
}

func (a *drpcStatusClientAdapter) UserSQLRoles(ctx context.Context, in *UserSQLRolesRequest) (*UserSQLRolesResponse, error) {
	return (*drpcStatusClient)(a).UserSQLRoles(ctx, in)
}

func (a *drpcStatusClientAdapter) TxnIDResolution(ctx context.Context, in *TxnIDResolutionRequest) (*TxnIDResolutionResponse, error) {
	return (*drpcStatusClient)(a).TxnIDResolution(ctx, in)
}

func (a *drpcStatusClientAdapter) TransactionContentionEvents(ctx context.Context, in *TransactionContentionEventsRequest) (*TransactionContentionEventsResponse, error) {
	return (*drpcStatusClient)(a).TransactionContentionEvents(ctx, in)
}

func (a *drpcStatusClientAdapter) ListExecutionInsights(ctx context.Context, in *ListExecutionInsightsRequest) (*ListExecutionInsightsResponse, error) {
	return (*drpcStatusClient)(a).ListExecutionInsights(ctx, in)
}

func (a *drpcStatusClientAdapter) NetworkConnectivity(ctx context.Context, in *NetworkConnectivityRequest) (*NetworkConnectivityResponse, error) {
	return (*drpcStatusClient)(a).NetworkConnectivity(ctx, in)
}

func (a *drpcStatusClientAdapter) RequestJobProfilerExecutionDetails(ctx context.Context, in *RequestJobProfilerExecutionDetailsRequest) (*RequestJobProfilerExecutionDetailsResponse, error) {
	return (*drpcStatusClient)(a).RequestJobProfilerExecutionDetails(ctx, in)
}

func (a *drpcStatusClientAdapter) GetJobProfilerExecutionDetails(ctx context.Context, in *GetJobProfilerExecutionDetailRequest) (*GetJobProfilerExecutionDetailResponse, error) {
	return (*drpcStatusClient)(a).GetJobProfilerExecutionDetails(ctx, in)
}

func (a *drpcStatusClientAdapter) ListJobProfilerExecutionDetails(ctx context.Context, in *ListJobProfilerExecutionDetailsRequest) (*ListJobProfilerExecutionDetailsResponse, error) {
	return (*drpcStatusClient)(a).ListJobProfilerExecutionDetails(ctx, in)
}

func (a *drpcStatusClientAdapter) UpdateTableMetadataCache(ctx context.Context, in *UpdateTableMetadataCacheRequest) (*UpdateTableMetadataCacheResponse, error) {
	return (*drpcStatusClient)(a).UpdateTableMetadataCache(ctx, in)
}

func (a *drpcStatusClientAdapter) GetThrottlingMetadata(ctx context.Context, in *GetThrottlingMetadataRequest) (*GetThrottlingMetadataResponse, error) {
	return (*drpcStatusClient)(a).GetThrottlingMetadata(ctx, in)
}

// compile-time assertion
var _ RPCStatusClient = (*drpcStatusClientAdapter)(nil)
