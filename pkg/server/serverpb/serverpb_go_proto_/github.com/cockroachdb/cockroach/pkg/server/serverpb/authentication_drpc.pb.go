// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// source: server/serverpb/authentication.proto

package serverpb

import (
	bytes "bytes"
	context "context"
	errors "github.com/cockroachdb/errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_server_serverpb_authentication_proto struct{}

func (drpcEncoding_File_server_serverpb_authentication_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_server_serverpb_authentication_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_server_serverpb_authentication_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_server_serverpb_authentication_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCLogInClient interface {
	DRPCConn() drpc.Conn

	UserLogin(ctx context.Context, in *UserLoginRequest) (*UserLoginResponse, error)
}

type drpcLogInClient struct {
	cc drpc.Conn
}

func NewDRPCLogInClient(cc drpc.Conn) DRPCLogInClient {
	return &drpcLogInClient{cc}
}

func (c *drpcLogInClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcLogInClient) UserLogin(ctx context.Context, in *UserLoginRequest) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.LogIn/UserLogin", drpcEncoding_File_server_serverpb_authentication_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCLogInServer interface {
	UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
}

type DRPCLogInUnimplementedServer struct{}

func (s *DRPCLogInUnimplementedServer) UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCLogInDescription struct{}

func (DRPCLogInDescription) NumMethods() int { return 1 }

func (DRPCLogInDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.server.serverpb.LogIn/UserLogin", drpcEncoding_File_server_serverpb_authentication_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCLogInServer).
					UserLogin(
						ctx,
						in1.(*UserLoginRequest),
					)
			}, DRPCLogInServer.UserLogin, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterLogIn(mux drpc.Mux, impl DRPCLogInServer) error {
	return mux.Register(impl, DRPCLogInDescription{})
}

type DRPCLogIn_UserLoginStream interface {
	drpc.Stream
	SendAndClose(*UserLoginResponse) error
}

type RPCLogIn_UserLoginStream interface {
	Context() context.Context
	SendAndClose(*UserLoginResponse) error
}

type drpcLogIn_UserLoginStream struct {
	drpc.Stream
}

func (x *drpcLogIn_UserLoginStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcLogIn_UserLoginStream) SendAndClose(m *UserLoginResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_authentication_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type RPCLogInClient interface {
	UserLogin(ctx context.Context, in *UserLoginRequest) (*UserLoginResponse, error)
}

// LogIn gRPC -> RPC adapter
type grpcLogInClientAdapter logInClient

func NewGRPCLogInClientAdapter(conn *grpc.ClientConn) RPCLogInClient {
	return (*grpcLogInClientAdapter)(&logInClient{conn})
}

func (a *grpcLogInClientAdapter) UserLogin(ctx context.Context, in *UserLoginRequest) (*UserLoginResponse, error) {
	return (*logInClient)(a).UserLogin(ctx, in)
}

// compile-time assertion
var _ RPCLogInClient = (*grpcLogInClientAdapter)(nil)

// LogIn DRPC -> RPC adapter
type drpcLogInClientAdapter drpcLogInClient

func NewDRPCLogInClientAdapter(conn drpc.Conn) RPCLogInClient {
	return (*drpcLogInClientAdapter)(&drpcLogInClient{conn})
}

func (a *drpcLogInClientAdapter) UserLogin(ctx context.Context, in *UserLoginRequest) (*UserLoginResponse, error) {
	return (*drpcLogInClient)(a).UserLogin(ctx, in)
}

// compile-time assertion
var _ RPCLogInClient = (*drpcLogInClientAdapter)(nil)

type DRPCLogOutClient interface {
	DRPCConn() drpc.Conn

	UserLogout(ctx context.Context, in *UserLogoutRequest) (*UserLogoutResponse, error)
}

type drpcLogOutClient struct {
	cc drpc.Conn
}

func NewDRPCLogOutClient(cc drpc.Conn) DRPCLogOutClient {
	return &drpcLogOutClient{cc}
}

func (c *drpcLogOutClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcLogOutClient) UserLogout(ctx context.Context, in *UserLogoutRequest) (*UserLogoutResponse, error) {
	out := new(UserLogoutResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.LogOut/UserLogout", drpcEncoding_File_server_serverpb_authentication_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCLogOutServer interface {
	UserLogout(context.Context, *UserLogoutRequest) (*UserLogoutResponse, error)
}

type DRPCLogOutUnimplementedServer struct{}

func (s *DRPCLogOutUnimplementedServer) UserLogout(context.Context, *UserLogoutRequest) (*UserLogoutResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCLogOutDescription struct{}

func (DRPCLogOutDescription) NumMethods() int { return 1 }

func (DRPCLogOutDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.server.serverpb.LogOut/UserLogout", drpcEncoding_File_server_serverpb_authentication_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCLogOutServer).
					UserLogout(
						ctx,
						in1.(*UserLogoutRequest),
					)
			}, DRPCLogOutServer.UserLogout, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterLogOut(mux drpc.Mux, impl DRPCLogOutServer) error {
	return mux.Register(impl, DRPCLogOutDescription{})
}

type DRPCLogOut_UserLogoutStream interface {
	drpc.Stream
	SendAndClose(*UserLogoutResponse) error
}

type RPCLogOut_UserLogoutStream interface {
	Context() context.Context
	SendAndClose(*UserLogoutResponse) error
}

type drpcLogOut_UserLogoutStream struct {
	drpc.Stream
}

func (x *drpcLogOut_UserLogoutStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcLogOut_UserLogoutStream) SendAndClose(m *UserLogoutResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_server_serverpb_authentication_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type RPCLogOutClient interface {
	UserLogout(ctx context.Context, in *UserLogoutRequest) (*UserLogoutResponse, error)
}

// LogOut gRPC -> RPC adapter
type grpcLogOutClientAdapter logOutClient

func NewGRPCLogOutClientAdapter(conn *grpc.ClientConn) RPCLogOutClient {
	return (*grpcLogOutClientAdapter)(&logOutClient{conn})
}

func (a *grpcLogOutClientAdapter) UserLogout(ctx context.Context, in *UserLogoutRequest) (*UserLogoutResponse, error) {
	return (*logOutClient)(a).UserLogout(ctx, in)
}

// compile-time assertion
var _ RPCLogOutClient = (*grpcLogOutClientAdapter)(nil)

// LogOut DRPC -> RPC adapter
type drpcLogOutClientAdapter drpcLogOutClient

func NewDRPCLogOutClientAdapter(conn drpc.Conn) RPCLogOutClient {
	return (*drpcLogOutClientAdapter)(&drpcLogOutClient{conn})
}

func (a *drpcLogOutClientAdapter) UserLogout(ctx context.Context, in *UserLogoutRequest) (*UserLogoutResponse, error) {
	return (*drpcLogOutClient)(a).UserLogout(ctx, in)
}

// compile-time assertion
var _ RPCLogOutClient = (*drpcLogOutClientAdapter)(nil)
