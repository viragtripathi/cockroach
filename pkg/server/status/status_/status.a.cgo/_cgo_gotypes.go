//go:cgo_ldflag "external/archived_cdep_libjemalloc_macosarm/lib/libjemalloc.a"
//go:cgo_ldflag "-mmacosx-version-min=26.0"
//go:cgo_ldflag "-no-canonical-prefixes"
//go:cgo_ldflag "-fobjc-link-runtime"
//go:cgo_ldflag "-headerpad_max_install_names"
//go:cgo_ldflag "-lc++"
//go:cgo_ldflag "-lm"
//go:cgo_ldflag "-Xlinker"
//go:cgo_ldflag "-no_warn_duplicate_libraries"
// Code generated by cmd/cgo; DO NOT EDIT.

package status

import "unsafe"

import "syscall"

import _cgopackage "runtime/cgo"

type _ _cgopackage.Incomplete
var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
//go:linkname _Cgo_no_callback runtime.cgoNoCallback
func _Cgo_no_callback(bool)
type _Ctype_JemallocStats = _Ctype_struct___0

type _Ctype_char int8

type _Ctype_int int32

type _Ctype_size_t = _Ctype_ulong

type _Ctype_struct___0 struct {
	Allocated	_Ctype_size_t
	Active		_Ctype_size_t
	Metadata	_Ctype_size_t
	Resident	_Ctype_size_t
	Mapped		_Ctype_size_t
	Retained	_Ctype_size_t
}

type _Ctype_ulong uint64

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
//go:noescape
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
//go:noescape
func _cgoCheckResult(interface{})

//go:cgo_import_static _cgo_7102770acd9a_C2func_jemalloc_get_stats
//go:linkname __cgofn__cgo_7102770acd9a_C2func_jemalloc_get_stats _cgo_7102770acd9a_C2func_jemalloc_get_stats
var __cgofn__cgo_7102770acd9a_C2func_jemalloc_get_stats byte
var _cgo_7102770acd9a_C2func_jemalloc_get_stats = unsafe.Pointer(&__cgofn__cgo_7102770acd9a_C2func_jemalloc_get_stats)

//go:cgo_unsafe_args
func _C2func_jemalloc_get_stats(p0 *_Ctype_struct___0) (r1 _Ctype_int, r2 error) {
	errno := _cgo_runtime_cgocall(_cgo_7102770acd9a_C2func_jemalloc_get_stats, uintptr(unsafe.Pointer(&p0)))
	if errno != 0 { r2 = syscall.Errno(errno) }
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_7102770acd9a_C2func_jemalloc_purge
//go:linkname __cgofn__cgo_7102770acd9a_C2func_jemalloc_purge _cgo_7102770acd9a_C2func_jemalloc_purge
var __cgofn__cgo_7102770acd9a_C2func_jemalloc_purge byte
var _cgo_7102770acd9a_C2func_jemalloc_purge = unsafe.Pointer(&__cgofn__cgo_7102770acd9a_C2func_jemalloc_purge)

//go:cgo_unsafe_args
func _C2func_jemalloc_purge() (r1 _Ctype_int, r2 error) {
	errno := _cgo_runtime_cgocall(_cgo_7102770acd9a_C2func_jemalloc_purge, uintptr(unsafe.Pointer(&r1)))
	if errno != 0 { r2 = syscall.Errno(errno) }
	if _Cgo_always_false {
	}
	return
}

func _Cfunc__CMalloc(n _Ctype_size_t) unsafe.Pointer {
	return _cgo_cmalloc(uint64(n))
}
//go:cgo_import_static _cgo_7102770acd9a_Cfunc_je_malloc_stats_print
//go:linkname __cgofn__cgo_7102770acd9a_Cfunc_je_malloc_stats_print _cgo_7102770acd9a_Cfunc_je_malloc_stats_print
var __cgofn__cgo_7102770acd9a_Cfunc_je_malloc_stats_print byte
var _cgo_7102770acd9a_Cfunc_je_malloc_stats_print = unsafe.Pointer(&__cgofn__cgo_7102770acd9a_Cfunc_je_malloc_stats_print)

//go:cgo_unsafe_args
func _Cfunc_je_malloc_stats_print(p0 *[0]byte, p1 unsafe.Pointer, p2 *_Ctype_char) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_7102770acd9a_Cfunc_je_malloc_stats_print, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
	}
	return
}
//go:cgo_import_static _cgo_7102770acd9a_Cfunc_je_zone_register
//go:linkname __cgofn__cgo_7102770acd9a_Cfunc_je_zone_register _cgo_7102770acd9a_Cfunc_je_zone_register
var __cgofn__cgo_7102770acd9a_Cfunc_je_zone_register byte
var _cgo_7102770acd9a_Cfunc_je_zone_register = unsafe.Pointer(&__cgofn__cgo_7102770acd9a_Cfunc_je_zone_register)

//go:cgo_unsafe_args
func _Cfunc_je_zone_register() (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_7102770acd9a_Cfunc_je_zone_register, uintptr(unsafe.Pointer(&r1)))
	if _Cgo_always_false {
	}
	return
}
//go:cgo_import_static _cgo_7102770acd9a_Cfunc_jemalloc_get_stats
//go:linkname __cgofn__cgo_7102770acd9a_Cfunc_jemalloc_get_stats _cgo_7102770acd9a_Cfunc_jemalloc_get_stats
var __cgofn__cgo_7102770acd9a_Cfunc_jemalloc_get_stats byte
var _cgo_7102770acd9a_Cfunc_jemalloc_get_stats = unsafe.Pointer(&__cgofn__cgo_7102770acd9a_Cfunc_jemalloc_get_stats)

//go:cgo_unsafe_args
func _Cfunc_jemalloc_get_stats(p0 *_Ctype_struct___0) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_7102770acd9a_Cfunc_jemalloc_get_stats, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_7102770acd9a_Cfunc_jemalloc_purge
//go:linkname __cgofn__cgo_7102770acd9a_Cfunc_jemalloc_purge _cgo_7102770acd9a_Cfunc_jemalloc_purge
var __cgofn__cgo_7102770acd9a_Cfunc_jemalloc_purge byte
var _cgo_7102770acd9a_Cfunc_jemalloc_purge = unsafe.Pointer(&__cgofn__cgo_7102770acd9a_Cfunc_jemalloc_purge)

//go:cgo_unsafe_args
func _Cfunc_jemalloc_purge() (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_7102770acd9a_Cfunc_jemalloc_purge, uintptr(unsafe.Pointer(&r1)))
	if _Cgo_always_false {
	}
	return
}
//go:cgo_import_static _cgo_7102770acd9a_Cfunc_jemalloc_stats_print_abbreviated
//go:linkname __cgofn__cgo_7102770acd9a_Cfunc_jemalloc_stats_print_abbreviated _cgo_7102770acd9a_Cfunc_jemalloc_stats_print_abbreviated
var __cgofn__cgo_7102770acd9a_Cfunc_jemalloc_stats_print_abbreviated byte
var _cgo_7102770acd9a_Cfunc_jemalloc_stats_print_abbreviated = unsafe.Pointer(&__cgofn__cgo_7102770acd9a_Cfunc_jemalloc_stats_print_abbreviated)

//go:cgo_unsafe_args
func _Cfunc_jemalloc_stats_print_abbreviated() (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_7102770acd9a_Cfunc_jemalloc_stats_print_abbreviated, uintptr(unsafe.Pointer(&r1)))
	if _Cgo_always_false {
	}
	return
}

//go:cgo_import_static _cgo_7102770acd9a_Cfunc__Cmalloc
//go:linkname __cgofn__cgo_7102770acd9a_Cfunc__Cmalloc _cgo_7102770acd9a_Cfunc__Cmalloc
var __cgofn__cgo_7102770acd9a_Cfunc__Cmalloc byte
var _cgo_7102770acd9a_Cfunc__Cmalloc = unsafe.Pointer(&__cgofn__cgo_7102770acd9a_Cfunc__Cmalloc)

//go:linkname runtime_throw runtime.throw
func runtime_throw(string)

//go:cgo_unsafe_args
func _cgo_cmalloc(p0 uint64) (r1 unsafe.Pointer) {
	_cgo_runtime_cgocall(_cgo_7102770acd9a_Cfunc__Cmalloc, uintptr(unsafe.Pointer(&p0)))
	if r1 == nil {
		runtime_throw("runtime: C malloc failed")
	}
	return
}
