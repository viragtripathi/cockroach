// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// source: gossip/gossip.proto

package gossip

import (
	bytes "bytes"
	context "context"
	errors "github.com/cockroachdb/errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_gossip_gossip_proto struct{}

func (drpcEncoding_File_gossip_gossip_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_gossip_gossip_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_gossip_gossip_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_gossip_gossip_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCGossipClient interface {
	DRPCConn() drpc.Conn

	Gossip(ctx context.Context) (DRPCGossip_GossipClient, error)
}

type drpcGossipClient struct {
	cc drpc.Conn
}

func NewDRPCGossipClient(cc drpc.Conn) DRPCGossipClient {
	return &drpcGossipClient{cc}
}

func (c *drpcGossipClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcGossipClient) Gossip(ctx context.Context) (DRPCGossip_GossipClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.gossip.Gossip/Gossip", drpcEncoding_File_gossip_gossip_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcGossip_GossipClient{stream}
	return x, nil
}

type DRPCGossip_GossipClient interface {
	drpc.Stream
	Send(*Request) error
	Recv() (*Response, error)
}

type RPCGossip_GossipClient interface {
	Context() context.Context
	CloseSend() error
	Send(*Request) error
	Recv() (*Response, error)
}

type drpcGossip_GossipClient struct {
	drpc.Stream
}

func (x *drpcGossip_GossipClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcGossip_GossipClient) Send(m *Request) error {
	return x.MsgSend(m, drpcEncoding_File_gossip_gossip_proto{})
}

func (x *drpcGossip_GossipClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.MsgRecv(m, drpcEncoding_File_gossip_gossip_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcGossip_GossipClient) RecvMsg(m *Response) error {
	return x.MsgRecv(m, drpcEncoding_File_gossip_gossip_proto{})
}

type DRPCGossipServer interface {
	Gossip(DRPCGossip_GossipStream) error
}

type DRPCGossipUnimplementedServer struct{}

func (s *DRPCGossipUnimplementedServer) Gossip(DRPCGossip_GossipStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCGossipDescription struct{}

func (DRPCGossipDescription) NumMethods() int { return 1 }

func (DRPCGossipDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.gossip.Gossip/Gossip", drpcEncoding_File_gossip_gossip_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCGossipServer).
					Gossip(
						&drpcGossip_GossipStream{in1.(drpc.Stream)},
					)
			}, DRPCGossipServer.Gossip, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterGossip(mux drpc.Mux, impl DRPCGossipServer) error {
	return mux.Register(impl, DRPCGossipDescription{})
}

type DRPCGossip_GossipStream interface {
	drpc.Stream
	Send(*Response) error
	Recv() (*Request, error)
	RecvMsg(interface{}) error
}

type RPCGossip_GossipStream interface {
	Context() context.Context
	Send(*Response) error
	Recv() (*Request, error)
	RecvMsg(interface{}) error
}

type drpcGossip_GossipStream struct {
	drpc.Stream
}

func (x *drpcGossip_GossipStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcGossip_GossipStream) Send(m *Response) error {
	return x.MsgSend(m, drpcEncoding_File_gossip_gossip_proto{})
}

func (x *drpcGossip_GossipStream) Recv() (*Request, error) {
	m := new(Request)
	if err := x.MsgRecv(m, drpcEncoding_File_gossip_gossip_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcGossip_GossipStream) RecvMsg(m interface{}) error {
	return x.MsgRecv(m, drpcEncoding_File_gossip_gossip_proto{})
}

type RPCGossipClient interface {
	Gossip(ctx context.Context) (RPCGossip_GossipClient, error)
}

// Gossip gRPC -> RPC adapter
type grpcGossipClientAdapter gossipClient

func NewGRPCGossipClientAdapter(conn *grpc.ClientConn) RPCGossipClient {
	return (*grpcGossipClientAdapter)(&gossipClient{conn})
}

func (a *grpcGossipClientAdapter) Gossip(ctx context.Context) (RPCGossip_GossipClient, error) {
	return (*gossipClient)(a).Gossip(ctx)
}

// compile-time assertion
var _ RPCGossipClient = (*grpcGossipClientAdapter)(nil)

// Gossip DRPC -> RPC adapter
type drpcGossipClientAdapter drpcGossipClient

func NewDRPCGossipClientAdapter(conn drpc.Conn) RPCGossipClient {
	return (*drpcGossipClientAdapter)(&drpcGossipClient{conn})
}

func (a *drpcGossipClientAdapter) Gossip(ctx context.Context) (RPCGossip_GossipClient, error) {
	return (*drpcGossipClient)(a).Gossip(ctx)
}

// compile-time assertion
var _ RPCGossipClient = (*drpcGossipClientAdapter)(nil)
