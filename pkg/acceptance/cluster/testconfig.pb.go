// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: acceptance/cluster/testconfig.proto

package cluster

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// InitMode specifies different ways to initialize the cluster.
type InitMode int32

const (
	// INIT_COMMAND starts every node with a join flag and issues the
	// init command.
	INIT_COMMAND InitMode = 0
	// INIT_NONE starts every node with a join flag and leaves the
	// cluster uninitialized.
	INIT_NONE InitMode = 2
)

var InitMode_name = map[int32]string{
	0: "INIT_COMMAND",
	2: "INIT_NONE",
}

var InitMode_value = map[string]int32{
	"INIT_COMMAND": 0,
	"INIT_NONE":    2,
}

func (x InitMode) Enum() *InitMode {
	p := new(InitMode)
	*p = x
	return p
}

func (x InitMode) String() string {
	return proto.EnumName(InitMode_name, int32(x))
}

func (x *InitMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(InitMode_value, data, "InitMode")
	if err != nil {
		return err
	}
	*x = InitMode(value)
	return nil
}

func (InitMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c90d7c784d2ac9d6, []int{0}
}

// StoreConfig holds the configuration of a collection of similar stores.
type StoreConfig struct {
	MaxRanges int32 `protobuf:"varint,2,opt,name=max_ranges,json=maxRanges" json:"max_ranges"`
}

func (m *StoreConfig) Reset()         { *m = StoreConfig{} }
func (m *StoreConfig) String() string { return proto.CompactTextString(m) }
func (*StoreConfig) ProtoMessage()    {}
func (*StoreConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_c90d7c784d2ac9d6, []int{0}
}
func (m *StoreConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StoreConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreConfig.Merge(m, src)
}
func (m *StoreConfig) XXX_Size() int {
	return m.Size()
}
func (m *StoreConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StoreConfig proto.InternalMessageInfo

// NodeConfig holds the configuration of a collection of similar nodes.
type NodeConfig struct {
	Version string        `protobuf:"bytes,1,opt,name=version" json:"version"`
	Stores  []StoreConfig `protobuf:"bytes,2,rep,name=stores" json:"stores"`
}

func (m *NodeConfig) Reset()         { *m = NodeConfig{} }
func (m *NodeConfig) String() string { return proto.CompactTextString(m) }
func (*NodeConfig) ProtoMessage()    {}
func (*NodeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_c90d7c784d2ac9d6, []int{1}
}
func (m *NodeConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeConfig.Merge(m, src)
}
func (m *NodeConfig) XXX_Size() int {
	return m.Size()
}
func (m *NodeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_NodeConfig proto.InternalMessageInfo

type TestConfig struct {
	Name  string       `protobuf:"bytes,1,opt,name=name" json:"name"`
	Nodes []NodeConfig `protobuf:"bytes,2,rep,name=nodes" json:"nodes"`
	// Duration is the total time that the test should run for. Important for
	// tests such as TestPut that will run indefinitely.
	Duration time.Duration `protobuf:"varint,3,opt,name=duration,casttype=time.Duration" json:"duration"`
	InitMode InitMode      `protobuf:"varint,4,opt,name=init_mode,json=initMode,enum=cockroach.acceptance.cluster.InitMode" json:"init_mode"`
	// When set, the cluster is started as quickly as possible, without waiting
	// for ranges to replicate, or even ports to be opened.
	NoWait bool `protobuf:"varint,5,opt,name=no_wait,json=noWait" json:"no_wait"`
}

func (m *TestConfig) Reset()         { *m = TestConfig{} }
func (m *TestConfig) String() string { return proto.CompactTextString(m) }
func (*TestConfig) ProtoMessage()    {}
func (*TestConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_c90d7c784d2ac9d6, []int{2}
}
func (m *TestConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TestConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestConfig.Merge(m, src)
}
func (m *TestConfig) XXX_Size() int {
	return m.Size()
}
func (m *TestConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TestConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TestConfig proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.acceptance.cluster.InitMode", InitMode_name, InitMode_value)
	proto.RegisterType((*StoreConfig)(nil), "cockroach.acceptance.cluster.StoreConfig")
	proto.RegisterType((*NodeConfig)(nil), "cockroach.acceptance.cluster.NodeConfig")
	proto.RegisterType((*TestConfig)(nil), "cockroach.acceptance.cluster.TestConfig")
}

func init() {
	proto.RegisterFile("acceptance/cluster/testconfig.proto", fileDescriptor_c90d7c784d2ac9d6)
}

var fileDescriptor_c90d7c784d2ac9d6 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x86, 0xe3, 0x36, 0x65, 0xe9, 0x37, 0x86, 0x2a, 0x0b, 0xa4, 0x68, 0x02, 0x2f, 0xea, 0x24,
	0x14, 0x38, 0x24, 0xa2, 0x97, 0x9d, 0xe9, 0x8a, 0x50, 0x0f, 0xcd, 0xa4, 0x32, 0x09, 0xc1, 0xa5,
	0xf2, 0x1c, 0x93, 0x59, 0x23, 0xfe, 0xaa, 0xc4, 0x85, 0xfd, 0x04, 0xb8, 0xf1, 0x1f, 0xf8, 0x33,
	0x3d, 0xee, 0xb8, 0xd3, 0x04, 0xed, 0xbf, 0xe0, 0x84, 0x92, 0xba, 0x2d, 0x68, 0x52, 0x6f, 0xce,
	0xeb, 0xf7, 0x7d, 0x9f, 0xef, 0x8b, 0x0c, 0xc7, 0x5c, 0x08, 0x39, 0x35, 0x5c, 0x0b, 0x19, 0x8b,
	0xcf, 0xb3, 0xd2, 0xc8, 0x22, 0x36, 0xb2, 0x34, 0x02, 0xf5, 0x27, 0x95, 0x45, 0xd3, 0x02, 0x0d,
	0xd2, 0xa7, 0x02, 0xc5, 0x55, 0x81, 0x5c, 0x5c, 0x46, 0x5b, 0x7b, 0x64, 0xed, 0x87, 0x8f, 0x33,
	0xcc, 0xb0, 0x36, 0xc6, 0xd5, 0x69, 0x95, 0xe9, 0xf6, 0x60, 0xff, 0x9d, 0xc1, 0x42, 0x9e, 0xd6,
	0x45, 0xf4, 0x18, 0x20, 0xe7, 0xd7, 0x93, 0x82, 0xeb, 0x4c, 0x96, 0x7e, 0x23, 0x20, 0x61, 0xab,
	0xef, 0xce, 0xef, 0x8e, 0x9c, 0x71, 0x3b, 0xe7, 0xd7, 0xe3, 0x5a, 0xee, 0xce, 0x00, 0x12, 0x4c,
	0xd7, 0x11, 0x06, 0x7b, 0x5f, 0x64, 0x51, 0x2a, 0xd4, 0x3e, 0x09, 0x48, 0xd8, 0xb6, 0xfe, 0xb5,
	0x48, 0xdf, 0xc2, 0x83, 0xb2, 0x22, 0x54, 0x75, 0xcd, 0x70, 0xbf, 0xf7, 0x22, 0xda, 0x35, 0x66,
	0xf4, 0xcf, 0x34, 0xb6, 0xc9, 0xc6, 0xbb, 0xdf, 0x1b, 0x00, 0xe7, 0xb2, 0x34, 0x96, 0xeb, 0x83,
	0xab, 0x79, 0x2e, 0xff, 0x83, 0xd6, 0x0a, 0x1d, 0x40, 0x4b, 0x63, 0xba, 0x01, 0x86, 0xbb, 0x81,
	0xdb, 0x55, 0x6c, 0xc9, 0x2a, 0x4c, 0x5f, 0x81, 0x97, 0xce, 0x0a, 0x6e, 0xaa, 0xc5, 0x9a, 0x01,
	0x09, 0x9b, 0xfd, 0x27, 0xd5, 0xf5, 0x9f, 0xbb, 0xa3, 0x03, 0xa3, 0x72, 0x19, 0x0d, 0xec, 0xe5,
	0x78, 0x63, 0xa3, 0x43, 0x68, 0x2b, 0xad, 0xcc, 0x24, 0xc7, 0x54, 0xfa, 0x6e, 0x40, 0xc2, 0x47,
	0xbd, 0xe7, 0xbb, 0xe1, 0x43, 0xad, 0xcc, 0x08, 0x53, 0x69, 0xd1, 0x9e, 0xb2, 0xdf, 0xf4, 0x19,
	0xec, 0x69, 0x9c, 0x7c, 0xe5, 0xca, 0xf8, 0xad, 0x80, 0x84, 0xde, 0xfa, 0x5f, 0x68, 0x7c, 0xcf,
	0x95, 0x79, 0x79, 0x02, 0xde, 0x3a, 0x4a, 0x3b, 0xf0, 0x70, 0x98, 0x0c, 0xcf, 0x27, 0xa7, 0x67,
	0xa3, 0xd1, 0xeb, 0x64, 0xd0, 0x71, 0xe8, 0x01, 0xb4, 0x6b, 0x25, 0x39, 0x4b, 0xde, 0x74, 0x1a,
	0x87, 0xee, 0xb7, 0x9f, 0xcc, 0xe9, 0xba, 0x1e, 0xe9, 0x90, 0xfe, 0x87, 0xf9, 0x6f, 0xe6, 0xcc,
	0x17, 0x8c, 0xdc, 0x2c, 0x18, 0xb9, 0x5d, 0x30, 0xf2, 0x6b, 0xc1, 0xc8, 0x8f, 0x25, 0x73, 0x6e,
	0x96, 0xcc, 0xb9, 0x5d, 0x32, 0xe7, 0xe3, 0x49, 0xa6, 0xcc, 0xe5, 0xec, 0x22, 0x12, 0x98, 0xc7,
	0x9b, 0xd9, 0xd3, 0x8b, 0xed, 0x39, 0x9e, 0x5e, 0x65, 0xf1, 0xfd, 0xf7, 0xf8, 0x37, 0x00, 0x00,
	0xff, 0xff, 0x67, 0x4d, 0xf7, 0x6c, 0xa4, 0x02, 0x00, 0x00,
}

func (m *StoreConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintTestconfig(dAtA, i, uint64(m.MaxRanges))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}

func (m *NodeConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stores) > 0 {
		for iNdEx := len(m.Stores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTestconfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.Version)
	copy(dAtA[i:], m.Version)
	i = encodeVarintTestconfig(dAtA, i, uint64(len(m.Version)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TestConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.NoWait {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i = encodeVarintTestconfig(dAtA, i, uint64(m.InitMode))
	i--
	dAtA[i] = 0x20
	i = encodeVarintTestconfig(dAtA, i, uint64(m.Duration))
	i--
	dAtA[i] = 0x18
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTestconfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintTestconfig(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTestconfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovTestconfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StoreConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTestconfig(uint64(m.MaxRanges))
	return n
}

func (m *NodeConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	n += 1 + l + sovTestconfig(uint64(l))
	if len(m.Stores) > 0 {
		for _, e := range m.Stores {
			l = e.Size()
			n += 1 + l + sovTestconfig(uint64(l))
		}
	}
	return n
}

func (m *TestConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovTestconfig(uint64(l))
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovTestconfig(uint64(l))
		}
	}
	n += 1 + sovTestconfig(uint64(m.Duration))
	n += 1 + sovTestconfig(uint64(m.InitMode))
	n += 2
	return n
}

func sovTestconfig(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozTestconfig(x uint64) (n int) {
	return sovTestconfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoreConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRanges", wireType)
			}
			m.MaxRanges = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRanges |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTestconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestconfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestconfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestconfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stores = append(m.Stores, StoreConfig{})
			if err := m.Stores[len(m.Stores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestconfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestconfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestconfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, NodeConfig{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= time.Duration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitMode", wireType)
			}
			m.InitMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitMode |= InitMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWait", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoWait = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTestconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTestconfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTestconfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestconfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTestconfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTestconfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTestconfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTestconfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTestconfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTestconfig = fmt.Errorf("proto: unexpected end of group")
)

