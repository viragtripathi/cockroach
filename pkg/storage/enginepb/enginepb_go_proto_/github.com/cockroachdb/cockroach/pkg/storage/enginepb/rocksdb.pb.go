// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/enginepb/rocksdb.proto

package enginepb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	hlc "github.com/cockroachdb/cockroach/pkg/util/hlc"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SSTableMetricsInfo struct {
	// level the lsm tree level the sstable is found in
	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	// table_id is the sstable's file number
	TableID uint64 `protobuf:"varint,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// table_info_json contains sstable properties, encoded as JSON
	TableInfoJSON []byte `protobuf:"bytes,3,opt,name=table_info_json,json=tableInfoJson,proto3" json:"table_info_json,omitempty"`
	// approximate_span_bytes represents the total number of bytes that overlap the given keyspan
	ApproximateSpanBytes uint64 `protobuf:"varint,4,opt,name=approximate_span_bytes,json=approximateSpanBytes,proto3" json:"approximate_span_bytes,omitempty"`
}

func (m *SSTableMetricsInfo) Reset()         { *m = SSTableMetricsInfo{} }
func (m *SSTableMetricsInfo) String() string { return proto.CompactTextString(m) }
func (*SSTableMetricsInfo) ProtoMessage()    {}
func (*SSTableMetricsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_820565f89a9868ba, []int{0}
}
func (m *SSTableMetricsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SSTableMetricsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SSTableMetricsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSTableMetricsInfo.Merge(m, src)
}
func (m *SSTableMetricsInfo) XXX_Size() int {
	return m.Size()
}
func (m *SSTableMetricsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SSTableMetricsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SSTableMetricsInfo proto.InternalMessageInfo

// StorageInternalKeyMetrics contains metrics that correspond to the fields in
// pebble.KeyStatistics.
type StorageInternalKeysMetrics struct {
	// Level is the lsm tree level the metrics are found. It is set to -1 for
	// the aggregate stats across all levels.
	Level                       int32  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	SnapshotPinnedKeys          uint64 `protobuf:"varint,2,opt,name=snapshot_pinned_keys,json=snapshotPinnedKeys,proto3" json:"snapshot_pinned_keys,omitempty"`
	SnapshotPinnedKeysBytes     uint64 `protobuf:"varint,3,opt,name=snapshot_pinned_keys_bytes,json=snapshotPinnedKeysBytes,proto3" json:"snapshot_pinned_keys_bytes,omitempty"`
	PointKeyDeleteCount         uint64 `protobuf:"varint,4,opt,name=point_key_delete_count,json=pointKeyDeleteCount,proto3" json:"point_key_delete_count,omitempty"`
	PointKeySetCount            uint64 `protobuf:"varint,5,opt,name=point_key_set_count,json=pointKeySetCount,proto3" json:"point_key_set_count,omitempty"`
	RangeDeleteCount            uint64 `protobuf:"varint,6,opt,name=range_delete_count,json=rangeDeleteCount,proto3" json:"range_delete_count,omitempty"`
	RangeKeySetCount            uint64 `protobuf:"varint,7,opt,name=range_key_set_count,json=rangeKeySetCount,proto3" json:"range_key_set_count,omitempty"`
	RangeKeyDeleteCount         uint64 `protobuf:"varint,8,opt,name=range_key_delete_count,json=rangeKeyDeleteCount,proto3" json:"range_key_delete_count,omitempty"`
	PointKeyDeleteIsLatestCount uint64 `protobuf:"varint,9,opt,name=point_key_delete_is_latest_count,json=pointKeyDeleteIsLatestCount,proto3" json:"point_key_delete_is_latest_count,omitempty"`
	PointKeySetIsLatestCount    uint64 `protobuf:"varint,10,opt,name=point_key_set_is_latest_count,json=pointKeySetIsLatestCount,proto3" json:"point_key_set_is_latest_count,omitempty"`
}

func (m *StorageInternalKeysMetrics) Reset()         { *m = StorageInternalKeysMetrics{} }
func (m *StorageInternalKeysMetrics) String() string { return proto.CompactTextString(m) }
func (*StorageInternalKeysMetrics) ProtoMessage()    {}
func (*StorageInternalKeysMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_820565f89a9868ba, []int{1}
}
func (m *StorageInternalKeysMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageInternalKeysMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StorageInternalKeysMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageInternalKeysMetrics.Merge(m, src)
}
func (m *StorageInternalKeysMetrics) XXX_Size() int {
	return m.Size()
}
func (m *StorageInternalKeysMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageInternalKeysMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_StorageInternalKeysMetrics proto.InternalMessageInfo

// SSTUserProperties contains the user-added properties of a single sstable.
type SSTUserProperties struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// ts_min is the minimum mvcc timestamp present in this sstable.
	TsMin *hlc.Timestamp `protobuf:"bytes,2,opt,name=ts_min,json=tsMin,proto3" json:"ts_min,omitempty"`
	// ts_max is the maximum mvcc timestamp present in this sstable.
	TsMax *hlc.Timestamp `protobuf:"bytes,3,opt,name=ts_max,json=tsMax,proto3" json:"ts_max,omitempty"`
}

func (m *SSTUserProperties) Reset()         { *m = SSTUserProperties{} }
func (m *SSTUserProperties) String() string { return proto.CompactTextString(m) }
func (*SSTUserProperties) ProtoMessage()    {}
func (*SSTUserProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_820565f89a9868ba, []int{2}
}
func (m *SSTUserProperties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SSTUserProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SSTUserProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSTUserProperties.Merge(m, src)
}
func (m *SSTUserProperties) XXX_Size() int {
	return m.Size()
}
func (m *SSTUserProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_SSTUserProperties.DiscardUnknown(m)
}

var xxx_messageInfo_SSTUserProperties proto.InternalMessageInfo

// SSTUserPropertiesCollection contains the user-added properties of every
// sstable in a RocksDB instance.
type SSTUserPropertiesCollection struct {
	Sst   []SSTUserProperties `protobuf:"bytes,1,rep,name=sst,proto3" json:"sst"`
	Error string              `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *SSTUserPropertiesCollection) Reset()         { *m = SSTUserPropertiesCollection{} }
func (m *SSTUserPropertiesCollection) String() string { return proto.CompactTextString(m) }
func (*SSTUserPropertiesCollection) ProtoMessage()    {}
func (*SSTUserPropertiesCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_820565f89a9868ba, []int{3}
}
func (m *SSTUserPropertiesCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SSTUserPropertiesCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SSTUserPropertiesCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSTUserPropertiesCollection.Merge(m, src)
}
func (m *SSTUserPropertiesCollection) XXX_Size() int {
	return m.Size()
}
func (m *SSTUserPropertiesCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_SSTUserPropertiesCollection.DiscardUnknown(m)
}

var xxx_messageInfo_SSTUserPropertiesCollection proto.InternalMessageInfo

// HistogramData holds the relevant metrics returned by a call to
// `rocksdb::Statistics::histogramData()`.
type HistogramData struct {
	Mean  float64 `protobuf:"fixed64,1,opt,name=mean,proto3" json:"mean,omitempty"`
	P50   float64 `protobuf:"fixed64,2,opt,name=p50,proto3" json:"p50,omitempty"`
	P95   float64 `protobuf:"fixed64,3,opt,name=p95,proto3" json:"p95,omitempty"`
	P99   float64 `protobuf:"fixed64,4,opt,name=p99,proto3" json:"p99,omitempty"`
	Max   float64 `protobuf:"fixed64,5,opt,name=max,proto3" json:"max,omitempty"`
	Count uint64  `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	Sum   uint64  `protobuf:"varint,7,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (m *HistogramData) Reset()         { *m = HistogramData{} }
func (m *HistogramData) String() string { return proto.CompactTextString(m) }
func (*HistogramData) ProtoMessage()    {}
func (*HistogramData) Descriptor() ([]byte, []int) {
	return fileDescriptor_820565f89a9868ba, []int{4}
}
func (m *HistogramData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistogramData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HistogramData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistogramData.Merge(m, src)
}
func (m *HistogramData) XXX_Size() int {
	return m.Size()
}
func (m *HistogramData) XXX_DiscardUnknown() {
	xxx_messageInfo_HistogramData.DiscardUnknown(m)
}

var xxx_messageInfo_HistogramData proto.InternalMessageInfo

// TickersAndHistograms holds maps from ticker/histogram name to its value for
// all stats measured by a `rocksdb::Statistics` object.
type TickersAndHistograms struct {
	Tickers    map[string]uint64        `protobuf:"bytes,1,rep,name=tickers,proto3" json:"tickers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Histograms map[string]HistogramData `protobuf:"bytes,2,rep,name=histograms,proto3" json:"histograms" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *TickersAndHistograms) Reset()         { *m = TickersAndHistograms{} }
func (m *TickersAndHistograms) String() string { return proto.CompactTextString(m) }
func (*TickersAndHistograms) ProtoMessage()    {}
func (*TickersAndHistograms) Descriptor() ([]byte, []int) {
	return fileDescriptor_820565f89a9868ba, []int{5}
}
func (m *TickersAndHistograms) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TickersAndHistograms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TickersAndHistograms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickersAndHistograms.Merge(m, src)
}
func (m *TickersAndHistograms) XXX_Size() int {
	return m.Size()
}
func (m *TickersAndHistograms) XXX_DiscardUnknown() {
	xxx_messageInfo_TickersAndHistograms.DiscardUnknown(m)
}

var xxx_messageInfo_TickersAndHistograms proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SSTableMetricsInfo)(nil), "cockroach.storage.enginepb.SSTableMetricsInfo")
	proto.RegisterType((*StorageInternalKeysMetrics)(nil), "cockroach.storage.enginepb.StorageInternalKeysMetrics")
	proto.RegisterType((*SSTUserProperties)(nil), "cockroach.storage.enginepb.SSTUserProperties")
	proto.RegisterType((*SSTUserPropertiesCollection)(nil), "cockroach.storage.enginepb.SSTUserPropertiesCollection")
	proto.RegisterType((*HistogramData)(nil), "cockroach.storage.enginepb.HistogramData")
	proto.RegisterType((*TickersAndHistograms)(nil), "cockroach.storage.enginepb.TickersAndHistograms")
	proto.RegisterMapType((map[string]HistogramData)(nil), "cockroach.storage.enginepb.TickersAndHistograms.HistogramsEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "cockroach.storage.enginepb.TickersAndHistograms.TickersEntry")
}

func init() { proto.RegisterFile("storage/enginepb/rocksdb.proto", fileDescriptor_820565f89a9868ba) }

var fileDescriptor_820565f89a9868ba = []byte{
	// 838 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0xb6, 0x62, 0x3b, 0x69, 0x98, 0x06, 0x6d, 0x59, 0x23, 0x13, 0x5c, 0x54, 0x31, 0x7c, 0x31,
	0x64, 0xc0, 0x2a, 0x15, 0xc9, 0x02, 0xcc, 0x1d, 0x86, 0xae, 0x6e, 0x02, 0xcc, 0xeb, 0xda, 0x15,
	0x52, 0x86, 0x02, 0xbb, 0x11, 0x68, 0x99, 0x91, 0x38, 0x4b, 0xa4, 0x40, 0xd2, 0x45, 0xbc, 0xa7,
	0x18, 0xb0, 0x07, 0xd8, 0xeb, 0xe4, 0xb2, 0x97, 0xbd, 0x59, 0xb0, 0x39, 0xcf, 0x31, 0x60, 0x20,
	0x29, 0xc5, 0xf2, 0x4f, 0x8b, 0xf5, 0xee, 0xf0, 0x9c, 0xef, 0xfb, 0x0e, 0xcf, 0xe7, 0x43, 0x0b,
	0x38, 0x42, 0x32, 0x8e, 0x62, 0xec, 0x61, 0x1a, 0x13, 0x8a, 0xf3, 0xa1, 0xc7, 0x59, 0x34, 0x16,
	0xa3, 0xa1, 0x9b, 0x73, 0x26, 0x19, 0x6c, 0x47, 0x2c, 0x1a, 0x73, 0x86, 0xa2, 0xc4, 0x2d, 0x90,
	0x6e, 0x89, 0x6c, 0xdb, 0x13, 0x49, 0x52, 0x2f, 0x49, 0x23, 0x4f, 0x92, 0x0c, 0x0b, 0x89, 0xb2,
	0xdc, 0xb0, 0xda, 0xad, 0x98, 0xc5, 0x4c, 0x87, 0x9e, 0x8a, 0x4c, 0xb6, 0xfb, 0x97, 0x05, 0x60,
	0x10, 0x9c, 0xa1, 0x61, 0x8a, 0x5f, 0x62, 0xc9, 0x49, 0x24, 0x06, 0xf4, 0x9c, 0xc1, 0x16, 0x68,
	0xa6, 0xf8, 0x2d, 0x4e, 0x6d, 0xab, 0x63, 0x1d, 0x34, 0x7d, 0x73, 0x80, 0x9f, 0x83, 0x5b, 0x52,
	0x21, 0x43, 0x32, 0xb2, 0x37, 0x3a, 0xd6, 0x41, 0xa3, 0xbf, 0x33, 0xbb, 0xda, 0xdf, 0xd2, 0xec,
	0xc1, 0x89, 0xbf, 0xa5, 0x8b, 0x83, 0x11, 0xec, 0x81, 0x3b, 0x05, 0x8e, 0x9e, 0xb3, 0xf0, 0x57,
	0xc1, 0xa8, 0x5d, 0xef, 0x58, 0x07, 0xb7, 0xfb, 0xf7, 0x66, 0x57, 0xfb, 0xbb, 0x06, 0x4e, 0xcf,
	0xd9, 0x0f, 0xc1, 0x4f, 0xaf, 0xfc, 0x5d, 0x79, 0x73, 0x14, 0x8c, 0xc2, 0x57, 0x60, 0x0f, 0xe5,
	0x39, 0x67, 0x17, 0x24, 0x43, 0x12, 0x87, 0x22, 0x47, 0x34, 0x1c, 0x4e, 0x25, 0x16, 0x76, 0x43,
	0x37, 0xb4, 0x67, 0x57, 0xfb, 0xad, 0x67, 0x73, 0x44, 0x90, 0x23, 0xda, 0x57, 0x75, 0xbf, 0x85,
	0xd6, 0x64, 0xbb, 0x7f, 0x36, 0x40, 0x3b, 0x30, 0x26, 0x0d, 0xa8, 0xc4, 0x9c, 0xa2, 0xf4, 0x05,
	0x9e, 0x8a, 0x62, 0xd6, 0x0f, 0xcc, 0xf9, 0x18, 0xb4, 0x04, 0x45, 0xb9, 0x48, 0x98, 0x0c, 0x73,
	0x42, 0x29, 0x1e, 0x85, 0x63, 0x3c, 0x15, 0x66, 0x66, 0x1f, 0x96, 0xb5, 0xd7, 0xba, 0xa4, 0xe4,
	0xe0, 0x37, 0xa0, 0xbd, 0x8e, 0x51, 0x5c, 0xbd, 0xae, 0x79, 0x9f, 0xad, 0xf2, 0xf4, 0x1d, 0xe1,
	0x11, 0xd8, 0xcb, 0x19, 0xa1, 0x52, 0x51, 0xc2, 0x11, 0x4e, 0xb1, 0xc4, 0x61, 0xc4, 0x26, 0x54,
	0x9a, 0x99, 0xfd, 0xfb, 0xba, 0xfa, 0x02, 0x4f, 0x4f, 0x74, 0xed, 0xb9, 0x2a, 0xc1, 0x47, 0xe0,
	0xfe, 0x9c, 0x24, 0xb0, 0x2c, 0x18, 0x4d, 0xcd, 0xb8, 0x5b, 0x32, 0x02, 0x2c, 0x0d, 0xfc, 0x4b,
	0x00, 0x39, 0xa2, 0x31, 0x5e, 0xd4, 0xdf, 0x34, 0x68, 0x5d, 0x59, 0x12, 0x37, 0xe8, 0x45, 0xf1,
	0xad, 0x0a, 0xbc, 0x2a, 0x7e, 0x04, 0xf6, 0xe6, 0xf0, 0x85, 0x06, 0xb7, 0xcc, 0x00, 0x25, 0xa3,
	0xda, 0xe3, 0x14, 0x74, 0x56, 0xa6, 0x26, 0x22, 0x4c, 0x91, 0xc4, 0xa2, 0x6c, 0xb8, 0xad, 0xe9,
	0x0f, 0x16, 0xe7, 0x1f, 0x88, 0x1f, 0x35, 0xc6, 0xc8, 0x3c, 0x05, 0x0f, 0x17, 0x7d, 0x58, 0xd6,
	0x00, 0x5a, 0xc3, 0xae, 0x38, 0xb2, 0x20, 0xd0, 0xfd, 0xc3, 0x02, 0xf7, 0x82, 0xe0, 0xec, 0x67,
	0x81, 0xf9, 0x6b, 0xce, 0x72, 0xcc, 0x25, 0xc1, 0x02, 0x42, 0xd0, 0xc8, 0x91, 0x4c, 0xf4, 0x5e,
	0x6c, 0xfb, 0x3a, 0x86, 0x5f, 0x81, 0x4d, 0x29, 0xc2, 0x8c, 0x50, 0xbd, 0x08, 0x3b, 0x87, 0x0f,
	0xdd, 0xf9, 0x43, 0x54, 0xcf, 0xce, 0x4d, 0xd2, 0xc8, 0x3d, 0x2b, 0x9f, 0x9d, 0xdf, 0x94, 0xe2,
	0x25, 0xa1, 0x25, 0x0b, 0x5d, 0xe8, 0x35, 0xf8, 0x5f, 0x2c, 0x74, 0xd1, 0xfd, 0x0d, 0x3c, 0x58,
	0xb9, 0xd4, 0x73, 0x96, 0xa6, 0x38, 0x92, 0x84, 0x51, 0x78, 0x0a, 0xea, 0x42, 0x48, 0xdb, 0xea,
	0xd4, 0x0f, 0x76, 0x0e, 0x1f, 0xb9, 0x1f, 0xfe, 0x43, 0x70, 0x57, 0x54, 0xfa, 0x8d, 0xcb, 0xab,
	0xfd, 0x9a, 0xaf, 0xf8, 0x6a, 0xfd, 0x31, 0xe7, 0x8c, 0xeb, 0x81, 0xb6, 0x7d, 0x73, 0x50, 0x8e,
	0xec, 0x7e, 0x4f, 0x84, 0x64, 0x31, 0x47, 0xd9, 0x09, 0x92, 0x48, 0xb9, 0x91, 0x61, 0x44, 0xb5,
	0x1b, 0x96, 0xaf, 0x63, 0x78, 0x17, 0xd4, 0xf3, 0xe3, 0xc7, 0x9a, 0x69, 0xf9, 0x2a, 0xd4, 0x99,
	0xde, 0xb1, 0x1e, 0x53, 0x65, 0x7a, 0xc7, 0x26, 0xd3, 0xd3, 0x6b, 0xac, 0x33, 0x3d, 0x95, 0x51,
	0x56, 0x34, 0x4d, 0x26, 0x43, 0x17, 0xea, 0x0e, 0xd5, 0x65, 0x34, 0x07, 0x85, 0x13, 0x93, 0xac,
	0xd8, 0x38, 0x15, 0x76, 0xff, 0xdd, 0x00, 0xad, 0x33, 0x12, 0x8d, 0x31, 0x17, 0xcf, 0xe8, 0xe8,
	0xe6, 0x7e, 0x02, 0xbe, 0x01, 0x5b, 0xd2, 0xe4, 0x0b, 0x3f, 0xbe, 0xfd, 0x98, 0x1f, 0xeb, 0x24,
	0xca, 0xe4, 0x29, 0x95, 0x7c, 0xea, 0x97, 0x6a, 0xf0, 0x1c, 0x80, 0xe4, 0x06, 0x63, 0x6f, 0x68,
	0xed, 0xef, 0x3e, 0x59, 0x7b, 0x1e, 0x6a, 0xf9, 0xc2, 0xfe, 0x8a, 0x72, 0xfb, 0x09, 0xb8, 0x5d,
	0xbd, 0x80, 0x9a, 0x7d, 0x8c, 0xa7, 0xc5, 0xea, 0xa9, 0x50, 0x79, 0xf4, 0x16, 0xa5, 0x13, 0x5c,
	0xfc, 0x03, 0x99, 0xc3, 0x93, 0x8d, 0xaf, 0xad, 0x76, 0x02, 0xee, 0x2c, 0x35, 0x58, 0x43, 0x7f,
	0x5a, 0xa5, 0xef, 0x1c, 0x7e, 0xf1, 0xb1, 0x19, 0x16, 0x7e, 0xf8, 0x4a, 0xa7, 0xfe, 0x9b, 0xcb,
	0x7f, 0x9c, 0xda, 0xe5, 0xcc, 0xb1, 0xde, 0xcd, 0x1c, 0xeb, 0xfd, 0xcc, 0xb1, 0xfe, 0x9e, 0x39,
	0xd6, 0xef, 0xd7, 0x4e, 0xed, 0xdd, 0xb5, 0x53, 0x7b, 0x7f, 0xed, 0xd4, 0x7e, 0x39, 0x8e, 0x89,
	0x4c, 0x26, 0x43, 0x37, 0x62, 0x99, 0x77, 0xd3, 0x61, 0x34, 0x9c, 0xc7, 0x5e, 0x3e, 0x8e, 0xbd,
	0xe5, 0x8f, 0xdb, 0x70, 0x53, 0x7f, 0x89, 0x8e, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x52, 0xe4,
	0x3e, 0x97, 0xf7, 0x06, 0x00, 0x00,
}

func (m *SSTableMetricsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSTableMetricsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SSTableMetricsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApproximateSpanBytes != 0 {
		i = encodeVarintRocksdb(dAtA, i, uint64(m.ApproximateSpanBytes))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TableInfoJSON) > 0 {
		i -= len(m.TableInfoJSON)
		copy(dAtA[i:], m.TableInfoJSON)
		i = encodeVarintRocksdb(dAtA, i, uint64(len(m.TableInfoJSON)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TableID != 0 {
		i = encodeVarintRocksdb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x10
	}
	if m.Level != 0 {
		i = encodeVarintRocksdb(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StorageInternalKeysMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageInternalKeysMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageInternalKeysMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PointKeySetIsLatestCount != 0 {
		i = encodeVarintRocksdb(dAtA, i, uint64(m.PointKeySetIsLatestCount))
		i--
		dAtA[i] = 0x50
	}
	if m.PointKeyDeleteIsLatestCount != 0 {
		i = encodeVarintRocksdb(dAtA, i, uint64(m.PointKeyDeleteIsLatestCount))
		i--
		dAtA[i] = 0x48
	}
	if m.RangeKeyDeleteCount != 0 {
		i = encodeVarintRocksdb(dAtA, i, uint64(m.RangeKeyDeleteCount))
		i--
		dAtA[i] = 0x40
	}
	if m.RangeKeySetCount != 0 {
		i = encodeVarintRocksdb(dAtA, i, uint64(m.RangeKeySetCount))
		i--
		dAtA[i] = 0x38
	}
	if m.RangeDeleteCount != 0 {
		i = encodeVarintRocksdb(dAtA, i, uint64(m.RangeDeleteCount))
		i--
		dAtA[i] = 0x30
	}
	if m.PointKeySetCount != 0 {
		i = encodeVarintRocksdb(dAtA, i, uint64(m.PointKeySetCount))
		i--
		dAtA[i] = 0x28
	}
	if m.PointKeyDeleteCount != 0 {
		i = encodeVarintRocksdb(dAtA, i, uint64(m.PointKeyDeleteCount))
		i--
		dAtA[i] = 0x20
	}
	if m.SnapshotPinnedKeysBytes != 0 {
		i = encodeVarintRocksdb(dAtA, i, uint64(m.SnapshotPinnedKeysBytes))
		i--
		dAtA[i] = 0x18
	}
	if m.SnapshotPinnedKeys != 0 {
		i = encodeVarintRocksdb(dAtA, i, uint64(m.SnapshotPinnedKeys))
		i--
		dAtA[i] = 0x10
	}
	if m.Level != 0 {
		i = encodeVarintRocksdb(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SSTUserProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSTUserProperties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SSTUserProperties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TsMax != nil {
		{
			size, err := m.TsMax.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRocksdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TsMin != nil {
		{
			size, err := m.TsMin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRocksdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintRocksdb(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SSTUserPropertiesCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSTUserPropertiesCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SSTUserPropertiesCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintRocksdb(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sst) > 0 {
		for iNdEx := len(m.Sst) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sst[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRocksdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HistogramData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistogramData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistogramData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != 0 {
		i = encodeVarintRocksdb(dAtA, i, uint64(m.Sum))
		i--
		dAtA[i] = 0x38
	}
	if m.Count != 0 {
		i = encodeVarintRocksdb(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x30
	}
	if m.Max != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Max))))
		i--
		dAtA[i] = 0x29
	}
	if m.P99 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.P99))))
		i--
		dAtA[i] = 0x21
	}
	if m.P95 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.P95))))
		i--
		dAtA[i] = 0x19
	}
	if m.P50 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.P50))))
		i--
		dAtA[i] = 0x11
	}
	if m.Mean != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Mean))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *TickersAndHistograms) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TickersAndHistograms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TickersAndHistograms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Histograms) > 0 {
		keysForHistograms := make([]string, 0, len(m.Histograms))
		for k := range m.Histograms {
			keysForHistograms = append(keysForHistograms, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForHistograms)
		for iNdEx := len(keysForHistograms) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Histograms[string(keysForHistograms[iNdEx])]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRocksdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(keysForHistograms[iNdEx])
			copy(dAtA[i:], keysForHistograms[iNdEx])
			i = encodeVarintRocksdb(dAtA, i, uint64(len(keysForHistograms[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRocksdb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Tickers) > 0 {
		keysForTickers := make([]string, 0, len(m.Tickers))
		for k := range m.Tickers {
			keysForTickers = append(keysForTickers, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTickers)
		for iNdEx := len(keysForTickers) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tickers[string(keysForTickers[iNdEx])]
			baseI := i
			i = encodeVarintRocksdb(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(keysForTickers[iNdEx])
			copy(dAtA[i:], keysForTickers[iNdEx])
			i = encodeVarintRocksdb(dAtA, i, uint64(len(keysForTickers[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRocksdb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRocksdb(dAtA []byte, offset int, v uint64) int {
	offset -= sovRocksdb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SSTableMetricsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovRocksdb(uint64(m.Level))
	}
	if m.TableID != 0 {
		n += 1 + sovRocksdb(uint64(m.TableID))
	}
	l = len(m.TableInfoJSON)
	if l > 0 {
		n += 1 + l + sovRocksdb(uint64(l))
	}
	if m.ApproximateSpanBytes != 0 {
		n += 1 + sovRocksdb(uint64(m.ApproximateSpanBytes))
	}
	return n
}

func (m *StorageInternalKeysMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovRocksdb(uint64(m.Level))
	}
	if m.SnapshotPinnedKeys != 0 {
		n += 1 + sovRocksdb(uint64(m.SnapshotPinnedKeys))
	}
	if m.SnapshotPinnedKeysBytes != 0 {
		n += 1 + sovRocksdb(uint64(m.SnapshotPinnedKeysBytes))
	}
	if m.PointKeyDeleteCount != 0 {
		n += 1 + sovRocksdb(uint64(m.PointKeyDeleteCount))
	}
	if m.PointKeySetCount != 0 {
		n += 1 + sovRocksdb(uint64(m.PointKeySetCount))
	}
	if m.RangeDeleteCount != 0 {
		n += 1 + sovRocksdb(uint64(m.RangeDeleteCount))
	}
	if m.RangeKeySetCount != 0 {
		n += 1 + sovRocksdb(uint64(m.RangeKeySetCount))
	}
	if m.RangeKeyDeleteCount != 0 {
		n += 1 + sovRocksdb(uint64(m.RangeKeyDeleteCount))
	}
	if m.PointKeyDeleteIsLatestCount != 0 {
		n += 1 + sovRocksdb(uint64(m.PointKeyDeleteIsLatestCount))
	}
	if m.PointKeySetIsLatestCount != 0 {
		n += 1 + sovRocksdb(uint64(m.PointKeySetIsLatestCount))
	}
	return n
}

func (m *SSTUserProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovRocksdb(uint64(l))
	}
	if m.TsMin != nil {
		l = m.TsMin.Size()
		n += 1 + l + sovRocksdb(uint64(l))
	}
	if m.TsMax != nil {
		l = m.TsMax.Size()
		n += 1 + l + sovRocksdb(uint64(l))
	}
	return n
}

func (m *SSTUserPropertiesCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sst) > 0 {
		for _, e := range m.Sst {
			l = e.Size()
			n += 1 + l + sovRocksdb(uint64(l))
		}
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovRocksdb(uint64(l))
	}
	return n
}

func (m *HistogramData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mean != 0 {
		n += 9
	}
	if m.P50 != 0 {
		n += 9
	}
	if m.P95 != 0 {
		n += 9
	}
	if m.P99 != 0 {
		n += 9
	}
	if m.Max != 0 {
		n += 9
	}
	if m.Count != 0 {
		n += 1 + sovRocksdb(uint64(m.Count))
	}
	if m.Sum != 0 {
		n += 1 + sovRocksdb(uint64(m.Sum))
	}
	return n
}

func (m *TickersAndHistograms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tickers) > 0 {
		for k, v := range m.Tickers {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRocksdb(uint64(len(k))) + 1 + sovRocksdb(uint64(v))
			n += mapEntrySize + 1 + sovRocksdb(uint64(mapEntrySize))
		}
	}
	if len(m.Histograms) > 0 {
		for k, v := range m.Histograms {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovRocksdb(uint64(len(k))) + 1 + l + sovRocksdb(uint64(l))
			n += mapEntrySize + 1 + sovRocksdb(uint64(mapEntrySize))
		}
	}
	return n
}

func sovRocksdb(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozRocksdb(x uint64) (n int) {
	return sovRocksdb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SSTableMetricsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRocksdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSTableMetricsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSTableMetricsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableInfoJSON", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRocksdb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRocksdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableInfoJSON = append(m.TableInfoJSON[:0], dAtA[iNdEx:postIndex]...)
			if m.TableInfoJSON == nil {
				m.TableInfoJSON = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproximateSpanBytes", wireType)
			}
			m.ApproximateSpanBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApproximateSpanBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRocksdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRocksdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageInternalKeysMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRocksdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageInternalKeysMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageInternalKeysMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotPinnedKeys", wireType)
			}
			m.SnapshotPinnedKeys = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotPinnedKeys |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotPinnedKeysBytes", wireType)
			}
			m.SnapshotPinnedKeysBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotPinnedKeysBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointKeyDeleteCount", wireType)
			}
			m.PointKeyDeleteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PointKeyDeleteCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointKeySetCount", wireType)
			}
			m.PointKeySetCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PointKeySetCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeDeleteCount", wireType)
			}
			m.RangeDeleteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeDeleteCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeKeySetCount", wireType)
			}
			m.RangeKeySetCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeKeySetCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeKeyDeleteCount", wireType)
			}
			m.RangeKeyDeleteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeKeyDeleteCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointKeyDeleteIsLatestCount", wireType)
			}
			m.PointKeyDeleteIsLatestCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PointKeyDeleteIsLatestCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointKeySetIsLatestCount", wireType)
			}
			m.PointKeySetIsLatestCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PointKeySetIsLatestCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRocksdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRocksdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSTUserProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRocksdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSTUserProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSTUserProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRocksdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRocksdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsMin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRocksdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRocksdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TsMin == nil {
				m.TsMin = &hlc.Timestamp{}
			}
			if err := m.TsMin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsMax", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRocksdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRocksdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TsMax == nil {
				m.TsMax = &hlc.Timestamp{}
			}
			if err := m.TsMax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRocksdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRocksdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSTUserPropertiesCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRocksdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSTUserPropertiesCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSTUserPropertiesCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRocksdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRocksdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sst = append(m.Sst, SSTUserProperties{})
			if err := m.Sst[len(m.Sst)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRocksdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRocksdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRocksdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRocksdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistogramData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRocksdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistogramData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistogramData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mean", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Mean = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field P50", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.P50 = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field P95", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.P95 = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field P99", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.P99 = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Max = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			m.Sum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRocksdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRocksdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TickersAndHistograms) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRocksdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TickersAndHistograms: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TickersAndHistograms: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tickers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRocksdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRocksdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tickers == nil {
				m.Tickers = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRocksdb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRocksdb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRocksdb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRocksdb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRocksdb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRocksdb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRocksdb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tickers[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Histograms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRocksdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRocksdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Histograms == nil {
				m.Histograms = make(map[string]HistogramData)
			}
			var mapkey string
			mapvalue := &HistogramData{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRocksdb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRocksdb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRocksdb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRocksdb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRocksdb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRocksdb
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRocksdb
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &HistogramData{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRocksdb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRocksdb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Histograms[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRocksdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRocksdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRocksdb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRocksdb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRocksdb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRocksdb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRocksdb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRocksdb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRocksdb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRocksdb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRocksdb = fmt.Errorf("proto: unexpected end of group")
)

