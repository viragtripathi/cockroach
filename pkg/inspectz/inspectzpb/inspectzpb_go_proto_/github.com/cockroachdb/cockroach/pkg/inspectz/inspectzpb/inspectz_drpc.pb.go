// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// source: inspectz/inspectzpb/inspectz.proto

package inspectzpb

import (
	bytes "bytes"
	context "context"
	kvflowinspectpb "github.com/cockroachdb/cockroach/pkg/kv/kvserver/kvflowcontrol/kvflowinspectpb"
	storelivenesspb "github.com/cockroachdb/cockroach/pkg/kv/kvserver/storeliveness/storelivenesspb"
	errors "github.com/cockroachdb/errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_inspectz_inspectzpb_inspectz_proto struct{}

func (drpcEncoding_File_inspectz_inspectzpb_inspectz_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_inspectz_inspectzpb_inspectz_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_inspectz_inspectzpb_inspectz_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_inspectz_inspectzpb_inspectz_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCInspectzClient interface {
	DRPCConn() drpc.Conn

	KVFlowControllerV2(ctx context.Context, in *kvflowinspectpb.ControllerRequest) (*kvflowinspectpb.ControllerResponse, error)
	KVFlowHandlesV2(ctx context.Context, in *kvflowinspectpb.HandlesRequest) (*kvflowinspectpb.HandlesResponse, error)
	StoreLivenessSupportFrom(ctx context.Context, in *storelivenesspb.InspectStoreLivenessRequest) (*storelivenesspb.InspectStoreLivenessResponse, error)
	StoreLivenessSupportFor(ctx context.Context, in *storelivenesspb.InspectStoreLivenessRequest) (*storelivenesspb.InspectStoreLivenessResponse, error)
}

type drpcInspectzClient struct {
	cc drpc.Conn
}

func NewDRPCInspectzClient(cc drpc.Conn) DRPCInspectzClient {
	return &drpcInspectzClient{cc}
}

func (c *drpcInspectzClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcInspectzClient) KVFlowControllerV2(ctx context.Context, in *kvflowinspectpb.ControllerRequest) (*kvflowinspectpb.ControllerResponse, error) {
	out := new(kvflowinspectpb.ControllerResponse)
	err := c.cc.Invoke(ctx, "/cockroach.inspectz.inspectzpb.Inspectz/KVFlowControllerV2", drpcEncoding_File_inspectz_inspectzpb_inspectz_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInspectzClient) KVFlowHandlesV2(ctx context.Context, in *kvflowinspectpb.HandlesRequest) (*kvflowinspectpb.HandlesResponse, error) {
	out := new(kvflowinspectpb.HandlesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.inspectz.inspectzpb.Inspectz/KVFlowHandlesV2", drpcEncoding_File_inspectz_inspectzpb_inspectz_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInspectzClient) StoreLivenessSupportFrom(ctx context.Context, in *storelivenesspb.InspectStoreLivenessRequest) (*storelivenesspb.InspectStoreLivenessResponse, error) {
	out := new(storelivenesspb.InspectStoreLivenessResponse)
	err := c.cc.Invoke(ctx, "/cockroach.inspectz.inspectzpb.Inspectz/StoreLivenessSupportFrom", drpcEncoding_File_inspectz_inspectzpb_inspectz_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInspectzClient) StoreLivenessSupportFor(ctx context.Context, in *storelivenesspb.InspectStoreLivenessRequest) (*storelivenesspb.InspectStoreLivenessResponse, error) {
	out := new(storelivenesspb.InspectStoreLivenessResponse)
	err := c.cc.Invoke(ctx, "/cockroach.inspectz.inspectzpb.Inspectz/StoreLivenessSupportFor", drpcEncoding_File_inspectz_inspectzpb_inspectz_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCInspectzServer interface {
	KVFlowControllerV2(context.Context, *kvflowinspectpb.ControllerRequest) (*kvflowinspectpb.ControllerResponse, error)
	KVFlowHandlesV2(context.Context, *kvflowinspectpb.HandlesRequest) (*kvflowinspectpb.HandlesResponse, error)
	StoreLivenessSupportFrom(context.Context, *storelivenesspb.InspectStoreLivenessRequest) (*storelivenesspb.InspectStoreLivenessResponse, error)
	StoreLivenessSupportFor(context.Context, *storelivenesspb.InspectStoreLivenessRequest) (*storelivenesspb.InspectStoreLivenessResponse, error)
}

type DRPCInspectzUnimplementedServer struct{}

func (s *DRPCInspectzUnimplementedServer) KVFlowControllerV2(context.Context, *kvflowinspectpb.ControllerRequest) (*kvflowinspectpb.ControllerResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInspectzUnimplementedServer) KVFlowHandlesV2(context.Context, *kvflowinspectpb.HandlesRequest) (*kvflowinspectpb.HandlesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInspectzUnimplementedServer) StoreLivenessSupportFrom(context.Context, *storelivenesspb.InspectStoreLivenessRequest) (*storelivenesspb.InspectStoreLivenessResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInspectzUnimplementedServer) StoreLivenessSupportFor(context.Context, *storelivenesspb.InspectStoreLivenessRequest) (*storelivenesspb.InspectStoreLivenessResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCInspectzDescription struct{}

func (DRPCInspectzDescription) NumMethods() int { return 4 }

func (DRPCInspectzDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.inspectz.inspectzpb.Inspectz/KVFlowControllerV2", drpcEncoding_File_inspectz_inspectzpb_inspectz_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInspectzServer).
					KVFlowControllerV2(
						ctx,
						in1.(*kvflowinspectpb.ControllerRequest),
					)
			}, DRPCInspectzServer.KVFlowControllerV2, true
	case 1:
		return "/cockroach.inspectz.inspectzpb.Inspectz/KVFlowHandlesV2", drpcEncoding_File_inspectz_inspectzpb_inspectz_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInspectzServer).
					KVFlowHandlesV2(
						ctx,
						in1.(*kvflowinspectpb.HandlesRequest),
					)
			}, DRPCInspectzServer.KVFlowHandlesV2, true
	case 2:
		return "/cockroach.inspectz.inspectzpb.Inspectz/StoreLivenessSupportFrom", drpcEncoding_File_inspectz_inspectzpb_inspectz_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInspectzServer).
					StoreLivenessSupportFrom(
						ctx,
						in1.(*storelivenesspb.InspectStoreLivenessRequest),
					)
			}, DRPCInspectzServer.StoreLivenessSupportFrom, true
	case 3:
		return "/cockroach.inspectz.inspectzpb.Inspectz/StoreLivenessSupportFor", drpcEncoding_File_inspectz_inspectzpb_inspectz_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInspectzServer).
					StoreLivenessSupportFor(
						ctx,
						in1.(*storelivenesspb.InspectStoreLivenessRequest),
					)
			}, DRPCInspectzServer.StoreLivenessSupportFor, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterInspectz(mux drpc.Mux, impl DRPCInspectzServer) error {
	return mux.Register(impl, DRPCInspectzDescription{})
}

type DRPCInspectz_KVFlowControllerV2Stream interface {
	drpc.Stream
	SendAndClose(*kvflowinspectpb.ControllerResponse) error
}

type RPCInspectz_KVFlowControllerV2Stream interface {
	Context() context.Context
	SendAndClose(*kvflowinspectpb.ControllerResponse) error
}

type drpcInspectz_KVFlowControllerV2Stream struct {
	drpc.Stream
}

func (x *drpcInspectz_KVFlowControllerV2Stream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInspectz_KVFlowControllerV2Stream) SendAndClose(m *kvflowinspectpb.ControllerResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_inspectz_inspectzpb_inspectz_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInspectz_KVFlowHandlesV2Stream interface {
	drpc.Stream
	SendAndClose(*kvflowinspectpb.HandlesResponse) error
}

type RPCInspectz_KVFlowHandlesV2Stream interface {
	Context() context.Context
	SendAndClose(*kvflowinspectpb.HandlesResponse) error
}

type drpcInspectz_KVFlowHandlesV2Stream struct {
	drpc.Stream
}

func (x *drpcInspectz_KVFlowHandlesV2Stream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInspectz_KVFlowHandlesV2Stream) SendAndClose(m *kvflowinspectpb.HandlesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_inspectz_inspectzpb_inspectz_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInspectz_StoreLivenessSupportFromStream interface {
	drpc.Stream
	SendAndClose(*storelivenesspb.InspectStoreLivenessResponse) error
}

type RPCInspectz_StoreLivenessSupportFromStream interface {
	Context() context.Context
	SendAndClose(*storelivenesspb.InspectStoreLivenessResponse) error
}

type drpcInspectz_StoreLivenessSupportFromStream struct {
	drpc.Stream
}

func (x *drpcInspectz_StoreLivenessSupportFromStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInspectz_StoreLivenessSupportFromStream) SendAndClose(m *storelivenesspb.InspectStoreLivenessResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_inspectz_inspectzpb_inspectz_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInspectz_StoreLivenessSupportForStream interface {
	drpc.Stream
	SendAndClose(*storelivenesspb.InspectStoreLivenessResponse) error
}

type RPCInspectz_StoreLivenessSupportForStream interface {
	Context() context.Context
	SendAndClose(*storelivenesspb.InspectStoreLivenessResponse) error
}

type drpcInspectz_StoreLivenessSupportForStream struct {
	drpc.Stream
}

func (x *drpcInspectz_StoreLivenessSupportForStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInspectz_StoreLivenessSupportForStream) SendAndClose(m *storelivenesspb.InspectStoreLivenessResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_inspectz_inspectzpb_inspectz_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type RPCInspectzClient interface {
	KVFlowControllerV2(ctx context.Context, in *kvflowinspectpb.ControllerRequest) (*kvflowinspectpb.ControllerResponse, error)
	KVFlowHandlesV2(ctx context.Context, in *kvflowinspectpb.HandlesRequest) (*kvflowinspectpb.HandlesResponse, error)
	StoreLivenessSupportFrom(ctx context.Context, in *storelivenesspb.InspectStoreLivenessRequest) (*storelivenesspb.InspectStoreLivenessResponse, error)
	StoreLivenessSupportFor(ctx context.Context, in *storelivenesspb.InspectStoreLivenessRequest) (*storelivenesspb.InspectStoreLivenessResponse, error)
}

// Inspectz gRPC -> RPC adapter
type grpcInspectzClientAdapter inspectzClient

func NewGRPCInspectzClientAdapter(conn *grpc.ClientConn) RPCInspectzClient {
	return (*grpcInspectzClientAdapter)(&inspectzClient{conn})
}

func (a *grpcInspectzClientAdapter) KVFlowControllerV2(ctx context.Context, in *kvflowinspectpb.ControllerRequest) (*kvflowinspectpb.ControllerResponse, error) {
	return (*inspectzClient)(a).KVFlowControllerV2(ctx, in)
}

func (a *grpcInspectzClientAdapter) KVFlowHandlesV2(ctx context.Context, in *kvflowinspectpb.HandlesRequest) (*kvflowinspectpb.HandlesResponse, error) {
	return (*inspectzClient)(a).KVFlowHandlesV2(ctx, in)
}

func (a *grpcInspectzClientAdapter) StoreLivenessSupportFrom(ctx context.Context, in *storelivenesspb.InspectStoreLivenessRequest) (*storelivenesspb.InspectStoreLivenessResponse, error) {
	return (*inspectzClient)(a).StoreLivenessSupportFrom(ctx, in)
}

func (a *grpcInspectzClientAdapter) StoreLivenessSupportFor(ctx context.Context, in *storelivenesspb.InspectStoreLivenessRequest) (*storelivenesspb.InspectStoreLivenessResponse, error) {
	return (*inspectzClient)(a).StoreLivenessSupportFor(ctx, in)
}

// compile-time assertion
var _ RPCInspectzClient = (*grpcInspectzClientAdapter)(nil)

// Inspectz DRPC -> RPC adapter
type drpcInspectzClientAdapter drpcInspectzClient

func NewDRPCInspectzClientAdapter(conn drpc.Conn) RPCInspectzClient {
	return (*drpcInspectzClientAdapter)(&drpcInspectzClient{conn})
}

func (a *drpcInspectzClientAdapter) KVFlowControllerV2(ctx context.Context, in *kvflowinspectpb.ControllerRequest) (*kvflowinspectpb.ControllerResponse, error) {
	return (*drpcInspectzClient)(a).KVFlowControllerV2(ctx, in)
}

func (a *drpcInspectzClientAdapter) KVFlowHandlesV2(ctx context.Context, in *kvflowinspectpb.HandlesRequest) (*kvflowinspectpb.HandlesResponse, error) {
	return (*drpcInspectzClient)(a).KVFlowHandlesV2(ctx, in)
}

func (a *drpcInspectzClientAdapter) StoreLivenessSupportFrom(ctx context.Context, in *storelivenesspb.InspectStoreLivenessRequest) (*storelivenesspb.InspectStoreLivenessResponse, error) {
	return (*drpcInspectzClient)(a).StoreLivenessSupportFrom(ctx, in)
}

func (a *drpcInspectzClientAdapter) StoreLivenessSupportFor(ctx context.Context, in *storelivenesspb.InspectStoreLivenessRequest) (*storelivenesspb.InspectStoreLivenessResponse, error) {
	return (*drpcInspectzClient)(a).StoreLivenessSupportFor(ctx, in)
}

// compile-time assertion
var _ RPCInspectzClient = (*drpcInspectzClientAdapter)(nil)
