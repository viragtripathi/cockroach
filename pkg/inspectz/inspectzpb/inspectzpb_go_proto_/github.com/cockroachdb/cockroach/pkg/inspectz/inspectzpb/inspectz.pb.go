// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inspectz/inspectzpb/inspectz.proto

package inspectzpb

import (
	context "context"
	fmt "fmt"
	kvflowinspectpb "github.com/cockroachdb/cockroach/pkg/kv/kvserver/kvflowcontrol/kvflowinspectpb"
	storelivenesspb "github.com/cockroachdb/cockroach/pkg/kv/kvserver/storeliveness/storelivenesspb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("inspectz/inspectzpb/inspectz.proto", fileDescriptor_060b40a990bf0348)
}

var fileDescriptor_060b40a990bf0348 = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x93, 0xbf, 0x4e, 0x3a, 0x41,
	0x10, 0xc7, 0x6f, 0x8b, 0xdf, 0x2f, 0xe6, 0x1a, 0x93, 0x6d, 0x34, 0x24, 0x6e, 0xc1, 0x03, 0xec,
	0x26, 0x58, 0x68, 0x63, 0x23, 0x06, 0x35, 0x5a, 0xa8, 0x24, 0x14, 0x74, 0xdc, 0x32, 0xc2, 0xe5,
	0x8e, 0x9b, 0x75, 0x77, 0x39, 0x12, 0x9f, 0xc2, 0x27, 0xb0, 0xf5, 0x35, 0xb4, 0xa3, 0xa4, 0xa4,
	0xb0, 0xd0, 0xe3, 0x45, 0x0c, 0xde, 0x3f, 0x8f, 0x60, 0x23, 0x36, 0x76, 0x33, 0xd9, 0x99, 0xef,
	0x7c, 0x66, 0xbf, 0x19, 0xb7, 0xee, 0x47, 0x46, 0x81, 0xb4, 0xf7, 0x22, 0x0f, 0x94, 0x57, 0x84,
	0x5c, 0x69, 0xb4, 0x48, 0xf7, 0x24, 0xca, 0x40, 0x63, 0x4f, 0x0e, 0x79, 0xf1, 0x52, 0x56, 0xd7,
	0x8e, 0x82, 0x58, 0x04, 0xb1, 0x01, 0x1d, 0x83, 0x16, 0x41, 0x7c, 0x1b, 0xe2, 0x44, 0x62, 0x64,
	0x35, 0x86, 0x59, 0x96, 0xd5, 0x2a, 0xaf, 0x9a, 0xa7, 0xea, 0xb5, 0x83, 0xaf, 0xed, 0xc6, 0xa2,
	0x86, 0xd0, 0x8f, 0x21, 0x02, 0x63, 0xaa, 0x99, 0xf2, 0xc4, 0xb2, 0xc8, 0x97, 0x90, 0x36, 0x36,
	0x5e, 0xff, 0xb9, 0x5b, 0xe7, 0x19, 0x06, 0x7d, 0x22, 0x2e, 0xbd, 0xe8, 0xb4, 0x42, 0x9c, 0x34,
	0xd3, 0xd9, 0x21, 0xe8, 0x4e, 0x83, 0xb6, 0x78, 0xc9, 0x1e, 0xc4, 0x3c, 0x9f, 0xc3, 0x2b, 0x98,
	0x7c, 0x05, 0x93, 0x97, 0x12, 0x37, 0x70, 0x37, 0x06, 0x63, 0x6b, 0xa7, 0x1b, 0xeb, 0x18, 0x85,
	0x91, 0x81, 0xba, 0x43, 0x1f, 0x89, 0xbb, 0x9d, 0x92, 0x9e, 0xf5, 0xa2, 0x7e, 0x08, 0xa6, 0xd3,
	0xa0, 0xcd, 0x1f, 0xc9, 0x67, 0xfd, 0x39, 0xe3, 0xc9, 0x66, 0x22, 0x05, 0xe0, 0x0b, 0x71, 0x77,
	0xdb, 0xcb, 0x9f, 0xbf, 0xcc, 0x7e, 0xbe, 0x3d, 0x56, 0x0a, 0xb5, 0x6d, 0x69, 0x1c, 0xd1, 0xab,
	0x6f, 0x86, 0x54, 0xac, 0xe2, 0x2b, 0xc6, 0xf1, 0xcc, 0xa6, 0x8a, 0x6a, 0x8e, 0x7d, 0xfd, 0x8b,
	0x8a, 0xc5, 0x0e, 0xcf, 0xc4, 0xdd, 0x59, 0xbb, 0x03, 0xea, 0x3f, 0xb2, 0xc2, 0x71, 0x77, 0xfa,
	0xce, 0x9c, 0x69, 0xc2, 0xc8, 0x2c, 0x61, 0x64, 0x9e, 0x30, 0xf2, 0x96, 0x30, 0xf2, 0xb0, 0x60,
	0xce, 0x6c, 0xc1, 0x9c, 0xf9, 0x82, 0x39, 0xdd, 0xc3, 0x81, 0x6f, 0x87, 0x63, 0x8f, 0x4b, 0x1c,
	0x89, 0x02, 0xa0, 0xef, 0x95, 0xb1, 0x50, 0xc1, 0x40, 0xac, 0x39, 0x70, 0xef, 0xff, 0xe7, 0x05,
	0xed, 0x7f, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x20, 0x3f, 0xb5, 0xfe, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InspectzClient is the client API for Inspectz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InspectzClient interface {
	// KVFlowController exposes in-memory state of the node-level
	// rac2.StreamTokenCounterProvider. It's housed under
	// /inspectz/v2/kvflowcontroller.
	KVFlowControllerV2(ctx context.Context, in *kvflowinspectpb.ControllerRequest, opts ...grpc.CallOption) (*kvflowinspectpb.ControllerResponse, error)
	// KVFlowHandles exposes in-memory state of all rac2.RangeController(s). It's
	// housed under /inspectz/v2/kvflowhandles.
	KVFlowHandlesV2(ctx context.Context, in *kvflowinspectpb.HandlesRequest, opts ...grpc.CallOption) (*kvflowinspectpb.HandlesResponse, error)
	// StoreLivenessSupportFrom exposes the in-memory state of all stores'
	// storeliveness.SupportManagers' views of support provided from other stores.
	// It's housed under /inspectz/storeliveness/supportFrom.
	StoreLivenessSupportFrom(ctx context.Context, in *storelivenesspb.InspectStoreLivenessRequest, opts ...grpc.CallOption) (*storelivenesspb.InspectStoreLivenessResponse, error)
	// StoreLivenessSupportFor exposes the in-memory state of all stores'
	// storeliveness.SupportManagers' views of support provided for other stores.
	// It's housed under /inspectz/storeliveness/supportFor.
	StoreLivenessSupportFor(ctx context.Context, in *storelivenesspb.InspectStoreLivenessRequest, opts ...grpc.CallOption) (*storelivenesspb.InspectStoreLivenessResponse, error)
}

type inspectzClient struct {
	cc *grpc.ClientConn
}

func NewInspectzClient(cc *grpc.ClientConn) InspectzClient {
	return &inspectzClient{cc}
}

func (c *inspectzClient) KVFlowControllerV2(ctx context.Context, in *kvflowinspectpb.ControllerRequest, opts ...grpc.CallOption) (*kvflowinspectpb.ControllerResponse, error) {
	out := new(kvflowinspectpb.ControllerResponse)
	err := c.cc.Invoke(ctx, "/cockroach.inspectz.inspectzpb.Inspectz/KVFlowControllerV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectzClient) KVFlowHandlesV2(ctx context.Context, in *kvflowinspectpb.HandlesRequest, opts ...grpc.CallOption) (*kvflowinspectpb.HandlesResponse, error) {
	out := new(kvflowinspectpb.HandlesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.inspectz.inspectzpb.Inspectz/KVFlowHandlesV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectzClient) StoreLivenessSupportFrom(ctx context.Context, in *storelivenesspb.InspectStoreLivenessRequest, opts ...grpc.CallOption) (*storelivenesspb.InspectStoreLivenessResponse, error) {
	out := new(storelivenesspb.InspectStoreLivenessResponse)
	err := c.cc.Invoke(ctx, "/cockroach.inspectz.inspectzpb.Inspectz/StoreLivenessSupportFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectzClient) StoreLivenessSupportFor(ctx context.Context, in *storelivenesspb.InspectStoreLivenessRequest, opts ...grpc.CallOption) (*storelivenesspb.InspectStoreLivenessResponse, error) {
	out := new(storelivenesspb.InspectStoreLivenessResponse)
	err := c.cc.Invoke(ctx, "/cockroach.inspectz.inspectzpb.Inspectz/StoreLivenessSupportFor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InspectzServer is the server API for Inspectz service.
type InspectzServer interface {
	// KVFlowController exposes in-memory state of the node-level
	// rac2.StreamTokenCounterProvider. It's housed under
	// /inspectz/v2/kvflowcontroller.
	KVFlowControllerV2(context.Context, *kvflowinspectpb.ControllerRequest) (*kvflowinspectpb.ControllerResponse, error)
	// KVFlowHandles exposes in-memory state of all rac2.RangeController(s). It's
	// housed under /inspectz/v2/kvflowhandles.
	KVFlowHandlesV2(context.Context, *kvflowinspectpb.HandlesRequest) (*kvflowinspectpb.HandlesResponse, error)
	// StoreLivenessSupportFrom exposes the in-memory state of all stores'
	// storeliveness.SupportManagers' views of support provided from other stores.
	// It's housed under /inspectz/storeliveness/supportFrom.
	StoreLivenessSupportFrom(context.Context, *storelivenesspb.InspectStoreLivenessRequest) (*storelivenesspb.InspectStoreLivenessResponse, error)
	// StoreLivenessSupportFor exposes the in-memory state of all stores'
	// storeliveness.SupportManagers' views of support provided for other stores.
	// It's housed under /inspectz/storeliveness/supportFor.
	StoreLivenessSupportFor(context.Context, *storelivenesspb.InspectStoreLivenessRequest) (*storelivenesspb.InspectStoreLivenessResponse, error)
}

// UnimplementedInspectzServer can be embedded to have forward compatible implementations.
type UnimplementedInspectzServer struct {
}

func (*UnimplementedInspectzServer) KVFlowControllerV2(ctx context.Context, req *kvflowinspectpb.ControllerRequest) (*kvflowinspectpb.ControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVFlowControllerV2 not implemented")
}
func (*UnimplementedInspectzServer) KVFlowHandlesV2(ctx context.Context, req *kvflowinspectpb.HandlesRequest) (*kvflowinspectpb.HandlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVFlowHandlesV2 not implemented")
}
func (*UnimplementedInspectzServer) StoreLivenessSupportFrom(ctx context.Context, req *storelivenesspb.InspectStoreLivenessRequest) (*storelivenesspb.InspectStoreLivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreLivenessSupportFrom not implemented")
}
func (*UnimplementedInspectzServer) StoreLivenessSupportFor(ctx context.Context, req *storelivenesspb.InspectStoreLivenessRequest) (*storelivenesspb.InspectStoreLivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreLivenessSupportFor not implemented")
}

func RegisterInspectzServer(s *grpc.Server, srv InspectzServer) {
	s.RegisterService(&_Inspectz_serviceDesc, srv)
}

func _Inspectz_KVFlowControllerV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kvflowinspectpb.ControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectzServer).KVFlowControllerV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.inspectz.inspectzpb.Inspectz/KVFlowControllerV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectzServer).KVFlowControllerV2(ctx, req.(*kvflowinspectpb.ControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inspectz_KVFlowHandlesV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kvflowinspectpb.HandlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectzServer).KVFlowHandlesV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.inspectz.inspectzpb.Inspectz/KVFlowHandlesV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectzServer).KVFlowHandlesV2(ctx, req.(*kvflowinspectpb.HandlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inspectz_StoreLivenessSupportFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storelivenesspb.InspectStoreLivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectzServer).StoreLivenessSupportFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.inspectz.inspectzpb.Inspectz/StoreLivenessSupportFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectzServer).StoreLivenessSupportFrom(ctx, req.(*storelivenesspb.InspectStoreLivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inspectz_StoreLivenessSupportFor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storelivenesspb.InspectStoreLivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectzServer).StoreLivenessSupportFor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.inspectz.inspectzpb.Inspectz/StoreLivenessSupportFor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectzServer).StoreLivenessSupportFor(ctx, req.(*storelivenesspb.InspectStoreLivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Inspectz_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.inspectz.inspectzpb.Inspectz",
	HandlerType: (*InspectzServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KVFlowControllerV2",
			Handler:    _Inspectz_KVFlowControllerV2_Handler,
		},
		{
			MethodName: "KVFlowHandlesV2",
			Handler:    _Inspectz_KVFlowHandlesV2_Handler,
		},
		{
			MethodName: "StoreLivenessSupportFrom",
			Handler:    _Inspectz_StoreLivenessSupportFrom_Handler,
		},
		{
			MethodName: "StoreLivenessSupportFor",
			Handler:    _Inspectz_StoreLivenessSupportFor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inspectz/inspectzpb/inspectz.proto",
}

