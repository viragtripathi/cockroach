// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc/rpcpb/rpc.proto

package rpcpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ConnectionClass is the identifier of a group of RPC client sessions that are
// allowed to share an underlying TCP connection; RPC sessions with different
// connection classes are guaranteed to use separate gRPC client connections.
//
// RPC sessions that share a connection class are arbitrated using the gRPC flow
// control logic, see google.golang.org/grpc/internal/transport. The lack of
// support of prioritization in the current gRPC implementation is the reason
// why we are separating different priority flows across separate TCP
// connections. Future gRPC improvements may enable further simplification here.
// See https://github.com/grpc/grpc-go/issues/1448 for progress on gRPC's
// adoption of HTTP2 priorities.
type ConnectionClass int32

const (
	// DEFAULT is the default ConnectionClass used for most client traffic.
	ConnectionClass_DEFAULT ConnectionClass = 0
	// SYSTEM is the ConnectionClass used for system traffic.
	ConnectionClass_SYSTEM ConnectionClass = 1
	// RANGEFEED is the ConnectionClass used for rangefeeds.
	ConnectionClass_RANGEFEED ConnectionClass = 2
	// RAFT is the ConnectionClass used for raft traffic.
	ConnectionClass_RAFT ConnectionClass = 3
	// NEXT is greater than all the known connection classes above. This is a
	// sentinel value that must not be used except for estimating the number of
	// valid connection classes, e.g. in code that iterates all possible values.
	//
	// On adding new classes, NEXT must be updated accordingly.
	ConnectionClass_NEXT ConnectionClass = 4
)

var ConnectionClass_name = map[int32]string{
	0: "DEFAULT",
	1: "SYSTEM",
	2: "RANGEFEED",
	3: "RAFT",
	4: "NEXT",
}

var ConnectionClass_value = map[string]int32{
	"DEFAULT":   0,
	"SYSTEM":    1,
	"RANGEFEED": 2,
	"RAFT":      3,
	"NEXT":      4,
}

func (ConnectionClass) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_79e535b82f8156ab, []int{0}
}

func init() {
	proto.RegisterEnum("cockroach.rpc.ConnectionClass", ConnectionClass_name, ConnectionClass_value)
}

func init() { proto.RegisterFile("rpc/rpcpb/rpc.proto", fileDescriptor_79e535b82f8156ab) }

var fileDescriptor_79e535b82f8156ab = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x2a, 0x48, 0xd6,
	0x2f, 0x2a, 0x48, 0x2e, 0x48, 0x02, 0x91, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xbc, 0xc9,
	0xf9, 0xc9, 0xd9, 0x45, 0xf9, 0x89, 0xc9, 0x19, 0x7a, 0x45, 0x05, 0xc9, 0x52, 0x22, 0xe9, 0xf9,
	0xe9, 0xf9, 0x60, 0x19, 0x7d, 0x10, 0x0b, 0xa2, 0x48, 0x2b, 0x98, 0x8b, 0xdf, 0x39, 0x3f, 0x2f,
	0x2f, 0x35, 0xb9, 0x24, 0x33, 0x3f, 0xcf, 0x39, 0x27, 0xb1, 0xb8, 0x58, 0x88, 0x9b, 0x8b, 0xdd,
	0xc5, 0xd5, 0xcd, 0x31, 0xd4, 0x27, 0x44, 0x80, 0x41, 0x88, 0x8b, 0x8b, 0x2d, 0x38, 0x32, 0x38,
	0xc4, 0xd5, 0x57, 0x80, 0x51, 0x88, 0x97, 0x8b, 0x33, 0xc8, 0xd1, 0xcf, 0xdd, 0xd5, 0xcd, 0xd5,
	0xd5, 0x45, 0x80, 0x49, 0x88, 0x83, 0x8b, 0x25, 0xc8, 0xd1, 0x2d, 0x44, 0x80, 0x19, 0xc4, 0xf2,
	0x73, 0x8d, 0x08, 0x11, 0x60, 0x91, 0x62, 0x59, 0xb1, 0x44, 0x8e, 0xc1, 0x29, 0xe0, 0xc4, 0x43,
	0x39, 0x86, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0xbc, 0xf1, 0x48, 0x8e, 0xf1, 0xc1,
	0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21,
	0x4a, 0x2f, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x1f, 0xee, 0xcc, 0x94,
	0x24, 0x04, 0x5b, 0xbf, 0x20, 0x3b, 0x5d, 0x1f, 0xee, 0xab, 0x24, 0x36, 0xb0, 0x6b, 0x8d, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x5a, 0xa6, 0x52, 0xe9, 0x00, 0x00, 0x00,
}

