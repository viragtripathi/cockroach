// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// source: rpc/heartbeat.proto

package rpc

import (
	bytes "bytes"
	context "context"
	errors "github.com/cockroachdb/errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_rpc_heartbeat_proto struct{}

func (drpcEncoding_File_rpc_heartbeat_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_rpc_heartbeat_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_rpc_heartbeat_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_rpc_heartbeat_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCHeartbeatClient interface {
	DRPCConn() drpc.Conn

	Ping(ctx context.Context, in *PingRequest) (*PingResponse, error)
}

type drpcHeartbeatClient struct {
	cc drpc.Conn
}

func NewDRPCHeartbeatClient(cc drpc.Conn) DRPCHeartbeatClient {
	return &drpcHeartbeatClient{cc}
}

func (c *drpcHeartbeatClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcHeartbeatClient) Ping(ctx context.Context, in *PingRequest) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/cockroach.rpc.Heartbeat/Ping", drpcEncoding_File_rpc_heartbeat_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCHeartbeatServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

type DRPCHeartbeatUnimplementedServer struct{}

func (s *DRPCHeartbeatUnimplementedServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCHeartbeatDescription struct{}

func (DRPCHeartbeatDescription) NumMethods() int { return 1 }

func (DRPCHeartbeatDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.rpc.Heartbeat/Ping", drpcEncoding_File_rpc_heartbeat_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCHeartbeatServer).
					Ping(
						ctx,
						in1.(*PingRequest),
					)
			}, DRPCHeartbeatServer.Ping, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterHeartbeat(mux drpc.Mux, impl DRPCHeartbeatServer) error {
	return mux.Register(impl, DRPCHeartbeatDescription{})
}

type DRPCHeartbeat_PingStream interface {
	drpc.Stream
	SendAndClose(*PingResponse) error
}

type RPCHeartbeat_PingStream interface {
	Context() context.Context
	SendAndClose(*PingResponse) error
}

type drpcHeartbeat_PingStream struct {
	drpc.Stream
}

func (x *drpcHeartbeat_PingStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcHeartbeat_PingStream) SendAndClose(m *PingResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_rpc_heartbeat_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type RPCHeartbeatClient interface {
	Ping(ctx context.Context, in *PingRequest) (*PingResponse, error)
}

// Heartbeat gRPC -> RPC adapter
type grpcHeartbeatClientAdapter heartbeatClient

func NewGRPCHeartbeatClientAdapter(conn *grpc.ClientConn) RPCHeartbeatClient {
	return (*grpcHeartbeatClientAdapter)(&heartbeatClient{conn})
}

func (a *grpcHeartbeatClientAdapter) Ping(ctx context.Context, in *PingRequest) (*PingResponse, error) {
	return (*heartbeatClient)(a).Ping(ctx, in)
}

// compile-time assertion
var _ RPCHeartbeatClient = (*grpcHeartbeatClientAdapter)(nil)

// Heartbeat DRPC -> RPC adapter
type drpcHeartbeatClientAdapter drpcHeartbeatClient

func NewDRPCHeartbeatClientAdapter(conn drpc.Conn) RPCHeartbeatClient {
	return (*drpcHeartbeatClientAdapter)(&drpcHeartbeatClient{conn})
}

func (a *drpcHeartbeatClientAdapter) Ping(ctx context.Context, in *PingRequest) (*PingResponse, error) {
	return (*drpcHeartbeatClient)(a).Ping(ctx, in)
}

// compile-time assertion
var _ RPCHeartbeatClient = (*drpcHeartbeatClientAdapter)(nil)

type DRPCTestingHeartbeatStreamClient interface {
	DRPCConn() drpc.Conn

	PingStream(ctx context.Context) (DRPCTestingHeartbeatStream_PingStreamClient, error)
}

type drpcTestingHeartbeatStreamClient struct {
	cc drpc.Conn
}

func NewDRPCTestingHeartbeatStreamClient(cc drpc.Conn) DRPCTestingHeartbeatStreamClient {
	return &drpcTestingHeartbeatStreamClient{cc}
}

func (c *drpcTestingHeartbeatStreamClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcTestingHeartbeatStreamClient) PingStream(ctx context.Context) (DRPCTestingHeartbeatStream_PingStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.rpc.TestingHeartbeatStream/PingStream", drpcEncoding_File_rpc_heartbeat_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcTestingHeartbeatStream_PingStreamClient{stream}
	return x, nil
}

type DRPCTestingHeartbeatStream_PingStreamClient interface {
	drpc.Stream
	Send(*PingRequest) error
	Recv() (*PingResponse, error)
}

type RPCTestingHeartbeatStream_PingStreamClient interface {
	Context() context.Context
	CloseSend() error
	Send(*PingRequest) error
	Recv() (*PingResponse, error)
}

type drpcTestingHeartbeatStream_PingStreamClient struct {
	drpc.Stream
}

func (x *drpcTestingHeartbeatStream_PingStreamClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTestingHeartbeatStream_PingStreamClient) Send(m *PingRequest) error {
	return x.MsgSend(m, drpcEncoding_File_rpc_heartbeat_proto{})
}

func (x *drpcTestingHeartbeatStream_PingStreamClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_rpc_heartbeat_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcTestingHeartbeatStream_PingStreamClient) RecvMsg(m *PingResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_rpc_heartbeat_proto{})
}

type DRPCTestingHeartbeatStreamServer interface {
	PingStream(DRPCTestingHeartbeatStream_PingStreamStream) error
}

type DRPCTestingHeartbeatStreamUnimplementedServer struct{}

func (s *DRPCTestingHeartbeatStreamUnimplementedServer) PingStream(DRPCTestingHeartbeatStream_PingStreamStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCTestingHeartbeatStreamDescription struct{}

func (DRPCTestingHeartbeatStreamDescription) NumMethods() int { return 1 }

func (DRPCTestingHeartbeatStreamDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.rpc.TestingHeartbeatStream/PingStream", drpcEncoding_File_rpc_heartbeat_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCTestingHeartbeatStreamServer).
					PingStream(
						&drpcTestingHeartbeatStream_PingStreamStream{in1.(drpc.Stream)},
					)
			}, DRPCTestingHeartbeatStreamServer.PingStream, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterTestingHeartbeatStream(mux drpc.Mux, impl DRPCTestingHeartbeatStreamServer) error {
	return mux.Register(impl, DRPCTestingHeartbeatStreamDescription{})
}

type DRPCTestingHeartbeatStream_PingStreamStream interface {
	drpc.Stream
	Send(*PingResponse) error
	Recv() (*PingRequest, error)
	RecvMsg(interface{}) error
}

type RPCTestingHeartbeatStream_PingStreamStream interface {
	Context() context.Context
	Send(*PingResponse) error
	Recv() (*PingRequest, error)
	RecvMsg(interface{}) error
}

type drpcTestingHeartbeatStream_PingStreamStream struct {
	drpc.Stream
}

func (x *drpcTestingHeartbeatStream_PingStreamStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTestingHeartbeatStream_PingStreamStream) Send(m *PingResponse) error {
	return x.MsgSend(m, drpcEncoding_File_rpc_heartbeat_proto{})
}

func (x *drpcTestingHeartbeatStream_PingStreamStream) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.MsgRecv(m, drpcEncoding_File_rpc_heartbeat_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcTestingHeartbeatStream_PingStreamStream) RecvMsg(m interface{}) error {
	return x.MsgRecv(m, drpcEncoding_File_rpc_heartbeat_proto{})
}

type RPCTestingHeartbeatStreamClient interface {
	PingStream(ctx context.Context) (RPCTestingHeartbeatStream_PingStreamClient, error)
}

// TestingHeartbeatStream gRPC -> RPC adapter
type grpcTestingHeartbeatStreamClientAdapter testingHeartbeatStreamClient

func NewGRPCTestingHeartbeatStreamClientAdapter(conn *grpc.ClientConn) RPCTestingHeartbeatStreamClient {
	return (*grpcTestingHeartbeatStreamClientAdapter)(&testingHeartbeatStreamClient{conn})
}

func (a *grpcTestingHeartbeatStreamClientAdapter) PingStream(ctx context.Context) (RPCTestingHeartbeatStream_PingStreamClient, error) {
	return (*testingHeartbeatStreamClient)(a).PingStream(ctx)
}

// compile-time assertion
var _ RPCTestingHeartbeatStreamClient = (*grpcTestingHeartbeatStreamClientAdapter)(nil)

// TestingHeartbeatStream DRPC -> RPC adapter
type drpcTestingHeartbeatStreamClientAdapter drpcTestingHeartbeatStreamClient

func NewDRPCTestingHeartbeatStreamClientAdapter(conn drpc.Conn) RPCTestingHeartbeatStreamClient {
	return (*drpcTestingHeartbeatStreamClientAdapter)(&drpcTestingHeartbeatStreamClient{conn})
}

func (a *drpcTestingHeartbeatStreamClientAdapter) PingStream(ctx context.Context) (RPCTestingHeartbeatStream_PingStreamClient, error) {
	return (*drpcTestingHeartbeatStreamClient)(a).PingStream(ctx)
}

// compile-time assertion
var _ RPCTestingHeartbeatStreamClient = (*drpcTestingHeartbeatStreamClientAdapter)(nil)
