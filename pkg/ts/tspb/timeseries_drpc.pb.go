// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// source: ts/tspb/timeseries.proto

package tspb

import (
	bytes "bytes"
	context "context"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	errors "github.com/cockroachdb/errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_ts_tspb_timeseries_proto struct{}

func (drpcEncoding_File_ts_tspb_timeseries_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_ts_tspb_timeseries_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_ts_tspb_timeseries_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_ts_tspb_timeseries_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCTimeSeriesClient interface {
	DRPCConn() drpc.Conn

	Query(ctx context.Context, in *TimeSeriesQueryRequest) (*TimeSeriesQueryResponse, error)
	Dump(ctx context.Context, in *DumpRequest) (DRPCTimeSeries_DumpClient, error)
	DumpRaw(ctx context.Context, in *DumpRequest) (DRPCTimeSeries_DumpRawClient, error)
}

type drpcTimeSeriesClient struct {
	cc drpc.Conn
}

func NewDRPCTimeSeriesClient(cc drpc.Conn) DRPCTimeSeriesClient {
	return &drpcTimeSeriesClient{cc}
}

func (c *drpcTimeSeriesClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcTimeSeriesClient) Query(ctx context.Context, in *TimeSeriesQueryRequest) (*TimeSeriesQueryResponse, error) {
	out := new(TimeSeriesQueryResponse)
	err := c.cc.Invoke(ctx, "/cockroach.ts.tspb.TimeSeries/Query", drpcEncoding_File_ts_tspb_timeseries_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTimeSeriesClient) Dump(ctx context.Context, in *DumpRequest) (DRPCTimeSeries_DumpClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.ts.tspb.TimeSeries/Dump", drpcEncoding_File_ts_tspb_timeseries_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcTimeSeries_DumpClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_ts_tspb_timeseries_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCTimeSeries_DumpClient interface {
	drpc.Stream
	Recv() (*TimeSeriesData, error)
}

type RPCTimeSeries_DumpClient interface {
	Context() context.Context
	CloseSend() error
	Recv() (*TimeSeriesData, error)
}

type drpcTimeSeries_DumpClient struct {
	drpc.Stream
}

func (x *drpcTimeSeries_DumpClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTimeSeries_DumpClient) Recv() (*TimeSeriesData, error) {
	m := new(TimeSeriesData)
	if err := x.MsgRecv(m, drpcEncoding_File_ts_tspb_timeseries_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcTimeSeries_DumpClient) RecvMsg(m *TimeSeriesData) error {
	return x.MsgRecv(m, drpcEncoding_File_ts_tspb_timeseries_proto{})
}

func (c *drpcTimeSeriesClient) DumpRaw(ctx context.Context, in *DumpRequest) (DRPCTimeSeries_DumpRawClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.ts.tspb.TimeSeries/DumpRaw", drpcEncoding_File_ts_tspb_timeseries_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcTimeSeries_DumpRawClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_ts_tspb_timeseries_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCTimeSeries_DumpRawClient interface {
	drpc.Stream
	Recv() (*roachpb.KeyValue, error)
}

type RPCTimeSeries_DumpRawClient interface {
	Context() context.Context
	CloseSend() error
	Recv() (*roachpb.KeyValue, error)
}

type drpcTimeSeries_DumpRawClient struct {
	drpc.Stream
}

func (x *drpcTimeSeries_DumpRawClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTimeSeries_DumpRawClient) Recv() (*roachpb.KeyValue, error) {
	m := new(roachpb.KeyValue)
	if err := x.MsgRecv(m, drpcEncoding_File_ts_tspb_timeseries_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcTimeSeries_DumpRawClient) RecvMsg(m *roachpb.KeyValue) error {
	return x.MsgRecv(m, drpcEncoding_File_ts_tspb_timeseries_proto{})
}

type DRPCTimeSeriesServer interface {
	Query(context.Context, *TimeSeriesQueryRequest) (*TimeSeriesQueryResponse, error)
	Dump(*DumpRequest, DRPCTimeSeries_DumpStream) error
	DumpRaw(*DumpRequest, DRPCTimeSeries_DumpRawStream) error
}

type DRPCTimeSeriesUnimplementedServer struct{}

func (s *DRPCTimeSeriesUnimplementedServer) Query(context.Context, *TimeSeriesQueryRequest) (*TimeSeriesQueryResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCTimeSeriesUnimplementedServer) Dump(*DumpRequest, DRPCTimeSeries_DumpStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCTimeSeriesUnimplementedServer) DumpRaw(*DumpRequest, DRPCTimeSeries_DumpRawStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCTimeSeriesDescription struct{}

func (DRPCTimeSeriesDescription) NumMethods() int { return 3 }

func (DRPCTimeSeriesDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.ts.tspb.TimeSeries/Query", drpcEncoding_File_ts_tspb_timeseries_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTimeSeriesServer).
					Query(
						ctx,
						in1.(*TimeSeriesQueryRequest),
					)
			}, DRPCTimeSeriesServer.Query, true
	case 1:
		return "/cockroach.ts.tspb.TimeSeries/Dump", drpcEncoding_File_ts_tspb_timeseries_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCTimeSeriesServer).
					Dump(
						in1.(*DumpRequest),
						&drpcTimeSeries_DumpStream{in2.(drpc.Stream)},
					)
			}, DRPCTimeSeriesServer.Dump, true
	case 2:
		return "/cockroach.ts.tspb.TimeSeries/DumpRaw", drpcEncoding_File_ts_tspb_timeseries_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCTimeSeriesServer).
					DumpRaw(
						in1.(*DumpRequest),
						&drpcTimeSeries_DumpRawStream{in2.(drpc.Stream)},
					)
			}, DRPCTimeSeriesServer.DumpRaw, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterTimeSeries(mux drpc.Mux, impl DRPCTimeSeriesServer) error {
	return mux.Register(impl, DRPCTimeSeriesDescription{})
}

type DRPCTimeSeries_QueryStream interface {
	drpc.Stream
	SendAndClose(*TimeSeriesQueryResponse) error
}

type RPCTimeSeries_QueryStream interface {
	Context() context.Context
	SendAndClose(*TimeSeriesQueryResponse) error
}

type drpcTimeSeries_QueryStream struct {
	drpc.Stream
}

func (x *drpcTimeSeries_QueryStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTimeSeries_QueryStream) SendAndClose(m *TimeSeriesQueryResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_ts_tspb_timeseries_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTimeSeries_DumpStream interface {
	drpc.Stream
	Send(*TimeSeriesData) error
}

type RPCTimeSeries_DumpStream interface {
	Context() context.Context
	Send(*TimeSeriesData) error
}

type drpcTimeSeries_DumpStream struct {
	drpc.Stream
}

func (x *drpcTimeSeries_DumpStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTimeSeries_DumpStream) Send(m *TimeSeriesData) error {
	return x.MsgSend(m, drpcEncoding_File_ts_tspb_timeseries_proto{})
}

type DRPCTimeSeries_DumpRawStream interface {
	drpc.Stream
	Send(*roachpb.KeyValue) error
}

type RPCTimeSeries_DumpRawStream interface {
	Context() context.Context
	Send(*roachpb.KeyValue) error
}

type drpcTimeSeries_DumpRawStream struct {
	drpc.Stream
}

func (x *drpcTimeSeries_DumpRawStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTimeSeries_DumpRawStream) Send(m *roachpb.KeyValue) error {
	return x.MsgSend(m, drpcEncoding_File_ts_tspb_timeseries_proto{})
}

type RPCTimeSeriesClient interface {
	Query(ctx context.Context, in *TimeSeriesQueryRequest) (*TimeSeriesQueryResponse, error)
	Dump(ctx context.Context, in *DumpRequest) (RPCTimeSeries_DumpClient, error)
	DumpRaw(ctx context.Context, in *DumpRequest) (RPCTimeSeries_DumpRawClient, error)
}

// TimeSeries gRPC -> RPC adapter
type grpcTimeSeriesClientAdapter timeSeriesClient

func NewGRPCTimeSeriesClientAdapter(conn *grpc.ClientConn) RPCTimeSeriesClient {
	return (*grpcTimeSeriesClientAdapter)(&timeSeriesClient{conn})
}

func (a *grpcTimeSeriesClientAdapter) Query(ctx context.Context, in *TimeSeriesQueryRequest) (*TimeSeriesQueryResponse, error) {
	return (*timeSeriesClient)(a).Query(ctx, in)
}

func (a *grpcTimeSeriesClientAdapter) Dump(ctx context.Context, in *DumpRequest) (RPCTimeSeries_DumpClient, error) {
	return (*timeSeriesClient)(a).Dump(ctx, in)
}

func (a *grpcTimeSeriesClientAdapter) DumpRaw(ctx context.Context, in *DumpRequest) (RPCTimeSeries_DumpRawClient, error) {
	return (*timeSeriesClient)(a).DumpRaw(ctx, in)
}

// compile-time assertion
var _ RPCTimeSeriesClient = (*grpcTimeSeriesClientAdapter)(nil)

// TimeSeries DRPC -> RPC adapter
type drpcTimeSeriesClientAdapter drpcTimeSeriesClient

func NewDRPCTimeSeriesClientAdapter(conn drpc.Conn) RPCTimeSeriesClient {
	return (*drpcTimeSeriesClientAdapter)(&drpcTimeSeriesClient{conn})
}

func (a *drpcTimeSeriesClientAdapter) Query(ctx context.Context, in *TimeSeriesQueryRequest) (*TimeSeriesQueryResponse, error) {
	return (*drpcTimeSeriesClient)(a).Query(ctx, in)
}

func (a *drpcTimeSeriesClientAdapter) Dump(ctx context.Context, in *DumpRequest) (RPCTimeSeries_DumpClient, error) {
	return (*drpcTimeSeriesClient)(a).Dump(ctx, in)
}

func (a *drpcTimeSeriesClientAdapter) DumpRaw(ctx context.Context, in *DumpRequest) (RPCTimeSeries_DumpRawClient, error) {
	return (*drpcTimeSeriesClient)(a).DumpRaw(ctx, in)
}

// compile-time assertion
var _ RPCTimeSeriesClient = (*drpcTimeSeriesClientAdapter)(nil)
