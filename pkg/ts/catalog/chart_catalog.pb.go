// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ts/catalog/chart_catalog.proto

package catalog

import (
	fmt "fmt"
	tspb "github.com/cockroachdb/cockroach/pkg/ts/tspb"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	_go "github.com/prometheus/client_model/go"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AxisUnits describes the Unit options available in the Admin UI. It is defined here
// as opposed to importing the value from the Admin UI for historical reasons.
type AxisUnits int32

const (
	// UNSET_UNITS expresses that the metric's DisplayUnit wasn't explicitly set.
	AxisUnits_UNSET_UNITS AxisUnits = 0
	// COUNT expresses that the metric's measurement is a count.
	AxisUnits_COUNT AxisUnits = 1
	// BYTES expresses that the metric's measurement is in bytes.
	AxisUnits_BYTES AxisUnits = 2
	// DURATION expresses that the metric's measurement represents some unit of time.
	AxisUnits_DURATION AxisUnits = 3
	// CONST expresses that the metric's measurement is a constant value.
	AxisUnits_CONST AxisUnits = 4
	// NANOSECONDS expresses that the metric's measurement is in nanoseconds.
	AxisUnits_NANOSECONDS AxisUnits = 5
	// PERCENT expresses that the metric's measurement is a percentage value.
	AxisUnits_PERCENT AxisUnits = 6
	// SECONDS expresses that the metric's measurement is in seconds.
	AxisUnits_SECONDS AxisUnits = 7
	// TIMESTAMP_NS expresses that the metric's measurement is a time since the
	// Unix epoch in nanoseconds.
	AxisUnits_TIMESTAMP_NS AxisUnits = 8
	// TIMESTAMP_SEC expresses that the metric's measurement is a time since the
	// Unix epoch in seconds.
	AxisUnits_TIMESTAMP_SEC AxisUnits = 9
)

var AxisUnits_name = map[int32]string{
	0: "UNSET_UNITS",
	1: "COUNT",
	2: "BYTES",
	3: "DURATION",
	4: "CONST",
	5: "NANOSECONDS",
	6: "PERCENT",
	7: "SECONDS",
	8: "TIMESTAMP_NS",
	9: "TIMESTAMP_SEC",
}

var AxisUnits_value = map[string]int32{
	"UNSET_UNITS":   0,
	"COUNT":         1,
	"BYTES":         2,
	"DURATION":      3,
	"CONST":         4,
	"NANOSECONDS":   5,
	"PERCENT":       6,
	"SECONDS":       7,
	"TIMESTAMP_NS":  8,
	"TIMESTAMP_SEC": 9,
}

func (x AxisUnits) Enum() *AxisUnits {
	p := new(AxisUnits)
	*p = x
	return p
}

func (x AxisUnits) String() string {
	return proto.EnumName(AxisUnits_name, int32(x))
}

func (x *AxisUnits) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AxisUnits_value, data, "AxisUnits")
	if err != nil {
		return err
	}
	*x = AxisUnits(value)
	return nil
}

func (AxisUnits) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7783dcc7d3642629, []int{0}
}

// DescribeAggregator works as a proxy for cockroach.ts.tspb.TimeSeriesQueryAggregator
// which does not support an unset zero value.
type DescribeAggregator int32

const (
	// UNSET_AGG expresses that the Aggregator value wasn't explicitly set and should
	// use the default value for the respective metric type defined in chart_catalog.go.
	DescribeAggregator_UNSET_AGG DescribeAggregator = 0
	// AVG returns the average value of datapoints.
	DescribeAggregator_AVG DescribeAggregator = 1
	// SUM returns the sum value of datapoints.
	DescribeAggregator_SUM DescribeAggregator = 2
	// MAX returns the maximum value of datapoints.
	DescribeAggregator_MAX DescribeAggregator = 3
	// MIN returns the minimum value of datapoints.
	DescribeAggregator_MIN DescribeAggregator = 4
)

var DescribeAggregator_name = map[int32]string{
	0: "UNSET_AGG",
	1: "AVG",
	2: "SUM",
	3: "MAX",
	4: "MIN",
}

var DescribeAggregator_value = map[string]int32{
	"UNSET_AGG": 0,
	"AVG":       1,
	"SUM":       2,
	"MAX":       3,
	"MIN":       4,
}

func (x DescribeAggregator) Enum() *DescribeAggregator {
	p := new(DescribeAggregator)
	*p = x
	return p
}

func (x DescribeAggregator) String() string {
	return proto.EnumName(DescribeAggregator_name, int32(x))
}

func (x *DescribeAggregator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DescribeAggregator_value, data, "DescribeAggregator")
	if err != nil {
		return err
	}
	*x = DescribeAggregator(value)
	return nil
}

func (DescribeAggregator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7783dcc7d3642629, []int{1}
}

// DescribeDerivative works as a proxy for cockroach.ts.tspb.TimeSeriesQueryDerivative
// which has an ambiguous zero value; it's unclear if the value isn't set or if it
// is intentionally set to NONE.
type DescribeDerivative int32

const (
	// UNSET_DER expresses that the Derivative value wasn't explicitly set and should
	// use the default value for the respective metric type defined in chart_catalog.go.
	DescribeDerivative_UNSET_DER DescribeDerivative = 0
	// NONE does not apply a derivative function.
	DescribeDerivative_NONE DescribeDerivative = 1
	// DERIVATIVE returns the first-order derivative of values in the time series.
	DescribeDerivative_DERIVATIVE DescribeDerivative = 2
	// NON_NEGATIVE_DERIVATIVE returns only non-negative values of the first-order
	// derivative; negative values are returned as zero. This should be used for
	// counters that monotonically increase, but might wrap or reset.
	DescribeDerivative_NON_NEGATIVE_DERIVATIVE DescribeDerivative = 3
)

var DescribeDerivative_name = map[int32]string{
	0: "UNSET_DER",
	1: "NONE",
	2: "DERIVATIVE",
	3: "NON_NEGATIVE_DERIVATIVE",
}

var DescribeDerivative_value = map[string]int32{
	"UNSET_DER":               0,
	"NONE":                    1,
	"DERIVATIVE":              2,
	"NON_NEGATIVE_DERIVATIVE": 3,
}

func (x DescribeDerivative) Enum() *DescribeDerivative {
	p := new(DescribeDerivative)
	*p = x
	return p
}

func (x DescribeDerivative) String() string {
	return proto.EnumName(DescribeDerivative_name, int32(x))
}

func (x *DescribeDerivative) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DescribeDerivative_value, data, "DescribeDerivative")
	if err != nil {
		return err
	}
	*x = DescribeDerivative(value)
	return nil
}

func (DescribeDerivative) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7783dcc7d3642629, []int{2}
}

// MetricLayer is the component layer at which metrics are collected.
type MetricLayer int32

const (
	// STORAGE indicates that the metric relates to the storage/KV layers.
	MetricLayer_STORAGE MetricLayer = 0
	// APPLICATION indicates that the metric relates to the application
	// (SQL/RPC/HTTP) layer.
	MetricLayer_APPLICATION MetricLayer = 1
	// SERVER indicates that the metric relates to the server layer:
	// they are not application-level, but are included
	// when the SQL service is running as a separate process.
	MetricLayer_SERVER MetricLayer = 2
)

var MetricLayer_name = map[int32]string{
	0: "STORAGE",
	1: "APPLICATION",
	2: "SERVER",
}

var MetricLayer_value = map[string]int32{
	"STORAGE":     0,
	"APPLICATION": 1,
	"SERVER":      2,
}

func (x MetricLayer) Enum() *MetricLayer {
	p := new(MetricLayer)
	*p = x
	return p
}

func (x MetricLayer) String() string {
	return proto.EnumName(MetricLayer_name, int32(x))
}

func (x *MetricLayer) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetricLayer_value, data, "MetricLayer")
	if err != nil {
		return err
	}
	*x = MetricLayer(value)
	return nil
}

func (MetricLayer) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7783dcc7d3642629, []int{3}
}

// ChartMetric converts cockroach.util.metric.Metadata
// into a struct that's useful for generating Admin UI charts.
type ChartMetric struct {
	// name is the name of the metric.
	Name string `protobuf:"bytes,1,req,name=name" json:"name"`
	// help is the help text from the metric.
	Help string `protobuf:"bytes,2,req,name=help" json:"help"`
	// axisLabel is the label for the metric's y-axis.
	AxisLabel string `protobuf:"bytes,3,req,name=axisLabel" json:"axisLabel"`
	// preferredUnits describes the units the chart should be viewed with
	// e.g. BYTES for storage.
	PreferredUnits AxisUnits `protobuf:"varint,4,req,name=preferredUnits,enum=cockroach.ts.catalog.AxisUnits" json:"preferredUnits"`
	// metricType describes the type of metric this is; all metrics on a chart
	// should be of the same type to ensure the information displays behaves in
	// expected ways.
	MetricType _go.MetricType `protobuf:"varint,5,opt,name=metricType,enum=io.prometheus.client.MetricType" json:"metricType"`
	// exportedName is the name of metrics as seen by external scrapers.
	ExportedName string `protobuf:"bytes,6,req,name=exportedName" json:"exportedName"`
	// essential is true when the metric is part of the essential list for customers to monitor.
	Essential bool `protobuf:"varint,7,req,name=essential" json:"essential"`
	// howToUse is the usage instructions for the metric.
	HowToUse string `protobuf:"bytes,8,opt,name=howToUse" json:"howToUse"`
	// labeledName is the name of the metric with its labels, formatted as name{label1: value1, ...}.
	LabeledName string `protobuf:"bytes,9,opt,name=labeledName" json:"labeledName"`
}

func (m *ChartMetric) Reset()         { *m = ChartMetric{} }
func (m *ChartMetric) String() string { return proto.CompactTextString(m) }
func (*ChartMetric) ProtoMessage()    {}
func (*ChartMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_7783dcc7d3642629, []int{0}
}
func (m *ChartMetric) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChartMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ChartMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartMetric.Merge(m, src)
}
func (m *ChartMetric) XXX_Size() int {
	return m.Size()
}
func (m *ChartMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartMetric.DiscardUnknown(m)
}

var xxx_messageInfo_ChartMetric proto.InternalMessageInfo

// IndividualChart describes both the properties necessary to display
// AdminUI charts, as well as a key to find them (collectionName).
type IndividualChart struct {
	// title is the title of the chart.
	Title string `protobuf:"bytes,1,req,name=title" json:"title"`
	// longname displays the chart's organization within the catalog,
	// as well as its own name.
	LongTitle string `protobuf:"bytes,2,req,name=longTitle" json:"longTitle"`
	// collectionName uniquely identifies a chart.
	CollectionTitle string `protobuf:"bytes,3,req,name=collectionTitle" json:"collectionTitle"`
	// downsampler specifies the chart's downsampler function.
	Downsampler *tspb.TimeSeriesQueryAggregator `protobuf:"varint,4,req,name=downsampler,enum=cockroach.ts.tspb.TimeSeriesQueryAggregator" json:"downsampler,omitempty"`
	// aggregator specifies the chart's aggregator function.
	Aggregator *tspb.TimeSeriesQueryAggregator `protobuf:"varint,5,req,name=aggregator,enum=cockroach.ts.tspb.TimeSeriesQueryAggregator" json:"aggregator,omitempty"`
	// derivative specifies the chart's derivative function.
	Derivative *tspb.TimeSeriesQueryDerivative `protobuf:"varint,6,req,name=derivative,enum=cockroach.ts.tspb.TimeSeriesQueryDerivative" json:"derivative,omitempty"`
	// units specifies the Admin UI units to display the chart with.
	Units AxisUnits `protobuf:"varint,7,req,name=units,enum=cockroach.ts.catalog.AxisUnits" json:"units"`
	// axisLabel defines the chart's y-axis label.
	AxisLabel string `protobuf:"bytes,8,req,name=axisLabel" json:"axisLabel"`
	// percentiles specifies whether the chart should have its metrics broken
	// out into percentiles; applies only to histograms.
	Percentiles bool `protobuf:"varint,9,req,name=percentiles" json:"percentiles"`
	// metrics specifies the metrics the chart should display.
	Metrics []ChartMetric `protobuf:"bytes,10,rep,name=metrics" json:"metrics"`
}

func (m *IndividualChart) Reset()         { *m = IndividualChart{} }
func (m *IndividualChart) String() string { return proto.CompactTextString(m) }
func (*IndividualChart) ProtoMessage()    {}
func (*IndividualChart) Descriptor() ([]byte, []int) {
	return fileDescriptor_7783dcc7d3642629, []int{1}
}
func (m *IndividualChart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndividualChart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IndividualChart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndividualChart.Merge(m, src)
}
func (m *IndividualChart) XXX_Size() int {
	return m.Size()
}
func (m *IndividualChart) XXX_DiscardUnknown() {
	xxx_messageInfo_IndividualChart.DiscardUnknown(m)
}

var xxx_messageInfo_IndividualChart proto.InternalMessageInfo

// ChartSections organize charts into groups that contain slices or charts and
// other subsections.
type ChartSection struct {
	// title is the title of the section.
	Title string `protobuf:"bytes,1,req,name=title" json:"title"`
	// longname displays the section's organization within the catalog.
	LongTitle string `protobuf:"bytes,2,req,name=longTitle" json:"longTitle"`
	// collectionName uniquely identifies a section.
	CollectionTitle string `protobuf:"bytes,3,req,name=collectionTitle" json:"collectionTitle"`
	// description describes how to interpret the relationship of subsections
	// and charts. It's only planned use is in the catalog page for Level 0
	// sections.
	Description string `protobuf:"bytes,4,req,name=description" json:"description"`
	// level represents the section's depth in the catalog's organization.
	Level int32 `protobuf:"varint,5,req,name=level" json:"level"`
	// subsections are deeper levels of the chart's organization.
	Subsections []*ChartSection `protobuf:"bytes,6,rep,name=subsections" json:"subsections,omitempty"`
	// charts are the IndividualCharts that are grouped into this section.
	Charts []*IndividualChart `protobuf:"bytes,7,rep,name=charts" json:"charts,omitempty"`
	// metricLayer indicates which layer the metrics are coming from.
	MetricLayer MetricLayer `protobuf:"varint,8,req,name=metricLayer,enum=cockroach.ts.catalog.MetricLayer" json:"metricLayer"`
}

func (m *ChartSection) Reset()         { *m = ChartSection{} }
func (m *ChartSection) String() string { return proto.CompactTextString(m) }
func (*ChartSection) ProtoMessage()    {}
func (*ChartSection) Descriptor() ([]byte, []int) {
	return fileDescriptor_7783dcc7d3642629, []int{2}
}
func (m *ChartSection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChartSection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ChartSection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartSection.Merge(m, src)
}
func (m *ChartSection) XXX_Size() int {
	return m.Size()
}
func (m *ChartSection) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartSection.DiscardUnknown(m)
}

var xxx_messageInfo_ChartSection proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.ts.catalog.AxisUnits", AxisUnits_name, AxisUnits_value)
	proto.RegisterEnum("cockroach.ts.catalog.DescribeAggregator", DescribeAggregator_name, DescribeAggregator_value)
	proto.RegisterEnum("cockroach.ts.catalog.DescribeDerivative", DescribeDerivative_name, DescribeDerivative_value)
	proto.RegisterEnum("cockroach.ts.catalog.MetricLayer", MetricLayer_name, MetricLayer_value)
	proto.RegisterType((*ChartMetric)(nil), "cockroach.ts.catalog.ChartMetric")
	proto.RegisterType((*IndividualChart)(nil), "cockroach.ts.catalog.IndividualChart")
	proto.RegisterType((*ChartSection)(nil), "cockroach.ts.catalog.ChartSection")
}

func init() { proto.RegisterFile("ts/catalog/chart_catalog.proto", fileDescriptor_7783dcc7d3642629) }

var fileDescriptor_7783dcc7d3642629 = []byte{
	// 917 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x8f, 0xf3, 0x3f, 0xcf, 0xdd, 0xec, 0x30, 0x5a, 0x09, 0xab, 0x48, 0xd9, 0x10, 0x89, 0x2a,
	0xaa, 0x90, 0x2d, 0xf5, 0xc2, 0x01, 0x71, 0x70, 0x13, 0x13, 0x45, 0x6a, 0x9c, 0xae, 0xed, 0x54,
	0xb0, 0x97, 0xc8, 0x71, 0x86, 0xc4, 0x5a, 0x27, 0xb6, 0x3c, 0x93, 0x6e, 0xfb, 0x2d, 0x10, 0xe2,
	0xc6, 0x27, 0xe1, 0x1b, 0xf4, 0xb8, 0xc7, 0x3d, 0x21, 0x68, 0xbf, 0x08, 0x9a, 0xb1, 0x13, 0x4f,
	0xab, 0x82, 0x80, 0x03, 0xb7, 0xe7, 0xf7, 0x7b, 0xef, 0xd7, 0xf7, 0xde, 0xef, 0x37, 0x0d, 0x74,
	0x18, 0x35, 0x02, 0x9f, 0xf9, 0x51, 0xbc, 0x32, 0x82, 0xb5, 0x9f, 0xb2, 0x79, 0xfe, 0xa5, 0x27,
	0x69, 0xcc, 0x62, 0xfc, 0x2a, 0x88, 0x83, 0x77, 0x69, 0xec, 0x07, 0x6b, 0x9d, 0x51, 0x3d, 0xc7,
	0x8e, 0x35, 0x46, 0x0d, 0x46, 0x93, 0x85, 0xc1, 0xc2, 0x0d, 0xa1, 0x24, 0x0d, 0x09, 0xcd, 0xea,
	0x8f, 0x5f, 0xad, 0xe2, 0x55, 0x2c, 0x42, 0x83, 0x47, 0x79, 0xb6, 0x17, 0xc6, 0x46, 0x92, 0xc6,
	0x1b, 0xc2, 0xd6, 0x64, 0x47, 0x8d, 0x20, 0x0a, 0xc9, 0x96, 0x19, 0x1b, 0xc2, 0xd2, 0x30, 0xc8,
	0x3b, 0x7b, 0x3f, 0x57, 0x40, 0x1d, 0xf0, 0x09, 0x26, 0x22, 0x8d, 0x35, 0xa8, 0x6e, 0xfd, 0x0d,
	0xd1, 0x94, 0x6e, 0xb9, 0xdf, 0x3a, 0xaf, 0xde, 0xfd, 0xf6, 0xba, 0xe4, 0x88, 0x0c, 0x47, 0xd6,
	0x24, 0x4a, 0xb4, 0xb2, 0x8c, 0xf0, 0x0c, 0xee, 0x41, 0xcb, 0xbf, 0x09, 0xe9, 0x85, 0xbf, 0x20,
	0x91, 0x56, 0x91, 0xe0, 0x22, 0x8d, 0x27, 0xd0, 0x4e, 0x52, 0xf2, 0x03, 0x49, 0x53, 0xb2, 0x9c,
	0x6d, 0x43, 0x46, 0xb5, 0x6a, 0xb7, 0xdc, 0x6f, 0x9f, 0xbd, 0xd6, 0x9f, 0x5b, 0x55, 0x37, 0x6f,
	0x42, 0x2a, 0xca, 0x72, 0xa6, 0x27, 0xcd, 0xf8, 0x5b, 0x80, 0x6c, 0x0f, 0xef, 0x36, 0x21, 0x5a,
	0xad, 0xab, 0xf4, 0xdb, 0x67, 0x5d, 0x3d, 0x14, 0x9b, 0xe7, 0xfb, 0xea, 0xd9, 0xbe, 0xfa, 0xe4,
	0x50, 0x97, 0x73, 0x49, 0x9d, 0xb8, 0x0f, 0x47, 0xe4, 0x26, 0x89, 0x53, 0x46, 0x96, 0x36, 0x5f,
	0xbb, 0x2e, 0x4d, 0xff, 0x08, 0xe1, 0x4b, 0x12, 0x4a, 0xc9, 0x96, 0x85, 0x7e, 0xa4, 0x35, 0xba,
	0xe5, 0x7e, 0x73, 0xbf, 0xe4, 0x21, 0x8d, 0xbb, 0xd0, 0x5c, 0xc7, 0xef, 0xbd, 0x78, 0x46, 0x89,
	0xd6, 0xec, 0x2a, 0x07, 0xa6, 0x43, 0x16, 0x9f, 0x80, 0x1a, 0xf1, 0x7b, 0xe4, 0x7f, 0xae, 0x25,
	0x15, 0xc9, 0x40, 0xef, 0xd7, 0x2a, 0xbc, 0x1c, 0x6f, 0x97, 0xe1, 0x75, 0xb8, 0xdc, 0xf9, 0x91,
	0x10, 0x08, 0x1f, 0x43, 0x8d, 0x85, 0x2c, 0x7a, 0xac, 0x4d, 0x96, 0xe2, 0xd3, 0x45, 0xf1, 0x76,
	0xe5, 0x09, 0x5c, 0x56, 0xa8, 0x48, 0x63, 0x1d, 0x5e, 0x06, 0x71, 0x14, 0x91, 0x80, 0x85, 0xf1,
	0x36, 0xab, 0x94, 0xc5, 0x7a, 0x0a, 0x62, 0x1b, 0xd4, 0x65, 0xfc, 0x7e, 0x4b, 0xfd, 0x4d, 0x12,
	0x91, 0x34, 0xd7, 0xeb, 0xcb, 0xc7, 0x7a, 0x71, 0x3b, 0xea, 0x5e, 0xb8, 0x21, 0xae, 0xb0, 0xe3,
	0x9b, 0x1d, 0x49, 0x6f, 0xcd, 0xd5, 0x2a, 0x25, 0x2b, 0x9f, 0xc5, 0xa9, 0x23, 0x13, 0xe0, 0x0b,
	0x00, 0xff, 0x00, 0x69, 0xb5, 0xff, 0x40, 0x27, 0xf5, 0x73, 0xb6, 0x25, 0x49, 0xc3, 0x6b, 0x9f,
	0x85, 0xd7, 0x99, 0x6e, 0xff, 0x88, 0x6d, 0x78, 0xe8, 0x71, 0xa4, 0x7e, 0xfc, 0x35, 0xd4, 0x76,
	0xc2, 0x95, 0x8d, 0x7f, 0xe3, 0xca, 0xac, 0xe7, 0xb1, 0xff, 0x9b, 0xcf, 0xfb, 0xff, 0x04, 0xd4,
	0x84, 0xa4, 0x01, 0x37, 0x4a, 0x44, 0xa8, 0xd6, 0x92, 0x0c, 0x24, 0x03, 0xd8, 0x84, 0x46, 0xfe,
	0x40, 0x35, 0xe8, 0x56, 0xfa, 0xea, 0xd9, 0xe7, 0xcf, 0x8f, 0x22, 0xbd, 0xd9, 0x9c, 0x66, 0xdf,
	0xd7, 0xfb, 0xa9, 0x02, 0x47, 0x02, 0x76, 0x33, 0x35, 0xff, 0x77, 0xe3, 0x9c, 0x80, 0xba, 0x24,
	0x34, 0x48, 0xc3, 0x84, 0xe7, 0x84, 0x71, 0x0e, 0x26, 0x97, 0x00, 0x3e, 0x57, 0x44, 0xae, 0x49,
	0x24, 0xbc, 0x50, 0xdb, 0xcf, 0x25, 0x52, 0x78, 0x08, 0x2a, 0xdd, 0x2d, 0x68, 0x46, 0x4b, 0xb5,
	0xba, 0xb8, 0x45, 0xef, 0x6f, 0x6e, 0x91, 0x2f, 0xeb, 0xc8, 0x6d, 0xf8, 0x1b, 0xa8, 0x8b, 0x7f,
	0xaf, 0x5c, 0x57, 0x4e, 0xf0, 0xc5, 0xf3, 0x04, 0x4f, 0x5e, 0x9a, 0x93, 0x37, 0xe1, 0x31, 0xa8,
	0xd9, 0x51, 0x2f, 0xfc, 0x5b, 0x92, 0x0a, 0x69, 0xdb, 0x7f, 0x25, 0xc8, 0xa4, 0x28, 0xdc, 0xef,
	0x2a, 0xf5, 0x9e, 0xfe, 0xa2, 0x40, 0xeb, 0x60, 0x1f, 0xfc, 0x12, 0xd4, 0x99, 0xed, 0x5a, 0xde,
	0x7c, 0x66, 0x8f, 0x3d, 0x17, 0x95, 0x70, 0x0b, 0x6a, 0x83, 0xe9, 0xcc, 0xf6, 0x90, 0xc2, 0xc3,
	0xf3, 0xef, 0x3d, 0xcb, 0x45, 0x65, 0x7c, 0x04, 0xcd, 0xe1, 0xcc, 0x31, 0xbd, 0xf1, 0xd4, 0x46,
	0x95, 0xac, 0xc6, 0x76, 0x3d, 0x54, 0xe5, 0xfd, 0xb6, 0x69, 0x4f, 0x5d, 0x6b, 0x30, 0xb5, 0x87,
	0x2e, 0xaa, 0x61, 0x15, 0x1a, 0x97, 0x96, 0x33, 0xb0, 0x6c, 0x0f, 0xd5, 0xf9, 0xc7, 0x1e, 0x69,
	0x60, 0x04, 0x47, 0xde, 0x78, 0x62, 0xb9, 0x9e, 0x39, 0xb9, 0x9c, 0xdb, 0x2e, 0x6a, 0xe2, 0x4f,
	0xe0, 0x45, 0x91, 0x71, 0xad, 0x01, 0x6a, 0x9d, 0x8e, 0x00, 0x0f, 0x85, 0x30, 0x0b, 0x52, 0x3c,
	0x37, 0xfc, 0x02, 0x5a, 0xd9, 0x94, 0xe6, 0x68, 0x84, 0x4a, 0xb8, 0x01, 0x15, 0xf3, 0x6a, 0x84,
	0x14, 0x1e, 0xb8, 0xb3, 0x09, 0x2a, 0xf3, 0x60, 0x62, 0x7e, 0x87, 0x2a, 0x22, 0x18, 0xdb, 0xa8,
	0x7a, 0xfa, 0xb6, 0x20, 0x2a, 0x5e, 0x5a, 0x41, 0x34, 0xb4, 0x1c, 0x54, 0xc2, 0x4d, 0xa8, 0xda,
	0x53, 0xdb, 0x42, 0x0a, 0x6e, 0x03, 0x0c, 0x2d, 0x67, 0x7c, 0x65, 0x7a, 0xe3, 0x2b, 0x0b, 0x95,
	0xf1, 0x67, 0xf0, 0xa9, 0x3d, 0xb5, 0xe7, 0xb6, 0x35, 0x12, 0x99, 0xb9, 0x04, 0x56, 0x4e, 0xbf,
	0x02, 0x55, 0x3a, 0xb2, 0xd8, 0xd2, 0x9b, 0x3a, 0xe6, 0xc8, 0x42, 0x25, 0x7e, 0x10, 0xf3, 0xf2,
	0xf2, 0x62, 0x3c, 0xc8, 0x8e, 0xa5, 0x60, 0x80, 0xba, 0x6b, 0x39, 0x57, 0x96, 0x83, 0xca, 0xe7,
	0x6f, 0xee, 0xfe, 0xe8, 0x94, 0xee, 0xee, 0x3b, 0xca, 0x87, 0xfb, 0x8e, 0xf2, 0xf1, 0xbe, 0xa3,
	0xfc, 0x7e, 0xdf, 0x51, 0x7e, 0x7c, 0xe8, 0x94, 0x3e, 0x3c, 0x74, 0x4a, 0x1f, 0x1f, 0x3a, 0xa5,
	0xb7, 0xc6, 0x2a, 0x64, 0xeb, 0xdd, 0x42, 0x0f, 0xe2, 0x8d, 0x71, 0x50, 0x77, 0xb9, 0x28, 0x62,
	0x23, 0x79, 0xb7, 0x32, 0x8a, 0x1f, 0xed, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xfc, 0xb1, 0x50,
	0xd6, 0xc1, 0x07, 0x00, 0x00,
}

func (m *ChartMetric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChartMetric) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChartMetric) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.LabeledName)
	copy(dAtA[i:], m.LabeledName)
	i = encodeVarintChartCatalog(dAtA, i, uint64(len(m.LabeledName)))
	i--
	dAtA[i] = 0x4a
	i -= len(m.HowToUse)
	copy(dAtA[i:], m.HowToUse)
	i = encodeVarintChartCatalog(dAtA, i, uint64(len(m.HowToUse)))
	i--
	dAtA[i] = 0x42
	i--
	if m.Essential {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i -= len(m.ExportedName)
	copy(dAtA[i:], m.ExportedName)
	i = encodeVarintChartCatalog(dAtA, i, uint64(len(m.ExportedName)))
	i--
	dAtA[i] = 0x32
	i = encodeVarintChartCatalog(dAtA, i, uint64(m.MetricType))
	i--
	dAtA[i] = 0x28
	i = encodeVarintChartCatalog(dAtA, i, uint64(m.PreferredUnits))
	i--
	dAtA[i] = 0x20
	i -= len(m.AxisLabel)
	copy(dAtA[i:], m.AxisLabel)
	i = encodeVarintChartCatalog(dAtA, i, uint64(len(m.AxisLabel)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Help)
	copy(dAtA[i:], m.Help)
	i = encodeVarintChartCatalog(dAtA, i, uint64(len(m.Help)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintChartCatalog(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *IndividualChart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndividualChart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndividualChart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for iNdEx := len(m.Metrics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metrics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChartCatalog(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	i--
	if m.Percentiles {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x48
	i -= len(m.AxisLabel)
	copy(dAtA[i:], m.AxisLabel)
	i = encodeVarintChartCatalog(dAtA, i, uint64(len(m.AxisLabel)))
	i--
	dAtA[i] = 0x42
	i = encodeVarintChartCatalog(dAtA, i, uint64(m.Units))
	i--
	dAtA[i] = 0x38
	if m.Derivative == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("derivative")
	} else {
		i = encodeVarintChartCatalog(dAtA, i, uint64(*m.Derivative))
		i--
		dAtA[i] = 0x30
	}
	if m.Aggregator == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("aggregator")
	} else {
		i = encodeVarintChartCatalog(dAtA, i, uint64(*m.Aggregator))
		i--
		dAtA[i] = 0x28
	}
	if m.Downsampler == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("downsampler")
	} else {
		i = encodeVarintChartCatalog(dAtA, i, uint64(*m.Downsampler))
		i--
		dAtA[i] = 0x20
	}
	i -= len(m.CollectionTitle)
	copy(dAtA[i:], m.CollectionTitle)
	i = encodeVarintChartCatalog(dAtA, i, uint64(len(m.CollectionTitle)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.LongTitle)
	copy(dAtA[i:], m.LongTitle)
	i = encodeVarintChartCatalog(dAtA, i, uint64(len(m.LongTitle)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Title)
	copy(dAtA[i:], m.Title)
	i = encodeVarintChartCatalog(dAtA, i, uint64(len(m.Title)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ChartSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChartSection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChartSection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChartCatalog(dAtA, i, uint64(m.MetricLayer))
	i--
	dAtA[i] = 0x40
	if len(m.Charts) > 0 {
		for iNdEx := len(m.Charts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Charts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChartCatalog(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Subsections) > 0 {
		for iNdEx := len(m.Subsections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subsections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChartCatalog(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	i = encodeVarintChartCatalog(dAtA, i, uint64(m.Level))
	i--
	dAtA[i] = 0x28
	i -= len(m.Description)
	copy(dAtA[i:], m.Description)
	i = encodeVarintChartCatalog(dAtA, i, uint64(len(m.Description)))
	i--
	dAtA[i] = 0x22
	i -= len(m.CollectionTitle)
	copy(dAtA[i:], m.CollectionTitle)
	i = encodeVarintChartCatalog(dAtA, i, uint64(len(m.CollectionTitle)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.LongTitle)
	copy(dAtA[i:], m.LongTitle)
	i = encodeVarintChartCatalog(dAtA, i, uint64(len(m.LongTitle)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Title)
	copy(dAtA[i:], m.Title)
	i = encodeVarintChartCatalog(dAtA, i, uint64(len(m.Title)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintChartCatalog(dAtA []byte, offset int, v uint64) int {
	offset -= sovChartCatalog(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChartMetric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovChartCatalog(uint64(l))
	l = len(m.Help)
	n += 1 + l + sovChartCatalog(uint64(l))
	l = len(m.AxisLabel)
	n += 1 + l + sovChartCatalog(uint64(l))
	n += 1 + sovChartCatalog(uint64(m.PreferredUnits))
	n += 1 + sovChartCatalog(uint64(m.MetricType))
	l = len(m.ExportedName)
	n += 1 + l + sovChartCatalog(uint64(l))
	n += 2
	l = len(m.HowToUse)
	n += 1 + l + sovChartCatalog(uint64(l))
	l = len(m.LabeledName)
	n += 1 + l + sovChartCatalog(uint64(l))
	return n
}

func (m *IndividualChart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	n += 1 + l + sovChartCatalog(uint64(l))
	l = len(m.LongTitle)
	n += 1 + l + sovChartCatalog(uint64(l))
	l = len(m.CollectionTitle)
	n += 1 + l + sovChartCatalog(uint64(l))
	if m.Downsampler != nil {
		n += 1 + sovChartCatalog(uint64(*m.Downsampler))
	}
	if m.Aggregator != nil {
		n += 1 + sovChartCatalog(uint64(*m.Aggregator))
	}
	if m.Derivative != nil {
		n += 1 + sovChartCatalog(uint64(*m.Derivative))
	}
	n += 1 + sovChartCatalog(uint64(m.Units))
	l = len(m.AxisLabel)
	n += 1 + l + sovChartCatalog(uint64(l))
	n += 2
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovChartCatalog(uint64(l))
		}
	}
	return n
}

func (m *ChartSection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	n += 1 + l + sovChartCatalog(uint64(l))
	l = len(m.LongTitle)
	n += 1 + l + sovChartCatalog(uint64(l))
	l = len(m.CollectionTitle)
	n += 1 + l + sovChartCatalog(uint64(l))
	l = len(m.Description)
	n += 1 + l + sovChartCatalog(uint64(l))
	n += 1 + sovChartCatalog(uint64(m.Level))
	if len(m.Subsections) > 0 {
		for _, e := range m.Subsections {
			l = e.Size()
			n += 1 + l + sovChartCatalog(uint64(l))
		}
	}
	if len(m.Charts) > 0 {
		for _, e := range m.Charts {
			l = e.Size()
			n += 1 + l + sovChartCatalog(uint64(l))
		}
	}
	n += 1 + sovChartCatalog(uint64(m.MetricLayer))
	return n
}

func sovChartCatalog(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozChartCatalog(x uint64) (n int) {
	return sovChartCatalog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChartMetric) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChartCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChartMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChartMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChartCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Help", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChartCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Help = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AxisLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChartCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AxisLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredUnits", wireType)
			}
			m.PreferredUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreferredUnits |= AxisUnits(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricType", wireType)
			}
			m.MetricType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetricType |= _go.MetricType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChartCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Essential", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Essential = bool(v != 0)
			hasFields[0] |= uint64(0x00000020)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HowToUse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChartCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HowToUse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabeledName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChartCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabeledName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChartCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("help")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("axisLabel")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("preferredUnits")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("exportedName")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("essential")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndividualChart) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChartCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndividualChart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndividualChart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChartCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChartCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LongTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChartCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downsampler", wireType)
			}
			var v tspb.TimeSeriesQueryAggregator
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= tspb.TimeSeriesQueryAggregator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Downsampler = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregator", wireType)
			}
			var v tspb.TimeSeriesQueryAggregator
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= tspb.TimeSeriesQueryAggregator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Aggregator = &v
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Derivative", wireType)
			}
			var v tspb.TimeSeriesQueryDerivative
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= tspb.TimeSeriesQueryDerivative(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Derivative = &v
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			m.Units = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Units |= AxisUnits(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AxisLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChartCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AxisLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentiles", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Percentiles = bool(v != 0)
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChartCatalog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, ChartMetric{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChartCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("title")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("longTitle")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("collectionTitle")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("downsampler")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("aggregator")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("derivative")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("units")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("axisLabel")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("percentiles")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChartSection) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChartCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChartSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChartSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChartCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChartCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LongTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChartCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChartCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChartCatalog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subsections = append(m.Subsections, &ChartSection{})
			if err := m.Subsections[len(m.Subsections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Charts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChartCatalog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Charts = append(m.Charts, &IndividualChart{})
			if err := m.Charts[len(m.Charts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricLayer", wireType)
			}
			m.MetricLayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetricLayer |= MetricLayer(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		default:
			iNdEx = preIndex
			skippy, err := skipChartCatalog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChartCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("title")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("longTitle")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("collectionTitle")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("description")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("level")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("metricLayer")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChartCatalog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChartCatalog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChartCatalog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChartCatalog
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChartCatalog
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChartCatalog
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChartCatalog        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChartCatalog          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChartCatalog = fmt.Errorf("proto: unexpected end of group")
)

