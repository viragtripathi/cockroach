// Code generated by fwgen; DO NOT EDIT.
// Generated from: pkg/testutils/serverutils/api.go

package serverutils

import (
	"context"
	gosql "database/sql"
	"net/http"
	"net/url"

	"github.com/cockroachdb/cockroach/pkg/base"
	"github.com/cockroachdb/cockroach/pkg/config"
	"github.com/cockroachdb/cockroach/pkg/config/zonepb"
	"github.com/cockroachdb/cockroach/pkg/keys"
	"github.com/cockroachdb/cockroach/pkg/kv"
	"github.com/cockroachdb/cockroach/pkg/roachpb"
	"github.com/cockroachdb/cockroach/pkg/rpc"
	"github.com/cockroachdb/cockroach/pkg/security/username"
	"github.com/cockroachdb/cockroach/pkg/server/serverpb"
	"github.com/cockroachdb/cockroach/pkg/settings/cluster"
	"github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb"
	"github.com/cockroachdb/cockroach/pkg/util/hlc"
	"github.com/cockroachdb/cockroach/pkg/util/log"
	"github.com/cockroachdb/cockroach/pkg/util/stop"
	"github.com/cockroachdb/cockroach/pkg/util/tracing"
)

// Readiness is part of the interface ApplicationLayerInterface.
func (f *wrap) Readiness(ctx context.Context) error {
	return f.fwApplicationLayerInterface("Readiness").Readiness(ctx)
}

// SQLInstanceID is part of the interface ApplicationLayerInterface.
func (f *wrap) SQLInstanceID() base.SQLInstanceID {
	return f.fwApplicationLayerInterface("SQLInstanceID").SQLInstanceID()
}

// AdvRPCAddr is part of the interface ApplicationLayerInterface.
func (f *wrap) AdvRPCAddr() string {
	return f.fwApplicationLayerInterface("AdvRPCAddr").AdvRPCAddr()
}

// AdvSQLAddr is part of the interface ApplicationLayerInterface.
func (f *wrap) AdvSQLAddr() string {
	return f.fwApplicationLayerInterface("AdvSQLAddr").AdvSQLAddr()
}

// SQLAddr is part of the interface ApplicationLayerInterface.
func (f *wrap) SQLAddr() string {
	return f.fwApplicationLayerInterface("SQLAddr").SQLAddr()
}

// HTTPAddr is part of the interface ApplicationLayerInterface.
func (f *wrap) HTTPAddr() string {
	return f.fwApplicationLayerInterface("HTTPAddr").HTTPAddr()
}

// RPCAddr is part of the interface ApplicationLayerInterface.
func (f *wrap) RPCAddr() string {
	return f.fwApplicationLayerInterface("RPCAddr").RPCAddr()
}

// NodeDialer is part of the interface ApplicationLayerInterface.
func (f *wrap) NodeDialer() interface{} {
	return f.fwApplicationLayerInterface("NodeDialer").NodeDialer()
}

// SQLConn is part of the interface ApplicationLayerInterface.
func (f *wrap) SQLConn(t TestFataler, opts ...SQLConnOption) *gosql.DB {
	return f.fwApplicationLayerInterface("SQLConn").SQLConn(t, opts...)
}

// SQLConnE is part of the interface ApplicationLayerInterface.
func (f *wrap) SQLConnE(opts ...SQLConnOption) (*gosql.DB, error) {
	return f.fwApplicationLayerInterface("SQLConnE").SQLConnE(opts...)
}

// PGUrl is part of the interface ApplicationLayerInterface.
func (f *wrap) PGUrl(t TestFataler, opts ...SQLConnOption) (url.URL, func()) {
	return f.fwApplicationLayerInterface("PGUrl").PGUrl(t, opts...)
}

// PGUrlE is part of the interface ApplicationLayerInterface.
func (f *wrap) PGUrlE(opts ...SQLConnOption) (url.URL, func(), error) {
	return f.fwApplicationLayerInterface("PGUrlE").PGUrlE(opts...)
}

// DB is part of the interface ApplicationLayerInterface.
func (f *wrap) DB() *kv.DB {
	return f.fwApplicationLayerInterface("DB").DB()
}

// PGServer is part of the interface ApplicationLayerInterface.
func (f *wrap) PGServer() interface{} {
	return f.fwApplicationLayerInterface("PGServer").PGServer()
}

// PGPreServer is part of the interface ApplicationLayerInterface.
func (f *wrap) PGPreServer() interface{} {
	return f.fwApplicationLayerInterface("PGPreServer").PGPreServer()
}

// DiagnosticsReporter is part of the interface ApplicationLayerInterface.
func (f *wrap) DiagnosticsReporter() interface{} {
	return f.fwApplicationLayerInterface("DiagnosticsReporter").DiagnosticsReporter()
}

// StatusServer is part of the interface ApplicationLayerInterface.
func (f *wrap) StatusServer() interface{} {
	return f.fwApplicationLayerInterface("StatusServer").StatusServer()
}

// TenantStatusServer is part of the interface ApplicationLayerInterface.
func (f *wrap) TenantStatusServer() interface{} {
	return f.fwApplicationLayerInterface("TenantStatusServer").TenantStatusServer()
}

// HTTPAuthServer is part of the interface ApplicationLayerInterface.
func (f *wrap) HTTPAuthServer() interface{} {
	return f.fwApplicationLayerInterface("HTTPAuthServer").HTTPAuthServer()
}

// HTTPServer is part of the interface ApplicationLayerInterface.
func (f *wrap) HTTPServer() interface{} {
	return f.fwApplicationLayerInterface("HTTPServer").HTTPServer()
}

// SQLLoopbackListener is part of the interface ApplicationLayerInterface.
func (f *wrap) SQLLoopbackListener() interface{} {
	return f.fwApplicationLayerInterface("SQLLoopbackListener").SQLLoopbackListener()
}

// SQLServer is part of the interface ApplicationLayerInterface.
func (f *wrap) SQLServer() interface{} {
	return f.fwApplicationLayerInterface("SQLServer").SQLServer()
}

// DistSQLServer is part of the interface ApplicationLayerInterface.
func (f *wrap) DistSQLServer() interface{} {
	return f.fwApplicationLayerInterface("DistSQLServer").DistSQLServer()
}

// SetDistSQLSpanResolver is part of the interface ApplicationLayerInterface.
func (f *wrap) SetDistSQLSpanResolver(spanResolver interface{}) {
	f.fwApplicationLayerInterface("SetDistSQLSpanResolver").SetDistSQLSpanResolver(spanResolver)
}

// DistSenderI is part of the interface ApplicationLayerInterface.
func (f *wrap) DistSenderI() interface{} {
	return f.fwApplicationLayerInterface("DistSenderI").DistSenderI()
}

// InternalDB is part of the interface ApplicationLayerInterface.
func (f *wrap) InternalDB() interface{} {
	return f.fwApplicationLayerInterface("InternalDB").InternalDB()
}

// InternalExecutor is part of the interface ApplicationLayerInterface.
func (f *wrap) InternalExecutor() interface{} {
	return f.fwApplicationLayerInterface("InternalExecutor").InternalExecutor()
}

// LeaseManager is part of the interface ApplicationLayerInterface.
func (f *wrap) LeaseManager() interface{} {
	return f.fwApplicationLayerInterface("LeaseManager").LeaseManager()
}

// JobRegistry is part of the interface ApplicationLayerInterface.
func (f *wrap) JobRegistry() interface{} {
	return f.fwApplicationLayerInterface("JobRegistry").JobRegistry()
}

// RPCContext is part of the interface ApplicationLayerInterface.
func (f *wrap) RPCContext() *rpc.Context {
	return f.fwApplicationLayerInterface("RPCContext").RPCContext()
}

// NewClientRPCContext is part of the interface ApplicationLayerInterface.
func (f *wrap) NewClientRPCContext(ctx context.Context, userName username.SQLUsername) *rpc.Context {
	return f.fwApplicationLayerInterface("NewClientRPCContext").NewClientRPCContext(ctx, userName)
}

// RPCClientConn is part of the interface ApplicationLayerInterface.
func (f *wrap) RPCClientConn(t TestFataler, userName username.SQLUsername) RPCConn {
	return f.fwApplicationLayerInterface("RPCClientConn").RPCClientConn(t, userName)
}

// RPCClientConnE is part of the interface ApplicationLayerInterface.
func (f *wrap) RPCClientConnE(userName username.SQLUsername) (RPCConn, error) {
	return f.fwApplicationLayerInterface("RPCClientConnE").RPCClientConnE(userName)
}

// GetAdminClient is part of the interface ApplicationLayerInterface.
func (f *wrap) GetAdminClient(t TestFataler) serverpb.RPCAdminClient {
	return f.fwApplicationLayerInterface("GetAdminClient").GetAdminClient(t)
}

// GetStatusClient is part of the interface ApplicationLayerInterface.
func (f *wrap) GetStatusClient(t TestFataler) serverpb.RPCStatusClient {
	return f.fwApplicationLayerInterface("GetStatusClient").GetStatusClient(t)
}

// AnnotateCtx is part of the interface ApplicationLayerInterface.
func (f *wrap) AnnotateCtx(arg0 context.Context) context.Context {
	return f.fwApplicationLayerInterface("AnnotateCtx").AnnotateCtx(arg0)
}

// ExecutorConfig is part of the interface ApplicationLayerInterface.
func (f *wrap) ExecutorConfig() interface{} {
	return f.fwApplicationLayerInterface("ExecutorConfig").ExecutorConfig()
}

// RangeFeedFactory is part of the interface ApplicationLayerInterface.
func (f *wrap) RangeFeedFactory() interface{} {
	return f.fwApplicationLayerInterface("RangeFeedFactory").RangeFeedFactory()
}

// ClusterSettings is part of the interface ApplicationLayerInterface.
func (f *wrap) ClusterSettings() *cluster.Settings {
	return f.fwApplicationLayerInterface("ClusterSettings").ClusterSettings()
}

// SettingsWatcher is part of the interface ApplicationLayerInterface.
func (f *wrap) SettingsWatcher() interface{} {
	return f.fwApplicationLayerInterface("SettingsWatcher").SettingsWatcher()
}

// AppStopper is part of the interface ApplicationLayerInterface.
func (f *wrap) AppStopper() *stop.Stopper {
	return f.fwApplicationLayerInterface("AppStopper").AppStopper()
}

// Clock is part of the interface ApplicationLayerInterface.
func (f *wrap) Clock() *hlc.Clock {
	return f.fwApplicationLayerInterface("Clock").Clock()
}

// SpanConfigKVAccessor is part of the interface ApplicationLayerInterface.
func (f *wrap) SpanConfigKVAccessor() interface{} {
	return f.fwApplicationLayerInterface("SpanConfigKVAccessor").SpanConfigKVAccessor()
}

// SpanConfigReporter is part of the interface ApplicationLayerInterface.
func (f *wrap) SpanConfigReporter() interface{} {
	return f.fwApplicationLayerInterface("SpanConfigReporter").SpanConfigReporter()
}

// SpanConfigReconciler is part of the interface ApplicationLayerInterface.
func (f *wrap) SpanConfigReconciler() interface{} {
	return f.fwApplicationLayerInterface("SpanConfigReconciler").SpanConfigReconciler()
}

// SpanConfigSQLTranslatorFactory is part of the interface ApplicationLayerInterface.
func (f *wrap) SpanConfigSQLTranslatorFactory() interface{} {
	return f.fwApplicationLayerInterface("SpanConfigSQLTranslatorFactory").SpanConfigSQLTranslatorFactory()
}

// SpanConfigSQLWatcher is part of the interface ApplicationLayerInterface.
func (f *wrap) SpanConfigSQLWatcher() interface{} {
	return f.fwApplicationLayerInterface("SpanConfigSQLWatcher").SpanConfigSQLWatcher()
}

// TestingKnobs is part of the interface ApplicationLayerInterface.
func (f *wrap) TestingKnobs() *base.TestingKnobs {
	return f.fwApplicationLayerInterface("TestingKnobs").TestingKnobs()
}

// ExternalIODir is part of the interface ApplicationLayerInterface.
func (f *wrap) ExternalIODir() string {
	return f.fwApplicationLayerInterface("ExternalIODir").ExternalIODir()
}

// SQLServerInternal is part of the interface ApplicationLayerInterface.
func (f *wrap) SQLServerInternal() interface{} {
	return f.fwApplicationLayerInterface("SQLServerInternal").SQLServerInternal()
}

// AmbientCtx is part of the interface ApplicationLayerInterface.
func (f *wrap) AmbientCtx() log.AmbientContext {
	return f.fwApplicationLayerInterface("AmbientCtx").AmbientCtx()
}

// AdminURL is part of the interface ApplicationLayerInterface.
func (f *wrap) AdminURL() *TestURL {
	return f.fwApplicationLayerInterface("AdminURL").AdminURL()
}

// GetUnauthenticatedHTTPClient is part of the interface ApplicationLayerInterface.
func (f *wrap) GetUnauthenticatedHTTPClient() (http.Client, error) {
	return f.fwApplicationLayerInterface("GetUnauthenticatedHTTPClient").GetUnauthenticatedHTTPClient()
}

// GetUnauthenticatedHTTPClientWithTransport is part of the interface ApplicationLayerInterface.
func (f *wrap) GetUnauthenticatedHTTPClientWithTransport() (http.Client, *http.Transport, error) {
	return f.fwApplicationLayerInterface("GetUnauthenticatedHTTPClientWithTransport").GetUnauthenticatedHTTPClientWithTransport()
}

// GetAdminHTTPClient is part of the interface ApplicationLayerInterface.
func (f *wrap) GetAdminHTTPClient() (http.Client, error) {
	return f.fwApplicationLayerInterface("GetAdminHTTPClient").GetAdminHTTPClient()
}

// GetAuthenticatedHTTPClient is part of the interface ApplicationLayerInterface.
func (f *wrap) GetAuthenticatedHTTPClient(isAdmin bool, sessionType SessionType) (http.Client, error) {
	return f.fwApplicationLayerInterface("GetAuthenticatedHTTPClient").GetAuthenticatedHTTPClient(isAdmin, sessionType)
}

// GetAuthenticatedHTTPClientAndCookie is part of the interface ApplicationLayerInterface.
func (f *wrap) GetAuthenticatedHTTPClientAndCookie(authUser username.SQLUsername, isAdmin bool, session SessionType) (http.Client, *serverpb.SessionCookie, error) {
	return f.fwApplicationLayerInterface("GetAuthenticatedHTTPClientAndCookie").GetAuthenticatedHTTPClientAndCookie(authUser, isAdmin, session)
}

// GetAuthSession is part of the interface ApplicationLayerInterface.
func (f *wrap) GetAuthSession(isAdmin bool) (*serverpb.SessionCookie, error) {
	return f.fwApplicationLayerInterface("GetAuthSession").GetAuthSession(isAdmin)
}

// CreateAuthUser is part of the interface ApplicationLayerInterface.
func (f *wrap) CreateAuthUser(userName username.SQLUsername, isAdmin bool) error {
	return f.fwApplicationLayerInterface("CreateAuthUser").CreateAuthUser(userName, isAdmin)
}

// DrainClients is part of the interface ApplicationLayerInterface.
func (f *wrap) DrainClients(ctx context.Context) error {
	return f.fwApplicationLayerInterface("DrainClients").DrainClients(ctx)
}

// SystemConfigProvider is part of the interface ApplicationLayerInterface.
func (f *wrap) SystemConfigProvider() config.SystemConfigProvider {
	return f.fwApplicationLayerInterface("SystemConfigProvider").SystemConfigProvider()
}

// MustGetSQLCounter is part of the interface ApplicationLayerInterface.
func (f *wrap) MustGetSQLCounter(name string) int64 {
	return f.fwApplicationLayerInterface("MustGetSQLCounter").MustGetSQLCounter(name)
}

// MustGetSQLNetworkCounter is part of the interface ApplicationLayerInterface.
func (f *wrap) MustGetSQLNetworkCounter(name string) int64 {
	return f.fwApplicationLayerInterface("MustGetSQLNetworkCounter").MustGetSQLNetworkCounter(name)
}

// Codec is part of the interface ApplicationLayerInterface.
func (f *wrap) Codec() keys.SQLCodec {
	return f.fwApplicationLayerInterface("Codec").Codec()
}

// RangeDescIteratorFactory is part of the interface ApplicationLayerInterface.
func (f *wrap) RangeDescIteratorFactory() interface{} {
	return f.fwApplicationLayerInterface("RangeDescIteratorFactory").RangeDescIteratorFactory()
}

// Tracer is part of the interface ApplicationLayerInterface.
func (f *wrap) Tracer() *tracing.Tracer {
	return f.fwApplicationLayerInterface("Tracer").Tracer()
}

// TracerI is part of the interface ApplicationLayerInterface.
func (f *wrap) TracerI() interface{} {
	return f.fwApplicationLayerInterface("TracerI").TracerI()
}

// MigrationServer is part of the interface ApplicationLayerInterface.
func (f *wrap) MigrationServer() interface{} {
	return f.fwApplicationLayerInterface("MigrationServer").MigrationServer()
}

// CollectionFactory is part of the interface ApplicationLayerInterface.
func (f *wrap) CollectionFactory() interface{} {
	return f.fwApplicationLayerInterface("CollectionFactory").CollectionFactory()
}

// SystemTableIDResolver is part of the interface ApplicationLayerInterface.
func (f *wrap) SystemTableIDResolver() interface{} {
	return f.fwApplicationLayerInterface("SystemTableIDResolver").SystemTableIDResolver()
}

// QueryDatabaseID is part of the interface ApplicationLayerInterface.
func (f *wrap) QueryDatabaseID(ctx context.Context, userName username.SQLUsername, dbName string) (descpb.ID, error) {
	return f.fwApplicationLayerInterface("QueryDatabaseID").QueryDatabaseID(ctx, userName, dbName)
}

// QueryTableID is part of the interface ApplicationLayerInterface.
func (f *wrap) QueryTableID(ctx context.Context, userName username.SQLUsername, dbName, tbName string) (descpb.ID, error) {
	return f.fwApplicationLayerInterface("QueryTableID").QueryTableID(ctx, userName, dbName, tbName)
}

// StatsForSpan is part of the interface ApplicationLayerInterface.
func (f *wrap) StatsForSpan(ctx context.Context, span roachpb.Span) (*serverpb.TableStatsResponse, error) {
	return f.fwApplicationLayerInterface("StatsForSpan").StatsForSpan(ctx, span)
}

// ForceTableGC is part of the interface ApplicationLayerInterface.
func (f *wrap) ForceTableGC(ctx context.Context, database, table string, timestamp hlc.Timestamp) error {
	return f.fwApplicationLayerInterface("ForceTableGC").ForceTableGC(ctx, database, table, timestamp)
}

// DefaultZoneConfig is part of the interface ApplicationLayerInterface.
func (f *wrap) DefaultZoneConfig() zonepb.ZoneConfig {
	return f.fwApplicationLayerInterface("DefaultZoneConfig").DefaultZoneConfig()
}

// SetReady is part of the interface ApplicationLayerInterface.
func (f *wrap) SetReady(arg0 bool) {
	f.fwApplicationLayerInterface("SetReady").SetReady(arg0)
}

// SetAcceptSQLWithoutTLS is part of the interface ApplicationLayerInterface.
func (f *wrap) SetAcceptSQLWithoutTLS(arg0 bool) {
	f.fwApplicationLayerInterface("SetAcceptSQLWithoutTLS").SetAcceptSQLWithoutTLS(arg0)
}

// PrivilegeChecker is part of the interface ApplicationLayerInterface.
func (f *wrap) PrivilegeChecker() interface{} {
	return f.fwApplicationLayerInterface("PrivilegeChecker").PrivilegeChecker()
}

// NodeDescStoreI is part of the interface ApplicationLayerInterface.
func (f *wrap) NodeDescStoreI() interface{} {
	return f.fwApplicationLayerInterface("NodeDescStoreI").NodeDescStoreI()
}

// Locality is part of the interface ApplicationLayerInterface.
func (f *wrap) Locality() roachpb.Locality {
	return f.fwApplicationLayerInterface("Locality").Locality()
}

// DistSQLPlanningNodeID is part of the interface ApplicationLayerInterface.
func (f *wrap) DistSQLPlanningNodeID() roachpb.NodeID {
	return f.fwApplicationLayerInterface("DistSQLPlanningNodeID").DistSQLPlanningNodeID()
}

// DeploymentMode is part of the interface ApplicationLayerInterface.
func (f *wrap) DeploymentMode() DeploymentMode {
	return f.fwApplicationLayerInterface("DeploymentMode").DeploymentMode()
}
