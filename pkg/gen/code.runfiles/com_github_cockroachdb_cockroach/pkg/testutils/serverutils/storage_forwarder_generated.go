// Code generated by fwgen; DO NOT EDIT.
// Generated from: pkg/testutils/serverutils/api.go

package serverutils

import (
	"context"

	"github.com/cockroachdb/cockroach/pkg/base"
	"github.com/cockroachdb/cockroach/pkg/config/zonepb"
	"github.com/cockroachdb/cockroach/pkg/kv/kvprober"
	"github.com/cockroachdb/cockroach/pkg/kv/kvserver/liveness/livenesspb"
	"github.com/cockroachdb/cockroach/pkg/multitenant/tenantcapabilities"
	"github.com/cockroachdb/cockroach/pkg/roachpb"
	"github.com/cockroachdb/cockroach/pkg/server/decommissioning"
	"github.com/cockroachdb/cockroach/pkg/server/status"
	"github.com/cockroachdb/cockroach/pkg/storage"
	"github.com/cockroachdb/cockroach/pkg/util/hlc"
	"github.com/cockroachdb/cockroach/pkg/util/uuid"
)

// Node is part of the interface StorageLayerInterface.
func (f *wrap) Node() interface{} {
	return f.fwStorageLayerInterface("Node").Node()
}

// NodeID is part of the interface StorageLayerInterface.
func (f *wrap) NodeID() roachpb.NodeID {
	return f.fwStorageLayerInterface("NodeID").NodeID()
}

// StorageClusterID is part of the interface StorageLayerInterface.
func (f *wrap) StorageClusterID() uuid.UUID {
	return f.fwStorageLayerInterface("StorageClusterID").StorageClusterID()
}

// GossipI is part of the interface StorageLayerInterface.
func (f *wrap) GossipI() interface{} {
	return f.fwStorageLayerInterface("GossipI").GossipI()
}

// SQLLivenessProvider is part of the interface StorageLayerInterface.
func (f *wrap) SQLLivenessProvider() interface{} {
	return f.fwStorageLayerInterface("SQLLivenessProvider").SQLLivenessProvider()
}

// NodeLiveness is part of the interface StorageLayerInterface.
func (f *wrap) NodeLiveness() interface{} {
	return f.fwStorageLayerInterface("NodeLiveness").NodeLiveness()
}

// HeartbeatNodeLiveness is part of the interface StorageLayerInterface.
func (f *wrap) HeartbeatNodeLiveness() error {
	return f.fwStorageLayerInterface("HeartbeatNodeLiveness").HeartbeatNodeLiveness()
}

// WriteSummaries is part of the interface StorageLayerInterface.
func (f *wrap) WriteSummaries() error {
	return f.fwStorageLayerInterface("WriteSummaries").WriteSummaries()
}

// GetFirstStoreID is part of the interface StorageLayerInterface.
func (f *wrap) GetFirstStoreID() roachpb.StoreID {
	return f.fwStorageLayerInterface("GetFirstStoreID").GetFirstStoreID()
}

// GetStores is part of the interface StorageLayerInterface.
func (f *wrap) GetStores() interface{} {
	return f.fwStorageLayerInterface("GetStores").GetStores()
}

// Decommission is part of the interface StorageLayerInterface.
func (f *wrap) Decommission(ctx context.Context, targetStatus livenesspb.MembershipStatus, nodeIDs []roachpb.NodeID) error {
	return f.fwStorageLayerInterface("Decommission").Decommission(ctx, targetStatus, nodeIDs)
}

// DecommissioningNodeMap is part of the interface StorageLayerInterface.
func (f *wrap) DecommissioningNodeMap() map[roachpb.NodeID]interface{} {
	return f.fwStorageLayerInterface("DecommissioningNodeMap").DecommissioningNodeMap()
}

// SplitRange is part of the interface StorageLayerInterface.
func (f *wrap) SplitRange(splitKey roachpb.Key) (roachpb.RangeDescriptor, roachpb.RangeDescriptor, error) {
	return f.fwStorageLayerInterface("SplitRange").SplitRange(splitKey)
}

// SplitRangeWithExpiration is part of the interface StorageLayerInterface.
func (f *wrap) SplitRangeWithExpiration(splitKey roachpb.Key, expirationTime hlc.Timestamp) (roachpb.RangeDescriptor, roachpb.RangeDescriptor, error) {
	return f.fwStorageLayerInterface("SplitRangeWithExpiration").SplitRangeWithExpiration(splitKey, expirationTime)
}

// MergeRanges is part of the interface StorageLayerInterface.
func (f *wrap) MergeRanges(leftKey roachpb.Key) (roachpb.RangeDescriptor, error) {
	return f.fwStorageLayerInterface("MergeRanges").MergeRanges(leftKey)
}

// LookupRange is part of the interface StorageLayerInterface.
func (f *wrap) LookupRange(key roachpb.Key) (roachpb.RangeDescriptor, error) {
	return f.fwStorageLayerInterface("LookupRange").LookupRange(key)
}

// ExpectedInitialRangeCount is part of the interface StorageLayerInterface.
func (f *wrap) ExpectedInitialRangeCount() (int, error) {
	return f.fwStorageLayerInterface("ExpectedInitialRangeCount").ExpectedInitialRangeCount()
}

// UpdateChecker is part of the interface StorageLayerInterface.
func (f *wrap) UpdateChecker() interface{} {
	return f.fwStorageLayerInterface("UpdateChecker").UpdateChecker()
}

// ScratchRange is part of the interface StorageLayerInterface.
func (f *wrap) ScratchRange() (roachpb.Key, error) {
	return f.fwStorageLayerInterface("ScratchRange").ScratchRange()
}

// ScratchRangeEx is part of the interface StorageLayerInterface.
func (f *wrap) ScratchRangeEx() (roachpb.RangeDescriptor, roachpb.RangeDescriptor, error) {
	return f.fwStorageLayerInterface("ScratchRangeEx").ScratchRangeEx()
}

// ScratchRangeWithExpirationLease is part of the interface StorageLayerInterface.
func (f *wrap) ScratchRangeWithExpirationLease() (roachpb.Key, error) {
	return f.fwStorageLayerInterface("ScratchRangeWithExpirationLease").ScratchRangeWithExpirationLease()
}

// ScratchRangeWithExpirationLeaseEx is part of the interface StorageLayerInterface.
func (f *wrap) ScratchRangeWithExpirationLeaseEx() (roachpb.RangeDescriptor, roachpb.RangeDescriptor, error) {
	return f.fwStorageLayerInterface("ScratchRangeWithExpirationLeaseEx").ScratchRangeWithExpirationLeaseEx()
}

// Engines is part of the interface StorageLayerInterface.
func (f *wrap) Engines() []storage.Engine {
	return f.fwStorageLayerInterface("Engines").Engines()
}

// MetricsRecorder is part of the interface StorageLayerInterface.
func (f *wrap) MetricsRecorder() *status.MetricsRecorder {
	return f.fwStorageLayerInterface("MetricsRecorder").MetricsRecorder()
}

// SpanConfigKVSubscriber is part of the interface StorageLayerInterface.
func (f *wrap) SpanConfigKVSubscriber() interface{} {
	return f.fwStorageLayerInterface("SpanConfigKVSubscriber").SpanConfigKVSubscriber()
}

// KvProber is part of the interface StorageLayerInterface.
func (f *wrap) KvProber() *kvprober.Prober {
	return f.fwStorageLayerInterface("KvProber").KvProber()
}

// RaftTransport is part of the interface StorageLayerInterface.
func (f *wrap) RaftTransport() interface{} {
	return f.fwStorageLayerInterface("RaftTransport").RaftTransport()
}

// StoreLivenessTransport is part of the interface StorageLayerInterface.
func (f *wrap) StoreLivenessTransport() interface{} {
	return f.fwStorageLayerInterface("StoreLivenessTransport").StoreLivenessTransport()
}

// GetRangeLease is part of the interface StorageLayerInterface.
func (f *wrap) GetRangeLease(ctx context.Context, key roachpb.Key, queryPolicy roachpb.LeaseInfoOpt) (roachpb.LeaseInfo, hlc.ClockTimestamp, error) {
	return f.fwStorageLayerInterface("GetRangeLease").GetRangeLease(ctx, key, queryPolicy)
}

// TenantCapabilitiesReader is part of the interface StorageLayerInterface.
func (f *wrap) TenantCapabilitiesReader() tenantcapabilities.Reader {
	return f.fwStorageLayerInterface("TenantCapabilitiesReader").TenantCapabilitiesReader()
}

// TsDB is part of the interface StorageLayerInterface.
func (f *wrap) TsDB() interface{} {
	return f.fwStorageLayerInterface("TsDB").TsDB()
}

// DefaultSystemZoneConfig is part of the interface StorageLayerInterface.
func (f *wrap) DefaultSystemZoneConfig() zonepb.ZoneConfig {
	return f.fwStorageLayerInterface("DefaultSystemZoneConfig").DefaultSystemZoneConfig()
}

// DecommissionPreCheck is part of the interface StorageLayerInterface.
func (f *wrap) DecommissionPreCheck(ctx context.Context, nodeIDs []roachpb.NodeID, strictReadiness bool, collectTraces bool, maxErrors int) (decommissioning.PreCheckResult, error) {
	return f.fwStorageLayerInterface("DecommissionPreCheck").DecommissionPreCheck(ctx, nodeIDs, strictReadiness, collectTraces, maxErrors)
}

// RaftConfig is part of the interface StorageLayerInterface.
func (f *wrap) RaftConfig() base.RaftConfig {
	return f.fwStorageLayerInterface("RaftConfig").RaftConfig()
}
