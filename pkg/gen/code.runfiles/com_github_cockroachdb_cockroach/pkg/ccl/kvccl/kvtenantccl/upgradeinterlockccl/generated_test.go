// Copyright 2021 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

// Code generated by pkg/ccl/kvccl/kvtenantccl/upgradeinterlockccl/testgen, DO NOT EDIT.

package upgradeinterlockccl

import (
	"testing"

	"github.com/cockroachdb/cockroach/pkg/ccl/kvccl/kvtenantccl/upgradeinterlockccl/sharedtestutil"
	"github.com/cockroachdb/cockroach/pkg/testutils/skip"
	"github.com/cockroachdb/cockroach/pkg/util/leaktest"
	"github.com/cockroachdb/cockroach/pkg/util/log"
)

func TestTenantUpgradeInterlock_current_binary_version_pause_after_fence_RPC(t *testing.T) {
	defer leaktest.AfterTest(t)()
	// Times out under race.
	skip.UnderRace(t)
	// Test target takes 100s+ to run.
	skip.UnderShort(t)
	defer log.Scope(t).Close(t)

	runTest(t, 0, sharedtestutil.Tests["pause_after_fence_RPC"])
}

func TestTenantUpgradeInterlock_lagging_binary_version_pause_after_fence_RPC(t *testing.T) {
	defer leaktest.AfterTest(t)()
	// Times out under race.
	skip.UnderRace(t)
	// Test target takes 100s+ to run.
	skip.UnderShort(t)
	defer log.Scope(t).Close(t)

	runTest(t, 1, sharedtestutil.Tests["pause_after_fence_RPC"])
}

func TestTenantUpgradeInterlock_current_binary_version_pause_after_fence_write_to_settings_table(t *testing.T) {
	defer leaktest.AfterTest(t)()
	// Times out under race.
	skip.UnderRace(t)
	// Test target takes 100s+ to run.
	skip.UnderShort(t)
	defer log.Scope(t).Close(t)

	runTest(t, 0, sharedtestutil.Tests["pause_after_fence_write_to_settings_table"])
}

func TestTenantUpgradeInterlock_lagging_binary_version_pause_after_fence_write_to_settings_table(t *testing.T) {
	defer leaktest.AfterTest(t)()
	// Times out under race.
	skip.UnderRace(t)
	// Test target takes 100s+ to run.
	skip.UnderShort(t)
	defer log.Scope(t).Close(t)

	runTest(t, 1, sharedtestutil.Tests["pause_after_fence_write_to_settings_table"])
}

func TestTenantUpgradeInterlock_current_binary_version_pause_after_first_check_for_instances(t *testing.T) {
	defer leaktest.AfterTest(t)()
	// Times out under race.
	skip.UnderRace(t)
	// Test target takes 100s+ to run.
	skip.UnderShort(t)
	defer log.Scope(t).Close(t)

	runTest(t, 0, sharedtestutil.Tests["pause_after_first_check_for_instances"])
}

func TestTenantUpgradeInterlock_lagging_binary_version_pause_after_first_check_for_instances(t *testing.T) {
	defer leaktest.AfterTest(t)()
	// Times out under race.
	skip.UnderRace(t)
	// Test target takes 100s+ to run.
	skip.UnderShort(t)
	defer log.Scope(t).Close(t)

	runTest(t, 1, sharedtestutil.Tests["pause_after_first_check_for_instances"])
}

func TestTenantUpgradeInterlock_current_binary_version_pause_after_migration(t *testing.T) {
	defer leaktest.AfterTest(t)()
	// Times out under race.
	skip.UnderRace(t)
	// Test target takes 100s+ to run.
	skip.UnderShort(t)
	defer log.Scope(t).Close(t)

	runTest(t, 0, sharedtestutil.Tests["pause_after_migration"])
}

func TestTenantUpgradeInterlock_lagging_binary_version_pause_after_migration(t *testing.T) {
	defer leaktest.AfterTest(t)()
	// Times out under race.
	skip.UnderRace(t)
	// Test target takes 100s+ to run.
	skip.UnderShort(t)
	defer log.Scope(t).Close(t)

	runTest(t, 1, sharedtestutil.Tests["pause_after_migration"])
}

func TestTenantUpgradeInterlock_current_binary_version_pause_after_second_check_of_instances(t *testing.T) {
	defer leaktest.AfterTest(t)()
	// Times out under race.
	skip.UnderRace(t)
	// Test target takes 100s+ to run.
	skip.UnderShort(t)
	defer log.Scope(t).Close(t)

	runTest(t, 0, sharedtestutil.Tests["pause_after_second_check_of_instances"])
}

func TestTenantUpgradeInterlock_lagging_binary_version_pause_after_second_check_of_instances(t *testing.T) {
	defer leaktest.AfterTest(t)()
	// Times out under race.
	skip.UnderRace(t)
	// Test target takes 100s+ to run.
	skip.UnderShort(t)
	defer log.Scope(t).Close(t)

	runTest(t, 1, sharedtestutil.Tests["pause_after_second_check_of_instances"])
}

func TestTenantUpgradeInterlock_current_binary_version_pause_after_version_bump_RPC(t *testing.T) {
	defer leaktest.AfterTest(t)()
	// Times out under race.
	skip.UnderRace(t)
	// Test target takes 100s+ to run.
	skip.UnderShort(t)
	defer log.Scope(t).Close(t)

	runTest(t, 0, sharedtestutil.Tests["pause_after_version_bump_RPC"])
}

func TestTenantUpgradeInterlock_lagging_binary_version_pause_after_version_bump_RPC(t *testing.T) {
	defer leaktest.AfterTest(t)()
	// Times out under race.
	skip.UnderRace(t)
	// Test target takes 100s+ to run.
	skip.UnderShort(t)
	defer log.Scope(t).Close(t)

	runTest(t, 1, sharedtestutil.Tests["pause_after_version_bump_RPC"])
}

func TestTenantUpgradeInterlock_current_binary_version_pause_after_write_to_settings_table(t *testing.T) {
	defer leaktest.AfterTest(t)()
	// Times out under race.
	skip.UnderRace(t)
	// Test target takes 100s+ to run.
	skip.UnderShort(t)
	defer log.Scope(t).Close(t)

	runTest(t, 0, sharedtestutil.Tests["pause_after_write_to_settings_table"])
}

func TestTenantUpgradeInterlock_lagging_binary_version_pause_after_write_to_settings_table(t *testing.T) {
	defer leaktest.AfterTest(t)()
	// Times out under race.
	skip.UnderRace(t)
	// Test target takes 100s+ to run.
	skip.UnderShort(t)
	defer log.Scope(t).Close(t)

	runTest(t, 1, sharedtestutil.Tests["pause_after_write_to_settings_table"])
}
