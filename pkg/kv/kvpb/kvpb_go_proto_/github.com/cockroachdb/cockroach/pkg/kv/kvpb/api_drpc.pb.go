// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// source: kv/kvpb/api.proto

package kvpb

import (
	bytes "bytes"
	context "context"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	errors "github.com/cockroachdb/errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_kv_kvpb_api_proto struct{}

func (drpcEncoding_File_kv_kvpb_api_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_kv_kvpb_api_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_kv_kvpb_api_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_kv_kvpb_api_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCKVBatchClient interface {
	DRPCConn() drpc.Conn

	Batch(ctx context.Context, in *BatchRequest) (*BatchResponse, error)
	BatchStream(ctx context.Context) (DRPCKVBatch_BatchStreamClient, error)
}

type drpcKVBatchClient struct {
	cc drpc.Conn
}

func NewDRPCKVBatchClient(cc drpc.Conn) DRPCKVBatchClient {
	return &drpcKVBatchClient{cc}
}

func (c *drpcKVBatchClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcKVBatchClient) Batch(ctx context.Context, in *BatchRequest) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.KVBatch/Batch", drpcEncoding_File_kv_kvpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcKVBatchClient) BatchStream(ctx context.Context) (DRPCKVBatch_BatchStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.roachpb.KVBatch/BatchStream", drpcEncoding_File_kv_kvpb_api_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcKVBatch_BatchStreamClient{stream}
	return x, nil
}

type DRPCKVBatch_BatchStreamClient interface {
	drpc.Stream
	Send(*BatchRequest) error
	Recv() (*BatchResponse, error)
}

type RPCKVBatch_BatchStreamClient interface {
	Context() context.Context
	CloseSend() error
	Send(*BatchRequest) error
	Recv() (*BatchResponse, error)
}

type drpcKVBatch_BatchStreamClient struct {
	drpc.Stream
}

func (x *drpcKVBatch_BatchStreamClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcKVBatch_BatchStreamClient) Send(m *BatchRequest) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

func (x *drpcKVBatch_BatchStreamClient) Recv() (*BatchResponse, error) {
	m := new(BatchResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcKVBatch_BatchStreamClient) RecvMsg(m *BatchResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

type DRPCKVBatchServer interface {
	Batch(context.Context, *BatchRequest) (*BatchResponse, error)
	BatchStream(DRPCKVBatch_BatchStreamStream) error
}

type DRPCKVBatchUnimplementedServer struct{}

func (s *DRPCKVBatchUnimplementedServer) Batch(context.Context, *BatchRequest) (*BatchResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCKVBatchUnimplementedServer) BatchStream(DRPCKVBatch_BatchStreamStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCKVBatchDescription struct{}

func (DRPCKVBatchDescription) NumMethods() int { return 2 }

func (DRPCKVBatchDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.roachpb.KVBatch/Batch", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCKVBatchServer).
					Batch(
						ctx,
						in1.(*BatchRequest),
					)
			}, DRPCKVBatchServer.Batch, true
	case 1:
		return "/cockroach.roachpb.KVBatch/BatchStream", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCKVBatchServer).
					BatchStream(
						&drpcKVBatch_BatchStreamStream{in1.(drpc.Stream)},
					)
			}, DRPCKVBatchServer.BatchStream, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterKVBatch(mux drpc.Mux, impl DRPCKVBatchServer) error {
	return mux.Register(impl, DRPCKVBatchDescription{})
}

type DRPCKVBatch_BatchStream interface {
	drpc.Stream
	SendAndClose(*BatchResponse) error
}

type RPCKVBatch_BatchStream interface {
	Context() context.Context
	SendAndClose(*BatchResponse) error
}

type drpcKVBatch_BatchStream struct {
	drpc.Stream
}

func (x *drpcKVBatch_BatchStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcKVBatch_BatchStream) SendAndClose(m *BatchResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCKVBatch_BatchStreamStream interface {
	drpc.Stream
	Send(*BatchResponse) error
	Recv() (*BatchRequest, error)
	RecvMsg(interface{}) error
}

type RPCKVBatch_BatchStreamStream interface {
	Context() context.Context
	Send(*BatchResponse) error
	Recv() (*BatchRequest, error)
	RecvMsg(interface{}) error
}

type drpcKVBatch_BatchStreamStream struct {
	drpc.Stream
}

func (x *drpcKVBatch_BatchStreamStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcKVBatch_BatchStreamStream) Send(m *BatchResponse) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

func (x *drpcKVBatch_BatchStreamStream) Recv() (*BatchRequest, error) {
	m := new(BatchRequest)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcKVBatch_BatchStreamStream) RecvMsg(m interface{}) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

type RPCKVBatchClient interface {
	Batch(ctx context.Context, in *BatchRequest) (*BatchResponse, error)
	BatchStream(ctx context.Context) (RPCKVBatch_BatchStreamClient, error)
}

// KVBatch gRPC -> RPC adapter
type grpcKVBatchClientAdapter kVBatchClient

func NewGRPCKVBatchClientAdapter(conn *grpc.ClientConn) RPCKVBatchClient {
	return (*grpcKVBatchClientAdapter)(&kVBatchClient{conn})
}

func (a *grpcKVBatchClientAdapter) Batch(ctx context.Context, in *BatchRequest) (*BatchResponse, error) {
	return (*kVBatchClient)(a).Batch(ctx, in)
}

func (a *grpcKVBatchClientAdapter) BatchStream(ctx context.Context) (RPCKVBatch_BatchStreamClient, error) {
	return (*kVBatchClient)(a).BatchStream(ctx)
}

// compile-time assertion
var _ RPCKVBatchClient = (*grpcKVBatchClientAdapter)(nil)

// KVBatch DRPC -> RPC adapter
type drpcKVBatchClientAdapter drpcKVBatchClient

func NewDRPCKVBatchClientAdapter(conn drpc.Conn) RPCKVBatchClient {
	return (*drpcKVBatchClientAdapter)(&drpcKVBatchClient{conn})
}

func (a *drpcKVBatchClientAdapter) Batch(ctx context.Context, in *BatchRequest) (*BatchResponse, error) {
	return (*drpcKVBatchClient)(a).Batch(ctx, in)
}

func (a *drpcKVBatchClientAdapter) BatchStream(ctx context.Context) (RPCKVBatch_BatchStreamClient, error) {
	return (*drpcKVBatchClient)(a).BatchStream(ctx)
}

// compile-time assertion
var _ RPCKVBatchClient = (*drpcKVBatchClientAdapter)(nil)

type DRPCTenantServiceClient interface {
	DRPCConn() drpc.Conn

	TenantSettings(ctx context.Context, in *TenantSettingsRequest) (DRPCTenantService_TenantSettingsClient, error)
	GossipSubscription(ctx context.Context, in *GossipSubscriptionRequest) (DRPCTenantService_GossipSubscriptionClient, error)
	RangeLookup(ctx context.Context, in *RangeLookupRequest) (*RangeLookupResponse, error)
	GetRangeDescriptors(ctx context.Context, in *GetRangeDescriptorsRequest) (DRPCTenantService_GetRangeDescriptorsClient, error)
}

type drpcTenantServiceClient struct {
	cc drpc.Conn
}

func NewDRPCTenantServiceClient(cc drpc.Conn) DRPCTenantServiceClient {
	return &drpcTenantServiceClient{cc}
}

func (c *drpcTenantServiceClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcTenantServiceClient) TenantSettings(ctx context.Context, in *TenantSettingsRequest) (DRPCTenantService_TenantSettingsClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.roachpb.TenantService/TenantSettings", drpcEncoding_File_kv_kvpb_api_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcTenantService_TenantSettingsClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCTenantService_TenantSettingsClient interface {
	drpc.Stream
	Recv() (*TenantSettingsEvent, error)
}

type RPCTenantService_TenantSettingsClient interface {
	Context() context.Context
	CloseSend() error
	Recv() (*TenantSettingsEvent, error)
}

type drpcTenantService_TenantSettingsClient struct {
	drpc.Stream
}

func (x *drpcTenantService_TenantSettingsClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTenantService_TenantSettingsClient) Recv() (*TenantSettingsEvent, error) {
	m := new(TenantSettingsEvent)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcTenantService_TenantSettingsClient) RecvMsg(m *TenantSettingsEvent) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

func (c *drpcTenantServiceClient) GossipSubscription(ctx context.Context, in *GossipSubscriptionRequest) (DRPCTenantService_GossipSubscriptionClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.roachpb.TenantService/GossipSubscription", drpcEncoding_File_kv_kvpb_api_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcTenantService_GossipSubscriptionClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCTenantService_GossipSubscriptionClient interface {
	drpc.Stream
	Recv() (*GossipSubscriptionEvent, error)
}

type RPCTenantService_GossipSubscriptionClient interface {
	Context() context.Context
	CloseSend() error
	Recv() (*GossipSubscriptionEvent, error)
}

type drpcTenantService_GossipSubscriptionClient struct {
	drpc.Stream
}

func (x *drpcTenantService_GossipSubscriptionClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTenantService_GossipSubscriptionClient) Recv() (*GossipSubscriptionEvent, error) {
	m := new(GossipSubscriptionEvent)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcTenantService_GossipSubscriptionClient) RecvMsg(m *GossipSubscriptionEvent) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

func (c *drpcTenantServiceClient) RangeLookup(ctx context.Context, in *RangeLookupRequest) (*RangeLookupResponse, error) {
	out := new(RangeLookupResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.TenantService/RangeLookup", drpcEncoding_File_kv_kvpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTenantServiceClient) GetRangeDescriptors(ctx context.Context, in *GetRangeDescriptorsRequest) (DRPCTenantService_GetRangeDescriptorsClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.roachpb.TenantService/GetRangeDescriptors", drpcEncoding_File_kv_kvpb_api_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcTenantService_GetRangeDescriptorsClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCTenantService_GetRangeDescriptorsClient interface {
	drpc.Stream
	Recv() (*GetRangeDescriptorsResponse, error)
}

type RPCTenantService_GetRangeDescriptorsClient interface {
	Context() context.Context
	CloseSend() error
	Recv() (*GetRangeDescriptorsResponse, error)
}

type drpcTenantService_GetRangeDescriptorsClient struct {
	drpc.Stream
}

func (x *drpcTenantService_GetRangeDescriptorsClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTenantService_GetRangeDescriptorsClient) Recv() (*GetRangeDescriptorsResponse, error) {
	m := new(GetRangeDescriptorsResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcTenantService_GetRangeDescriptorsClient) RecvMsg(m *GetRangeDescriptorsResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

type DRPCTenantServiceServer interface {
	TenantSettings(*TenantSettingsRequest, DRPCTenantService_TenantSettingsStream) error
	GossipSubscription(*GossipSubscriptionRequest, DRPCTenantService_GossipSubscriptionStream) error
	RangeLookup(context.Context, *RangeLookupRequest) (*RangeLookupResponse, error)
	GetRangeDescriptors(*GetRangeDescriptorsRequest, DRPCTenantService_GetRangeDescriptorsStream) error
}

type DRPCTenantServiceUnimplementedServer struct{}

func (s *DRPCTenantServiceUnimplementedServer) TenantSettings(*TenantSettingsRequest, DRPCTenantService_TenantSettingsStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCTenantServiceUnimplementedServer) GossipSubscription(*GossipSubscriptionRequest, DRPCTenantService_GossipSubscriptionStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCTenantServiceUnimplementedServer) RangeLookup(context.Context, *RangeLookupRequest) (*RangeLookupResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCTenantServiceUnimplementedServer) GetRangeDescriptors(*GetRangeDescriptorsRequest, DRPCTenantService_GetRangeDescriptorsStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCTenantServiceDescription struct{}

func (DRPCTenantServiceDescription) NumMethods() int { return 4 }

func (DRPCTenantServiceDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.roachpb.TenantService/TenantSettings", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCTenantServiceServer).
					TenantSettings(
						in1.(*TenantSettingsRequest),
						&drpcTenantService_TenantSettingsStream{in2.(drpc.Stream)},
					)
			}, DRPCTenantServiceServer.TenantSettings, true
	case 1:
		return "/cockroach.roachpb.TenantService/GossipSubscription", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCTenantServiceServer).
					GossipSubscription(
						in1.(*GossipSubscriptionRequest),
						&drpcTenantService_GossipSubscriptionStream{in2.(drpc.Stream)},
					)
			}, DRPCTenantServiceServer.GossipSubscription, true
	case 2:
		return "/cockroach.roachpb.TenantService/RangeLookup", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTenantServiceServer).
					RangeLookup(
						ctx,
						in1.(*RangeLookupRequest),
					)
			}, DRPCTenantServiceServer.RangeLookup, true
	case 3:
		return "/cockroach.roachpb.TenantService/GetRangeDescriptors", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCTenantServiceServer).
					GetRangeDescriptors(
						in1.(*GetRangeDescriptorsRequest),
						&drpcTenantService_GetRangeDescriptorsStream{in2.(drpc.Stream)},
					)
			}, DRPCTenantServiceServer.GetRangeDescriptors, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterTenantService(mux drpc.Mux, impl DRPCTenantServiceServer) error {
	return mux.Register(impl, DRPCTenantServiceDescription{})
}

type DRPCTenantService_TenantSettingsStream interface {
	drpc.Stream
	Send(*TenantSettingsEvent) error
}

type RPCTenantService_TenantSettingsStream interface {
	Context() context.Context
	Send(*TenantSettingsEvent) error
}

type drpcTenantService_TenantSettingsStream struct {
	drpc.Stream
}

func (x *drpcTenantService_TenantSettingsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTenantService_TenantSettingsStream) Send(m *TenantSettingsEvent) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

type DRPCTenantService_GossipSubscriptionStream interface {
	drpc.Stream
	Send(*GossipSubscriptionEvent) error
}

type RPCTenantService_GossipSubscriptionStream interface {
	Context() context.Context
	Send(*GossipSubscriptionEvent) error
}

type drpcTenantService_GossipSubscriptionStream struct {
	drpc.Stream
}

func (x *drpcTenantService_GossipSubscriptionStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTenantService_GossipSubscriptionStream) Send(m *GossipSubscriptionEvent) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

type DRPCTenantService_RangeLookupStream interface {
	drpc.Stream
	SendAndClose(*RangeLookupResponse) error
}

type RPCTenantService_RangeLookupStream interface {
	Context() context.Context
	SendAndClose(*RangeLookupResponse) error
}

type drpcTenantService_RangeLookupStream struct {
	drpc.Stream
}

func (x *drpcTenantService_RangeLookupStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTenantService_RangeLookupStream) SendAndClose(m *RangeLookupResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTenantService_GetRangeDescriptorsStream interface {
	drpc.Stream
	Send(*GetRangeDescriptorsResponse) error
}

type RPCTenantService_GetRangeDescriptorsStream interface {
	Context() context.Context
	Send(*GetRangeDescriptorsResponse) error
}

type drpcTenantService_GetRangeDescriptorsStream struct {
	drpc.Stream
}

func (x *drpcTenantService_GetRangeDescriptorsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTenantService_GetRangeDescriptorsStream) Send(m *GetRangeDescriptorsResponse) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

type RPCTenantServiceClient interface {
	TenantSettings(ctx context.Context, in *TenantSettingsRequest) (RPCTenantService_TenantSettingsClient, error)
	GossipSubscription(ctx context.Context, in *GossipSubscriptionRequest) (RPCTenantService_GossipSubscriptionClient, error)
	RangeLookup(ctx context.Context, in *RangeLookupRequest) (*RangeLookupResponse, error)
	GetRangeDescriptors(ctx context.Context, in *GetRangeDescriptorsRequest) (RPCTenantService_GetRangeDescriptorsClient, error)
}

// TenantService gRPC -> RPC adapter
type grpcTenantServiceClientAdapter tenantServiceClient

func NewGRPCTenantServiceClientAdapter(conn *grpc.ClientConn) RPCTenantServiceClient {
	return (*grpcTenantServiceClientAdapter)(&tenantServiceClient{conn})
}

func (a *grpcTenantServiceClientAdapter) TenantSettings(ctx context.Context, in *TenantSettingsRequest) (RPCTenantService_TenantSettingsClient, error) {
	return (*tenantServiceClient)(a).TenantSettings(ctx, in)
}

func (a *grpcTenantServiceClientAdapter) GossipSubscription(ctx context.Context, in *GossipSubscriptionRequest) (RPCTenantService_GossipSubscriptionClient, error) {
	return (*tenantServiceClient)(a).GossipSubscription(ctx, in)
}

func (a *grpcTenantServiceClientAdapter) RangeLookup(ctx context.Context, in *RangeLookupRequest) (*RangeLookupResponse, error) {
	return (*tenantServiceClient)(a).RangeLookup(ctx, in)
}

func (a *grpcTenantServiceClientAdapter) GetRangeDescriptors(ctx context.Context, in *GetRangeDescriptorsRequest) (RPCTenantService_GetRangeDescriptorsClient, error) {
	return (*tenantServiceClient)(a).GetRangeDescriptors(ctx, in)
}

// compile-time assertion
var _ RPCTenantServiceClient = (*grpcTenantServiceClientAdapter)(nil)

// TenantService DRPC -> RPC adapter
type drpcTenantServiceClientAdapter drpcTenantServiceClient

func NewDRPCTenantServiceClientAdapter(conn drpc.Conn) RPCTenantServiceClient {
	return (*drpcTenantServiceClientAdapter)(&drpcTenantServiceClient{conn})
}

func (a *drpcTenantServiceClientAdapter) TenantSettings(ctx context.Context, in *TenantSettingsRequest) (RPCTenantService_TenantSettingsClient, error) {
	return (*drpcTenantServiceClient)(a).TenantSettings(ctx, in)
}

func (a *drpcTenantServiceClientAdapter) GossipSubscription(ctx context.Context, in *GossipSubscriptionRequest) (RPCTenantService_GossipSubscriptionClient, error) {
	return (*drpcTenantServiceClient)(a).GossipSubscription(ctx, in)
}

func (a *drpcTenantServiceClientAdapter) RangeLookup(ctx context.Context, in *RangeLookupRequest) (*RangeLookupResponse, error) {
	return (*drpcTenantServiceClient)(a).RangeLookup(ctx, in)
}

func (a *drpcTenantServiceClientAdapter) GetRangeDescriptors(ctx context.Context, in *GetRangeDescriptorsRequest) (RPCTenantService_GetRangeDescriptorsClient, error) {
	return (*drpcTenantServiceClient)(a).GetRangeDescriptors(ctx, in)
}

// compile-time assertion
var _ RPCTenantServiceClient = (*drpcTenantServiceClientAdapter)(nil)

type DRPCTenantUsageClient interface {
	DRPCConn() drpc.Conn

	TokenBucket(ctx context.Context, in *TokenBucketRequest) (*TokenBucketResponse, error)
}

type drpcTenantUsageClient struct {
	cc drpc.Conn
}

func NewDRPCTenantUsageClient(cc drpc.Conn) DRPCTenantUsageClient {
	return &drpcTenantUsageClient{cc}
}

func (c *drpcTenantUsageClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcTenantUsageClient) TokenBucket(ctx context.Context, in *TokenBucketRequest) (*TokenBucketResponse, error) {
	out := new(TokenBucketResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.TenantUsage/TokenBucket", drpcEncoding_File_kv_kvpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCTenantUsageServer interface {
	TokenBucket(context.Context, *TokenBucketRequest) (*TokenBucketResponse, error)
}

type DRPCTenantUsageUnimplementedServer struct{}

func (s *DRPCTenantUsageUnimplementedServer) TokenBucket(context.Context, *TokenBucketRequest) (*TokenBucketResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCTenantUsageDescription struct{}

func (DRPCTenantUsageDescription) NumMethods() int { return 1 }

func (DRPCTenantUsageDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.roachpb.TenantUsage/TokenBucket", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTenantUsageServer).
					TokenBucket(
						ctx,
						in1.(*TokenBucketRequest),
					)
			}, DRPCTenantUsageServer.TokenBucket, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterTenantUsage(mux drpc.Mux, impl DRPCTenantUsageServer) error {
	return mux.Register(impl, DRPCTenantUsageDescription{})
}

type DRPCTenantUsage_TokenBucketStream interface {
	drpc.Stream
	SendAndClose(*TokenBucketResponse) error
}

type RPCTenantUsage_TokenBucketStream interface {
	Context() context.Context
	SendAndClose(*TokenBucketResponse) error
}

type drpcTenantUsage_TokenBucketStream struct {
	drpc.Stream
}

func (x *drpcTenantUsage_TokenBucketStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTenantUsage_TokenBucketStream) SendAndClose(m *TokenBucketResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type RPCTenantUsageClient interface {
	TokenBucket(ctx context.Context, in *TokenBucketRequest) (*TokenBucketResponse, error)
}

// TenantUsage gRPC -> RPC adapter
type grpcTenantUsageClientAdapter tenantUsageClient

func NewGRPCTenantUsageClientAdapter(conn *grpc.ClientConn) RPCTenantUsageClient {
	return (*grpcTenantUsageClientAdapter)(&tenantUsageClient{conn})
}

func (a *grpcTenantUsageClientAdapter) TokenBucket(ctx context.Context, in *TokenBucketRequest) (*TokenBucketResponse, error) {
	return (*tenantUsageClient)(a).TokenBucket(ctx, in)
}

// compile-time assertion
var _ RPCTenantUsageClient = (*grpcTenantUsageClientAdapter)(nil)

// TenantUsage DRPC -> RPC adapter
type drpcTenantUsageClientAdapter drpcTenantUsageClient

func NewDRPCTenantUsageClientAdapter(conn drpc.Conn) RPCTenantUsageClient {
	return (*drpcTenantUsageClientAdapter)(&drpcTenantUsageClient{conn})
}

func (a *drpcTenantUsageClientAdapter) TokenBucket(ctx context.Context, in *TokenBucketRequest) (*TokenBucketResponse, error) {
	return (*drpcTenantUsageClient)(a).TokenBucket(ctx, in)
}

// compile-time assertion
var _ RPCTenantUsageClient = (*drpcTenantUsageClientAdapter)(nil)

type DRPCTenantSpanConfigClient interface {
	DRPCConn() drpc.Conn

	GetSpanConfigs(ctx context.Context, in *roachpb.GetSpanConfigsRequest) (*roachpb.GetSpanConfigsResponse, error)
	GetAllSystemSpanConfigsThatApply(ctx context.Context, in *roachpb.GetAllSystemSpanConfigsThatApplyRequest) (*roachpb.GetAllSystemSpanConfigsThatApplyResponse, error)
	UpdateSpanConfigs(ctx context.Context, in *roachpb.UpdateSpanConfigsRequest) (*roachpb.UpdateSpanConfigsResponse, error)
	SpanConfigConformance(ctx context.Context, in *roachpb.SpanConfigConformanceRequest) (*roachpb.SpanConfigConformanceResponse, error)
}

type drpcTenantSpanConfigClient struct {
	cc drpc.Conn
}

func NewDRPCTenantSpanConfigClient(cc drpc.Conn) DRPCTenantSpanConfigClient {
	return &drpcTenantSpanConfigClient{cc}
}

func (c *drpcTenantSpanConfigClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcTenantSpanConfigClient) GetSpanConfigs(ctx context.Context, in *roachpb.GetSpanConfigsRequest) (*roachpb.GetSpanConfigsResponse, error) {
	out := new(roachpb.GetSpanConfigsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.TenantSpanConfig/GetSpanConfigs", drpcEncoding_File_kv_kvpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTenantSpanConfigClient) GetAllSystemSpanConfigsThatApply(ctx context.Context, in *roachpb.GetAllSystemSpanConfigsThatApplyRequest) (*roachpb.GetAllSystemSpanConfigsThatApplyResponse, error) {
	out := new(roachpb.GetAllSystemSpanConfigsThatApplyResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.TenantSpanConfig/GetAllSystemSpanConfigsThatApply", drpcEncoding_File_kv_kvpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTenantSpanConfigClient) UpdateSpanConfigs(ctx context.Context, in *roachpb.UpdateSpanConfigsRequest) (*roachpb.UpdateSpanConfigsResponse, error) {
	out := new(roachpb.UpdateSpanConfigsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.TenantSpanConfig/UpdateSpanConfigs", drpcEncoding_File_kv_kvpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTenantSpanConfigClient) SpanConfigConformance(ctx context.Context, in *roachpb.SpanConfigConformanceRequest) (*roachpb.SpanConfigConformanceResponse, error) {
	out := new(roachpb.SpanConfigConformanceResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.TenantSpanConfig/SpanConfigConformance", drpcEncoding_File_kv_kvpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCTenantSpanConfigServer interface {
	GetSpanConfigs(context.Context, *roachpb.GetSpanConfigsRequest) (*roachpb.GetSpanConfigsResponse, error)
	GetAllSystemSpanConfigsThatApply(context.Context, *roachpb.GetAllSystemSpanConfigsThatApplyRequest) (*roachpb.GetAllSystemSpanConfigsThatApplyResponse, error)
	UpdateSpanConfigs(context.Context, *roachpb.UpdateSpanConfigsRequest) (*roachpb.UpdateSpanConfigsResponse, error)
	SpanConfigConformance(context.Context, *roachpb.SpanConfigConformanceRequest) (*roachpb.SpanConfigConformanceResponse, error)
}

type DRPCTenantSpanConfigUnimplementedServer struct{}

func (s *DRPCTenantSpanConfigUnimplementedServer) GetSpanConfigs(context.Context, *roachpb.GetSpanConfigsRequest) (*roachpb.GetSpanConfigsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCTenantSpanConfigUnimplementedServer) GetAllSystemSpanConfigsThatApply(context.Context, *roachpb.GetAllSystemSpanConfigsThatApplyRequest) (*roachpb.GetAllSystemSpanConfigsThatApplyResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCTenantSpanConfigUnimplementedServer) UpdateSpanConfigs(context.Context, *roachpb.UpdateSpanConfigsRequest) (*roachpb.UpdateSpanConfigsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCTenantSpanConfigUnimplementedServer) SpanConfigConformance(context.Context, *roachpb.SpanConfigConformanceRequest) (*roachpb.SpanConfigConformanceResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCTenantSpanConfigDescription struct{}

func (DRPCTenantSpanConfigDescription) NumMethods() int { return 4 }

func (DRPCTenantSpanConfigDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.roachpb.TenantSpanConfig/GetSpanConfigs", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTenantSpanConfigServer).
					GetSpanConfigs(
						ctx,
						in1.(*roachpb.GetSpanConfigsRequest),
					)
			}, DRPCTenantSpanConfigServer.GetSpanConfigs, true
	case 1:
		return "/cockroach.roachpb.TenantSpanConfig/GetAllSystemSpanConfigsThatApply", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTenantSpanConfigServer).
					GetAllSystemSpanConfigsThatApply(
						ctx,
						in1.(*roachpb.GetAllSystemSpanConfigsThatApplyRequest),
					)
			}, DRPCTenantSpanConfigServer.GetAllSystemSpanConfigsThatApply, true
	case 2:
		return "/cockroach.roachpb.TenantSpanConfig/UpdateSpanConfigs", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTenantSpanConfigServer).
					UpdateSpanConfigs(
						ctx,
						in1.(*roachpb.UpdateSpanConfigsRequest),
					)
			}, DRPCTenantSpanConfigServer.UpdateSpanConfigs, true
	case 3:
		return "/cockroach.roachpb.TenantSpanConfig/SpanConfigConformance", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTenantSpanConfigServer).
					SpanConfigConformance(
						ctx,
						in1.(*roachpb.SpanConfigConformanceRequest),
					)
			}, DRPCTenantSpanConfigServer.SpanConfigConformance, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterTenantSpanConfig(mux drpc.Mux, impl DRPCTenantSpanConfigServer) error {
	return mux.Register(impl, DRPCTenantSpanConfigDescription{})
}

type DRPCTenantSpanConfig_GetSpanConfigsStream interface {
	drpc.Stream
	SendAndClose(*roachpb.GetSpanConfigsResponse) error
}

type RPCTenantSpanConfig_GetSpanConfigsStream interface {
	Context() context.Context
	SendAndClose(*roachpb.GetSpanConfigsResponse) error
}

type drpcTenantSpanConfig_GetSpanConfigsStream struct {
	drpc.Stream
}

func (x *drpcTenantSpanConfig_GetSpanConfigsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTenantSpanConfig_GetSpanConfigsStream) SendAndClose(m *roachpb.GetSpanConfigsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTenantSpanConfig_GetAllSystemSpanConfigsThatApplyStream interface {
	drpc.Stream
	SendAndClose(*roachpb.GetAllSystemSpanConfigsThatApplyResponse) error
}

type RPCTenantSpanConfig_GetAllSystemSpanConfigsThatApplyStream interface {
	Context() context.Context
	SendAndClose(*roachpb.GetAllSystemSpanConfigsThatApplyResponse) error
}

type drpcTenantSpanConfig_GetAllSystemSpanConfigsThatApplyStream struct {
	drpc.Stream
}

func (x *drpcTenantSpanConfig_GetAllSystemSpanConfigsThatApplyStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTenantSpanConfig_GetAllSystemSpanConfigsThatApplyStream) SendAndClose(m *roachpb.GetAllSystemSpanConfigsThatApplyResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTenantSpanConfig_UpdateSpanConfigsStream interface {
	drpc.Stream
	SendAndClose(*roachpb.UpdateSpanConfigsResponse) error
}

type RPCTenantSpanConfig_UpdateSpanConfigsStream interface {
	Context() context.Context
	SendAndClose(*roachpb.UpdateSpanConfigsResponse) error
}

type drpcTenantSpanConfig_UpdateSpanConfigsStream struct {
	drpc.Stream
}

func (x *drpcTenantSpanConfig_UpdateSpanConfigsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTenantSpanConfig_UpdateSpanConfigsStream) SendAndClose(m *roachpb.UpdateSpanConfigsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTenantSpanConfig_SpanConfigConformanceStream interface {
	drpc.Stream
	SendAndClose(*roachpb.SpanConfigConformanceResponse) error
}

type RPCTenantSpanConfig_SpanConfigConformanceStream interface {
	Context() context.Context
	SendAndClose(*roachpb.SpanConfigConformanceResponse) error
}

type drpcTenantSpanConfig_SpanConfigConformanceStream struct {
	drpc.Stream
}

func (x *drpcTenantSpanConfig_SpanConfigConformanceStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcTenantSpanConfig_SpanConfigConformanceStream) SendAndClose(m *roachpb.SpanConfigConformanceResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type RPCTenantSpanConfigClient interface {
	GetSpanConfigs(ctx context.Context, in *roachpb.GetSpanConfigsRequest) (*roachpb.GetSpanConfigsResponse, error)
	GetAllSystemSpanConfigsThatApply(ctx context.Context, in *roachpb.GetAllSystemSpanConfigsThatApplyRequest) (*roachpb.GetAllSystemSpanConfigsThatApplyResponse, error)
	UpdateSpanConfigs(ctx context.Context, in *roachpb.UpdateSpanConfigsRequest) (*roachpb.UpdateSpanConfigsResponse, error)
	SpanConfigConformance(ctx context.Context, in *roachpb.SpanConfigConformanceRequest) (*roachpb.SpanConfigConformanceResponse, error)
}

// TenantSpanConfig gRPC -> RPC adapter
type grpcTenantSpanConfigClientAdapter tenantSpanConfigClient

func NewGRPCTenantSpanConfigClientAdapter(conn *grpc.ClientConn) RPCTenantSpanConfigClient {
	return (*grpcTenantSpanConfigClientAdapter)(&tenantSpanConfigClient{conn})
}

func (a *grpcTenantSpanConfigClientAdapter) GetSpanConfigs(ctx context.Context, in *roachpb.GetSpanConfigsRequest) (*roachpb.GetSpanConfigsResponse, error) {
	return (*tenantSpanConfigClient)(a).GetSpanConfigs(ctx, in)
}

func (a *grpcTenantSpanConfigClientAdapter) GetAllSystemSpanConfigsThatApply(ctx context.Context, in *roachpb.GetAllSystemSpanConfigsThatApplyRequest) (*roachpb.GetAllSystemSpanConfigsThatApplyResponse, error) {
	return (*tenantSpanConfigClient)(a).GetAllSystemSpanConfigsThatApply(ctx, in)
}

func (a *grpcTenantSpanConfigClientAdapter) UpdateSpanConfigs(ctx context.Context, in *roachpb.UpdateSpanConfigsRequest) (*roachpb.UpdateSpanConfigsResponse, error) {
	return (*tenantSpanConfigClient)(a).UpdateSpanConfigs(ctx, in)
}

func (a *grpcTenantSpanConfigClientAdapter) SpanConfigConformance(ctx context.Context, in *roachpb.SpanConfigConformanceRequest) (*roachpb.SpanConfigConformanceResponse, error) {
	return (*tenantSpanConfigClient)(a).SpanConfigConformance(ctx, in)
}

// compile-time assertion
var _ RPCTenantSpanConfigClient = (*grpcTenantSpanConfigClientAdapter)(nil)

// TenantSpanConfig DRPC -> RPC adapter
type drpcTenantSpanConfigClientAdapter drpcTenantSpanConfigClient

func NewDRPCTenantSpanConfigClientAdapter(conn drpc.Conn) RPCTenantSpanConfigClient {
	return (*drpcTenantSpanConfigClientAdapter)(&drpcTenantSpanConfigClient{conn})
}

func (a *drpcTenantSpanConfigClientAdapter) GetSpanConfigs(ctx context.Context, in *roachpb.GetSpanConfigsRequest) (*roachpb.GetSpanConfigsResponse, error) {
	return (*drpcTenantSpanConfigClient)(a).GetSpanConfigs(ctx, in)
}

func (a *drpcTenantSpanConfigClientAdapter) GetAllSystemSpanConfigsThatApply(ctx context.Context, in *roachpb.GetAllSystemSpanConfigsThatApplyRequest) (*roachpb.GetAllSystemSpanConfigsThatApplyResponse, error) {
	return (*drpcTenantSpanConfigClient)(a).GetAllSystemSpanConfigsThatApply(ctx, in)
}

func (a *drpcTenantSpanConfigClientAdapter) UpdateSpanConfigs(ctx context.Context, in *roachpb.UpdateSpanConfigsRequest) (*roachpb.UpdateSpanConfigsResponse, error) {
	return (*drpcTenantSpanConfigClient)(a).UpdateSpanConfigs(ctx, in)
}

func (a *drpcTenantSpanConfigClientAdapter) SpanConfigConformance(ctx context.Context, in *roachpb.SpanConfigConformanceRequest) (*roachpb.SpanConfigConformanceResponse, error) {
	return (*drpcTenantSpanConfigClient)(a).SpanConfigConformance(ctx, in)
}

// compile-time assertion
var _ RPCTenantSpanConfigClient = (*drpcTenantSpanConfigClientAdapter)(nil)

type DRPCNodeClient interface {
	DRPCConn() drpc.Conn

	Join(ctx context.Context, in *JoinNodeRequest) (*JoinNodeResponse, error)
}

type drpcNodeClient struct {
	cc drpc.Conn
}

func NewDRPCNodeClient(cc drpc.Conn) DRPCNodeClient {
	return &drpcNodeClient{cc}
}

func (c *drpcNodeClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcNodeClient) Join(ctx context.Context, in *JoinNodeRequest) (*JoinNodeResponse, error) {
	out := new(JoinNodeResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.Node/Join", drpcEncoding_File_kv_kvpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCNodeServer interface {
	Join(context.Context, *JoinNodeRequest) (*JoinNodeResponse, error)
}

type DRPCNodeUnimplementedServer struct{}

func (s *DRPCNodeUnimplementedServer) Join(context.Context, *JoinNodeRequest) (*JoinNodeResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCNodeDescription struct{}

func (DRPCNodeDescription) NumMethods() int { return 1 }

func (DRPCNodeDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.roachpb.Node/Join", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCNodeServer).
					Join(
						ctx,
						in1.(*JoinNodeRequest),
					)
			}, DRPCNodeServer.Join, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterNode(mux drpc.Mux, impl DRPCNodeServer) error {
	return mux.Register(impl, DRPCNodeDescription{})
}

type DRPCNode_JoinStream interface {
	drpc.Stream
	SendAndClose(*JoinNodeResponse) error
}

type RPCNode_JoinStream interface {
	Context() context.Context
	SendAndClose(*JoinNodeResponse) error
}

type drpcNode_JoinStream struct {
	drpc.Stream
}

func (x *drpcNode_JoinStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcNode_JoinStream) SendAndClose(m *JoinNodeResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type RPCNodeClient interface {
	Join(ctx context.Context, in *JoinNodeRequest) (*JoinNodeResponse, error)
}

// Node gRPC -> RPC adapter
type grpcNodeClientAdapter nodeClient

func NewGRPCNodeClientAdapter(conn *grpc.ClientConn) RPCNodeClient {
	return (*grpcNodeClientAdapter)(&nodeClient{conn})
}

func (a *grpcNodeClientAdapter) Join(ctx context.Context, in *JoinNodeRequest) (*JoinNodeResponse, error) {
	return (*nodeClient)(a).Join(ctx, in)
}

// compile-time assertion
var _ RPCNodeClient = (*grpcNodeClientAdapter)(nil)

// Node DRPC -> RPC adapter
type drpcNodeClientAdapter drpcNodeClient

func NewDRPCNodeClientAdapter(conn drpc.Conn) RPCNodeClient {
	return (*drpcNodeClientAdapter)(&drpcNodeClient{conn})
}

func (a *drpcNodeClientAdapter) Join(ctx context.Context, in *JoinNodeRequest) (*JoinNodeResponse, error) {
	return (*drpcNodeClient)(a).Join(ctx, in)
}

// compile-time assertion
var _ RPCNodeClient = (*drpcNodeClientAdapter)(nil)

type DRPCRangeFeedClient interface {
	DRPCConn() drpc.Conn

	MuxRangeFeed(ctx context.Context) (DRPCRangeFeed_MuxRangeFeedClient, error)
}

type drpcRangeFeedClient struct {
	cc drpc.Conn
}

func NewDRPCRangeFeedClient(cc drpc.Conn) DRPCRangeFeedClient {
	return &drpcRangeFeedClient{cc}
}

func (c *drpcRangeFeedClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcRangeFeedClient) MuxRangeFeed(ctx context.Context) (DRPCRangeFeed_MuxRangeFeedClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.roachpb.RangeFeed/MuxRangeFeed", drpcEncoding_File_kv_kvpb_api_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcRangeFeed_MuxRangeFeedClient{stream}
	return x, nil
}

type DRPCRangeFeed_MuxRangeFeedClient interface {
	drpc.Stream
	Send(*RangeFeedRequest) error
	Recv() (*MuxRangeFeedEvent, error)
}

type RPCRangeFeed_MuxRangeFeedClient interface {
	Context() context.Context
	CloseSend() error
	Send(*RangeFeedRequest) error
	Recv() (*MuxRangeFeedEvent, error)
}

type drpcRangeFeed_MuxRangeFeedClient struct {
	drpc.Stream
}

func (x *drpcRangeFeed_MuxRangeFeedClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcRangeFeed_MuxRangeFeedClient) Send(m *RangeFeedRequest) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

func (x *drpcRangeFeed_MuxRangeFeedClient) Recv() (*MuxRangeFeedEvent, error) {
	m := new(MuxRangeFeedEvent)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcRangeFeed_MuxRangeFeedClient) RecvMsg(m *MuxRangeFeedEvent) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

type DRPCRangeFeedServer interface {
	MuxRangeFeed(DRPCRangeFeed_MuxRangeFeedStream) error
}

type DRPCRangeFeedUnimplementedServer struct{}

func (s *DRPCRangeFeedUnimplementedServer) MuxRangeFeed(DRPCRangeFeed_MuxRangeFeedStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCRangeFeedDescription struct{}

func (DRPCRangeFeedDescription) NumMethods() int { return 1 }

func (DRPCRangeFeedDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.roachpb.RangeFeed/MuxRangeFeed", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCRangeFeedServer).
					MuxRangeFeed(
						&drpcRangeFeed_MuxRangeFeedStream{in1.(drpc.Stream)},
					)
			}, DRPCRangeFeedServer.MuxRangeFeed, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterRangeFeed(mux drpc.Mux, impl DRPCRangeFeedServer) error {
	return mux.Register(impl, DRPCRangeFeedDescription{})
}

type DRPCRangeFeed_MuxRangeFeedStream interface {
	drpc.Stream
	Send(*MuxRangeFeedEvent) error
	Recv() (*RangeFeedRequest, error)
	RecvMsg(interface{}) error
}

type RPCRangeFeed_MuxRangeFeedStream interface {
	Context() context.Context
	Send(*MuxRangeFeedEvent) error
	Recv() (*RangeFeedRequest, error)
	RecvMsg(interface{}) error
}

type drpcRangeFeed_MuxRangeFeedStream struct {
	drpc.Stream
}

func (x *drpcRangeFeed_MuxRangeFeedStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcRangeFeed_MuxRangeFeedStream) Send(m *MuxRangeFeedEvent) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

func (x *drpcRangeFeed_MuxRangeFeedStream) Recv() (*RangeFeedRequest, error) {
	m := new(RangeFeedRequest)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcRangeFeed_MuxRangeFeedStream) RecvMsg(m interface{}) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

type RPCRangeFeedClient interface {
	MuxRangeFeed(ctx context.Context) (RPCRangeFeed_MuxRangeFeedClient, error)
}

// RangeFeed gRPC -> RPC adapter
type grpcRangeFeedClientAdapter rangeFeedClient

func NewGRPCRangeFeedClientAdapter(conn *grpc.ClientConn) RPCRangeFeedClient {
	return (*grpcRangeFeedClientAdapter)(&rangeFeedClient{conn})
}

func (a *grpcRangeFeedClientAdapter) MuxRangeFeed(ctx context.Context) (RPCRangeFeed_MuxRangeFeedClient, error) {
	return (*rangeFeedClient)(a).MuxRangeFeed(ctx)
}

// compile-time assertion
var _ RPCRangeFeedClient = (*grpcRangeFeedClientAdapter)(nil)

// RangeFeed DRPC -> RPC adapter
type drpcRangeFeedClientAdapter drpcRangeFeedClient

func NewDRPCRangeFeedClientAdapter(conn drpc.Conn) RPCRangeFeedClient {
	return (*drpcRangeFeedClientAdapter)(&drpcRangeFeedClient{conn})
}

func (a *drpcRangeFeedClientAdapter) MuxRangeFeed(ctx context.Context) (RPCRangeFeed_MuxRangeFeedClient, error) {
	return (*drpcRangeFeedClient)(a).MuxRangeFeed(ctx)
}

// compile-time assertion
var _ RPCRangeFeedClient = (*drpcRangeFeedClientAdapter)(nil)

type DRPCQuorumRecoveryClient interface {
	DRPCConn() drpc.Conn

	ResetQuorum(ctx context.Context, in *ResetQuorumRequest) (*ResetQuorumResponse, error)
}

type drpcQuorumRecoveryClient struct {
	cc drpc.Conn
}

func NewDRPCQuorumRecoveryClient(cc drpc.Conn) DRPCQuorumRecoveryClient {
	return &drpcQuorumRecoveryClient{cc}
}

func (c *drpcQuorumRecoveryClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcQuorumRecoveryClient) ResetQuorum(ctx context.Context, in *ResetQuorumRequest) (*ResetQuorumResponse, error) {
	out := new(ResetQuorumResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.QuorumRecovery/ResetQuorum", drpcEncoding_File_kv_kvpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCQuorumRecoveryServer interface {
	ResetQuorum(context.Context, *ResetQuorumRequest) (*ResetQuorumResponse, error)
}

type DRPCQuorumRecoveryUnimplementedServer struct{}

func (s *DRPCQuorumRecoveryUnimplementedServer) ResetQuorum(context.Context, *ResetQuorumRequest) (*ResetQuorumResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCQuorumRecoveryDescription struct{}

func (DRPCQuorumRecoveryDescription) NumMethods() int { return 1 }

func (DRPCQuorumRecoveryDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.roachpb.QuorumRecovery/ResetQuorum", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQuorumRecoveryServer).
					ResetQuorum(
						ctx,
						in1.(*ResetQuorumRequest),
					)
			}, DRPCQuorumRecoveryServer.ResetQuorum, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterQuorumRecovery(mux drpc.Mux, impl DRPCQuorumRecoveryServer) error {
	return mux.Register(impl, DRPCQuorumRecoveryDescription{})
}

type DRPCQuorumRecovery_ResetQuorumStream interface {
	drpc.Stream
	SendAndClose(*ResetQuorumResponse) error
}

type RPCQuorumRecovery_ResetQuorumStream interface {
	Context() context.Context
	SendAndClose(*ResetQuorumResponse) error
}

type drpcQuorumRecovery_ResetQuorumStream struct {
	drpc.Stream
}

func (x *drpcQuorumRecovery_ResetQuorumStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcQuorumRecovery_ResetQuorumStream) SendAndClose(m *ResetQuorumResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type RPCQuorumRecoveryClient interface {
	ResetQuorum(ctx context.Context, in *ResetQuorumRequest) (*ResetQuorumResponse, error)
}

// QuorumRecovery gRPC -> RPC adapter
type grpcQuorumRecoveryClientAdapter quorumRecoveryClient

func NewGRPCQuorumRecoveryClientAdapter(conn *grpc.ClientConn) RPCQuorumRecoveryClient {
	return (*grpcQuorumRecoveryClientAdapter)(&quorumRecoveryClient{conn})
}

func (a *grpcQuorumRecoveryClientAdapter) ResetQuorum(ctx context.Context, in *ResetQuorumRequest) (*ResetQuorumResponse, error) {
	return (*quorumRecoveryClient)(a).ResetQuorum(ctx, in)
}

// compile-time assertion
var _ RPCQuorumRecoveryClient = (*grpcQuorumRecoveryClientAdapter)(nil)

// QuorumRecovery DRPC -> RPC adapter
type drpcQuorumRecoveryClientAdapter drpcQuorumRecoveryClient

func NewDRPCQuorumRecoveryClientAdapter(conn drpc.Conn) RPCQuorumRecoveryClient {
	return (*drpcQuorumRecoveryClientAdapter)(&drpcQuorumRecoveryClient{conn})
}

func (a *drpcQuorumRecoveryClientAdapter) ResetQuorum(ctx context.Context, in *ResetQuorumRequest) (*ResetQuorumResponse, error) {
	return (*drpcQuorumRecoveryClient)(a).ResetQuorum(ctx, in)
}

// compile-time assertion
var _ RPCQuorumRecoveryClient = (*drpcQuorumRecoveryClientAdapter)(nil)

type DRPCInternalClient interface {
	DRPCConn() drpc.Conn

	Batch(ctx context.Context, in *BatchRequest) (*BatchResponse, error)
	BatchStream(ctx context.Context) (DRPCInternal_BatchStreamClient, error)
	RangeLookup(ctx context.Context, in *RangeLookupRequest) (*RangeLookupResponse, error)
	MuxRangeFeed(ctx context.Context) (DRPCInternal_MuxRangeFeedClient, error)
	GossipSubscription(ctx context.Context, in *GossipSubscriptionRequest) (DRPCInternal_GossipSubscriptionClient, error)
	ResetQuorum(ctx context.Context, in *ResetQuorumRequest) (*ResetQuorumResponse, error)
	TokenBucket(ctx context.Context, in *TokenBucketRequest) (*TokenBucketResponse, error)
	Join(ctx context.Context, in *JoinNodeRequest) (*JoinNodeResponse, error)
	GetSpanConfigs(ctx context.Context, in *roachpb.GetSpanConfigsRequest) (*roachpb.GetSpanConfigsResponse, error)
	GetAllSystemSpanConfigsThatApply(ctx context.Context, in *roachpb.GetAllSystemSpanConfigsThatApplyRequest) (*roachpb.GetAllSystemSpanConfigsThatApplyResponse, error)
	UpdateSpanConfigs(ctx context.Context, in *roachpb.UpdateSpanConfigsRequest) (*roachpb.UpdateSpanConfigsResponse, error)
	SpanConfigConformance(ctx context.Context, in *roachpb.SpanConfigConformanceRequest) (*roachpb.SpanConfigConformanceResponse, error)
	TenantSettings(ctx context.Context, in *TenantSettingsRequest) (DRPCInternal_TenantSettingsClient, error)
	GetRangeDescriptors(ctx context.Context, in *GetRangeDescriptorsRequest) (DRPCInternal_GetRangeDescriptorsClient, error)
}

type drpcInternalClient struct {
	cc drpc.Conn
}

func NewDRPCInternalClient(cc drpc.Conn) DRPCInternalClient {
	return &drpcInternalClient{cc}
}

func (c *drpcInternalClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcInternalClient) Batch(ctx context.Context, in *BatchRequest) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.Internal/Batch", drpcEncoding_File_kv_kvpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInternalClient) BatchStream(ctx context.Context) (DRPCInternal_BatchStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.roachpb.Internal/BatchStream", drpcEncoding_File_kv_kvpb_api_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcInternal_BatchStreamClient{stream}
	return x, nil
}

type DRPCInternal_BatchStreamClient interface {
	drpc.Stream
	Send(*BatchRequest) error
	Recv() (*BatchResponse, error)
}

type RPCInternal_BatchStreamClient interface {
	Context() context.Context
	CloseSend() error
	Send(*BatchRequest) error
	Recv() (*BatchResponse, error)
}

type drpcInternal_BatchStreamClient struct {
	drpc.Stream
}

func (x *drpcInternal_BatchStreamClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_BatchStreamClient) Send(m *BatchRequest) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

func (x *drpcInternal_BatchStreamClient) Recv() (*BatchResponse, error) {
	m := new(BatchResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcInternal_BatchStreamClient) RecvMsg(m *BatchResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

func (c *drpcInternalClient) RangeLookup(ctx context.Context, in *RangeLookupRequest) (*RangeLookupResponse, error) {
	out := new(RangeLookupResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.Internal/RangeLookup", drpcEncoding_File_kv_kvpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInternalClient) MuxRangeFeed(ctx context.Context) (DRPCInternal_MuxRangeFeedClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.roachpb.Internal/MuxRangeFeed", drpcEncoding_File_kv_kvpb_api_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcInternal_MuxRangeFeedClient{stream}
	return x, nil
}

type DRPCInternal_MuxRangeFeedClient interface {
	drpc.Stream
	Send(*RangeFeedRequest) error
	Recv() (*MuxRangeFeedEvent, error)
}

type RPCInternal_MuxRangeFeedClient interface {
	Context() context.Context
	CloseSend() error
	Send(*RangeFeedRequest) error
	Recv() (*MuxRangeFeedEvent, error)
}

type drpcInternal_MuxRangeFeedClient struct {
	drpc.Stream
}

func (x *drpcInternal_MuxRangeFeedClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_MuxRangeFeedClient) Send(m *RangeFeedRequest) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

func (x *drpcInternal_MuxRangeFeedClient) Recv() (*MuxRangeFeedEvent, error) {
	m := new(MuxRangeFeedEvent)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcInternal_MuxRangeFeedClient) RecvMsg(m *MuxRangeFeedEvent) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

func (c *drpcInternalClient) GossipSubscription(ctx context.Context, in *GossipSubscriptionRequest) (DRPCInternal_GossipSubscriptionClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.roachpb.Internal/GossipSubscription", drpcEncoding_File_kv_kvpb_api_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcInternal_GossipSubscriptionClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCInternal_GossipSubscriptionClient interface {
	drpc.Stream
	Recv() (*GossipSubscriptionEvent, error)
}

type RPCInternal_GossipSubscriptionClient interface {
	Context() context.Context
	CloseSend() error
	Recv() (*GossipSubscriptionEvent, error)
}

type drpcInternal_GossipSubscriptionClient struct {
	drpc.Stream
}

func (x *drpcInternal_GossipSubscriptionClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_GossipSubscriptionClient) Recv() (*GossipSubscriptionEvent, error) {
	m := new(GossipSubscriptionEvent)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcInternal_GossipSubscriptionClient) RecvMsg(m *GossipSubscriptionEvent) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

func (c *drpcInternalClient) ResetQuorum(ctx context.Context, in *ResetQuorumRequest) (*ResetQuorumResponse, error) {
	out := new(ResetQuorumResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.Internal/ResetQuorum", drpcEncoding_File_kv_kvpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInternalClient) TokenBucket(ctx context.Context, in *TokenBucketRequest) (*TokenBucketResponse, error) {
	out := new(TokenBucketResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.Internal/TokenBucket", drpcEncoding_File_kv_kvpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInternalClient) Join(ctx context.Context, in *JoinNodeRequest) (*JoinNodeResponse, error) {
	out := new(JoinNodeResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.Internal/Join", drpcEncoding_File_kv_kvpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInternalClient) GetSpanConfigs(ctx context.Context, in *roachpb.GetSpanConfigsRequest) (*roachpb.GetSpanConfigsResponse, error) {
	out := new(roachpb.GetSpanConfigsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.Internal/GetSpanConfigs", drpcEncoding_File_kv_kvpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInternalClient) GetAllSystemSpanConfigsThatApply(ctx context.Context, in *roachpb.GetAllSystemSpanConfigsThatApplyRequest) (*roachpb.GetAllSystemSpanConfigsThatApplyResponse, error) {
	out := new(roachpb.GetAllSystemSpanConfigsThatApplyResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.Internal/GetAllSystemSpanConfigsThatApply", drpcEncoding_File_kv_kvpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInternalClient) UpdateSpanConfigs(ctx context.Context, in *roachpb.UpdateSpanConfigsRequest) (*roachpb.UpdateSpanConfigsResponse, error) {
	out := new(roachpb.UpdateSpanConfigsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.Internal/UpdateSpanConfigs", drpcEncoding_File_kv_kvpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInternalClient) SpanConfigConformance(ctx context.Context, in *roachpb.SpanConfigConformanceRequest) (*roachpb.SpanConfigConformanceResponse, error) {
	out := new(roachpb.SpanConfigConformanceResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.Internal/SpanConfigConformance", drpcEncoding_File_kv_kvpb_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInternalClient) TenantSettings(ctx context.Context, in *TenantSettingsRequest) (DRPCInternal_TenantSettingsClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.roachpb.Internal/TenantSettings", drpcEncoding_File_kv_kvpb_api_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcInternal_TenantSettingsClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCInternal_TenantSettingsClient interface {
	drpc.Stream
	Recv() (*TenantSettingsEvent, error)
}

type RPCInternal_TenantSettingsClient interface {
	Context() context.Context
	CloseSend() error
	Recv() (*TenantSettingsEvent, error)
}

type drpcInternal_TenantSettingsClient struct {
	drpc.Stream
}

func (x *drpcInternal_TenantSettingsClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_TenantSettingsClient) Recv() (*TenantSettingsEvent, error) {
	m := new(TenantSettingsEvent)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcInternal_TenantSettingsClient) RecvMsg(m *TenantSettingsEvent) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

func (c *drpcInternalClient) GetRangeDescriptors(ctx context.Context, in *GetRangeDescriptorsRequest) (DRPCInternal_GetRangeDescriptorsClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.roachpb.Internal/GetRangeDescriptors", drpcEncoding_File_kv_kvpb_api_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcInternal_GetRangeDescriptorsClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCInternal_GetRangeDescriptorsClient interface {
	drpc.Stream
	Recv() (*GetRangeDescriptorsResponse, error)
}

type RPCInternal_GetRangeDescriptorsClient interface {
	Context() context.Context
	CloseSend() error
	Recv() (*GetRangeDescriptorsResponse, error)
}

type drpcInternal_GetRangeDescriptorsClient struct {
	drpc.Stream
}

func (x *drpcInternal_GetRangeDescriptorsClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_GetRangeDescriptorsClient) Recv() (*GetRangeDescriptorsResponse, error) {
	m := new(GetRangeDescriptorsResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcInternal_GetRangeDescriptorsClient) RecvMsg(m *GetRangeDescriptorsResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

type DRPCInternalServer interface {
	Batch(context.Context, *BatchRequest) (*BatchResponse, error)
	BatchStream(DRPCInternal_BatchStreamStream) error
	RangeLookup(context.Context, *RangeLookupRequest) (*RangeLookupResponse, error)
	MuxRangeFeed(DRPCInternal_MuxRangeFeedStream) error
	GossipSubscription(*GossipSubscriptionRequest, DRPCInternal_GossipSubscriptionStream) error
	ResetQuorum(context.Context, *ResetQuorumRequest) (*ResetQuorumResponse, error)
	TokenBucket(context.Context, *TokenBucketRequest) (*TokenBucketResponse, error)
	Join(context.Context, *JoinNodeRequest) (*JoinNodeResponse, error)
	GetSpanConfigs(context.Context, *roachpb.GetSpanConfigsRequest) (*roachpb.GetSpanConfigsResponse, error)
	GetAllSystemSpanConfigsThatApply(context.Context, *roachpb.GetAllSystemSpanConfigsThatApplyRequest) (*roachpb.GetAllSystemSpanConfigsThatApplyResponse, error)
	UpdateSpanConfigs(context.Context, *roachpb.UpdateSpanConfigsRequest) (*roachpb.UpdateSpanConfigsResponse, error)
	SpanConfigConformance(context.Context, *roachpb.SpanConfigConformanceRequest) (*roachpb.SpanConfigConformanceResponse, error)
	TenantSettings(*TenantSettingsRequest, DRPCInternal_TenantSettingsStream) error
	GetRangeDescriptors(*GetRangeDescriptorsRequest, DRPCInternal_GetRangeDescriptorsStream) error
}

type DRPCInternalUnimplementedServer struct{}

func (s *DRPCInternalUnimplementedServer) Batch(context.Context, *BatchRequest) (*BatchResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) BatchStream(DRPCInternal_BatchStreamStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) RangeLookup(context.Context, *RangeLookupRequest) (*RangeLookupResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) MuxRangeFeed(DRPCInternal_MuxRangeFeedStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) GossipSubscription(*GossipSubscriptionRequest, DRPCInternal_GossipSubscriptionStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) ResetQuorum(context.Context, *ResetQuorumRequest) (*ResetQuorumResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) TokenBucket(context.Context, *TokenBucketRequest) (*TokenBucketResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) Join(context.Context, *JoinNodeRequest) (*JoinNodeResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) GetSpanConfigs(context.Context, *roachpb.GetSpanConfigsRequest) (*roachpb.GetSpanConfigsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) GetAllSystemSpanConfigsThatApply(context.Context, *roachpb.GetAllSystemSpanConfigsThatApplyRequest) (*roachpb.GetAllSystemSpanConfigsThatApplyResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) UpdateSpanConfigs(context.Context, *roachpb.UpdateSpanConfigsRequest) (*roachpb.UpdateSpanConfigsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) SpanConfigConformance(context.Context, *roachpb.SpanConfigConformanceRequest) (*roachpb.SpanConfigConformanceResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) TenantSettings(*TenantSettingsRequest, DRPCInternal_TenantSettingsStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) GetRangeDescriptors(*GetRangeDescriptorsRequest, DRPCInternal_GetRangeDescriptorsStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCInternalDescription struct{}

func (DRPCInternalDescription) NumMethods() int { return 14 }

func (DRPCInternalDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.roachpb.Internal/Batch", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInternalServer).
					Batch(
						ctx,
						in1.(*BatchRequest),
					)
			}, DRPCInternalServer.Batch, true
	case 1:
		return "/cockroach.roachpb.Internal/BatchStream", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCInternalServer).
					BatchStream(
						&drpcInternal_BatchStreamStream{in1.(drpc.Stream)},
					)
			}, DRPCInternalServer.BatchStream, true
	case 2:
		return "/cockroach.roachpb.Internal/RangeLookup", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInternalServer).
					RangeLookup(
						ctx,
						in1.(*RangeLookupRequest),
					)
			}, DRPCInternalServer.RangeLookup, true
	case 3:
		return "/cockroach.roachpb.Internal/MuxRangeFeed", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCInternalServer).
					MuxRangeFeed(
						&drpcInternal_MuxRangeFeedStream{in1.(drpc.Stream)},
					)
			}, DRPCInternalServer.MuxRangeFeed, true
	case 4:
		return "/cockroach.roachpb.Internal/GossipSubscription", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCInternalServer).
					GossipSubscription(
						in1.(*GossipSubscriptionRequest),
						&drpcInternal_GossipSubscriptionStream{in2.(drpc.Stream)},
					)
			}, DRPCInternalServer.GossipSubscription, true
	case 5:
		return "/cockroach.roachpb.Internal/ResetQuorum", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInternalServer).
					ResetQuorum(
						ctx,
						in1.(*ResetQuorumRequest),
					)
			}, DRPCInternalServer.ResetQuorum, true
	case 6:
		return "/cockroach.roachpb.Internal/TokenBucket", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInternalServer).
					TokenBucket(
						ctx,
						in1.(*TokenBucketRequest),
					)
			}, DRPCInternalServer.TokenBucket, true
	case 7:
		return "/cockroach.roachpb.Internal/Join", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInternalServer).
					Join(
						ctx,
						in1.(*JoinNodeRequest),
					)
			}, DRPCInternalServer.Join, true
	case 8:
		return "/cockroach.roachpb.Internal/GetSpanConfigs", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInternalServer).
					GetSpanConfigs(
						ctx,
						in1.(*roachpb.GetSpanConfigsRequest),
					)
			}, DRPCInternalServer.GetSpanConfigs, true
	case 9:
		return "/cockroach.roachpb.Internal/GetAllSystemSpanConfigsThatApply", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInternalServer).
					GetAllSystemSpanConfigsThatApply(
						ctx,
						in1.(*roachpb.GetAllSystemSpanConfigsThatApplyRequest),
					)
			}, DRPCInternalServer.GetAllSystemSpanConfigsThatApply, true
	case 10:
		return "/cockroach.roachpb.Internal/UpdateSpanConfigs", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInternalServer).
					UpdateSpanConfigs(
						ctx,
						in1.(*roachpb.UpdateSpanConfigsRequest),
					)
			}, DRPCInternalServer.UpdateSpanConfigs, true
	case 11:
		return "/cockroach.roachpb.Internal/SpanConfigConformance", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInternalServer).
					SpanConfigConformance(
						ctx,
						in1.(*roachpb.SpanConfigConformanceRequest),
					)
			}, DRPCInternalServer.SpanConfigConformance, true
	case 12:
		return "/cockroach.roachpb.Internal/TenantSettings", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCInternalServer).
					TenantSettings(
						in1.(*TenantSettingsRequest),
						&drpcInternal_TenantSettingsStream{in2.(drpc.Stream)},
					)
			}, DRPCInternalServer.TenantSettings, true
	case 13:
		return "/cockroach.roachpb.Internal/GetRangeDescriptors", drpcEncoding_File_kv_kvpb_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCInternalServer).
					GetRangeDescriptors(
						in1.(*GetRangeDescriptorsRequest),
						&drpcInternal_GetRangeDescriptorsStream{in2.(drpc.Stream)},
					)
			}, DRPCInternalServer.GetRangeDescriptors, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterInternal(mux drpc.Mux, impl DRPCInternalServer) error {
	return mux.Register(impl, DRPCInternalDescription{})
}

type DRPCInternal_BatchStream interface {
	drpc.Stream
	SendAndClose(*BatchResponse) error
}

type RPCInternal_BatchStream interface {
	Context() context.Context
	SendAndClose(*BatchResponse) error
}

type drpcInternal_BatchStream struct {
	drpc.Stream
}

func (x *drpcInternal_BatchStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_BatchStream) SendAndClose(m *BatchResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInternal_BatchStreamStream interface {
	drpc.Stream
	Send(*BatchResponse) error
	Recv() (*BatchRequest, error)
	RecvMsg(interface{}) error
}

type RPCInternal_BatchStreamStream interface {
	Context() context.Context
	Send(*BatchResponse) error
	Recv() (*BatchRequest, error)
	RecvMsg(interface{}) error
}

type drpcInternal_BatchStreamStream struct {
	drpc.Stream
}

func (x *drpcInternal_BatchStreamStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_BatchStreamStream) Send(m *BatchResponse) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

func (x *drpcInternal_BatchStreamStream) Recv() (*BatchRequest, error) {
	m := new(BatchRequest)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcInternal_BatchStreamStream) RecvMsg(m interface{}) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

type DRPCInternal_RangeLookupStream interface {
	drpc.Stream
	SendAndClose(*RangeLookupResponse) error
}

type RPCInternal_RangeLookupStream interface {
	Context() context.Context
	SendAndClose(*RangeLookupResponse) error
}

type drpcInternal_RangeLookupStream struct {
	drpc.Stream
}

func (x *drpcInternal_RangeLookupStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_RangeLookupStream) SendAndClose(m *RangeLookupResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInternal_MuxRangeFeedStream interface {
	drpc.Stream
	Send(*MuxRangeFeedEvent) error
	Recv() (*RangeFeedRequest, error)
	RecvMsg(interface{}) error
}

type RPCInternal_MuxRangeFeedStream interface {
	Context() context.Context
	Send(*MuxRangeFeedEvent) error
	Recv() (*RangeFeedRequest, error)
	RecvMsg(interface{}) error
}

type drpcInternal_MuxRangeFeedStream struct {
	drpc.Stream
}

func (x *drpcInternal_MuxRangeFeedStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_MuxRangeFeedStream) Send(m *MuxRangeFeedEvent) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

func (x *drpcInternal_MuxRangeFeedStream) Recv() (*RangeFeedRequest, error) {
	m := new(RangeFeedRequest)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcInternal_MuxRangeFeedStream) RecvMsg(m interface{}) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

type DRPCInternal_GossipSubscriptionStream interface {
	drpc.Stream
	Send(*GossipSubscriptionEvent) error
}

type RPCInternal_GossipSubscriptionStream interface {
	Context() context.Context
	Send(*GossipSubscriptionEvent) error
}

type drpcInternal_GossipSubscriptionStream struct {
	drpc.Stream
}

func (x *drpcInternal_GossipSubscriptionStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_GossipSubscriptionStream) Send(m *GossipSubscriptionEvent) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

type DRPCInternal_ResetQuorumStream interface {
	drpc.Stream
	SendAndClose(*ResetQuorumResponse) error
}

type RPCInternal_ResetQuorumStream interface {
	Context() context.Context
	SendAndClose(*ResetQuorumResponse) error
}

type drpcInternal_ResetQuorumStream struct {
	drpc.Stream
}

func (x *drpcInternal_ResetQuorumStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_ResetQuorumStream) SendAndClose(m *ResetQuorumResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInternal_TokenBucketStream interface {
	drpc.Stream
	SendAndClose(*TokenBucketResponse) error
}

type RPCInternal_TokenBucketStream interface {
	Context() context.Context
	SendAndClose(*TokenBucketResponse) error
}

type drpcInternal_TokenBucketStream struct {
	drpc.Stream
}

func (x *drpcInternal_TokenBucketStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_TokenBucketStream) SendAndClose(m *TokenBucketResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInternal_JoinStream interface {
	drpc.Stream
	SendAndClose(*JoinNodeResponse) error
}

type RPCInternal_JoinStream interface {
	Context() context.Context
	SendAndClose(*JoinNodeResponse) error
}

type drpcInternal_JoinStream struct {
	drpc.Stream
}

func (x *drpcInternal_JoinStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_JoinStream) SendAndClose(m *JoinNodeResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInternal_GetSpanConfigsStream interface {
	drpc.Stream
	SendAndClose(*roachpb.GetSpanConfigsResponse) error
}

type RPCInternal_GetSpanConfigsStream interface {
	Context() context.Context
	SendAndClose(*roachpb.GetSpanConfigsResponse) error
}

type drpcInternal_GetSpanConfigsStream struct {
	drpc.Stream
}

func (x *drpcInternal_GetSpanConfigsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_GetSpanConfigsStream) SendAndClose(m *roachpb.GetSpanConfigsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInternal_GetAllSystemSpanConfigsThatApplyStream interface {
	drpc.Stream
	SendAndClose(*roachpb.GetAllSystemSpanConfigsThatApplyResponse) error
}

type RPCInternal_GetAllSystemSpanConfigsThatApplyStream interface {
	Context() context.Context
	SendAndClose(*roachpb.GetAllSystemSpanConfigsThatApplyResponse) error
}

type drpcInternal_GetAllSystemSpanConfigsThatApplyStream struct {
	drpc.Stream
}

func (x *drpcInternal_GetAllSystemSpanConfigsThatApplyStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_GetAllSystemSpanConfigsThatApplyStream) SendAndClose(m *roachpb.GetAllSystemSpanConfigsThatApplyResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInternal_UpdateSpanConfigsStream interface {
	drpc.Stream
	SendAndClose(*roachpb.UpdateSpanConfigsResponse) error
}

type RPCInternal_UpdateSpanConfigsStream interface {
	Context() context.Context
	SendAndClose(*roachpb.UpdateSpanConfigsResponse) error
}

type drpcInternal_UpdateSpanConfigsStream struct {
	drpc.Stream
}

func (x *drpcInternal_UpdateSpanConfigsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_UpdateSpanConfigsStream) SendAndClose(m *roachpb.UpdateSpanConfigsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInternal_SpanConfigConformanceStream interface {
	drpc.Stream
	SendAndClose(*roachpb.SpanConfigConformanceResponse) error
}

type RPCInternal_SpanConfigConformanceStream interface {
	Context() context.Context
	SendAndClose(*roachpb.SpanConfigConformanceResponse) error
}

type drpcInternal_SpanConfigConformanceStream struct {
	drpc.Stream
}

func (x *drpcInternal_SpanConfigConformanceStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_SpanConfigConformanceStream) SendAndClose(m *roachpb.SpanConfigConformanceResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInternal_TenantSettingsStream interface {
	drpc.Stream
	Send(*TenantSettingsEvent) error
}

type RPCInternal_TenantSettingsStream interface {
	Context() context.Context
	Send(*TenantSettingsEvent) error
}

type drpcInternal_TenantSettingsStream struct {
	drpc.Stream
}

func (x *drpcInternal_TenantSettingsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_TenantSettingsStream) Send(m *TenantSettingsEvent) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

type DRPCInternal_GetRangeDescriptorsStream interface {
	drpc.Stream
	Send(*GetRangeDescriptorsResponse) error
}

type RPCInternal_GetRangeDescriptorsStream interface {
	Context() context.Context
	Send(*GetRangeDescriptorsResponse) error
}

type drpcInternal_GetRangeDescriptorsStream struct {
	drpc.Stream
}

func (x *drpcInternal_GetRangeDescriptorsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_GetRangeDescriptorsStream) Send(m *GetRangeDescriptorsResponse) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvpb_api_proto{})
}

type RPCInternalClient interface {
	Batch(ctx context.Context, in *BatchRequest) (*BatchResponse, error)
	BatchStream(ctx context.Context) (RPCInternal_BatchStreamClient, error)
	RangeLookup(ctx context.Context, in *RangeLookupRequest) (*RangeLookupResponse, error)
	MuxRangeFeed(ctx context.Context) (RPCInternal_MuxRangeFeedClient, error)
	GossipSubscription(ctx context.Context, in *GossipSubscriptionRequest) (RPCInternal_GossipSubscriptionClient, error)
	ResetQuorum(ctx context.Context, in *ResetQuorumRequest) (*ResetQuorumResponse, error)
	TokenBucket(ctx context.Context, in *TokenBucketRequest) (*TokenBucketResponse, error)
	Join(ctx context.Context, in *JoinNodeRequest) (*JoinNodeResponse, error)
	GetSpanConfigs(ctx context.Context, in *roachpb.GetSpanConfigsRequest) (*roachpb.GetSpanConfigsResponse, error)
	GetAllSystemSpanConfigsThatApply(ctx context.Context, in *roachpb.GetAllSystemSpanConfigsThatApplyRequest) (*roachpb.GetAllSystemSpanConfigsThatApplyResponse, error)
	UpdateSpanConfigs(ctx context.Context, in *roachpb.UpdateSpanConfigsRequest) (*roachpb.UpdateSpanConfigsResponse, error)
	SpanConfigConformance(ctx context.Context, in *roachpb.SpanConfigConformanceRequest) (*roachpb.SpanConfigConformanceResponse, error)
	TenantSettings(ctx context.Context, in *TenantSettingsRequest) (RPCInternal_TenantSettingsClient, error)
	GetRangeDescriptors(ctx context.Context, in *GetRangeDescriptorsRequest) (RPCInternal_GetRangeDescriptorsClient, error)
}

// Internal gRPC -> RPC adapter
type grpcInternalClientAdapter internalClient

func NewGRPCInternalClientAdapter(conn *grpc.ClientConn) RPCInternalClient {
	return (*grpcInternalClientAdapter)(&internalClient{conn})
}

func (a *grpcInternalClientAdapter) Batch(ctx context.Context, in *BatchRequest) (*BatchResponse, error) {
	return (*internalClient)(a).Batch(ctx, in)
}

func (a *grpcInternalClientAdapter) BatchStream(ctx context.Context) (RPCInternal_BatchStreamClient, error) {
	return (*internalClient)(a).BatchStream(ctx)
}

func (a *grpcInternalClientAdapter) RangeLookup(ctx context.Context, in *RangeLookupRequest) (*RangeLookupResponse, error) {
	return (*internalClient)(a).RangeLookup(ctx, in)
}

func (a *grpcInternalClientAdapter) MuxRangeFeed(ctx context.Context) (RPCInternal_MuxRangeFeedClient, error) {
	return (*internalClient)(a).MuxRangeFeed(ctx)
}

func (a *grpcInternalClientAdapter) GossipSubscription(ctx context.Context, in *GossipSubscriptionRequest) (RPCInternal_GossipSubscriptionClient, error) {
	return (*internalClient)(a).GossipSubscription(ctx, in)
}

func (a *grpcInternalClientAdapter) ResetQuorum(ctx context.Context, in *ResetQuorumRequest) (*ResetQuorumResponse, error) {
	return (*internalClient)(a).ResetQuorum(ctx, in)
}

func (a *grpcInternalClientAdapter) TokenBucket(ctx context.Context, in *TokenBucketRequest) (*TokenBucketResponse, error) {
	return (*internalClient)(a).TokenBucket(ctx, in)
}

func (a *grpcInternalClientAdapter) Join(ctx context.Context, in *JoinNodeRequest) (*JoinNodeResponse, error) {
	return (*internalClient)(a).Join(ctx, in)
}

func (a *grpcInternalClientAdapter) GetSpanConfigs(ctx context.Context, in *roachpb.GetSpanConfigsRequest) (*roachpb.GetSpanConfigsResponse, error) {
	return (*internalClient)(a).GetSpanConfigs(ctx, in)
}

func (a *grpcInternalClientAdapter) GetAllSystemSpanConfigsThatApply(ctx context.Context, in *roachpb.GetAllSystemSpanConfigsThatApplyRequest) (*roachpb.GetAllSystemSpanConfigsThatApplyResponse, error) {
	return (*internalClient)(a).GetAllSystemSpanConfigsThatApply(ctx, in)
}

func (a *grpcInternalClientAdapter) UpdateSpanConfigs(ctx context.Context, in *roachpb.UpdateSpanConfigsRequest) (*roachpb.UpdateSpanConfigsResponse, error) {
	return (*internalClient)(a).UpdateSpanConfigs(ctx, in)
}

func (a *grpcInternalClientAdapter) SpanConfigConformance(ctx context.Context, in *roachpb.SpanConfigConformanceRequest) (*roachpb.SpanConfigConformanceResponse, error) {
	return (*internalClient)(a).SpanConfigConformance(ctx, in)
}

func (a *grpcInternalClientAdapter) TenantSettings(ctx context.Context, in *TenantSettingsRequest) (RPCInternal_TenantSettingsClient, error) {
	return (*internalClient)(a).TenantSettings(ctx, in)
}

func (a *grpcInternalClientAdapter) GetRangeDescriptors(ctx context.Context, in *GetRangeDescriptorsRequest) (RPCInternal_GetRangeDescriptorsClient, error) {
	return (*internalClient)(a).GetRangeDescriptors(ctx, in)
}

// compile-time assertion
var _ RPCInternalClient = (*grpcInternalClientAdapter)(nil)

// Internal DRPC -> RPC adapter
type drpcInternalClientAdapter drpcInternalClient

func NewDRPCInternalClientAdapter(conn drpc.Conn) RPCInternalClient {
	return (*drpcInternalClientAdapter)(&drpcInternalClient{conn})
}

func (a *drpcInternalClientAdapter) Batch(ctx context.Context, in *BatchRequest) (*BatchResponse, error) {
	return (*drpcInternalClient)(a).Batch(ctx, in)
}

func (a *drpcInternalClientAdapter) BatchStream(ctx context.Context) (RPCInternal_BatchStreamClient, error) {
	return (*drpcInternalClient)(a).BatchStream(ctx)
}

func (a *drpcInternalClientAdapter) RangeLookup(ctx context.Context, in *RangeLookupRequest) (*RangeLookupResponse, error) {
	return (*drpcInternalClient)(a).RangeLookup(ctx, in)
}

func (a *drpcInternalClientAdapter) MuxRangeFeed(ctx context.Context) (RPCInternal_MuxRangeFeedClient, error) {
	return (*drpcInternalClient)(a).MuxRangeFeed(ctx)
}

func (a *drpcInternalClientAdapter) GossipSubscription(ctx context.Context, in *GossipSubscriptionRequest) (RPCInternal_GossipSubscriptionClient, error) {
	return (*drpcInternalClient)(a).GossipSubscription(ctx, in)
}

func (a *drpcInternalClientAdapter) ResetQuorum(ctx context.Context, in *ResetQuorumRequest) (*ResetQuorumResponse, error) {
	return (*drpcInternalClient)(a).ResetQuorum(ctx, in)
}

func (a *drpcInternalClientAdapter) TokenBucket(ctx context.Context, in *TokenBucketRequest) (*TokenBucketResponse, error) {
	return (*drpcInternalClient)(a).TokenBucket(ctx, in)
}

func (a *drpcInternalClientAdapter) Join(ctx context.Context, in *JoinNodeRequest) (*JoinNodeResponse, error) {
	return (*drpcInternalClient)(a).Join(ctx, in)
}

func (a *drpcInternalClientAdapter) GetSpanConfigs(ctx context.Context, in *roachpb.GetSpanConfigsRequest) (*roachpb.GetSpanConfigsResponse, error) {
	return (*drpcInternalClient)(a).GetSpanConfigs(ctx, in)
}

func (a *drpcInternalClientAdapter) GetAllSystemSpanConfigsThatApply(ctx context.Context, in *roachpb.GetAllSystemSpanConfigsThatApplyRequest) (*roachpb.GetAllSystemSpanConfigsThatApplyResponse, error) {
	return (*drpcInternalClient)(a).GetAllSystemSpanConfigsThatApply(ctx, in)
}

func (a *drpcInternalClientAdapter) UpdateSpanConfigs(ctx context.Context, in *roachpb.UpdateSpanConfigsRequest) (*roachpb.UpdateSpanConfigsResponse, error) {
	return (*drpcInternalClient)(a).UpdateSpanConfigs(ctx, in)
}

func (a *drpcInternalClientAdapter) SpanConfigConformance(ctx context.Context, in *roachpb.SpanConfigConformanceRequest) (*roachpb.SpanConfigConformanceResponse, error) {
	return (*drpcInternalClient)(a).SpanConfigConformance(ctx, in)
}

func (a *drpcInternalClientAdapter) TenantSettings(ctx context.Context, in *TenantSettingsRequest) (RPCInternal_TenantSettingsClient, error) {
	return (*drpcInternalClient)(a).TenantSettings(ctx, in)
}

func (a *drpcInternalClientAdapter) GetRangeDescriptors(ctx context.Context, in *GetRangeDescriptorsRequest) (RPCInternal_GetRangeDescriptorsClient, error) {
	return (*drpcInternalClient)(a).GetRangeDescriptors(ctx, in)
}

// compile-time assertion
var _ RPCInternalClient = (*drpcInternalClientAdapter)(nil)
