// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvserver/rangelog/internal/rangelogtestpb/rangelogtest.proto

package rangelogtestpb

import (
	fmt "fmt"
	kvserverpb "github.com/cockroachdb/cockroach/pkg/kv/kvserver/kvserverpb"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	slices "slices"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RangeLogData is used to store a set of range log events.
type RangeLogData struct {
	Events    []*kvserverpb.RangeLogEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	UniqueIds []int64                     `protobuf:"varint,2,rep,packed,name=unique_ids,json=uniqueIds,proto3" json:"unique_ids,omitempty"`
}

func (m *RangeLogData) Reset()         { *m = RangeLogData{} }
func (m *RangeLogData) String() string { return proto.CompactTextString(m) }
func (*RangeLogData) ProtoMessage()    {}
func (*RangeLogData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d1b331a0c54590f, []int{0}
}
func (m *RangeLogData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeLogData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RangeLogData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeLogData.Merge(m, src)
}
func (m *RangeLogData) XXX_Size() int {
	return m.Size()
}
func (m *RangeLogData) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeLogData.DiscardUnknown(m)
}

var xxx_messageInfo_RangeLogData proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RangeLogData)(nil), "cockroach.kv.kvserver.rangelog.rangelogtest.RangeLogData")
}

func init() {
	proto.RegisterFile("kv/kvserver/rangelog/internal/rangelogtestpb/rangelogtest.proto", fileDescriptor_0d1b331a0c54590f)
}

var fileDescriptor_0d1b331a0c54590f = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0xcf, 0x2e, 0xd3, 0xcf,
	0x2e, 0x2b, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2f, 0x4a, 0xcc, 0x4b, 0x4f, 0xcd, 0xc9, 0x4f,
	0xd7, 0xcf, 0xcc, 0x2b, 0x49, 0x2d, 0xca, 0x4b, 0xcc, 0x81, 0x8b, 0x94, 0xa4, 0x16, 0x97, 0x14,
	0x24, 0xa1, 0x70, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xb4, 0x93, 0xf3, 0x93, 0xb3, 0x8b,
	0xf2, 0x13, 0x93, 0x33, 0xf4, 0xb2, 0xcb, 0xf4, 0x60, 0x46, 0xe9, 0xc1, 0x54, 0xea, 0x21, 0x6b,
	0x91, 0x52, 0x43, 0xb6, 0x0d, 0xc6, 0x80, 0x99, 0x1b, 0x0f, 0x52, 0x0e, 0x36, 0x54, 0xa9, 0x94,
	0x8b, 0x27, 0x08, 0x24, 0xe4, 0x93, 0x9f, 0xee, 0x92, 0x58, 0x92, 0x28, 0xe4, 0xc6, 0xc5, 0x96,
	0x5a, 0x96, 0x9a, 0x57, 0x52, 0x2c, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x6d, 0xa4, 0xa7, 0x87, 0xdd,
	0xd6, 0xe2, 0x92, 0xfc, 0xa2, 0xc4, 0xf4, 0xd4, 0x82, 0x24, 0x3d, 0x98, 0x76, 0x57, 0x90, 0xb6,
	0x20, 0xa8, 0x6e, 0x21, 0x59, 0x2e, 0xae, 0xd2, 0xbc, 0xcc, 0xc2, 0xd2, 0xd4, 0xf8, 0xcc, 0x94,
	0x62, 0x09, 0x26, 0x05, 0x66, 0x0d, 0xe6, 0x20, 0x4e, 0x88, 0x88, 0x67, 0x4a, 0xb1, 0x53, 0xf1,
	0x89, 0x87, 0x72, 0x0c, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0x78, 0xe3, 0x91, 0x1c,
	0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1,
	0x1c, 0x43, 0x54, 0x60, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x3e, 0xdc,
	0x09, 0x29, 0x49, 0x08, 0xb6, 0x7e, 0x41, 0x76, 0xba, 0x3e, 0x29, 0x61, 0x9a, 0xc4, 0x06, 0xf6,
	0xb2, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xf0, 0x1d, 0x6e, 0x8a, 0x01, 0x00, 0x00,
}

func (m *RangeLogData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeLogData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeLogData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UniqueIds) > 0 {
		l := 0
		for _, e := range m.UniqueIds {
			l += sovRangelogtest(uint64(e))
		}
		i -= l
		if l == len(m.UniqueIds) {
			dest := dAtA[i : i+len(m.UniqueIds)]
			for k, num := range m.UniqueIds {
				dest[k] = uint8(num)
			}
		} else {
			j1 := i
			for _, num1 := range m.UniqueIds {
				num := uint64(num1)
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
		}
		i = encodeVarintRangelogtest(dAtA, i, uint64(uint64(l)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRangelogtest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRangelogtest(dAtA []byte, offset int, v uint64) int {
	offset -= sovRangelogtest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RangeLogData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovRangelogtest(uint64(l))
		}
	}
	if len(m.UniqueIds) > 0 {
		l = 0
		for _, e := range m.UniqueIds {
			l += sovRangelogtest(uint64(e))
		}
		n += 1 + sovRangelogtest(uint64(l)) + l
	}
	return n
}

func sovRangelogtest(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozRangelogtest(x uint64) (n int) {
	return sovRangelogtest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RangeLogData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRangelogtest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeLogData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeLogData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangelogtest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRangelogtest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRangelogtest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &kvserverpb.RangeLogEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRangelogtest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UniqueIds = append(m.UniqueIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRangelogtest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRangelogtest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRangelogtest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 {
					if m.UniqueIds == nil {
						m.UniqueIds = make([]int64, 0, elementCount)
					} else {
						m.UniqueIds = slices.Grow(m.UniqueIds, elementCount)
					}
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRangelogtest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UniqueIds = append(m.UniqueIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRangelogtest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRangelogtest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRangelogtest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRangelogtest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRangelogtest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRangelogtest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRangelogtest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRangelogtest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRangelogtest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRangelogtest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRangelogtest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRangelogtest = fmt.Errorf("proto: unexpected end of group")
)

