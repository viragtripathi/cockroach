// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// source: kv/kvserver/storage_services.proto

package kvserver

import (
	bytes "bytes"
	context "context"
	kvserverpb "github.com/cockroachdb/cockroach/pkg/kv/kvserver/kvserverpb"
	errors "github.com/cockroachdb/errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_kv_kvserver_storage_services_proto struct{}

func (drpcEncoding_File_kv_kvserver_storage_services_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_kv_kvserver_storage_services_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_kv_kvserver_storage_services_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_kv_kvserver_storage_services_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCMultiRaftClient interface {
	DRPCConn() drpc.Conn

	RaftMessageBatch(ctx context.Context) (DRPCMultiRaft_RaftMessageBatchClient, error)
	RaftSnapshot(ctx context.Context) (DRPCMultiRaft_RaftSnapshotClient, error)
	DelegateRaftSnapshot(ctx context.Context) (DRPCMultiRaft_DelegateRaftSnapshotClient, error)
}

type drpcMultiRaftClient struct {
	cc drpc.Conn
}

func NewDRPCMultiRaftClient(cc drpc.Conn) DRPCMultiRaftClient {
	return &drpcMultiRaftClient{cc}
}

func (c *drpcMultiRaftClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcMultiRaftClient) RaftMessageBatch(ctx context.Context) (DRPCMultiRaft_RaftMessageBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.storage.MultiRaft/RaftMessageBatch", drpcEncoding_File_kv_kvserver_storage_services_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcMultiRaft_RaftMessageBatchClient{stream}
	return x, nil
}

type DRPCMultiRaft_RaftMessageBatchClient interface {
	drpc.Stream
	Send(*kvserverpb.RaftMessageRequestBatch) error
	Recv() (*kvserverpb.RaftMessageResponse, error)
}

type RPCMultiRaft_RaftMessageBatchClient interface {
	Context() context.Context
	CloseSend() error
	Send(*kvserverpb.RaftMessageRequestBatch) error
	Recv() (*kvserverpb.RaftMessageResponse, error)
}

type drpcMultiRaft_RaftMessageBatchClient struct {
	drpc.Stream
}

func (x *drpcMultiRaft_RaftMessageBatchClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcMultiRaft_RaftMessageBatchClient) Send(m *kvserverpb.RaftMessageRequestBatch) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvserver_storage_services_proto{})
}

func (x *drpcMultiRaft_RaftMessageBatchClient) Recv() (*kvserverpb.RaftMessageResponse, error) {
	m := new(kvserverpb.RaftMessageResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvserver_storage_services_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcMultiRaft_RaftMessageBatchClient) RecvMsg(m *kvserverpb.RaftMessageResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvserver_storage_services_proto{})
}

func (c *drpcMultiRaftClient) RaftSnapshot(ctx context.Context) (DRPCMultiRaft_RaftSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.storage.MultiRaft/RaftSnapshot", drpcEncoding_File_kv_kvserver_storage_services_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcMultiRaft_RaftSnapshotClient{stream}
	return x, nil
}

type DRPCMultiRaft_RaftSnapshotClient interface {
	drpc.Stream
	Send(*kvserverpb.SnapshotRequest) error
	Recv() (*kvserverpb.SnapshotResponse, error)
}

type RPCMultiRaft_RaftSnapshotClient interface {
	Context() context.Context
	CloseSend() error
	Send(*kvserverpb.SnapshotRequest) error
	Recv() (*kvserverpb.SnapshotResponse, error)
}

type drpcMultiRaft_RaftSnapshotClient struct {
	drpc.Stream
}

func (x *drpcMultiRaft_RaftSnapshotClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcMultiRaft_RaftSnapshotClient) Send(m *kvserverpb.SnapshotRequest) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvserver_storage_services_proto{})
}

func (x *drpcMultiRaft_RaftSnapshotClient) Recv() (*kvserverpb.SnapshotResponse, error) {
	m := new(kvserverpb.SnapshotResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvserver_storage_services_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcMultiRaft_RaftSnapshotClient) RecvMsg(m *kvserverpb.SnapshotResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvserver_storage_services_proto{})
}

func (c *drpcMultiRaftClient) DelegateRaftSnapshot(ctx context.Context) (DRPCMultiRaft_DelegateRaftSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.storage.MultiRaft/DelegateRaftSnapshot", drpcEncoding_File_kv_kvserver_storage_services_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcMultiRaft_DelegateRaftSnapshotClient{stream}
	return x, nil
}

type DRPCMultiRaft_DelegateRaftSnapshotClient interface {
	drpc.Stream
	Send(*kvserverpb.DelegateSnapshotRequest) error
	Recv() (*kvserverpb.DelegateSnapshotResponse, error)
}

type RPCMultiRaft_DelegateRaftSnapshotClient interface {
	Context() context.Context
	CloseSend() error
	Send(*kvserverpb.DelegateSnapshotRequest) error
	Recv() (*kvserverpb.DelegateSnapshotResponse, error)
}

type drpcMultiRaft_DelegateRaftSnapshotClient struct {
	drpc.Stream
}

func (x *drpcMultiRaft_DelegateRaftSnapshotClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcMultiRaft_DelegateRaftSnapshotClient) Send(m *kvserverpb.DelegateSnapshotRequest) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvserver_storage_services_proto{})
}

func (x *drpcMultiRaft_DelegateRaftSnapshotClient) Recv() (*kvserverpb.DelegateSnapshotResponse, error) {
	m := new(kvserverpb.DelegateSnapshotResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvserver_storage_services_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcMultiRaft_DelegateRaftSnapshotClient) RecvMsg(m *kvserverpb.DelegateSnapshotResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvserver_storage_services_proto{})
}

type DRPCMultiRaftServer interface {
	RaftMessageBatch(DRPCMultiRaft_RaftMessageBatchStream) error
	RaftSnapshot(DRPCMultiRaft_RaftSnapshotStream) error
	DelegateRaftSnapshot(DRPCMultiRaft_DelegateRaftSnapshotStream) error
}

type DRPCMultiRaftUnimplementedServer struct{}

func (s *DRPCMultiRaftUnimplementedServer) RaftMessageBatch(DRPCMultiRaft_RaftMessageBatchStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMultiRaftUnimplementedServer) RaftSnapshot(DRPCMultiRaft_RaftSnapshotStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMultiRaftUnimplementedServer) DelegateRaftSnapshot(DRPCMultiRaft_DelegateRaftSnapshotStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCMultiRaftDescription struct{}

func (DRPCMultiRaftDescription) NumMethods() int { return 3 }

func (DRPCMultiRaftDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.storage.MultiRaft/RaftMessageBatch", drpcEncoding_File_kv_kvserver_storage_services_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCMultiRaftServer).
					RaftMessageBatch(
						&drpcMultiRaft_RaftMessageBatchStream{in1.(drpc.Stream)},
					)
			}, DRPCMultiRaftServer.RaftMessageBatch, true
	case 1:
		return "/cockroach.storage.MultiRaft/RaftSnapshot", drpcEncoding_File_kv_kvserver_storage_services_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCMultiRaftServer).
					RaftSnapshot(
						&drpcMultiRaft_RaftSnapshotStream{in1.(drpc.Stream)},
					)
			}, DRPCMultiRaftServer.RaftSnapshot, true
	case 2:
		return "/cockroach.storage.MultiRaft/DelegateRaftSnapshot", drpcEncoding_File_kv_kvserver_storage_services_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCMultiRaftServer).
					DelegateRaftSnapshot(
						&drpcMultiRaft_DelegateRaftSnapshotStream{in1.(drpc.Stream)},
					)
			}, DRPCMultiRaftServer.DelegateRaftSnapshot, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterMultiRaft(mux drpc.Mux, impl DRPCMultiRaftServer) error {
	return mux.Register(impl, DRPCMultiRaftDescription{})
}

type DRPCMultiRaft_RaftMessageBatchStream interface {
	drpc.Stream
	Send(*kvserverpb.RaftMessageResponse) error
	Recv() (*kvserverpb.RaftMessageRequestBatch, error)
	RecvMsg(interface{}) error
}

type RPCMultiRaft_RaftMessageBatchStream interface {
	Context() context.Context
	Send(*kvserverpb.RaftMessageResponse) error
	Recv() (*kvserverpb.RaftMessageRequestBatch, error)
	RecvMsg(interface{}) error
}

type drpcMultiRaft_RaftMessageBatchStream struct {
	drpc.Stream
}

func (x *drpcMultiRaft_RaftMessageBatchStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcMultiRaft_RaftMessageBatchStream) Send(m *kvserverpb.RaftMessageResponse) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvserver_storage_services_proto{})
}

func (x *drpcMultiRaft_RaftMessageBatchStream) Recv() (*kvserverpb.RaftMessageRequestBatch, error) {
	m := new(kvserverpb.RaftMessageRequestBatch)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvserver_storage_services_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcMultiRaft_RaftMessageBatchStream) RecvMsg(m interface{}) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvserver_storage_services_proto{})
}

type DRPCMultiRaft_RaftSnapshotStream interface {
	drpc.Stream
	Send(*kvserverpb.SnapshotResponse) error
	Recv() (*kvserverpb.SnapshotRequest, error)
	RecvMsg(interface{}) error
}

type RPCMultiRaft_RaftSnapshotStream interface {
	Context() context.Context
	Send(*kvserverpb.SnapshotResponse) error
	Recv() (*kvserverpb.SnapshotRequest, error)
	RecvMsg(interface{}) error
}

type drpcMultiRaft_RaftSnapshotStream struct {
	drpc.Stream
}

func (x *drpcMultiRaft_RaftSnapshotStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcMultiRaft_RaftSnapshotStream) Send(m *kvserverpb.SnapshotResponse) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvserver_storage_services_proto{})
}

func (x *drpcMultiRaft_RaftSnapshotStream) Recv() (*kvserverpb.SnapshotRequest, error) {
	m := new(kvserverpb.SnapshotRequest)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvserver_storage_services_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcMultiRaft_RaftSnapshotStream) RecvMsg(m interface{}) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvserver_storage_services_proto{})
}

type DRPCMultiRaft_DelegateRaftSnapshotStream interface {
	drpc.Stream
	Send(*kvserverpb.DelegateSnapshotResponse) error
	Recv() (*kvserverpb.DelegateSnapshotRequest, error)
	RecvMsg(interface{}) error
}

type RPCMultiRaft_DelegateRaftSnapshotStream interface {
	Context() context.Context
	Send(*kvserverpb.DelegateSnapshotResponse) error
	Recv() (*kvserverpb.DelegateSnapshotRequest, error)
	RecvMsg(interface{}) error
}

type drpcMultiRaft_DelegateRaftSnapshotStream struct {
	drpc.Stream
}

func (x *drpcMultiRaft_DelegateRaftSnapshotStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcMultiRaft_DelegateRaftSnapshotStream) Send(m *kvserverpb.DelegateSnapshotResponse) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvserver_storage_services_proto{})
}

func (x *drpcMultiRaft_DelegateRaftSnapshotStream) Recv() (*kvserverpb.DelegateSnapshotRequest, error) {
	m := new(kvserverpb.DelegateSnapshotRequest)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvserver_storage_services_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcMultiRaft_DelegateRaftSnapshotStream) RecvMsg(m interface{}) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvserver_storage_services_proto{})
}

type RPCMultiRaftClient interface {
	RaftMessageBatch(ctx context.Context) (RPCMultiRaft_RaftMessageBatchClient, error)
	RaftSnapshot(ctx context.Context) (RPCMultiRaft_RaftSnapshotClient, error)
	DelegateRaftSnapshot(ctx context.Context) (RPCMultiRaft_DelegateRaftSnapshotClient, error)
}

// MultiRaft gRPC -> RPC adapter
type grpcMultiRaftClientAdapter multiRaftClient

func NewGRPCMultiRaftClientAdapter(conn *grpc.ClientConn) RPCMultiRaftClient {
	return (*grpcMultiRaftClientAdapter)(&multiRaftClient{conn})
}

func (a *grpcMultiRaftClientAdapter) RaftMessageBatch(ctx context.Context) (RPCMultiRaft_RaftMessageBatchClient, error) {
	return (*multiRaftClient)(a).RaftMessageBatch(ctx)
}

func (a *grpcMultiRaftClientAdapter) RaftSnapshot(ctx context.Context) (RPCMultiRaft_RaftSnapshotClient, error) {
	return (*multiRaftClient)(a).RaftSnapshot(ctx)
}

func (a *grpcMultiRaftClientAdapter) DelegateRaftSnapshot(ctx context.Context) (RPCMultiRaft_DelegateRaftSnapshotClient, error) {
	return (*multiRaftClient)(a).DelegateRaftSnapshot(ctx)
}

// compile-time assertion
var _ RPCMultiRaftClient = (*grpcMultiRaftClientAdapter)(nil)

// MultiRaft DRPC -> RPC adapter
type drpcMultiRaftClientAdapter drpcMultiRaftClient

func NewDRPCMultiRaftClientAdapter(conn drpc.Conn) RPCMultiRaftClient {
	return (*drpcMultiRaftClientAdapter)(&drpcMultiRaftClient{conn})
}

func (a *drpcMultiRaftClientAdapter) RaftMessageBatch(ctx context.Context) (RPCMultiRaft_RaftMessageBatchClient, error) {
	return (*drpcMultiRaftClient)(a).RaftMessageBatch(ctx)
}

func (a *drpcMultiRaftClientAdapter) RaftSnapshot(ctx context.Context) (RPCMultiRaft_RaftSnapshotClient, error) {
	return (*drpcMultiRaftClient)(a).RaftSnapshot(ctx)
}

func (a *drpcMultiRaftClientAdapter) DelegateRaftSnapshot(ctx context.Context) (RPCMultiRaft_DelegateRaftSnapshotClient, error) {
	return (*drpcMultiRaftClient)(a).DelegateRaftSnapshot(ctx)
}

// compile-time assertion
var _ RPCMultiRaftClient = (*drpcMultiRaftClientAdapter)(nil)

type DRPCPerReplicaClient interface {
	DRPCConn() drpc.Conn

	CollectChecksum(ctx context.Context, in *CollectChecksumRequest) (*CollectChecksumResponse, error)
	WaitForApplication(ctx context.Context, in *WaitForApplicationRequest) (*WaitForApplicationResponse, error)
	WaitForReplicaInit(ctx context.Context, in *WaitForReplicaInitRequest) (*WaitForReplicaInitResponse, error)
}

type drpcPerReplicaClient struct {
	cc drpc.Conn
}

func NewDRPCPerReplicaClient(cc drpc.Conn) DRPCPerReplicaClient {
	return &drpcPerReplicaClient{cc}
}

func (c *drpcPerReplicaClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcPerReplicaClient) CollectChecksum(ctx context.Context, in *CollectChecksumRequest) (*CollectChecksumResponse, error) {
	out := new(CollectChecksumResponse)
	err := c.cc.Invoke(ctx, "/cockroach.storage.PerReplica/CollectChecksum", drpcEncoding_File_kv_kvserver_storage_services_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcPerReplicaClient) WaitForApplication(ctx context.Context, in *WaitForApplicationRequest) (*WaitForApplicationResponse, error) {
	out := new(WaitForApplicationResponse)
	err := c.cc.Invoke(ctx, "/cockroach.storage.PerReplica/WaitForApplication", drpcEncoding_File_kv_kvserver_storage_services_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcPerReplicaClient) WaitForReplicaInit(ctx context.Context, in *WaitForReplicaInitRequest) (*WaitForReplicaInitResponse, error) {
	out := new(WaitForReplicaInitResponse)
	err := c.cc.Invoke(ctx, "/cockroach.storage.PerReplica/WaitForReplicaInit", drpcEncoding_File_kv_kvserver_storage_services_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCPerReplicaServer interface {
	CollectChecksum(context.Context, *CollectChecksumRequest) (*CollectChecksumResponse, error)
	WaitForApplication(context.Context, *WaitForApplicationRequest) (*WaitForApplicationResponse, error)
	WaitForReplicaInit(context.Context, *WaitForReplicaInitRequest) (*WaitForReplicaInitResponse, error)
}

type DRPCPerReplicaUnimplementedServer struct{}

func (s *DRPCPerReplicaUnimplementedServer) CollectChecksum(context.Context, *CollectChecksumRequest) (*CollectChecksumResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCPerReplicaUnimplementedServer) WaitForApplication(context.Context, *WaitForApplicationRequest) (*WaitForApplicationResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCPerReplicaUnimplementedServer) WaitForReplicaInit(context.Context, *WaitForReplicaInitRequest) (*WaitForReplicaInitResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCPerReplicaDescription struct{}

func (DRPCPerReplicaDescription) NumMethods() int { return 3 }

func (DRPCPerReplicaDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.storage.PerReplica/CollectChecksum", drpcEncoding_File_kv_kvserver_storage_services_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPerReplicaServer).
					CollectChecksum(
						ctx,
						in1.(*CollectChecksumRequest),
					)
			}, DRPCPerReplicaServer.CollectChecksum, true
	case 1:
		return "/cockroach.storage.PerReplica/WaitForApplication", drpcEncoding_File_kv_kvserver_storage_services_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPerReplicaServer).
					WaitForApplication(
						ctx,
						in1.(*WaitForApplicationRequest),
					)
			}, DRPCPerReplicaServer.WaitForApplication, true
	case 2:
		return "/cockroach.storage.PerReplica/WaitForReplicaInit", drpcEncoding_File_kv_kvserver_storage_services_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPerReplicaServer).
					WaitForReplicaInit(
						ctx,
						in1.(*WaitForReplicaInitRequest),
					)
			}, DRPCPerReplicaServer.WaitForReplicaInit, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterPerReplica(mux drpc.Mux, impl DRPCPerReplicaServer) error {
	return mux.Register(impl, DRPCPerReplicaDescription{})
}

type DRPCPerReplica_CollectChecksumStream interface {
	drpc.Stream
	SendAndClose(*CollectChecksumResponse) error
}

type RPCPerReplica_CollectChecksumStream interface {
	Context() context.Context
	SendAndClose(*CollectChecksumResponse) error
}

type drpcPerReplica_CollectChecksumStream struct {
	drpc.Stream
}

func (x *drpcPerReplica_CollectChecksumStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcPerReplica_CollectChecksumStream) SendAndClose(m *CollectChecksumResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvserver_storage_services_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCPerReplica_WaitForApplicationStream interface {
	drpc.Stream
	SendAndClose(*WaitForApplicationResponse) error
}

type RPCPerReplica_WaitForApplicationStream interface {
	Context() context.Context
	SendAndClose(*WaitForApplicationResponse) error
}

type drpcPerReplica_WaitForApplicationStream struct {
	drpc.Stream
}

func (x *drpcPerReplica_WaitForApplicationStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcPerReplica_WaitForApplicationStream) SendAndClose(m *WaitForApplicationResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvserver_storage_services_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCPerReplica_WaitForReplicaInitStream interface {
	drpc.Stream
	SendAndClose(*WaitForReplicaInitResponse) error
}

type RPCPerReplica_WaitForReplicaInitStream interface {
	Context() context.Context
	SendAndClose(*WaitForReplicaInitResponse) error
}

type drpcPerReplica_WaitForReplicaInitStream struct {
	drpc.Stream
}

func (x *drpcPerReplica_WaitForReplicaInitStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcPerReplica_WaitForReplicaInitStream) SendAndClose(m *WaitForReplicaInitResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvserver_storage_services_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type RPCPerReplicaClient interface {
	CollectChecksum(ctx context.Context, in *CollectChecksumRequest) (*CollectChecksumResponse, error)
	WaitForApplication(ctx context.Context, in *WaitForApplicationRequest) (*WaitForApplicationResponse, error)
	WaitForReplicaInit(ctx context.Context, in *WaitForReplicaInitRequest) (*WaitForReplicaInitResponse, error)
}

// PerReplica gRPC -> RPC adapter
type grpcPerReplicaClientAdapter perReplicaClient

func NewGRPCPerReplicaClientAdapter(conn *grpc.ClientConn) RPCPerReplicaClient {
	return (*grpcPerReplicaClientAdapter)(&perReplicaClient{conn})
}

func (a *grpcPerReplicaClientAdapter) CollectChecksum(ctx context.Context, in *CollectChecksumRequest) (*CollectChecksumResponse, error) {
	return (*perReplicaClient)(a).CollectChecksum(ctx, in)
}

func (a *grpcPerReplicaClientAdapter) WaitForApplication(ctx context.Context, in *WaitForApplicationRequest) (*WaitForApplicationResponse, error) {
	return (*perReplicaClient)(a).WaitForApplication(ctx, in)
}

func (a *grpcPerReplicaClientAdapter) WaitForReplicaInit(ctx context.Context, in *WaitForReplicaInitRequest) (*WaitForReplicaInitResponse, error) {
	return (*perReplicaClient)(a).WaitForReplicaInit(ctx, in)
}

// compile-time assertion
var _ RPCPerReplicaClient = (*grpcPerReplicaClientAdapter)(nil)

// PerReplica DRPC -> RPC adapter
type drpcPerReplicaClientAdapter drpcPerReplicaClient

func NewDRPCPerReplicaClientAdapter(conn drpc.Conn) RPCPerReplicaClient {
	return (*drpcPerReplicaClientAdapter)(&drpcPerReplicaClient{conn})
}

func (a *drpcPerReplicaClientAdapter) CollectChecksum(ctx context.Context, in *CollectChecksumRequest) (*CollectChecksumResponse, error) {
	return (*drpcPerReplicaClient)(a).CollectChecksum(ctx, in)
}

func (a *drpcPerReplicaClientAdapter) WaitForApplication(ctx context.Context, in *WaitForApplicationRequest) (*WaitForApplicationResponse, error) {
	return (*drpcPerReplicaClient)(a).WaitForApplication(ctx, in)
}

func (a *drpcPerReplicaClientAdapter) WaitForReplicaInit(ctx context.Context, in *WaitForReplicaInitRequest) (*WaitForReplicaInitResponse, error) {
	return (*drpcPerReplicaClient)(a).WaitForReplicaInit(ctx, in)
}

// compile-time assertion
var _ RPCPerReplicaClient = (*drpcPerReplicaClientAdapter)(nil)

type DRPCPerStoreClient interface {
	DRPCConn() drpc.Conn

	CompactEngineSpan(ctx context.Context, in *CompactEngineSpanRequest) (*CompactEngineSpanResponse, error)
	GetTableMetrics(ctx context.Context, in *GetTableMetricsRequest) (*GetTableMetricsResponse, error)
	ScanStorageInternalKeys(ctx context.Context, in *ScanStorageInternalKeysRequest) (*ScanStorageInternalKeysResponse, error)
	SetCompactionConcurrency(ctx context.Context, in *CompactionConcurrencyRequest) (*CompactionConcurrencyResponse, error)
}

type drpcPerStoreClient struct {
	cc drpc.Conn
}

func NewDRPCPerStoreClient(cc drpc.Conn) DRPCPerStoreClient {
	return &drpcPerStoreClient{cc}
}

func (c *drpcPerStoreClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcPerStoreClient) CompactEngineSpan(ctx context.Context, in *CompactEngineSpanRequest) (*CompactEngineSpanResponse, error) {
	out := new(CompactEngineSpanResponse)
	err := c.cc.Invoke(ctx, "/cockroach.storage.PerStore/CompactEngineSpan", drpcEncoding_File_kv_kvserver_storage_services_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcPerStoreClient) GetTableMetrics(ctx context.Context, in *GetTableMetricsRequest) (*GetTableMetricsResponse, error) {
	out := new(GetTableMetricsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.storage.PerStore/GetTableMetrics", drpcEncoding_File_kv_kvserver_storage_services_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcPerStoreClient) ScanStorageInternalKeys(ctx context.Context, in *ScanStorageInternalKeysRequest) (*ScanStorageInternalKeysResponse, error) {
	out := new(ScanStorageInternalKeysResponse)
	err := c.cc.Invoke(ctx, "/cockroach.storage.PerStore/ScanStorageInternalKeys", drpcEncoding_File_kv_kvserver_storage_services_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcPerStoreClient) SetCompactionConcurrency(ctx context.Context, in *CompactionConcurrencyRequest) (*CompactionConcurrencyResponse, error) {
	out := new(CompactionConcurrencyResponse)
	err := c.cc.Invoke(ctx, "/cockroach.storage.PerStore/SetCompactionConcurrency", drpcEncoding_File_kv_kvserver_storage_services_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCPerStoreServer interface {
	CompactEngineSpan(context.Context, *CompactEngineSpanRequest) (*CompactEngineSpanResponse, error)
	GetTableMetrics(context.Context, *GetTableMetricsRequest) (*GetTableMetricsResponse, error)
	ScanStorageInternalKeys(context.Context, *ScanStorageInternalKeysRequest) (*ScanStorageInternalKeysResponse, error)
	SetCompactionConcurrency(context.Context, *CompactionConcurrencyRequest) (*CompactionConcurrencyResponse, error)
}

type DRPCPerStoreUnimplementedServer struct{}

func (s *DRPCPerStoreUnimplementedServer) CompactEngineSpan(context.Context, *CompactEngineSpanRequest) (*CompactEngineSpanResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCPerStoreUnimplementedServer) GetTableMetrics(context.Context, *GetTableMetricsRequest) (*GetTableMetricsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCPerStoreUnimplementedServer) ScanStorageInternalKeys(context.Context, *ScanStorageInternalKeysRequest) (*ScanStorageInternalKeysResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCPerStoreUnimplementedServer) SetCompactionConcurrency(context.Context, *CompactionConcurrencyRequest) (*CompactionConcurrencyResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCPerStoreDescription struct{}

func (DRPCPerStoreDescription) NumMethods() int { return 4 }

func (DRPCPerStoreDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.storage.PerStore/CompactEngineSpan", drpcEncoding_File_kv_kvserver_storage_services_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPerStoreServer).
					CompactEngineSpan(
						ctx,
						in1.(*CompactEngineSpanRequest),
					)
			}, DRPCPerStoreServer.CompactEngineSpan, true
	case 1:
		return "/cockroach.storage.PerStore/GetTableMetrics", drpcEncoding_File_kv_kvserver_storage_services_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPerStoreServer).
					GetTableMetrics(
						ctx,
						in1.(*GetTableMetricsRequest),
					)
			}, DRPCPerStoreServer.GetTableMetrics, true
	case 2:
		return "/cockroach.storage.PerStore/ScanStorageInternalKeys", drpcEncoding_File_kv_kvserver_storage_services_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPerStoreServer).
					ScanStorageInternalKeys(
						ctx,
						in1.(*ScanStorageInternalKeysRequest),
					)
			}, DRPCPerStoreServer.ScanStorageInternalKeys, true
	case 3:
		return "/cockroach.storage.PerStore/SetCompactionConcurrency", drpcEncoding_File_kv_kvserver_storage_services_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPerStoreServer).
					SetCompactionConcurrency(
						ctx,
						in1.(*CompactionConcurrencyRequest),
					)
			}, DRPCPerStoreServer.SetCompactionConcurrency, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterPerStore(mux drpc.Mux, impl DRPCPerStoreServer) error {
	return mux.Register(impl, DRPCPerStoreDescription{})
}

type DRPCPerStore_CompactEngineSpanStream interface {
	drpc.Stream
	SendAndClose(*CompactEngineSpanResponse) error
}

type RPCPerStore_CompactEngineSpanStream interface {
	Context() context.Context
	SendAndClose(*CompactEngineSpanResponse) error
}

type drpcPerStore_CompactEngineSpanStream struct {
	drpc.Stream
}

func (x *drpcPerStore_CompactEngineSpanStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcPerStore_CompactEngineSpanStream) SendAndClose(m *CompactEngineSpanResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvserver_storage_services_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCPerStore_GetTableMetricsStream interface {
	drpc.Stream
	SendAndClose(*GetTableMetricsResponse) error
}

type RPCPerStore_GetTableMetricsStream interface {
	Context() context.Context
	SendAndClose(*GetTableMetricsResponse) error
}

type drpcPerStore_GetTableMetricsStream struct {
	drpc.Stream
}

func (x *drpcPerStore_GetTableMetricsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcPerStore_GetTableMetricsStream) SendAndClose(m *GetTableMetricsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvserver_storage_services_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCPerStore_ScanStorageInternalKeysStream interface {
	drpc.Stream
	SendAndClose(*ScanStorageInternalKeysResponse) error
}

type RPCPerStore_ScanStorageInternalKeysStream interface {
	Context() context.Context
	SendAndClose(*ScanStorageInternalKeysResponse) error
}

type drpcPerStore_ScanStorageInternalKeysStream struct {
	drpc.Stream
}

func (x *drpcPerStore_ScanStorageInternalKeysStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcPerStore_ScanStorageInternalKeysStream) SendAndClose(m *ScanStorageInternalKeysResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvserver_storage_services_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCPerStore_SetCompactionConcurrencyStream interface {
	drpc.Stream
	SendAndClose(*CompactionConcurrencyResponse) error
}

type RPCPerStore_SetCompactionConcurrencyStream interface {
	Context() context.Context
	SendAndClose(*CompactionConcurrencyResponse) error
}

type drpcPerStore_SetCompactionConcurrencyStream struct {
	drpc.Stream
}

func (x *drpcPerStore_SetCompactionConcurrencyStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcPerStore_SetCompactionConcurrencyStream) SendAndClose(m *CompactionConcurrencyResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvserver_storage_services_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type RPCPerStoreClient interface {
	CompactEngineSpan(ctx context.Context, in *CompactEngineSpanRequest) (*CompactEngineSpanResponse, error)
	GetTableMetrics(ctx context.Context, in *GetTableMetricsRequest) (*GetTableMetricsResponse, error)
	ScanStorageInternalKeys(ctx context.Context, in *ScanStorageInternalKeysRequest) (*ScanStorageInternalKeysResponse, error)
	SetCompactionConcurrency(ctx context.Context, in *CompactionConcurrencyRequest) (*CompactionConcurrencyResponse, error)
}

// PerStore gRPC -> RPC adapter
type grpcPerStoreClientAdapter perStoreClient

func NewGRPCPerStoreClientAdapter(conn *grpc.ClientConn) RPCPerStoreClient {
	return (*grpcPerStoreClientAdapter)(&perStoreClient{conn})
}

func (a *grpcPerStoreClientAdapter) CompactEngineSpan(ctx context.Context, in *CompactEngineSpanRequest) (*CompactEngineSpanResponse, error) {
	return (*perStoreClient)(a).CompactEngineSpan(ctx, in)
}

func (a *grpcPerStoreClientAdapter) GetTableMetrics(ctx context.Context, in *GetTableMetricsRequest) (*GetTableMetricsResponse, error) {
	return (*perStoreClient)(a).GetTableMetrics(ctx, in)
}

func (a *grpcPerStoreClientAdapter) ScanStorageInternalKeys(ctx context.Context, in *ScanStorageInternalKeysRequest) (*ScanStorageInternalKeysResponse, error) {
	return (*perStoreClient)(a).ScanStorageInternalKeys(ctx, in)
}

func (a *grpcPerStoreClientAdapter) SetCompactionConcurrency(ctx context.Context, in *CompactionConcurrencyRequest) (*CompactionConcurrencyResponse, error) {
	return (*perStoreClient)(a).SetCompactionConcurrency(ctx, in)
}

// compile-time assertion
var _ RPCPerStoreClient = (*grpcPerStoreClientAdapter)(nil)

// PerStore DRPC -> RPC adapter
type drpcPerStoreClientAdapter drpcPerStoreClient

func NewDRPCPerStoreClientAdapter(conn drpc.Conn) RPCPerStoreClient {
	return (*drpcPerStoreClientAdapter)(&drpcPerStoreClient{conn})
}

func (a *drpcPerStoreClientAdapter) CompactEngineSpan(ctx context.Context, in *CompactEngineSpanRequest) (*CompactEngineSpanResponse, error) {
	return (*drpcPerStoreClient)(a).CompactEngineSpan(ctx, in)
}

func (a *drpcPerStoreClientAdapter) GetTableMetrics(ctx context.Context, in *GetTableMetricsRequest) (*GetTableMetricsResponse, error) {
	return (*drpcPerStoreClient)(a).GetTableMetrics(ctx, in)
}

func (a *drpcPerStoreClientAdapter) ScanStorageInternalKeys(ctx context.Context, in *ScanStorageInternalKeysRequest) (*ScanStorageInternalKeysResponse, error) {
	return (*drpcPerStoreClient)(a).ScanStorageInternalKeys(ctx, in)
}

func (a *drpcPerStoreClientAdapter) SetCompactionConcurrency(ctx context.Context, in *CompactionConcurrencyRequest) (*CompactionConcurrencyResponse, error) {
	return (*drpcPerStoreClient)(a).SetCompactionConcurrency(ctx, in)
}

// compile-time assertion
var _ RPCPerStoreClient = (*drpcPerStoreClientAdapter)(nil)
