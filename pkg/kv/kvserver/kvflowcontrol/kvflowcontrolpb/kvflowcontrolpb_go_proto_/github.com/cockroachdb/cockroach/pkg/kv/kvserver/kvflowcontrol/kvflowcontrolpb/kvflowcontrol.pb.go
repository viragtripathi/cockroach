// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvserver/kvflowcontrol/kvflowcontrolpb/kvflowcontrol.proto

package kvflowcontrolpb

import (
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	slices "slices"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RaftAdmissionMeta contains information used by admission control for the
// select raft commands that use replication admission control. It contains a
// subset of the fields in kvserverpb.RaftCommand to selectively decode
// state[1]. When marshaling a RaftCommand, we willfully include this data in
// the prefix of the marshaled byte buffer. Information about whether this data
// is present is captured in the first byte of the encoded raft proposal -- see
// raftlog.EntryEncoding.
//
// [1]: The field tags and types must be kept identical with what's found there.
//
// RaftAdmissionMeta is used by both RACv1 and RACv2 encodings. RACv1 encoding
// uses all the fields. RACv2 encoding uses only AdmissionPriority and
// AdmissionCreateTime, and AdmissionPriority is set to the raftpb.Priority.
type RaftAdmissionMeta struct {
	// AdmissionPriority of the command.
	// - RACv1: maps to admission.WorkPriority
	// - RACv2: maps to raftpb.Priority
	// Used within a tenant below-raft for replication admission control.
	AdmissionPriority int32 `protobuf:"varint,18,opt,name=admission_priority,json=admissionPriority,proto3" json:"admission_priority,omitempty"`
	// AdmissionCreateTime is equivalent to Time.UnixNano() at the creation time
	// of the request, or a parent request, for which this command is a part of.
	// It's used within a tenant below-raft for replication admission control; see
	// admission.WorkInfo.CreateTime for details.
	AdmissionCreateTime int64 `protobuf:"varint,19,opt,name=admission_create_time,json=admissionCreateTime,proto3" json:"admission_create_time,omitempty"`
	// AdmissionOriginNode captures where this raft command originated. It's used
	// to inform said node of this raft command's (virtual) admission in order for
	// it to release flow tokens for subsequent commands. Not used by RACv2
	// encoding.
	AdmissionOriginNode github_com_cockroachdb_cockroach_pkg_roachpb.NodeID `protobuf:"varint,20,opt,name=admission_origin_node,json=admissionOriginNode,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"admission_origin_node,omitempty"`
}

func (m *RaftAdmissionMeta) Reset()         { *m = RaftAdmissionMeta{} }
func (m *RaftAdmissionMeta) String() string { return proto.CompactTextString(m) }
func (*RaftAdmissionMeta) ProtoMessage()    {}
func (*RaftAdmissionMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_1540d617309b666a, []int{0}
}
func (m *RaftAdmissionMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftAdmissionMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RaftAdmissionMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftAdmissionMeta.Merge(m, src)
}
func (m *RaftAdmissionMeta) XXX_Size() int {
	return m.Size()
}
func (m *RaftAdmissionMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftAdmissionMeta.DiscardUnknown(m)
}

var xxx_messageInfo_RaftAdmissionMeta proto.InternalMessageInfo

// RaftLogPosition is a point on the raft log, identified by a term and an
// index.
type RaftLogPosition struct {
	Term  uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Index uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *RaftLogPosition) Reset()      { *m = RaftLogPosition{} }
func (*RaftLogPosition) ProtoMessage() {}
func (*RaftLogPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_1540d617309b666a, []int{1}
}
func (m *RaftLogPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftLogPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RaftLogPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftLogPosition.Merge(m, src)
}
func (m *RaftLogPosition) XXX_Size() int {
	return m.Size()
}
func (m *RaftLogPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftLogPosition.DiscardUnknown(m)
}

var xxx_messageInfo_RaftLogPosition proto.InternalMessageInfo

// AdmittedState communicates a replica's vector of admitted log indices at
// different priorities to the leader of a range.
//
// Used only in RACv2.
type AdmittedState struct {
	// Term is the leader term of the log for which the Admitted indices were
	// computed. The indices are consistent with this leader's log.
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// Admitted contains admitted log indices for each priority < NumPriorities.
	Admitted []uint64 `protobuf:"varint,2,rep,packed,name=admitted,proto3" json:"admitted,omitempty"`
}

func (m *AdmittedState) Reset()      { *m = AdmittedState{} }
func (*AdmittedState) ProtoMessage() {}
func (*AdmittedState) Descriptor() ([]byte, []int) {
	return fileDescriptor_1540d617309b666a, []int{2}
}
func (m *AdmittedState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdmittedState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AdmittedState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdmittedState.Merge(m, src)
}
func (m *AdmittedState) XXX_Size() int {
	return m.Size()
}
func (m *AdmittedState) XXX_DiscardUnknown() {
	xxx_messageInfo_AdmittedState.DiscardUnknown(m)
}

var xxx_messageInfo_AdmittedState proto.InternalMessageInfo

// PiggybackedAdmittedState wraps the AdmittedState with the routing information
// needed to deliver the admitted vector to a particular leader replica, and for
// it to know who sent it.
//
// Used only in RACv2.
type PiggybackedAdmittedState struct {
	// RangeID is the ID of the range to which this message is related. Used for
	// routing at the leader node.
	RangeID github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_id,omitempty"`
	// ToStoreID is the store at the leader containing the leader replica. Used
	// for routing at the leader node.
	ToStoreID github_com_cockroachdb_cockroach_pkg_roachpb.StoreID `protobuf:"varint,2,opt,name=to_store_id,json=toStoreId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.StoreID" json:"to_store_id,omitempty"`
	// FromReplicaID is the replica sending this message.
	FromReplicaID github_com_cockroachdb_cockroach_pkg_roachpb.ReplicaID `protobuf:"varint,3,opt,name=from_replica_id,json=fromReplicaId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.ReplicaID" json:"from_replica_id,omitempty"`
	// ToReplicaID is the leader replica receiving this message.
	ToReplicaID github_com_cockroachdb_cockroach_pkg_roachpb.ReplicaID `protobuf:"varint,4,opt,name=to_replica_id,json=toReplicaId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.ReplicaID" json:"to_replica_id,omitempty"`
	// Admitted is the admitted vector at the sending replica.
	Admitted AdmittedState `protobuf:"bytes,5,opt,name=admitted,proto3" json:"admitted"`
}

func (m *PiggybackedAdmittedState) Reset()      { *m = PiggybackedAdmittedState{} }
func (*PiggybackedAdmittedState) ProtoMessage() {}
func (*PiggybackedAdmittedState) Descriptor() ([]byte, []int) {
	return fileDescriptor_1540d617309b666a, []int{3}
}
func (m *PiggybackedAdmittedState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PiggybackedAdmittedState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PiggybackedAdmittedState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PiggybackedAdmittedState.Merge(m, src)
}
func (m *PiggybackedAdmittedState) XXX_Size() int {
	return m.Size()
}
func (m *PiggybackedAdmittedState) XXX_DiscardUnknown() {
	xxx_messageInfo_PiggybackedAdmittedState.DiscardUnknown(m)
}

var xxx_messageInfo_PiggybackedAdmittedState proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RaftAdmissionMeta)(nil), "cockroach.kv.kvserver.kvflowcontrol.kvflowcontrolpb.RaftAdmissionMeta")
	proto.RegisterType((*RaftLogPosition)(nil), "cockroach.kv.kvserver.kvflowcontrol.kvflowcontrolpb.RaftLogPosition")
	proto.RegisterType((*AdmittedState)(nil), "cockroach.kv.kvserver.kvflowcontrol.kvflowcontrolpb.AdmittedState")
	proto.RegisterType((*PiggybackedAdmittedState)(nil), "cockroach.kv.kvserver.kvflowcontrol.kvflowcontrolpb.PiggybackedAdmittedState")
}

func init() {
	proto.RegisterFile("kv/kvserver/kvflowcontrol/kvflowcontrolpb/kvflowcontrol.proto", fileDescriptor_1540d617309b666a)
}

var fileDescriptor_1540d617309b666a = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x3d, 0x4f, 0xdb, 0x4e,
	0x1c, 0xc7, 0x6d, 0x30, 0x7f, 0xe0, 0xa2, 0x08, 0x71, 0xf0, 0x97, 0x2c, 0x06, 0x3b, 0xca, 0x94,
	0xa5, 0xb6, 0x44, 0xaa, 0x56, 0xaa, 0xd4, 0x01, 0x03, 0x95, 0xa2, 0xb6, 0x34, 0x32, 0x99, 0x3a,
	0xd4, 0xb2, 0x7d, 0x17, 0x73, 0x72, 0xec, 0x9f, 0x75, 0xbe, 0xa6, 0xe5, 0x5d, 0x74, 0xec, 0xd8,
	0xb7, 0xd0, 0x77, 0x91, 0x91, 0x91, 0xc9, 0x6a, 0x9d, 0x77, 0xc1, 0x54, 0xf9, 0xe2, 0x3c, 0xa1,
	0x0e, 0x80, 0xba, 0xfd, 0x1e, 0xbf, 0x1f, 0x7d, 0xcf, 0xe7, 0x43, 0xaf, 0xe3, 0xb1, 0x1d, 0x8f,
	0x73, 0xca, 0xc7, 0x94, 0xdb, 0xf1, 0x78, 0x38, 0x82, 0x2f, 0x21, 0xa4, 0x82, 0xc3, 0x68, 0x3d,
	0xcb, 0x82, 0xf5, 0xdc, 0xca, 0x38, 0x08, 0xc0, 0xdd, 0x10, 0xc2, 0x98, 0x83, 0x1f, 0x5e, 0x59,
	0xf1, 0xd8, 0x9a, 0x0b, 0x59, 0xeb, 0xa3, 0xf7, 0x84, 0x8e, 0x0e, 0x23, 0x88, 0x40, 0xee, 0xdb,
	0x55, 0x34, 0x93, 0x6a, 0x4f, 0x55, 0xb4, 0xef, 0xfa, 0x43, 0x71, 0x42, 0x12, 0x96, 0xe7, 0x0c,
	0xd2, 0xf7, 0x54, 0xf8, 0xf8, 0x19, 0xc2, 0xfe, 0xbc, 0xe0, 0x65, 0x9c, 0x01, 0x67, 0xe2, 0x5a,
	0xc7, 0x2d, 0xb5, 0xb3, 0xe5, 0xee, 0x2f, 0x3a, 0xfd, 0xba, 0x81, 0x8f, 0xd1, 0xff, 0xcb, 0xf1,
	0x90, 0x53, 0x5f, 0x50, 0x4f, 0xb0, 0x84, 0xea, 0x07, 0x2d, 0xb5, 0xb3, 0xe9, 0x1e, 0x2c, 0x9a,
	0xa7, 0xb2, 0x37, 0x60, 0x09, 0xc5, 0xf1, 0xea, 0x0e, 0x70, 0x16, 0xb1, 0xd4, 0x4b, 0x81, 0x50,
	0xfd, 0xb0, 0xa2, 0x38, 0x2f, 0xef, 0x0a, 0xb3, 0x1b, 0x31, 0x71, 0xf5, 0x39, 0xb0, 0x42, 0x48,
	0xec, 0x85, 0x63, 0x12, 0x2c, 0x63, 0x3b, 0x8b, 0x23, 0x5b, 0x46, 0x59, 0x60, 0x5d, 0x00, 0xa1,
	0xbd, 0xb3, 0x15, 0xd8, 0x07, 0x29, 0x5a, 0x95, 0xdb, 0x27, 0x68, 0xaf, 0x32, 0xf9, 0x0e, 0xa2,
	0x3e, 0xe4, 0x4c, 0x30, 0x48, 0x31, 0x46, 0x9a, 0xa0, 0x3c, 0xd1, 0xd5, 0x96, 0xda, 0xd1, 0x5c,
	0x19, 0xe3, 0x43, 0xb4, 0xc5, 0x52, 0x42, 0xbf, 0xea, 0x1b, 0xb2, 0x38, 0x4b, 0x5e, 0x69, 0xdf,
	0x7f, 0x98, 0x4a, 0xfb, 0x1c, 0x35, 0xab, 0x33, 0x12, 0x82, 0x92, 0x4b, 0xe1, 0x0b, 0xfa, 0x57,
	0x81, 0x23, 0xb4, 0xe3, 0xd7, 0x43, 0xfa, 0x46, 0x6b, 0xb3, 0xa3, 0xb9, 0x8b, 0xbc, 0x96, 0xf9,
	0xa9, 0x21, 0xbd, 0xcf, 0xa2, 0xe8, 0x3a, 0xf0, 0xc3, 0x98, 0x92, 0x75, 0xc9, 0x4f, 0x68, 0x87,
	0xfb, 0x69, 0x44, 0x3d, 0x46, 0x66, 0xb2, 0xce, 0x69, 0x59, 0x98, 0xdb, 0x6e, 0x55, 0xeb, 0x9d,
	0xdd, 0x15, 0xe6, 0xf3, 0x47, 0x9d, 0x48, 0xbd, 0xe7, 0x6e, 0x4b, 0xd1, 0x1e, 0xc1, 0x14, 0x35,
	0x04, 0x78, 0xb9, 0x00, 0x2e, 0x11, 0xd2, 0xa5, 0x73, 0x5e, 0x16, 0xe6, 0xee, 0x00, 0x2e, 0xab,
	0xea, 0x13, 0x20, 0xf5, 0x9e, 0xbb, 0x2b, 0x6a, 0x09, 0x82, 0x73, 0xb4, 0x37, 0xe4, 0x90, 0x78,
	0x9c, 0x66, 0x23, 0x16, 0xfa, 0x15, 0x6a, 0x53, 0xa2, 0xde, 0x96, 0x85, 0xd9, 0x7c, 0xc3, 0x21,
	0x71, 0x67, 0x1d, 0x89, 0x7b, 0xf1, 0x38, 0x4f, 0xf3, 0x4d, 0xb7, 0x39, 0x5c, 0x11, 0x22, 0x38,
	0x41, 0x4d, 0x01, 0xab, 0x48, 0x4d, 0x22, 0x7b, 0x65, 0x61, 0x36, 0x06, 0xf0, 0x2f, 0x80, 0x0d,
	0x01, 0x4b, 0x1c, 0x59, 0xf9, 0xd2, 0x5b, 0x2d, 0xb5, 0xd3, 0x38, 0x76, 0xac, 0x27, 0xfc, 0x95,
	0xd6, 0xda, 0x05, 0x70, 0xb4, 0x49, 0x61, 0x2a, 0xf7, 0xef, 0x8c, 0x93, 0x4d, 0x7e, 0x1b, 0xca,
	0xa4, 0x34, 0xd4, 0x9b, 0xd2, 0x50, 0x6f, 0x4b, 0x43, 0xfd, 0x55, 0x1a, 0xea, 0xb7, 0xa9, 0xa1,
	0xdc, 0x4c, 0x0d, 0xe5, 0x76, 0x6a, 0x28, 0x1f, 0x2f, 0x1e, 0x64, 0xe9, 0xc1, 0x8f, 0x4e, 0xf0,
	0x9f, 0x7c, 0x1c, 0xba, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x07, 0x40, 0x31, 0xa8, 0x04,
	0x00, 0x00,
}

func (m *RaftAdmissionMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftAdmissionMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftAdmissionMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdmissionOriginNode != 0 {
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(m.AdmissionOriginNode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.AdmissionCreateTime != 0 {
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(m.AdmissionCreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.AdmissionPriority != 0 {
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(m.AdmissionPriority))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	return len(dAtA) - i, nil
}

func (m *RaftLogPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftLogPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftLogPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.Term != 0 {
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AdmittedState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdmittedState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdmittedState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admitted) > 0 {
		l := 0
		for _, e := range m.Admitted {
			l += sovKvflowcontrol(uint64(e))
		}
		i -= l
		if l == len(m.Admitted) {
			dest := dAtA[i : i+len(m.Admitted)]
			for k, num := range m.Admitted {
				dest[k] = uint8(num)
			}
		} else {
			j1 := i
			for _, num := range m.Admitted {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
		}
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(uint64(l)))
		i--
		dAtA[i] = 0x12
	}
	if m.Term != 0 {
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PiggybackedAdmittedState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PiggybackedAdmittedState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PiggybackedAdmittedState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Admitted.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.ToReplicaID != 0 {
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(m.ToReplicaID))
		i--
		dAtA[i] = 0x20
	}
	if m.FromReplicaID != 0 {
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(m.FromReplicaID))
		i--
		dAtA[i] = 0x18
	}
	if m.ToStoreID != 0 {
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(m.ToStoreID))
		i--
		dAtA[i] = 0x10
	}
	if m.RangeID != 0 {
		i = encodeVarintKvflowcontrol(dAtA, i, uint64(m.RangeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintKvflowcontrol(dAtA []byte, offset int, v uint64) int {
	offset -= sovKvflowcontrol(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RaftAdmissionMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdmissionPriority != 0 {
		n += 2 + sovKvflowcontrol(uint64(m.AdmissionPriority))
	}
	if m.AdmissionCreateTime != 0 {
		n += 2 + sovKvflowcontrol(uint64(m.AdmissionCreateTime))
	}
	if m.AdmissionOriginNode != 0 {
		n += 2 + sovKvflowcontrol(uint64(m.AdmissionOriginNode))
	}
	return n
}

func (m *RaftLogPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovKvflowcontrol(uint64(m.Term))
	}
	if m.Index != 0 {
		n += 1 + sovKvflowcontrol(uint64(m.Index))
	}
	return n
}

func (m *AdmittedState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovKvflowcontrol(uint64(m.Term))
	}
	if len(m.Admitted) > 0 {
		l = 0
		for _, e := range m.Admitted {
			l += sovKvflowcontrol(uint64(e))
		}
		n += 1 + sovKvflowcontrol(uint64(l)) + l
	}
	return n
}

func (m *PiggybackedAdmittedState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeID != 0 {
		n += 1 + sovKvflowcontrol(uint64(m.RangeID))
	}
	if m.ToStoreID != 0 {
		n += 1 + sovKvflowcontrol(uint64(m.ToStoreID))
	}
	if m.FromReplicaID != 0 {
		n += 1 + sovKvflowcontrol(uint64(m.FromReplicaID))
	}
	if m.ToReplicaID != 0 {
		n += 1 + sovKvflowcontrol(uint64(m.ToReplicaID))
	}
	l = m.Admitted.Size()
	n += 1 + l + sovKvflowcontrol(uint64(l))
	return n
}

func sovKvflowcontrol(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozKvflowcontrol(x uint64) (n int) {
	return sovKvflowcontrol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RaftAdmissionMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKvflowcontrol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftAdmissionMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftAdmissionMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdmissionPriority", wireType)
			}
			m.AdmissionPriority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdmissionPriority |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdmissionCreateTime", wireType)
			}
			m.AdmissionCreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdmissionCreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdmissionOriginNode", wireType)
			}
			m.AdmissionOriginNode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdmissionOriginNode |= github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKvflowcontrol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKvflowcontrol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftLogPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKvflowcontrol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftLogPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftLogPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKvflowcontrol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKvflowcontrol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdmittedState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKvflowcontrol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdmittedState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdmittedState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowKvflowcontrol
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Admitted = append(m.Admitted, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowKvflowcontrol
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthKvflowcontrol
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthKvflowcontrol
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 {
					if m.Admitted == nil {
						m.Admitted = make([]uint64, 0, elementCount)
					} else {
						m.Admitted = slices.Grow(m.Admitted, elementCount)
					}
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowKvflowcontrol
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Admitted = append(m.Admitted, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Admitted", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKvflowcontrol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKvflowcontrol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PiggybackedAdmittedState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKvflowcontrol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PiggybackedAdmittedState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PiggybackedAdmittedState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToStoreID", wireType)
			}
			m.ToStoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToStoreID |= github_com_cockroachdb_cockroach_pkg_roachpb.StoreID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromReplicaID", wireType)
			}
			m.FromReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromReplicaID |= github_com_cockroachdb_cockroach_pkg_roachpb.ReplicaID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToReplicaID", wireType)
			}
			m.ToReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToReplicaID |= github_com_cockroachdb_cockroach_pkg_roachpb.ReplicaID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admitted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKvflowcontrol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKvflowcontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Admitted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKvflowcontrol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKvflowcontrol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKvflowcontrol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKvflowcontrol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKvflowcontrol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKvflowcontrol
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKvflowcontrol
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKvflowcontrol
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKvflowcontrol        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKvflowcontrol          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKvflowcontrol = fmt.Errorf("proto: unexpected end of group")
)

