// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvserver/kvserverpb/range_log.proto

package kvserverpb

import (
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RangeLogEventType int32

const (
	// These are lower case to maintain compatibility with how they were
	// originally stored.
	// Split is the event type recorded when a range splits.
	RangeLogEventType_split RangeLogEventType = 0
	// Merge is the event type recorded when a range merges.
	RangeLogEventType_merge RangeLogEventType = 3
	// AddVoter is the event type recorded when a range adds a new voting replica.
	RangeLogEventType_add_voter RangeLogEventType = 1
	// RemoveVoter is the event type recorded when a range removes an existing voting replica.
	RangeLogEventType_remove_voter RangeLogEventType = 2
	// AddNonVoter is the event type recorded when a range adds a new non-voting replica.
	RangeLogEventType_add_non_voter RangeLogEventType = 4
	// RemoveNonVoter is the event type recorded when a range removes an existing non-voting replica.
	RangeLogEventType_remove_non_voter RangeLogEventType = 5
	// UnsafeQuorumRecovery is the event type recorded when all replicas are
	// replaced by a new one that acts as the source of truth possibly losing
	// latest updates.
	RangeLogEventType_unsafe_quorum_recovery RangeLogEventType = 6
)

var RangeLogEventType_name = map[int32]string{
	0: "split",
	3: "merge",
	1: "add_voter",
	2: "remove_voter",
	4: "add_non_voter",
	5: "remove_non_voter",
	6: "unsafe_quorum_recovery",
}

var RangeLogEventType_value = map[string]int32{
	"split":                  0,
	"merge":                  3,
	"add_voter":              1,
	"remove_voter":           2,
	"add_non_voter":          4,
	"remove_non_voter":       5,
	"unsafe_quorum_recovery": 6,
}

func (x RangeLogEventType) String() string {
	return proto.EnumName(RangeLogEventType_name, int32(x))
}

func (RangeLogEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f795e79ab792963c, []int{0}
}

type RangeLogEvent struct {
	Timestamp    time.Time                                            `protobuf:"bytes,1,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	RangeID      github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,2,opt,name=range_id,json=rangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_id,omitempty"`
	StoreID      github_com_cockroachdb_cockroach_pkg_roachpb.StoreID `protobuf:"varint,3,opt,name=store_id,json=storeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.StoreID" json:"store_id,omitempty"`
	EventType    RangeLogEventType                                    `protobuf:"varint,4,opt,name=event_type,json=eventType,proto3,enum=cockroach.kv.kvserver.storagepb.RangeLogEventType" json:"event_type,omitempty"`
	OtherRangeID github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,5,opt,name=other_range_id,json=otherRangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"other_range_id,omitempty"`
	Info         *RangeLogEvent_Info                                  `protobuf:"bytes,6,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *RangeLogEvent) Reset()         { *m = RangeLogEvent{} }
func (m *RangeLogEvent) String() string { return proto.CompactTextString(m) }
func (*RangeLogEvent) ProtoMessage()    {}
func (*RangeLogEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_f795e79ab792963c, []int{0}
}
func (m *RangeLogEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeLogEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RangeLogEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeLogEvent.Merge(m, src)
}
func (m *RangeLogEvent) XXX_Size() int {
	return m.Size()
}
func (m *RangeLogEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeLogEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RangeLogEvent proto.InternalMessageInfo

type RangeLogEvent_Info struct {
	UpdatedDesc    *roachpb.RangeDescriptor   `protobuf:"bytes,1,opt,name=updated_desc,json=updatedDesc,proto3" json:"UpdatedDesc,omitempty"`
	NewDesc        *roachpb.RangeDescriptor   `protobuf:"bytes,2,opt,name=new_desc,json=newDesc,proto3" json:"NewDesc,omitempty"`
	RemovedDesc    *roachpb.RangeDescriptor   `protobuf:"bytes,7,opt,name=removed_desc,json=removedDesc,proto3" json:"RemovedDesc,omitempty"`
	AddedReplica   *roachpb.ReplicaDescriptor `protobuf:"bytes,3,opt,name=added_replica,json=addedReplica,proto3" json:"AddReplica,omitempty"`
	RemovedReplica *roachpb.ReplicaDescriptor `protobuf:"bytes,4,opt,name=removed_replica,json=removedReplica,proto3" json:"RemovedReplica,omitempty"`
	Reason         RangeLogEventReason        `protobuf:"bytes,5,opt,name=reason,proto3,casttype=RangeLogEventReason" json:"Reason,omitempty"`
	Details        string                     `protobuf:"bytes,6,opt,name=details,proto3" json:"Details,omitempty"`
}

func (m *RangeLogEvent_Info) Reset()         { *m = RangeLogEvent_Info{} }
func (m *RangeLogEvent_Info) String() string { return proto.CompactTextString(m) }
func (*RangeLogEvent_Info) ProtoMessage()    {}
func (*RangeLogEvent_Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_f795e79ab792963c, []int{0, 0}
}
func (m *RangeLogEvent_Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeLogEvent_Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RangeLogEvent_Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeLogEvent_Info.Merge(m, src)
}
func (m *RangeLogEvent_Info) XXX_Size() int {
	return m.Size()
}
func (m *RangeLogEvent_Info) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeLogEvent_Info.DiscardUnknown(m)
}

var xxx_messageInfo_RangeLogEvent_Info proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.kv.kvserver.storagepb.RangeLogEventType", RangeLogEventType_name, RangeLogEventType_value)
	proto.RegisterType((*RangeLogEvent)(nil), "cockroach.kv.kvserver.storagepb.RangeLogEvent")
	proto.RegisterType((*RangeLogEvent_Info)(nil), "cockroach.kv.kvserver.storagepb.RangeLogEvent.Info")
}

func init() {
	proto.RegisterFile("kv/kvserver/kvserverpb/range_log.proto", fileDescriptor_f795e79ab792963c)
}

var fileDescriptor_f795e79ab792963c = []byte{
	// 705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x8d, 0xdb, 0x3c, 0x9a, 0x69, 0x5a, 0xd2, 0xa1, 0xad, 0x42, 0x84, 0xec, 0xa8, 0x42, 0x28,
	0x02, 0x64, 0x4b, 0x29, 0x3b, 0x56, 0xa4, 0x45, 0x10, 0x09, 0x81, 0x30, 0x65, 0x83, 0x04, 0xc6,
	0xf1, 0xdc, 0xb8, 0x56, 0x62, 0x8f, 0x19, 0x4f, 0x5c, 0xe5, 0x17, 0xd8, 0xd0, 0xcf, 0xea, 0xb2,
	0xcb, 0xae, 0x0c, 0xa4, 0x1b, 0x94, 0x4f, 0xe8, 0x0a, 0x79, 0x6c, 0xe7, 0xd1, 0x56, 0xa2, 0x85,
	0xdd, 0xf5, 0xb9, 0xf7, 0x9c, 0xfb, 0xf4, 0xa0, 0x87, 0xfd, 0x50, 0xeb, 0x87, 0x01, 0xb0, 0x10,
	0xd8, 0xd4, 0xf0, 0xbb, 0x1a, 0x33, 0x3d, 0x1b, 0x8c, 0x01, 0xb5, 0x55, 0x9f, 0x51, 0x4e, 0xb1,
	0x62, 0x51, 0xab, 0xcf, 0xa8, 0x69, 0x1d, 0xaa, 0xfd, 0x50, 0xcd, 0x02, 0xd5, 0x80, 0x53, 0x66,
	0xda, 0xe0, 0x77, 0xeb, 0xdb, 0xc2, 0xe9, 0x77, 0x35, 0x17, 0xb8, 0x49, 0x4c, 0x6e, 0x26, 0xc4,
	0xfa, 0xa6, 0x4d, 0x6d, 0x2a, 0x4c, 0x2d, 0xb6, 0x52, 0x54, 0xb1, 0x29, 0xb5, 0x07, 0xa0, 0x89,
	0xaf, 0xee, 0xb0, 0xa7, 0x71, 0xc7, 0x85, 0x80, 0x9b, 0xae, 0x9f, 0x04, 0xec, 0x7c, 0x2b, 0xa3,
	0x35, 0x3d, 0xae, 0xe1, 0x35, 0xb5, 0x5f, 0x84, 0xe0, 0x71, 0xdc, 0x46, 0xe5, 0x69, 0x50, 0x4d,
	0x6a, 0x48, 0xcd, 0xd5, 0x56, 0x5d, 0x4d, 0x64, 0xd4, 0x4c, 0x46, 0x3d, 0xc8, 0x22, 0xda, 0x2b,
	0x27, 0x91, 0x92, 0x3b, 0xfe, 0xa1, 0x48, 0xfa, 0x8c, 0x86, 0x3f, 0xa3, 0x95, 0xa4, 0x31, 0x87,
	0xd4, 0x96, 0x1a, 0x52, 0x73, 0xb9, 0xbd, 0x37, 0x8e, 0x94, 0x92, 0x48, 0xd4, 0xd9, 0xbf, 0x88,
	0x94, 0xa7, 0xb6, 0xc3, 0x0f, 0x87, 0x5d, 0xd5, 0xa2, 0xae, 0x36, 0xed, 0x98, 0x74, 0x67, 0xb6,
	0xe6, 0xf7, 0x6d, 0x2d, 0x6d, 0x55, 0x4d, 0x79, 0x7a, 0x49, 0x88, 0x76, 0x48, 0xac, 0x1f, 0x4f,
	0x44, 0xe8, 0x2f, 0x37, 0xa4, 0x66, 0x21, 0xd1, 0x7f, 0x1f, 0x63, 0xff, 0xa0, 0x9f, 0xf2, 0xf4,
	0x92, 0x10, 0xed, 0x10, 0xfc, 0x0e, 0x21, 0x88, 0x87, 0x61, 0xf0, 0x91, 0x0f, 0xb5, 0x7c, 0x43,
	0x6a, 0xae, 0xb7, 0x5a, 0xea, 0x5f, 0x56, 0xa3, 0x2e, 0xcc, 0xf1, 0x60, 0xe4, 0x83, 0x5e, 0x86,
	0xcc, 0xc4, 0x1e, 0x5a, 0xa7, 0xfc, 0x10, 0x98, 0x31, 0x1d, 0x4c, 0x41, 0x0c, 0xe6, 0xd5, 0x38,
	0x52, 0x2a, 0x6f, 0x63, 0xcf, 0xff, 0x4e, 0xa7, 0x42, 0x67, 0x2a, 0x04, 0xbf, 0x44, 0x79, 0xc7,
	0xeb, 0xd1, 0x5a, 0x51, 0x6c, 0x70, 0xf7, 0x76, 0xc5, 0xab, 0x1d, 0xaf, 0x47, 0x75, 0x21, 0x50,
	0xff, 0x9d, 0x47, 0xf9, 0xf8, 0x13, 0x7f, 0x41, 0x95, 0xa1, 0x4f, 0x4c, 0x0e, 0xc4, 0x20, 0x10,
	0x58, 0xe9, 0x6d, 0xec, 0xcc, 0x29, 0x2f, 0x54, 0xb4, 0x0f, 0x81, 0xc5, 0x1c, 0x9f, 0x53, 0xd6,
	0xbe, 0x37, 0x89, 0x94, 0xad, 0x0f, 0x09, 0x37, 0x86, 0x9f, 0x50, 0xd7, 0xe1, 0xe0, 0xfa, 0x7c,
	0xa4, 0xaf, 0x0e, 0x67, 0x30, 0x3e, 0x40, 0x2b, 0x1e, 0x1c, 0x25, 0xea, 0x4b, 0x37, 0x56, 0xdf,
	0x9a, 0x44, 0xca, 0xc6, 0x1b, 0x38, 0xba, 0xa4, 0x5c, 0xf2, 0x12, 0x28, 0xae, 0x9b, 0x81, 0x4b,
	0xc3, 0xac, 0xee, 0xd2, 0xed, 0xea, 0xd6, 0x13, 0xee, 0xe5, 0xba, 0xd9, 0x0c, 0xc6, 0x16, 0x5a,
	0x33, 0x09, 0x01, 0x62, 0x30, 0xf0, 0x07, 0x8e, 0x65, 0x8a, 0x9b, 0x5c, 0x6d, 0x3d, 0xb8, 0x2e,
	0x45, 0x12, 0x31, 0x97, 0xa4, 0x36, 0x89, 0x94, 0xcd, 0xe7, 0x84, 0xa4, 0x9e, 0xb9, 0x1c, 0x15,
	0x21, 0x9a, 0xe2, 0xb8, 0x8f, 0xee, 0x64, 0x6d, 0x64, 0x69, 0xf2, 0xb7, 0x48, 0x73, 0x7f, 0x12,
	0x29, 0xb5, 0xb4, 0x97, 0xab, 0xa9, 0xd6, 0xd9, 0x82, 0x07, 0xef, 0xa1, 0x22, 0x03, 0x33, 0xa0,
	0x9e, 0xb8, 0xd2, 0x72, 0xfb, 0xf1, 0x24, 0x52, 0xaa, 0xba, 0x40, 0x66, 0xac, 0x8b, 0x48, 0xb9,
	0xbb, 0x70, 0x36, 0x49, 0x80, 0x9e, 0x52, 0xb1, 0x86, 0x4a, 0x04, 0xb8, 0xe9, 0x0c, 0x02, 0x71,
	0x85, 0xe5, 0x64, 0x53, 0xfb, 0x09, 0x34, 0xbf, 0xa9, 0x34, 0xea, 0xd1, 0x77, 0x09, 0x6d, 0x5c,
	0xf9, 0x89, 0x70, 0x19, 0x15, 0x02, 0x7f, 0xe0, 0xf0, 0x6a, 0x2e, 0x36, 0x5d, 0x60, 0x36, 0x54,
	0x97, 0xf1, 0x1a, 0x2a, 0x9b, 0x84, 0x18, 0x21, 0xe5, 0xc0, 0xaa, 0x12, 0xae, 0x66, 0x4b, 0x4e,
	0x91, 0x25, 0xbc, 0x21, 0x96, 0x62, 0x78, 0xd4, 0x4b, 0xa1, 0x3c, 0xde, 0x44, 0xd5, 0x34, 0x68,
	0x86, 0x16, 0x70, 0x1d, 0x6d, 0x0f, 0xbd, 0xc0, 0xec, 0x81, 0xf1, 0x75, 0x48, 0xd9, 0xd0, 0x35,
	0x18, 0x58, 0x34, 0x04, 0x36, 0xaa, 0x16, 0xdb, 0x9f, 0x4e, 0x7e, 0xc9, 0xb9, 0x93, 0xb1, 0x2c,
	0x9d, 0x8e, 0x65, 0xe9, 0x6c, 0x2c, 0x4b, 0x3f, 0xc7, 0xb2, 0x74, 0x7c, 0x2e, 0xe7, 0x4e, 0xcf,
	0xe5, 0xdc, 0xd9, 0xb9, 0x9c, 0xfb, 0xf8, 0xec, 0x46, 0xff, 0xea, 0xf5, 0xaf, 0x7f, 0xb7, 0x28,
	0x1e, 0xd4, 0xdd, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x35, 0x3a, 0xd2, 0xc3, 0x1e, 0x06, 0x00,
	0x00,
}

func (m *RangeLogEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeLogEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeLogEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRangeLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.OtherRangeID != 0 {
		i = encodeVarintRangeLog(dAtA, i, uint64(m.OtherRangeID))
		i--
		dAtA[i] = 0x28
	}
	if m.EventType != 0 {
		i = encodeVarintRangeLog(dAtA, i, uint64(m.EventType))
		i--
		dAtA[i] = 0x20
	}
	if m.StoreID != 0 {
		i = encodeVarintRangeLog(dAtA, i, uint64(m.StoreID))
		i--
		dAtA[i] = 0x18
	}
	if m.RangeID != 0 {
		i = encodeVarintRangeLog(dAtA, i, uint64(m.RangeID))
		i--
		dAtA[i] = 0x10
	}
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintRangeLog(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RangeLogEvent_Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeLogEvent_Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeLogEvent_Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RemovedDesc != nil {
		{
			size, err := m.RemovedDesc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRangeLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintRangeLog(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintRangeLog(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RemovedReplica != nil {
		{
			size, err := m.RemovedReplica.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRangeLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AddedReplica != nil {
		{
			size, err := m.AddedReplica.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRangeLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NewDesc != nil {
		{
			size, err := m.NewDesc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRangeLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.UpdatedDesc != nil {
		{
			size, err := m.UpdatedDesc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRangeLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRangeLog(dAtA []byte, offset int, v uint64) int {
	offset -= sovRangeLog(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RangeLogEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovRangeLog(uint64(l))
	if m.RangeID != 0 {
		n += 1 + sovRangeLog(uint64(m.RangeID))
	}
	if m.StoreID != 0 {
		n += 1 + sovRangeLog(uint64(m.StoreID))
	}
	if m.EventType != 0 {
		n += 1 + sovRangeLog(uint64(m.EventType))
	}
	if m.OtherRangeID != 0 {
		n += 1 + sovRangeLog(uint64(m.OtherRangeID))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovRangeLog(uint64(l))
	}
	return n
}

func (m *RangeLogEvent_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdatedDesc != nil {
		l = m.UpdatedDesc.Size()
		n += 1 + l + sovRangeLog(uint64(l))
	}
	if m.NewDesc != nil {
		l = m.NewDesc.Size()
		n += 1 + l + sovRangeLog(uint64(l))
	}
	if m.AddedReplica != nil {
		l = m.AddedReplica.Size()
		n += 1 + l + sovRangeLog(uint64(l))
	}
	if m.RemovedReplica != nil {
		l = m.RemovedReplica.Size()
		n += 1 + l + sovRangeLog(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovRangeLog(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovRangeLog(uint64(l))
	}
	if m.RemovedDesc != nil {
		l = m.RemovedDesc.Size()
		n += 1 + l + sovRangeLog(uint64(l))
	}
	return n
}

func sovRangeLog(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozRangeLog(x uint64) (n int) {
	return sovRangeLog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RangeLogEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRangeLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeLogEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeLogEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRangeLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRangeLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= github_com_cockroachdb_cockroach_pkg_roachpb.StoreID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= RangeLogEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherRangeID", wireType)
			}
			m.OtherRangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtherRangeID |= github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRangeLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRangeLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &RangeLogEvent_Info{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRangeLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRangeLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangeLogEvent_Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRangeLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedDesc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRangeLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRangeLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedDesc == nil {
				m.UpdatedDesc = &roachpb.RangeDescriptor{}
			}
			if err := m.UpdatedDesc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDesc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRangeLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRangeLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewDesc == nil {
				m.NewDesc = &roachpb.RangeDescriptor{}
			}
			if err := m.NewDesc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedReplica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRangeLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRangeLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddedReplica == nil {
				m.AddedReplica = &roachpb.ReplicaDescriptor{}
			}
			if err := m.AddedReplica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedReplica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRangeLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRangeLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemovedReplica == nil {
				m.RemovedReplica = &roachpb.ReplicaDescriptor{}
			}
			if err := m.RemovedReplica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRangeLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRangeLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = RangeLogEventReason(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRangeLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRangeLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedDesc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangeLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRangeLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRangeLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemovedDesc == nil {
				m.RemovedDesc = &roachpb.RangeDescriptor{}
			}
			if err := m.RemovedDesc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRangeLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRangeLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRangeLog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRangeLog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRangeLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRangeLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRangeLog
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRangeLog
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRangeLog
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRangeLog        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRangeLog          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRangeLog = fmt.Errorf("proto: unexpected end of group")
)

