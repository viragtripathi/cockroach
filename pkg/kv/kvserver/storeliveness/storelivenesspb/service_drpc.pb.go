// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// source: kv/kvserver/storeliveness/storelivenesspb/service.proto

package storelivenesspb

import (
	bytes "bytes"
	context "context"
	errors "github.com/cockroachdb/errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_kv_kvserver_storeliveness_storelivenesspb_service_proto struct{}

func (drpcEncoding_File_kv_kvserver_storeliveness_storelivenesspb_service_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_kv_kvserver_storeliveness_storelivenesspb_service_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_kv_kvserver_storeliveness_storelivenesspb_service_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_kv_kvserver_storeliveness_storelivenesspb_service_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCStoreLivenessClient interface {
	DRPCConn() drpc.Conn

	Stream(ctx context.Context) (DRPCStoreLiveness_StreamClient, error)
}

type drpcStoreLivenessClient struct {
	cc drpc.Conn
}

func NewDRPCStoreLivenessClient(cc drpc.Conn) DRPCStoreLivenessClient {
	return &drpcStoreLivenessClient{cc}
}

func (c *drpcStoreLivenessClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcStoreLivenessClient) Stream(ctx context.Context) (DRPCStoreLiveness_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.kv.kvserver.storeliveness.storelivenesspb.StoreLiveness/Stream", drpcEncoding_File_kv_kvserver_storeliveness_storelivenesspb_service_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcStoreLiveness_StreamClient{stream}
	return x, nil
}

type DRPCStoreLiveness_StreamClient interface {
	drpc.Stream
	Send(*MessageBatch) error
	CloseAndRecv() (*Empty, error)
}

type RPCStoreLiveness_StreamClient interface {
	Context() context.Context
	CloseSend() error
	Send(*MessageBatch) error
	CloseAndRecv() (*Empty, error)
}

type drpcStoreLiveness_StreamClient struct {
	drpc.Stream
}

func (x *drpcStoreLiveness_StreamClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStoreLiveness_StreamClient) Send(m *MessageBatch) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvserver_storeliveness_storelivenesspb_service_proto{})
}

func (x *drpcStoreLiveness_StreamClient) CloseAndRecv() (*Empty, error) {
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvserver_storeliveness_storelivenesspb_service_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcStoreLiveness_StreamClient) CloseAndRecvMsg(m *Empty) error {
	if err := x.CloseSend(); err != nil {
		return err
	}
	return x.MsgRecv(m, drpcEncoding_File_kv_kvserver_storeliveness_storelivenesspb_service_proto{})
}

type DRPCStoreLivenessServer interface {
	Stream(DRPCStoreLiveness_StreamStream) error
}

type DRPCStoreLivenessUnimplementedServer struct{}

func (s *DRPCStoreLivenessUnimplementedServer) Stream(DRPCStoreLiveness_StreamStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCStoreLivenessDescription struct{}

func (DRPCStoreLivenessDescription) NumMethods() int { return 1 }

func (DRPCStoreLivenessDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.kv.kvserver.storeliveness.storelivenesspb.StoreLiveness/Stream", drpcEncoding_File_kv_kvserver_storeliveness_storelivenesspb_service_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCStoreLivenessServer).
					Stream(
						&drpcStoreLiveness_StreamStream{in1.(drpc.Stream)},
					)
			}, DRPCStoreLivenessServer.Stream, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterStoreLiveness(mux drpc.Mux, impl DRPCStoreLivenessServer) error {
	return mux.Register(impl, DRPCStoreLivenessDescription{})
}

type DRPCStoreLiveness_StreamStream interface {
	drpc.Stream
	SendAndClose(*Empty) error
	Recv() (*MessageBatch, error)
	RecvMsg(interface{}) error
}

type RPCStoreLiveness_StreamStream interface {
	Context() context.Context
	SendAndClose(*Empty) error
	Recv() (*MessageBatch, error)
	RecvMsg(interface{}) error
}

type drpcStoreLiveness_StreamStream struct {
	drpc.Stream
}

func (x *drpcStoreLiveness_StreamStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcStoreLiveness_StreamStream) SendAndClose(m *Empty) error {
	if err := x.MsgSend(m, drpcEncoding_File_kv_kvserver_storeliveness_storelivenesspb_service_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

func (x *drpcStoreLiveness_StreamStream) Recv() (*MessageBatch, error) {
	m := new(MessageBatch)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvserver_storeliveness_storelivenesspb_service_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcStoreLiveness_StreamStream) RecvMsg(m interface{}) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvserver_storeliveness_storelivenesspb_service_proto{})
}

type RPCStoreLivenessClient interface {
	Stream(ctx context.Context) (RPCStoreLiveness_StreamClient, error)
}

// StoreLiveness gRPC -> RPC adapter
type grpcStoreLivenessClientAdapter storeLivenessClient

func NewGRPCStoreLivenessClientAdapter(conn *grpc.ClientConn) RPCStoreLivenessClient {
	return (*grpcStoreLivenessClientAdapter)(&storeLivenessClient{conn})
}

func (a *grpcStoreLivenessClientAdapter) Stream(ctx context.Context) (RPCStoreLiveness_StreamClient, error) {
	return (*storeLivenessClient)(a).Stream(ctx)
}

// compile-time assertion
var _ RPCStoreLivenessClient = (*grpcStoreLivenessClientAdapter)(nil)

// StoreLiveness DRPC -> RPC adapter
type drpcStoreLivenessClientAdapter drpcStoreLivenessClient

func NewDRPCStoreLivenessClientAdapter(conn drpc.Conn) RPCStoreLivenessClient {
	return (*drpcStoreLivenessClientAdapter)(&drpcStoreLivenessClient{conn})
}

func (a *drpcStoreLivenessClientAdapter) Stream(ctx context.Context) (RPCStoreLiveness_StreamClient, error) {
	return (*drpcStoreLivenessClient)(a).Stream(ctx)
}

// compile-time assertion
var _ RPCStoreLivenessClient = (*drpcStoreLivenessClientAdapter)(nil)
