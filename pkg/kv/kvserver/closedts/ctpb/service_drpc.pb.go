// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// source: kv/kvserver/closedts/ctpb/service.proto

package ctpb

import (
	bytes "bytes"
	context "context"
	errors "github.com/cockroachdb/errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_kv_kvserver_closedts_ctpb_service_proto struct{}

func (drpcEncoding_File_kv_kvserver_closedts_ctpb_service_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_kv_kvserver_closedts_ctpb_service_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_kv_kvserver_closedts_ctpb_service_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_kv_kvserver_closedts_ctpb_service_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCSideTransportClient interface {
	DRPCConn() drpc.Conn

	PushUpdates(ctx context.Context) (DRPCSideTransport_PushUpdatesClient, error)
}

type drpcSideTransportClient struct {
	cc drpc.Conn
}

func NewDRPCSideTransportClient(cc drpc.Conn) DRPCSideTransportClient {
	return &drpcSideTransportClient{cc}
}

func (c *drpcSideTransportClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcSideTransportClient) PushUpdates(ctx context.Context) (DRPCSideTransport_PushUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.kv.kvserver.ctupdate.SideTransport/PushUpdates", drpcEncoding_File_kv_kvserver_closedts_ctpb_service_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcSideTransport_PushUpdatesClient{stream}
	return x, nil
}

type DRPCSideTransport_PushUpdatesClient interface {
	drpc.Stream
	Send(*Update) error
	Recv() (*Response, error)
}

type RPCSideTransport_PushUpdatesClient interface {
	Context() context.Context
	CloseSend() error
	Send(*Update) error
	Recv() (*Response, error)
}

type drpcSideTransport_PushUpdatesClient struct {
	drpc.Stream
}

func (x *drpcSideTransport_PushUpdatesClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcSideTransport_PushUpdatesClient) Send(m *Update) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvserver_closedts_ctpb_service_proto{})
}

func (x *drpcSideTransport_PushUpdatesClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvserver_closedts_ctpb_service_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcSideTransport_PushUpdatesClient) RecvMsg(m *Response) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvserver_closedts_ctpb_service_proto{})
}

type DRPCSideTransportServer interface {
	PushUpdates(DRPCSideTransport_PushUpdatesStream) error
}

type DRPCSideTransportUnimplementedServer struct{}

func (s *DRPCSideTransportUnimplementedServer) PushUpdates(DRPCSideTransport_PushUpdatesStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCSideTransportDescription struct{}

func (DRPCSideTransportDescription) NumMethods() int { return 1 }

func (DRPCSideTransportDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.kv.kvserver.ctupdate.SideTransport/PushUpdates", drpcEncoding_File_kv_kvserver_closedts_ctpb_service_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCSideTransportServer).
					PushUpdates(
						&drpcSideTransport_PushUpdatesStream{in1.(drpc.Stream)},
					)
			}, DRPCSideTransportServer.PushUpdates, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterSideTransport(mux drpc.Mux, impl DRPCSideTransportServer) error {
	return mux.Register(impl, DRPCSideTransportDescription{})
}

type DRPCSideTransport_PushUpdatesStream interface {
	drpc.Stream
	Send(*Response) error
	Recv() (*Update, error)
	RecvMsg(interface{}) error
}

type RPCSideTransport_PushUpdatesStream interface {
	Context() context.Context
	Send(*Response) error
	Recv() (*Update, error)
	RecvMsg(interface{}) error
}

type drpcSideTransport_PushUpdatesStream struct {
	drpc.Stream
}

func (x *drpcSideTransport_PushUpdatesStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcSideTransport_PushUpdatesStream) Send(m *Response) error {
	return x.MsgSend(m, drpcEncoding_File_kv_kvserver_closedts_ctpb_service_proto{})
}

func (x *drpcSideTransport_PushUpdatesStream) Recv() (*Update, error) {
	m := new(Update)
	if err := x.MsgRecv(m, drpcEncoding_File_kv_kvserver_closedts_ctpb_service_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcSideTransport_PushUpdatesStream) RecvMsg(m interface{}) error {
	return x.MsgRecv(m, drpcEncoding_File_kv_kvserver_closedts_ctpb_service_proto{})
}

type RPCSideTransportClient interface {
	PushUpdates(ctx context.Context) (RPCSideTransport_PushUpdatesClient, error)
}

// SideTransport gRPC -> RPC adapter
type grpcSideTransportClientAdapter sideTransportClient

func NewGRPCSideTransportClientAdapter(conn *grpc.ClientConn) RPCSideTransportClient {
	return (*grpcSideTransportClientAdapter)(&sideTransportClient{conn})
}

func (a *grpcSideTransportClientAdapter) PushUpdates(ctx context.Context) (RPCSideTransport_PushUpdatesClient, error) {
	return (*sideTransportClient)(a).PushUpdates(ctx)
}

// compile-time assertion
var _ RPCSideTransportClient = (*grpcSideTransportClientAdapter)(nil)

// SideTransport DRPC -> RPC adapter
type drpcSideTransportClientAdapter drpcSideTransportClient

func NewDRPCSideTransportClientAdapter(conn drpc.Conn) RPCSideTransportClient {
	return (*drpcSideTransportClientAdapter)(&drpcSideTransportClient{conn})
}

func (a *drpcSideTransportClientAdapter) PushUpdates(ctx context.Context) (RPCSideTransport_PushUpdatesClient, error) {
	return (*drpcSideTransportClient)(a).PushUpdates(ctx)
}

// compile-time assertion
var _ RPCSideTransportClient = (*drpcSideTransportClientAdapter)(nil)
