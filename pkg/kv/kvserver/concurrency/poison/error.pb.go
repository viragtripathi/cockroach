// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvserver/concurrency/poison/error.proto

package poison

import (
	fmt "fmt"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	hlc "github.com/cockroachdb/cockroach/pkg/util/hlc"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PoisonedError indicates that a request failed fast during sequencing as a
// result of having encountered a poisoned latch under Policy_Error.
//
// See also concurrency.RequestSequencer.
type PoisonedError struct {
	Span      roachpb.Span  `protobuf:"bytes,1,opt,name=span,proto3" json:"span"`
	Timestamp hlc.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp"`
}

func (m *PoisonedError) Reset()         { *m = PoisonedError{} }
func (m *PoisonedError) String() string { return proto.CompactTextString(m) }
func (*PoisonedError) ProtoMessage()    {}
func (*PoisonedError) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ec72619b0da612a, []int{0}
}
func (m *PoisonedError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoisonedError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PoisonedError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoisonedError.Merge(m, src)
}
func (m *PoisonedError) XXX_Size() int {
	return m.Size()
}
func (m *PoisonedError) XXX_DiscardUnknown() {
	xxx_messageInfo_PoisonedError.DiscardUnknown(m)
}

var xxx_messageInfo_PoisonedError proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PoisonedError)(nil), "cockroach.kv.kvserver.concurrency.poison.PoisonedError")
}

func init() {
	proto.RegisterFile("kv/kvserver/concurrency/poison/error.proto", fileDescriptor_6ec72619b0da612a)
}

var fileDescriptor_6ec72619b0da612a = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xc1, 0x4a, 0xf4, 0x30,
	0x14, 0x85, 0x9b, 0x9f, 0xe1, 0x07, 0x2b, 0x6e, 0x8a, 0x60, 0x19, 0x30, 0x8a, 0xab, 0xc1, 0x45,
	0x2e, 0xea, 0x13, 0x38, 0xe2, 0x5e, 0xd4, 0x95, 0xbb, 0x34, 0x0d, 0x6d, 0x69, 0x9b, 0x1b, 0xd2,
	0xb4, 0xe0, 0x03, 0xb8, 0xf7, 0xb1, 0xba, 0x9c, 0xe5, 0xac, 0x44, 0xdb, 0x17, 0x91, 0xa6, 0x9d,
	0xe9, 0xac, 0xdc, 0x1d, 0x2e, 0xe7, 0x3b, 0x7c, 0x89, 0x7f, 0x9d, 0x37, 0x90, 0x37, 0x95, 0x34,
	0x8d, 0x34, 0x20, 0x50, 0x89, 0xda, 0x18, 0xa9, 0xc4, 0x3b, 0x68, 0xcc, 0x2a, 0x54, 0x20, 0x8d,
	0x41, 0xc3, 0xb4, 0x41, 0x8b, 0xc1, 0x4a, 0xa0, 0xc8, 0x0d, 0x72, 0x91, 0xb2, 0xbc, 0x61, 0x3b,
	0x8a, 0x1d, 0x50, 0x6c, 0xa4, 0x96, 0x61, 0x6d, 0xb3, 0x02, 0xd2, 0x42, 0x80, 0xcd, 0x4a, 0x59,
	0x59, 0x5e, 0xea, 0x71, 0x63, 0x19, 0x38, 0x5e, 0x47, 0x10, 0x73, 0xcb, 0xa7, 0xdb, 0x69, 0x82,
	0x09, 0xba, 0x08, 0x43, 0x1a, 0xaf, 0x57, 0x1f, 0xc4, 0x3f, 0x79, 0x72, 0x73, 0x32, 0x7e, 0x1c,
	0x2c, 0x82, 0x1b, 0x7f, 0x51, 0x69, 0xae, 0x42, 0x72, 0x49, 0x56, 0xc7, 0xb7, 0x67, 0x6c, 0xd6,
	0x99, 0x46, 0xd9, 0x8b, 0xe6, 0x6a, 0xbd, 0x68, 0xbf, 0x2e, 0xbc, 0x67, 0x57, 0x0d, 0xee, 0xfd,
	0xa3, 0xbd, 0x41, 0xf8, 0xcf, 0x71, 0xe7, 0x07, 0xdc, 0xa0, 0xc9, 0xd2, 0x42, 0xb0, 0xd7, 0x5d,
	0x69, 0xa2, 0x67, 0x6a, 0x2d, 0xdb, 0x1f, 0xea, 0xb5, 0x1d, 0x25, 0x9b, 0x8e, 0x92, 0x6d, 0x47,
	0xc9, 0x77, 0x47, 0xc9, 0x67, 0x4f, 0xbd, 0x4d, 0x4f, 0xbd, 0x6d, 0x4f, 0xbd, 0xb7, 0x87, 0x24,
	0xb3, 0x69, 0x1d, 0x31, 0x81, 0x25, 0xec, 0xb7, 0xe3, 0x68, 0xce, 0xa0, 0xf3, 0x04, 0xfe, 0xfe,
	0xe8, 0xe8, 0xbf, 0x7b, 0xf5, 0xdd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x0f, 0xae, 0x9e,
	0x91, 0x01, 0x00, 0x00,
}

func (m *PoisonedError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoisonedError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoisonedError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintError(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintError(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintError(dAtA []byte, offset int, v uint64) int {
	offset -= sovError(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoisonedError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Span.Size()
	n += 1 + l + sovError(uint64(l))
	l = m.Timestamp.Size()
	n += 1 + l + sovError(uint64(l))
	return n
}

func sovError(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozError(x uint64) (n int) {
	return sovError(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoisonedError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoisonedError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoisonedError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipError(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowError
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthError
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupError
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthError
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthError        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowError          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupError = fmt.Errorf("proto: unexpected end of group")
)

