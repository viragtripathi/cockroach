// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: build/bazel/bes/build_event_stream.proto

package build_event_stream

import (
	fmt "fmt"
	command_line "github.com/cockroachdb/cockroach/pkg/build/bazel/bes/command_line"
	failure_details "github.com/cockroachdb/cockroach/pkg/build/bazel/bes/failure_details"
	invocation_policy "github.com/cockroachdb/cockroach/pkg/build/bazel/bes/invocation_policy"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Enumeration type characterizing the size of a test, as specified by the
// test rule.
type TestSize int32

const (
	TestSize_UNKNOWN  TestSize = 0
	TestSize_SMALL    TestSize = 1
	TestSize_MEDIUM   TestSize = 2
	TestSize_LARGE    TestSize = 3
	TestSize_ENORMOUS TestSize = 4
)

var TestSize_name = map[int32]string{
	0: "UNKNOWN",
	1: "SMALL",
	2: "MEDIUM",
	3: "LARGE",
	4: "ENORMOUS",
}

var TestSize_value = map[string]int32{
	"UNKNOWN":  0,
	"SMALL":    1,
	"MEDIUM":   2,
	"LARGE":    3,
	"ENORMOUS": 4,
}

func (x TestSize) String() string {
	return proto.EnumName(TestSize_name, int32(x))
}

func (TestSize) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0}
}

type TestStatus int32

const (
	TestStatus_NO_STATUS                  TestStatus = 0
	TestStatus_PASSED                     TestStatus = 1
	TestStatus_FLAKY                      TestStatus = 2
	TestStatus_TIMEOUT                    TestStatus = 3
	TestStatus_FAILED                     TestStatus = 4
	TestStatus_INCOMPLETE                 TestStatus = 5
	TestStatus_REMOTE_FAILURE             TestStatus = 6
	TestStatus_FAILED_TO_BUILD            TestStatus = 7
	TestStatus_TOOL_HALTED_BEFORE_TESTING TestStatus = 8
)

var TestStatus_name = map[int32]string{
	0: "NO_STATUS",
	1: "PASSED",
	2: "FLAKY",
	3: "TIMEOUT",
	4: "FAILED",
	5: "INCOMPLETE",
	6: "REMOTE_FAILURE",
	7: "FAILED_TO_BUILD",
	8: "TOOL_HALTED_BEFORE_TESTING",
}

var TestStatus_value = map[string]int32{
	"NO_STATUS":                  0,
	"PASSED":                     1,
	"FLAKY":                      2,
	"TIMEOUT":                    3,
	"FAILED":                     4,
	"INCOMPLETE":                 5,
	"REMOTE_FAILURE":             6,
	"FAILED_TO_BUILD":            7,
	"TOOL_HALTED_BEFORE_TESTING": 8,
}

func (x TestStatus) String() string {
	return proto.EnumName(TestStatus_name, int32(x))
}

func (TestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{1}
}

type Aborted_AbortReason int32

const (
	Aborted_UNKNOWN Aborted_AbortReason = 0
	// The user requested the build to be aborted (e.g., by hitting Ctl-C).
	Aborted_USER_INTERRUPTED Aborted_AbortReason = 1
	// The user requested that no analysis be performed.
	Aborted_NO_ANALYZE Aborted_AbortReason = 8
	// The user requested that no build be carried out.
	Aborted_NO_BUILD Aborted_AbortReason = 9
	// The build or target was aborted as a timeout was exceeded.
	Aborted_TIME_OUT Aborted_AbortReason = 2
	// The build or target was aborted as some remote environment (e.g., for
	// remote execution of actions) was not available in the expected way.
	Aborted_REMOTE_ENVIRONMENT_FAILURE Aborted_AbortReason = 3
	// Failure due to reasons entirely internal to the build tool, i.e. an
	// unexpected crash due to programmer error.
	Aborted_INTERNAL Aborted_AbortReason = 4
	// A Failure occurred in the loading phase of a target.
	Aborted_LOADING_FAILURE Aborted_AbortReason = 5
	// A Failure occurred in the analysis phase of a target.
	Aborted_ANALYSIS_FAILURE Aborted_AbortReason = 6
	// Target build was skipped (e.g. due to incompatible CPU constraints).
	Aborted_SKIPPED Aborted_AbortReason = 7
	// Build incomplete due to an earlier build failure (e.g. --keep_going was
	// set to false causing the build be ended upon failure).
	Aborted_INCOMPLETE Aborted_AbortReason = 10
	// The build tool ran out of memory and crashed.
	Aborted_OUT_OF_MEMORY Aborted_AbortReason = 11
)

var Aborted_AbortReason_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "USER_INTERRUPTED",
	8:  "NO_ANALYZE",
	9:  "NO_BUILD",
	2:  "TIME_OUT",
	3:  "REMOTE_ENVIRONMENT_FAILURE",
	4:  "INTERNAL",
	5:  "LOADING_FAILURE",
	6:  "ANALYSIS_FAILURE",
	7:  "SKIPPED",
	10: "INCOMPLETE",
	11: "OUT_OF_MEMORY",
}

var Aborted_AbortReason_value = map[string]int32{
	"UNKNOWN":                    0,
	"USER_INTERRUPTED":           1,
	"NO_ANALYZE":                 8,
	"NO_BUILD":                   9,
	"TIME_OUT":                   2,
	"REMOTE_ENVIRONMENT_FAILURE": 3,
	"INTERNAL":                   4,
	"LOADING_FAILURE":            5,
	"ANALYSIS_FAILURE":           6,
	"SKIPPED":                    7,
	"INCOMPLETE":                 10,
	"OUT_OF_MEMORY":              11,
}

func (x Aborted_AbortReason) String() string {
	return proto.EnumName(Aborted_AbortReason_name, int32(x))
}

func (Aborted_AbortReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{2, 0}
}

type ConvenienceSymlink_Action int32

const (
	ConvenienceSymlink_UNKNOWN ConvenienceSymlink_Action = 0
	// Indicates a symlink should be created, or overwritten if it already
	// exists.
	ConvenienceSymlink_CREATE ConvenienceSymlink_Action = 1
	// Indicates a symlink should be deleted if it already exists.
	ConvenienceSymlink_DELETE ConvenienceSymlink_Action = 2
)

var ConvenienceSymlink_Action_name = map[int32]string{
	0: "UNKNOWN",
	1: "CREATE",
	2: "DELETE",
}

var ConvenienceSymlink_Action_value = map[string]int32{
	"UNKNOWN": 0,
	"CREATE":  1,
	"DELETE":  2,
}

func (x ConvenienceSymlink_Action) String() string {
	return proto.EnumName(ConvenienceSymlink_Action_name, int32(x))
}

func (ConvenienceSymlink_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{25, 0}
}

// Identifier for a build event. It is deliberately structured to also provide
// information about which build target etc the event is related to.
//
// Events are chained via the event id as follows: each event has an id and a
// set of ids of children events such that apart from the initial event each
// event has an id that is mentioned as child id in an earlier event and a build
// invocation is complete if and only if all direct and indirect children of the
// initial event have been posted.
type BuildEventId struct {
	// Types that are valid to be assigned to Id:
	//	*BuildEventId_Unknown
	//	*BuildEventId_Progress
	//	*BuildEventId_Started
	//	*BuildEventId_UnstructuredCommandLine
	//	*BuildEventId_StructuredCommandLine
	//	*BuildEventId_WorkspaceStatus
	//	*BuildEventId_OptionsParsed
	//	*BuildEventId_Fetch
	//	*BuildEventId_Configuration
	//	*BuildEventId_TargetConfigured
	//	*BuildEventId_Pattern
	//	*BuildEventId_PatternSkipped
	//	*BuildEventId_NamedSet
	//	*BuildEventId_TargetCompleted
	//	*BuildEventId_ActionCompleted
	//	*BuildEventId_UnconfiguredLabel
	//	*BuildEventId_ConfiguredLabel
	//	*BuildEventId_TestResult
	//	*BuildEventId_TestSummary
	//	*BuildEventId_TargetSummary
	//	*BuildEventId_BuildFinished
	//	*BuildEventId_BuildToolLogs
	//	*BuildEventId_BuildMetrics
	//	*BuildEventId_Workspace
	//	*BuildEventId_BuildMetadata
	//	*BuildEventId_ConvenienceSymlinksIdentified
	Id isBuildEventId_Id `protobuf_oneof:"id"`
}

func (m *BuildEventId) Reset()         { *m = BuildEventId{} }
func (m *BuildEventId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId) ProtoMessage()    {}
func (*BuildEventId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0}
}
func (m *BuildEventId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId.Merge(m, src)
}
func (m *BuildEventId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId proto.InternalMessageInfo

type isBuildEventId_Id interface {
	isBuildEventId_Id()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BuildEventId_Unknown struct {
	Unknown *BuildEventId_UnknownBuildEventId `protobuf:"bytes,1,opt,name=unknown,proto3,oneof" json:"unknown,omitempty"`
}
type BuildEventId_Progress struct {
	Progress *BuildEventId_ProgressId `protobuf:"bytes,2,opt,name=progress,proto3,oneof" json:"progress,omitempty"`
}
type BuildEventId_Started struct {
	Started *BuildEventId_BuildStartedId `protobuf:"bytes,3,opt,name=started,proto3,oneof" json:"started,omitempty"`
}
type BuildEventId_UnstructuredCommandLine struct {
	UnstructuredCommandLine *BuildEventId_UnstructuredCommandLineId `protobuf:"bytes,11,opt,name=unstructured_command_line,json=unstructuredCommandLine,proto3,oneof" json:"unstructured_command_line,omitempty"`
}
type BuildEventId_StructuredCommandLine struct {
	StructuredCommandLine *BuildEventId_StructuredCommandLineId `protobuf:"bytes,18,opt,name=structured_command_line,json=structuredCommandLine,proto3,oneof" json:"structured_command_line,omitempty"`
}
type BuildEventId_WorkspaceStatus struct {
	WorkspaceStatus *BuildEventId_WorkspaceStatusId `protobuf:"bytes,14,opt,name=workspace_status,json=workspaceStatus,proto3,oneof" json:"workspace_status,omitempty"`
}
type BuildEventId_OptionsParsed struct {
	OptionsParsed *BuildEventId_OptionsParsedId `protobuf:"bytes,12,opt,name=options_parsed,json=optionsParsed,proto3,oneof" json:"options_parsed,omitempty"`
}
type BuildEventId_Fetch struct {
	Fetch *BuildEventId_FetchId `protobuf:"bytes,17,opt,name=fetch,proto3,oneof" json:"fetch,omitempty"`
}
type BuildEventId_Configuration struct {
	Configuration *BuildEventId_ConfigurationId `protobuf:"bytes,15,opt,name=configuration,proto3,oneof" json:"configuration,omitempty"`
}
type BuildEventId_TargetConfigured struct {
	TargetConfigured *BuildEventId_TargetConfiguredId `protobuf:"bytes,16,opt,name=target_configured,json=targetConfigured,proto3,oneof" json:"target_configured,omitempty"`
}
type BuildEventId_Pattern struct {
	Pattern *BuildEventId_PatternExpandedId `protobuf:"bytes,4,opt,name=pattern,proto3,oneof" json:"pattern,omitempty"`
}
type BuildEventId_PatternSkipped struct {
	PatternSkipped *BuildEventId_PatternExpandedId `protobuf:"bytes,10,opt,name=pattern_skipped,json=patternSkipped,proto3,oneof" json:"pattern_skipped,omitempty"`
}
type BuildEventId_NamedSet struct {
	NamedSet *BuildEventId_NamedSetOfFilesId `protobuf:"bytes,13,opt,name=named_set,json=namedSet,proto3,oneof" json:"named_set,omitempty"`
}
type BuildEventId_TargetCompleted struct {
	TargetCompleted *BuildEventId_TargetCompletedId `protobuf:"bytes,5,opt,name=target_completed,json=targetCompleted,proto3,oneof" json:"target_completed,omitempty"`
}
type BuildEventId_ActionCompleted struct {
	ActionCompleted *BuildEventId_ActionCompletedId `protobuf:"bytes,6,opt,name=action_completed,json=actionCompleted,proto3,oneof" json:"action_completed,omitempty"`
}
type BuildEventId_UnconfiguredLabel struct {
	UnconfiguredLabel *BuildEventId_UnconfiguredLabelId `protobuf:"bytes,19,opt,name=unconfigured_label,json=unconfiguredLabel,proto3,oneof" json:"unconfigured_label,omitempty"`
}
type BuildEventId_ConfiguredLabel struct {
	ConfiguredLabel *BuildEventId_ConfiguredLabelId `protobuf:"bytes,21,opt,name=configured_label,json=configuredLabel,proto3,oneof" json:"configured_label,omitempty"`
}
type BuildEventId_TestResult struct {
	TestResult *BuildEventId_TestResultId `protobuf:"bytes,8,opt,name=test_result,json=testResult,proto3,oneof" json:"test_result,omitempty"`
}
type BuildEventId_TestSummary struct {
	TestSummary *BuildEventId_TestSummaryId `protobuf:"bytes,7,opt,name=test_summary,json=testSummary,proto3,oneof" json:"test_summary,omitempty"`
}
type BuildEventId_TargetSummary struct {
	TargetSummary *BuildEventId_TargetSummaryId `protobuf:"bytes,26,opt,name=target_summary,json=targetSummary,proto3,oneof" json:"target_summary,omitempty"`
}
type BuildEventId_BuildFinished struct {
	BuildFinished *BuildEventId_BuildFinishedId `protobuf:"bytes,9,opt,name=build_finished,json=buildFinished,proto3,oneof" json:"build_finished,omitempty"`
}
type BuildEventId_BuildToolLogs struct {
	BuildToolLogs *BuildEventId_BuildToolLogsId `protobuf:"bytes,20,opt,name=build_tool_logs,json=buildToolLogs,proto3,oneof" json:"build_tool_logs,omitempty"`
}
type BuildEventId_BuildMetrics struct {
	BuildMetrics *BuildEventId_BuildMetricsId `protobuf:"bytes,22,opt,name=build_metrics,json=buildMetrics,proto3,oneof" json:"build_metrics,omitempty"`
}
type BuildEventId_Workspace struct {
	Workspace *BuildEventId_WorkspaceConfigId `protobuf:"bytes,23,opt,name=workspace,proto3,oneof" json:"workspace,omitempty"`
}
type BuildEventId_BuildMetadata struct {
	BuildMetadata *BuildEventId_BuildMetadataId `protobuf:"bytes,24,opt,name=build_metadata,json=buildMetadata,proto3,oneof" json:"build_metadata,omitempty"`
}
type BuildEventId_ConvenienceSymlinksIdentified struct {
	ConvenienceSymlinksIdentified *BuildEventId_ConvenienceSymlinksIdentifiedId `protobuf:"bytes,25,opt,name=convenience_symlinks_identified,json=convenienceSymlinksIdentified,proto3,oneof" json:"convenience_symlinks_identified,omitempty"`
}

func (*BuildEventId_Unknown) isBuildEventId_Id()                       {}
func (*BuildEventId_Progress) isBuildEventId_Id()                      {}
func (*BuildEventId_Started) isBuildEventId_Id()                       {}
func (*BuildEventId_UnstructuredCommandLine) isBuildEventId_Id()       {}
func (*BuildEventId_StructuredCommandLine) isBuildEventId_Id()         {}
func (*BuildEventId_WorkspaceStatus) isBuildEventId_Id()               {}
func (*BuildEventId_OptionsParsed) isBuildEventId_Id()                 {}
func (*BuildEventId_Fetch) isBuildEventId_Id()                         {}
func (*BuildEventId_Configuration) isBuildEventId_Id()                 {}
func (*BuildEventId_TargetConfigured) isBuildEventId_Id()              {}
func (*BuildEventId_Pattern) isBuildEventId_Id()                       {}
func (*BuildEventId_PatternSkipped) isBuildEventId_Id()                {}
func (*BuildEventId_NamedSet) isBuildEventId_Id()                      {}
func (*BuildEventId_TargetCompleted) isBuildEventId_Id()               {}
func (*BuildEventId_ActionCompleted) isBuildEventId_Id()               {}
func (*BuildEventId_UnconfiguredLabel) isBuildEventId_Id()             {}
func (*BuildEventId_ConfiguredLabel) isBuildEventId_Id()               {}
func (*BuildEventId_TestResult) isBuildEventId_Id()                    {}
func (*BuildEventId_TestSummary) isBuildEventId_Id()                   {}
func (*BuildEventId_TargetSummary) isBuildEventId_Id()                 {}
func (*BuildEventId_BuildFinished) isBuildEventId_Id()                 {}
func (*BuildEventId_BuildToolLogs) isBuildEventId_Id()                 {}
func (*BuildEventId_BuildMetrics) isBuildEventId_Id()                  {}
func (*BuildEventId_Workspace) isBuildEventId_Id()                     {}
func (*BuildEventId_BuildMetadata) isBuildEventId_Id()                 {}
func (*BuildEventId_ConvenienceSymlinksIdentified) isBuildEventId_Id() {}

func (m *BuildEventId) GetId() isBuildEventId_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *BuildEventId) GetUnknown() *BuildEventId_UnknownBuildEventId {
	if x, ok := m.GetId().(*BuildEventId_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (m *BuildEventId) GetProgress() *BuildEventId_ProgressId {
	if x, ok := m.GetId().(*BuildEventId_Progress); ok {
		return x.Progress
	}
	return nil
}

func (m *BuildEventId) GetStarted() *BuildEventId_BuildStartedId {
	if x, ok := m.GetId().(*BuildEventId_Started); ok {
		return x.Started
	}
	return nil
}

func (m *BuildEventId) GetUnstructuredCommandLine() *BuildEventId_UnstructuredCommandLineId {
	if x, ok := m.GetId().(*BuildEventId_UnstructuredCommandLine); ok {
		return x.UnstructuredCommandLine
	}
	return nil
}

func (m *BuildEventId) GetStructuredCommandLine() *BuildEventId_StructuredCommandLineId {
	if x, ok := m.GetId().(*BuildEventId_StructuredCommandLine); ok {
		return x.StructuredCommandLine
	}
	return nil
}

func (m *BuildEventId) GetWorkspaceStatus() *BuildEventId_WorkspaceStatusId {
	if x, ok := m.GetId().(*BuildEventId_WorkspaceStatus); ok {
		return x.WorkspaceStatus
	}
	return nil
}

func (m *BuildEventId) GetOptionsParsed() *BuildEventId_OptionsParsedId {
	if x, ok := m.GetId().(*BuildEventId_OptionsParsed); ok {
		return x.OptionsParsed
	}
	return nil
}

func (m *BuildEventId) GetFetch() *BuildEventId_FetchId {
	if x, ok := m.GetId().(*BuildEventId_Fetch); ok {
		return x.Fetch
	}
	return nil
}

func (m *BuildEventId) GetConfiguration() *BuildEventId_ConfigurationId {
	if x, ok := m.GetId().(*BuildEventId_Configuration); ok {
		return x.Configuration
	}
	return nil
}

func (m *BuildEventId) GetTargetConfigured() *BuildEventId_TargetConfiguredId {
	if x, ok := m.GetId().(*BuildEventId_TargetConfigured); ok {
		return x.TargetConfigured
	}
	return nil
}

func (m *BuildEventId) GetPattern() *BuildEventId_PatternExpandedId {
	if x, ok := m.GetId().(*BuildEventId_Pattern); ok {
		return x.Pattern
	}
	return nil
}

func (m *BuildEventId) GetPatternSkipped() *BuildEventId_PatternExpandedId {
	if x, ok := m.GetId().(*BuildEventId_PatternSkipped); ok {
		return x.PatternSkipped
	}
	return nil
}

func (m *BuildEventId) GetNamedSet() *BuildEventId_NamedSetOfFilesId {
	if x, ok := m.GetId().(*BuildEventId_NamedSet); ok {
		return x.NamedSet
	}
	return nil
}

func (m *BuildEventId) GetTargetCompleted() *BuildEventId_TargetCompletedId {
	if x, ok := m.GetId().(*BuildEventId_TargetCompleted); ok {
		return x.TargetCompleted
	}
	return nil
}

func (m *BuildEventId) GetActionCompleted() *BuildEventId_ActionCompletedId {
	if x, ok := m.GetId().(*BuildEventId_ActionCompleted); ok {
		return x.ActionCompleted
	}
	return nil
}

func (m *BuildEventId) GetUnconfiguredLabel() *BuildEventId_UnconfiguredLabelId {
	if x, ok := m.GetId().(*BuildEventId_UnconfiguredLabel); ok {
		return x.UnconfiguredLabel
	}
	return nil
}

func (m *BuildEventId) GetConfiguredLabel() *BuildEventId_ConfiguredLabelId {
	if x, ok := m.GetId().(*BuildEventId_ConfiguredLabel); ok {
		return x.ConfiguredLabel
	}
	return nil
}

func (m *BuildEventId) GetTestResult() *BuildEventId_TestResultId {
	if x, ok := m.GetId().(*BuildEventId_TestResult); ok {
		return x.TestResult
	}
	return nil
}

func (m *BuildEventId) GetTestSummary() *BuildEventId_TestSummaryId {
	if x, ok := m.GetId().(*BuildEventId_TestSummary); ok {
		return x.TestSummary
	}
	return nil
}

func (m *BuildEventId) GetTargetSummary() *BuildEventId_TargetSummaryId {
	if x, ok := m.GetId().(*BuildEventId_TargetSummary); ok {
		return x.TargetSummary
	}
	return nil
}

func (m *BuildEventId) GetBuildFinished() *BuildEventId_BuildFinishedId {
	if x, ok := m.GetId().(*BuildEventId_BuildFinished); ok {
		return x.BuildFinished
	}
	return nil
}

func (m *BuildEventId) GetBuildToolLogs() *BuildEventId_BuildToolLogsId {
	if x, ok := m.GetId().(*BuildEventId_BuildToolLogs); ok {
		return x.BuildToolLogs
	}
	return nil
}

func (m *BuildEventId) GetBuildMetrics() *BuildEventId_BuildMetricsId {
	if x, ok := m.GetId().(*BuildEventId_BuildMetrics); ok {
		return x.BuildMetrics
	}
	return nil
}

func (m *BuildEventId) GetWorkspace() *BuildEventId_WorkspaceConfigId {
	if x, ok := m.GetId().(*BuildEventId_Workspace); ok {
		return x.Workspace
	}
	return nil
}

func (m *BuildEventId) GetBuildMetadata() *BuildEventId_BuildMetadataId {
	if x, ok := m.GetId().(*BuildEventId_BuildMetadata); ok {
		return x.BuildMetadata
	}
	return nil
}

func (m *BuildEventId) GetConvenienceSymlinksIdentified() *BuildEventId_ConvenienceSymlinksIdentifiedId {
	if x, ok := m.GetId().(*BuildEventId_ConvenienceSymlinksIdentified); ok {
		return x.ConvenienceSymlinksIdentified
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BuildEventId) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BuildEventId_Unknown)(nil),
		(*BuildEventId_Progress)(nil),
		(*BuildEventId_Started)(nil),
		(*BuildEventId_UnstructuredCommandLine)(nil),
		(*BuildEventId_StructuredCommandLine)(nil),
		(*BuildEventId_WorkspaceStatus)(nil),
		(*BuildEventId_OptionsParsed)(nil),
		(*BuildEventId_Fetch)(nil),
		(*BuildEventId_Configuration)(nil),
		(*BuildEventId_TargetConfigured)(nil),
		(*BuildEventId_Pattern)(nil),
		(*BuildEventId_PatternSkipped)(nil),
		(*BuildEventId_NamedSet)(nil),
		(*BuildEventId_TargetCompleted)(nil),
		(*BuildEventId_ActionCompleted)(nil),
		(*BuildEventId_UnconfiguredLabel)(nil),
		(*BuildEventId_ConfiguredLabel)(nil),
		(*BuildEventId_TestResult)(nil),
		(*BuildEventId_TestSummary)(nil),
		(*BuildEventId_TargetSummary)(nil),
		(*BuildEventId_BuildFinished)(nil),
		(*BuildEventId_BuildToolLogs)(nil),
		(*BuildEventId_BuildMetrics)(nil),
		(*BuildEventId_Workspace)(nil),
		(*BuildEventId_BuildMetadata)(nil),
		(*BuildEventId_ConvenienceSymlinksIdentified)(nil),
	}
}

// Generic identifier for a build event. This is the default type of
// BuildEventId, but should not be used outside testing; nevertheless,
// tools should handle build events with this kind of id gracefully.
type BuildEventId_UnknownBuildEventId struct {
	Details string `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *BuildEventId_UnknownBuildEventId) Reset()         { *m = BuildEventId_UnknownBuildEventId{} }
func (m *BuildEventId_UnknownBuildEventId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_UnknownBuildEventId) ProtoMessage()    {}
func (*BuildEventId_UnknownBuildEventId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 0}
}
func (m *BuildEventId_UnknownBuildEventId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_UnknownBuildEventId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_UnknownBuildEventId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_UnknownBuildEventId.Merge(m, src)
}
func (m *BuildEventId_UnknownBuildEventId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_UnknownBuildEventId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_UnknownBuildEventId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_UnknownBuildEventId proto.InternalMessageInfo

// Identifier of an event reporting progress. Those events are also used to
// chain in events that come early.
type BuildEventId_ProgressId struct {
	// Unique identifier. No assumption should be made about how the ids are
	// assigned; the only meaningful operation on this field is test for
	// equality.
	OpaqueCount int32 `protobuf:"varint,1,opt,name=opaque_count,json=opaqueCount,proto3" json:"opaque_count,omitempty"`
}

func (m *BuildEventId_ProgressId) Reset()         { *m = BuildEventId_ProgressId{} }
func (m *BuildEventId_ProgressId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_ProgressId) ProtoMessage()    {}
func (*BuildEventId_ProgressId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 1}
}
func (m *BuildEventId_ProgressId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_ProgressId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_ProgressId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_ProgressId.Merge(m, src)
}
func (m *BuildEventId_ProgressId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_ProgressId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_ProgressId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_ProgressId proto.InternalMessageInfo

// Identifier of an event indicating the beginning of a build; this will
// normally be the first event.
type BuildEventId_BuildStartedId struct {
}

func (m *BuildEventId_BuildStartedId) Reset()         { *m = BuildEventId_BuildStartedId{} }
func (m *BuildEventId_BuildStartedId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_BuildStartedId) ProtoMessage()    {}
func (*BuildEventId_BuildStartedId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 2}
}
func (m *BuildEventId_BuildStartedId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_BuildStartedId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_BuildStartedId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_BuildStartedId.Merge(m, src)
}
func (m *BuildEventId_BuildStartedId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_BuildStartedId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_BuildStartedId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_BuildStartedId proto.InternalMessageInfo

// Identifier on an event indicating the original commandline received by
// the bazel server.
type BuildEventId_UnstructuredCommandLineId struct {
}

func (m *BuildEventId_UnstructuredCommandLineId) Reset() {
	*m = BuildEventId_UnstructuredCommandLineId{}
}
func (m *BuildEventId_UnstructuredCommandLineId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_UnstructuredCommandLineId) ProtoMessage()    {}
func (*BuildEventId_UnstructuredCommandLineId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 3}
}
func (m *BuildEventId_UnstructuredCommandLineId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_UnstructuredCommandLineId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_UnstructuredCommandLineId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_UnstructuredCommandLineId.Merge(m, src)
}
func (m *BuildEventId_UnstructuredCommandLineId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_UnstructuredCommandLineId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_UnstructuredCommandLineId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_UnstructuredCommandLineId proto.InternalMessageInfo

// Identifier on an event describing the commandline received by Bazel.
type BuildEventId_StructuredCommandLineId struct {
	// A title for this command line value, as there may be multiple.
	// For example, a single invocation may wish to report both the literal and
	// canonical command lines, and this label would be used to differentiate
	// between both versions.
	CommandLineLabel string `protobuf:"bytes,1,opt,name=command_line_label,json=commandLineLabel,proto3" json:"command_line_label,omitempty"`
}

func (m *BuildEventId_StructuredCommandLineId) Reset()         { *m = BuildEventId_StructuredCommandLineId{} }
func (m *BuildEventId_StructuredCommandLineId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_StructuredCommandLineId) ProtoMessage()    {}
func (*BuildEventId_StructuredCommandLineId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 4}
}
func (m *BuildEventId_StructuredCommandLineId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_StructuredCommandLineId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_StructuredCommandLineId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_StructuredCommandLineId.Merge(m, src)
}
func (m *BuildEventId_StructuredCommandLineId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_StructuredCommandLineId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_StructuredCommandLineId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_StructuredCommandLineId proto.InternalMessageInfo

// Identifier of an event indicating the workspace status.
type BuildEventId_WorkspaceStatusId struct {
}

func (m *BuildEventId_WorkspaceStatusId) Reset()         { *m = BuildEventId_WorkspaceStatusId{} }
func (m *BuildEventId_WorkspaceStatusId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_WorkspaceStatusId) ProtoMessage()    {}
func (*BuildEventId_WorkspaceStatusId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 5}
}
func (m *BuildEventId_WorkspaceStatusId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_WorkspaceStatusId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_WorkspaceStatusId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_WorkspaceStatusId.Merge(m, src)
}
func (m *BuildEventId_WorkspaceStatusId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_WorkspaceStatusId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_WorkspaceStatusId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_WorkspaceStatusId proto.InternalMessageInfo

// Identifier on an event reporting on the options included in the command
// line, both explicitly and implicitly.
type BuildEventId_OptionsParsedId struct {
}

func (m *BuildEventId_OptionsParsedId) Reset()         { *m = BuildEventId_OptionsParsedId{} }
func (m *BuildEventId_OptionsParsedId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_OptionsParsedId) ProtoMessage()    {}
func (*BuildEventId_OptionsParsedId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 6}
}
func (m *BuildEventId_OptionsParsedId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_OptionsParsedId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_OptionsParsedId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_OptionsParsedId.Merge(m, src)
}
func (m *BuildEventId_OptionsParsedId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_OptionsParsedId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_OptionsParsedId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_OptionsParsedId proto.InternalMessageInfo

// Identifier of an event reporting that an external resource was fetched
// from.
type BuildEventId_FetchId struct {
	// The external resource that was fetched from.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *BuildEventId_FetchId) Reset()         { *m = BuildEventId_FetchId{} }
func (m *BuildEventId_FetchId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_FetchId) ProtoMessage()    {}
func (*BuildEventId_FetchId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 7}
}
func (m *BuildEventId_FetchId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_FetchId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_FetchId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_FetchId.Merge(m, src)
}
func (m *BuildEventId_FetchId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_FetchId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_FetchId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_FetchId proto.InternalMessageInfo

// Identifier of an event indicating that a target pattern has been expanded
// further.
// Messages of this shape are also used to describe parts of a pattern that
// have been skipped for some reason, if the actual expansion was still
// carried out (e.g., if keep_going is set). In this case, the
// pattern_skipped choice in the id field is to be made.
type BuildEventId_PatternExpandedId struct {
	Pattern []string `protobuf:"bytes,1,rep,name=pattern,proto3" json:"pattern,omitempty"`
}

func (m *BuildEventId_PatternExpandedId) Reset()         { *m = BuildEventId_PatternExpandedId{} }
func (m *BuildEventId_PatternExpandedId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_PatternExpandedId) ProtoMessage()    {}
func (*BuildEventId_PatternExpandedId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 8}
}
func (m *BuildEventId_PatternExpandedId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_PatternExpandedId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_PatternExpandedId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_PatternExpandedId.Merge(m, src)
}
func (m *BuildEventId_PatternExpandedId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_PatternExpandedId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_PatternExpandedId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_PatternExpandedId proto.InternalMessageInfo

type BuildEventId_WorkspaceConfigId struct {
}

func (m *BuildEventId_WorkspaceConfigId) Reset()         { *m = BuildEventId_WorkspaceConfigId{} }
func (m *BuildEventId_WorkspaceConfigId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_WorkspaceConfigId) ProtoMessage()    {}
func (*BuildEventId_WorkspaceConfigId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 9}
}
func (m *BuildEventId_WorkspaceConfigId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_WorkspaceConfigId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_WorkspaceConfigId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_WorkspaceConfigId.Merge(m, src)
}
func (m *BuildEventId_WorkspaceConfigId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_WorkspaceConfigId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_WorkspaceConfigId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_WorkspaceConfigId proto.InternalMessageInfo

type BuildEventId_BuildMetadataId struct {
}

func (m *BuildEventId_BuildMetadataId) Reset()         { *m = BuildEventId_BuildMetadataId{} }
func (m *BuildEventId_BuildMetadataId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_BuildMetadataId) ProtoMessage()    {}
func (*BuildEventId_BuildMetadataId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 10}
}
func (m *BuildEventId_BuildMetadataId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_BuildMetadataId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_BuildMetadataId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_BuildMetadataId.Merge(m, src)
}
func (m *BuildEventId_BuildMetadataId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_BuildMetadataId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_BuildMetadataId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_BuildMetadataId proto.InternalMessageInfo

// Identifier of an event indicating that a target has been expanded by
// identifying for which configurations it should be build.
type BuildEventId_TargetConfiguredId struct {
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// If empty, the id refers to the expansion of the target. If not-empty,
	// the id refers to the expansion of an aspect applied to the (already
	// expanded) target.
	//
	// For example, when building an apple_binary that depends on proto_library
	// "//:foo_proto", there will be two TargetConfigured events for
	// "//:foo_proto":
	//
	// 1. An event with an empty aspect, corresponding to actions producing
	// language-agnostic outputs from the proto_library; and
	// 2. An event with aspect "ObjcProtoAspect", corresponding to Objective-C
	// code generation.
	Aspect string `protobuf:"bytes,2,opt,name=aspect,proto3" json:"aspect,omitempty"`
}

func (m *BuildEventId_TargetConfiguredId) Reset()         { *m = BuildEventId_TargetConfiguredId{} }
func (m *BuildEventId_TargetConfiguredId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_TargetConfiguredId) ProtoMessage()    {}
func (*BuildEventId_TargetConfiguredId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 11}
}
func (m *BuildEventId_TargetConfiguredId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_TargetConfiguredId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_TargetConfiguredId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_TargetConfiguredId.Merge(m, src)
}
func (m *BuildEventId_TargetConfiguredId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_TargetConfiguredId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_TargetConfiguredId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_TargetConfiguredId proto.InternalMessageInfo

// Identifier of an event introducing a named set of files (usually artifacts)
// to be referred to in later messages.
type BuildEventId_NamedSetOfFilesId struct {
	// Identifier of the file set; this is an opaque string valid only for the
	// particular instance of the event stream.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *BuildEventId_NamedSetOfFilesId) Reset()         { *m = BuildEventId_NamedSetOfFilesId{} }
func (m *BuildEventId_NamedSetOfFilesId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_NamedSetOfFilesId) ProtoMessage()    {}
func (*BuildEventId_NamedSetOfFilesId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 12}
}
func (m *BuildEventId_NamedSetOfFilesId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_NamedSetOfFilesId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_NamedSetOfFilesId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_NamedSetOfFilesId.Merge(m, src)
}
func (m *BuildEventId_NamedSetOfFilesId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_NamedSetOfFilesId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_NamedSetOfFilesId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_NamedSetOfFilesId proto.InternalMessageInfo

// Identifier of an event introducing a configuration.
type BuildEventId_ConfigurationId struct {
	// Identifier of the configuration; users of the protocol should not make
	// any assumptions about it having any structure, or equality of the
	// identifier between different streams.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *BuildEventId_ConfigurationId) Reset()         { *m = BuildEventId_ConfigurationId{} }
func (m *BuildEventId_ConfigurationId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_ConfigurationId) ProtoMessage()    {}
func (*BuildEventId_ConfigurationId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 13}
}
func (m *BuildEventId_ConfigurationId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_ConfigurationId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_ConfigurationId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_ConfigurationId.Merge(m, src)
}
func (m *BuildEventId_ConfigurationId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_ConfigurationId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_ConfigurationId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_ConfigurationId proto.InternalMessageInfo

// Identifier of an event indicating that a target was built completely; this
// does not include running the test if the target is a test target.
type BuildEventId_TargetCompletedId struct {
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// The configuration for which the target was built.
	Configuration *BuildEventId_ConfigurationId `protobuf:"bytes,3,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// If empty, the id refers to the completion of the target. If not-empty,
	// the id refers to the completion of an aspect applied to the (already
	// completed) target.
	//
	// For example, when building an apple_binary that depends on proto_library
	// "//:foo_proto", there will be two TargetCompleted events for
	// "//:foo_proto":
	//
	// 1. An event with an empty aspect, corresponding to actions producing
	// language-agnostic outputs from the proto_library; and
	// 2. An event with aspect "ObjcProtoAspect", corresponding to Objective-C
	// code generation.
	Aspect string `protobuf:"bytes,2,opt,name=aspect,proto3" json:"aspect,omitempty"`
}

func (m *BuildEventId_TargetCompletedId) Reset()         { *m = BuildEventId_TargetCompletedId{} }
func (m *BuildEventId_TargetCompletedId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_TargetCompletedId) ProtoMessage()    {}
func (*BuildEventId_TargetCompletedId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 14}
}
func (m *BuildEventId_TargetCompletedId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_TargetCompletedId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_TargetCompletedId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_TargetCompletedId.Merge(m, src)
}
func (m *BuildEventId_TargetCompletedId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_TargetCompletedId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_TargetCompletedId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_TargetCompletedId proto.InternalMessageInfo

// Identifier of an event reporting that an action was completed (not all
// actions are reported, only the ones that can be considered important;
// this includes all failed actions).
type BuildEventId_ActionCompletedId struct {
	PrimaryOutput string `protobuf:"bytes,1,opt,name=primary_output,json=primaryOutput,proto3" json:"primary_output,omitempty"`
	// Optional, the label of the owner of the action, for reference.
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	// Optional, the id of the configuration of the action owner.
	Configuration *BuildEventId_ConfigurationId `protobuf:"bytes,3,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (m *BuildEventId_ActionCompletedId) Reset()         { *m = BuildEventId_ActionCompletedId{} }
func (m *BuildEventId_ActionCompletedId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_ActionCompletedId) ProtoMessage()    {}
func (*BuildEventId_ActionCompletedId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 15}
}
func (m *BuildEventId_ActionCompletedId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_ActionCompletedId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_ActionCompletedId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_ActionCompletedId.Merge(m, src)
}
func (m *BuildEventId_ActionCompletedId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_ActionCompletedId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_ActionCompletedId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_ActionCompletedId proto.InternalMessageInfo

// Identifier of an event reporting an event associated with an unconfigured
// label. Usually, this indicates a failure due to a missing input file. In
// any case, it will report some form of error (i.e., the payload will be an
// Aborted event); there are no regular events using this identifier. The
// purpose of those events is to serve as the root cause of a failed target.
type BuildEventId_UnconfiguredLabelId struct {
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (m *BuildEventId_UnconfiguredLabelId) Reset()         { *m = BuildEventId_UnconfiguredLabelId{} }
func (m *BuildEventId_UnconfiguredLabelId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_UnconfiguredLabelId) ProtoMessage()    {}
func (*BuildEventId_UnconfiguredLabelId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 16}
}
func (m *BuildEventId_UnconfiguredLabelId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_UnconfiguredLabelId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_UnconfiguredLabelId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_UnconfiguredLabelId.Merge(m, src)
}
func (m *BuildEventId_UnconfiguredLabelId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_UnconfiguredLabelId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_UnconfiguredLabelId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_UnconfiguredLabelId proto.InternalMessageInfo

// Identifier of an event reporting an event associated with a configured
// label, usually a visibility error. In any case, an event with such an
// id will always report some form of error (i.e., the payload will be an
// Aborted event); there are no regular events using this identifier.
type BuildEventId_ConfiguredLabelId struct {
	Label         string                        `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Configuration *BuildEventId_ConfigurationId `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (m *BuildEventId_ConfiguredLabelId) Reset()         { *m = BuildEventId_ConfiguredLabelId{} }
func (m *BuildEventId_ConfiguredLabelId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_ConfiguredLabelId) ProtoMessage()    {}
func (*BuildEventId_ConfiguredLabelId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 17}
}
func (m *BuildEventId_ConfiguredLabelId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_ConfiguredLabelId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_ConfiguredLabelId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_ConfiguredLabelId.Merge(m, src)
}
func (m *BuildEventId_ConfiguredLabelId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_ConfiguredLabelId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_ConfiguredLabelId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_ConfiguredLabelId proto.InternalMessageInfo

// Identifier of an event reporting on an individual test run. The label
// identifies the test that is reported about, the remaining fields are
// in such a way as to uniquely identify the action within a build. In fact,
// attempts for the same test, run, shard triple are counted sequentially,
// starting with 1.
type BuildEventId_TestResultId struct {
	Label         string                        `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Configuration *BuildEventId_ConfigurationId `protobuf:"bytes,5,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Run           int32                         `protobuf:"varint,2,opt,name=run,proto3" json:"run,omitempty"`
	Shard         int32                         `protobuf:"varint,3,opt,name=shard,proto3" json:"shard,omitempty"`
	Attempt       int32                         `protobuf:"varint,4,opt,name=attempt,proto3" json:"attempt,omitempty"`
}

func (m *BuildEventId_TestResultId) Reset()         { *m = BuildEventId_TestResultId{} }
func (m *BuildEventId_TestResultId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_TestResultId) ProtoMessage()    {}
func (*BuildEventId_TestResultId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 18}
}
func (m *BuildEventId_TestResultId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_TestResultId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_TestResultId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_TestResultId.Merge(m, src)
}
func (m *BuildEventId_TestResultId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_TestResultId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_TestResultId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_TestResultId proto.InternalMessageInfo

// Identifier of an event reporting the summary of a test.
type BuildEventId_TestSummaryId struct {
	Label         string                        `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Configuration *BuildEventId_ConfigurationId `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (m *BuildEventId_TestSummaryId) Reset()         { *m = BuildEventId_TestSummaryId{} }
func (m *BuildEventId_TestSummaryId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_TestSummaryId) ProtoMessage()    {}
func (*BuildEventId_TestSummaryId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 19}
}
func (m *BuildEventId_TestSummaryId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_TestSummaryId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_TestSummaryId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_TestSummaryId.Merge(m, src)
}
func (m *BuildEventId_TestSummaryId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_TestSummaryId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_TestSummaryId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_TestSummaryId proto.InternalMessageInfo

// Identifier of an event reporting the summary of a target.
type BuildEventId_TargetSummaryId struct {
	Label         string                        `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Configuration *BuildEventId_ConfigurationId `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (m *BuildEventId_TargetSummaryId) Reset()         { *m = BuildEventId_TargetSummaryId{} }
func (m *BuildEventId_TargetSummaryId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_TargetSummaryId) ProtoMessage()    {}
func (*BuildEventId_TargetSummaryId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 20}
}
func (m *BuildEventId_TargetSummaryId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_TargetSummaryId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_TargetSummaryId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_TargetSummaryId.Merge(m, src)
}
func (m *BuildEventId_TargetSummaryId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_TargetSummaryId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_TargetSummaryId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_TargetSummaryId proto.InternalMessageInfo

// Identifier of the BuildFinished event, indicating the end of a build.
type BuildEventId_BuildFinishedId struct {
}

func (m *BuildEventId_BuildFinishedId) Reset()         { *m = BuildEventId_BuildFinishedId{} }
func (m *BuildEventId_BuildFinishedId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_BuildFinishedId) ProtoMessage()    {}
func (*BuildEventId_BuildFinishedId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 21}
}
func (m *BuildEventId_BuildFinishedId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_BuildFinishedId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_BuildFinishedId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_BuildFinishedId.Merge(m, src)
}
func (m *BuildEventId_BuildFinishedId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_BuildFinishedId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_BuildFinishedId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_BuildFinishedId proto.InternalMessageInfo

// Identifier of an event providing additional logs/statistics after
// completion of the build.
type BuildEventId_BuildToolLogsId struct {
}

func (m *BuildEventId_BuildToolLogsId) Reset()         { *m = BuildEventId_BuildToolLogsId{} }
func (m *BuildEventId_BuildToolLogsId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_BuildToolLogsId) ProtoMessage()    {}
func (*BuildEventId_BuildToolLogsId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 22}
}
func (m *BuildEventId_BuildToolLogsId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_BuildToolLogsId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_BuildToolLogsId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_BuildToolLogsId.Merge(m, src)
}
func (m *BuildEventId_BuildToolLogsId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_BuildToolLogsId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_BuildToolLogsId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_BuildToolLogsId proto.InternalMessageInfo

// Identifier of an event providing build metrics after completion
// of the build.
type BuildEventId_BuildMetricsId struct {
}

func (m *BuildEventId_BuildMetricsId) Reset()         { *m = BuildEventId_BuildMetricsId{} }
func (m *BuildEventId_BuildMetricsId) String() string { return proto.CompactTextString(m) }
func (*BuildEventId_BuildMetricsId) ProtoMessage()    {}
func (*BuildEventId_BuildMetricsId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 23}
}
func (m *BuildEventId_BuildMetricsId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_BuildMetricsId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_BuildMetricsId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_BuildMetricsId.Merge(m, src)
}
func (m *BuildEventId_BuildMetricsId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_BuildMetricsId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_BuildMetricsId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_BuildMetricsId proto.InternalMessageInfo

// Identifier of an event providing convenience symlinks information.
type BuildEventId_ConvenienceSymlinksIdentifiedId struct {
}

func (m *BuildEventId_ConvenienceSymlinksIdentifiedId) Reset() {
	*m = BuildEventId_ConvenienceSymlinksIdentifiedId{}
}
func (m *BuildEventId_ConvenienceSymlinksIdentifiedId) String() string {
	return proto.CompactTextString(m)
}
func (*BuildEventId_ConvenienceSymlinksIdentifiedId) ProtoMessage() {}
func (*BuildEventId_ConvenienceSymlinksIdentifiedId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{0, 24}
}
func (m *BuildEventId_ConvenienceSymlinksIdentifiedId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEventId_ConvenienceSymlinksIdentifiedId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEventId_ConvenienceSymlinksIdentifiedId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEventId_ConvenienceSymlinksIdentifiedId.Merge(m, src)
}
func (m *BuildEventId_ConvenienceSymlinksIdentifiedId) XXX_Size() int {
	return m.Size()
}
func (m *BuildEventId_ConvenienceSymlinksIdentifiedId) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEventId_ConvenienceSymlinksIdentifiedId.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEventId_ConvenienceSymlinksIdentifiedId proto.InternalMessageInfo

// Payload of an event summarizing the progress of the build so far. Those
// events are also used to be parents of events where the more logical parent
// event cannot be posted yet as the needed information is not yet complete.
type Progress struct {
	// The next chunk of stdout that bazel produced since the last progress event
	// or the beginning of the build.
	Stdout string `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	// The next chunk of stderr that bazel produced since the last progress event
	// or the beginning of the build.
	Stderr string `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (m *Progress) Reset()         { *m = Progress{} }
func (m *Progress) String() string { return proto.CompactTextString(m) }
func (*Progress) ProtoMessage()    {}
func (*Progress) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{1}
}
func (m *Progress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Progress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Progress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Progress.Merge(m, src)
}
func (m *Progress) XXX_Size() int {
	return m.Size()
}
func (m *Progress) XXX_DiscardUnknown() {
	xxx_messageInfo_Progress.DiscardUnknown(m)
}

var xxx_messageInfo_Progress proto.InternalMessageInfo

// Payload of an event indicating that an expected event will not come, as
// the build is aborted prematurely for some reason.
type Aborted struct {
	Reason Aborted_AbortReason `protobuf:"varint,1,opt,name=reason,proto3,enum=build_event_stream.Aborted_AbortReason" json:"reason,omitempty"`
	// A human readable description with more details about there reason, where
	// available and useful.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Aborted) Reset()         { *m = Aborted{} }
func (m *Aborted) String() string { return proto.CompactTextString(m) }
func (*Aborted) ProtoMessage()    {}
func (*Aborted) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{2}
}
func (m *Aborted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Aborted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Aborted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Aborted.Merge(m, src)
}
func (m *Aborted) XXX_Size() int {
	return m.Size()
}
func (m *Aborted) XXX_DiscardUnknown() {
	xxx_messageInfo_Aborted.DiscardUnknown(m)
}

var xxx_messageInfo_Aborted proto.InternalMessageInfo

// Payload of an event indicating the beginning of a new build. Usually, events
// of those type start a new build-event stream. The target pattern requested
// to be build is contained in one of the announced child events; it is an
// invariant that precisely one of the announced child events has a non-empty
// target pattern.
type BuildStarted struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Start of the build in ms since the epoch.
	//
	// Deprecated, use `start_time` instead.
	//
	// TODO(yannic): Remove.
	StartTimeMillis int64 `protobuf:"varint,2,opt,name=start_time_millis,json=startTimeMillis,proto3" json:"start_time_millis,omitempty"` // Deprecated: Do not use.
	// Start of the build.
	StartTime *types.Timestamp `protobuf:"bytes,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Version of the build tool that is running.
	BuildToolVersion string `protobuf:"bytes,3,opt,name=build_tool_version,json=buildToolVersion,proto3" json:"build_tool_version,omitempty"`
	// A human-readable description of all the non-default option settings
	OptionsDescription string `protobuf:"bytes,4,opt,name=options_description,json=optionsDescription,proto3" json:"options_description,omitempty"`
	// The name of the command that the user invoked.
	Command string `protobuf:"bytes,5,opt,name=command,proto3" json:"command,omitempty"`
	// The working directory from which the build tool was invoked.
	WorkingDirectory string `protobuf:"bytes,6,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"`
	// The directory of the workspace.
	WorkspaceDirectory string `protobuf:"bytes,7,opt,name=workspace_directory,json=workspaceDirectory,proto3" json:"workspace_directory,omitempty"`
	// The process ID of the Bazel server.
	ServerPid int64 `protobuf:"varint,8,opt,name=server_pid,json=serverPid,proto3" json:"server_pid,omitempty"`
}

func (m *BuildStarted) Reset()         { *m = BuildStarted{} }
func (m *BuildStarted) String() string { return proto.CompactTextString(m) }
func (*BuildStarted) ProtoMessage()    {}
func (*BuildStarted) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{3}
}
func (m *BuildStarted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildStarted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildStarted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildStarted.Merge(m, src)
}
func (m *BuildStarted) XXX_Size() int {
	return m.Size()
}
func (m *BuildStarted) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildStarted.DiscardUnknown(m)
}

var xxx_messageInfo_BuildStarted proto.InternalMessageInfo

// Configuration related to the blaze workspace and output tree.
type WorkspaceConfig struct {
	// The root of the local blaze exec root. All output files live underneath
	// this at "blaze-out/".
	LocalExecRoot string `protobuf:"bytes,1,opt,name=local_exec_root,json=localExecRoot,proto3" json:"local_exec_root,omitempty"`
}

func (m *WorkspaceConfig) Reset()         { *m = WorkspaceConfig{} }
func (m *WorkspaceConfig) String() string { return proto.CompactTextString(m) }
func (*WorkspaceConfig) ProtoMessage()    {}
func (*WorkspaceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{4}
}
func (m *WorkspaceConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkspaceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WorkspaceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkspaceConfig.Merge(m, src)
}
func (m *WorkspaceConfig) XXX_Size() int {
	return m.Size()
}
func (m *WorkspaceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkspaceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WorkspaceConfig proto.InternalMessageInfo

// Payload of an event reporting the command-line of the invocation as
// originally received by the server. Note that this is not the command-line
// given by the user, as the client adds information about the invocation,
// like name and relevant entries of rc-files and client environment variables.
// However, it does contain enough information to reproduce the build
// invocation.
type UnstructuredCommandLine struct {
	Args []string `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *UnstructuredCommandLine) Reset()         { *m = UnstructuredCommandLine{} }
func (m *UnstructuredCommandLine) String() string { return proto.CompactTextString(m) }
func (*UnstructuredCommandLine) ProtoMessage()    {}
func (*UnstructuredCommandLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{5}
}
func (m *UnstructuredCommandLine) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnstructuredCommandLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UnstructuredCommandLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnstructuredCommandLine.Merge(m, src)
}
func (m *UnstructuredCommandLine) XXX_Size() int {
	return m.Size()
}
func (m *UnstructuredCommandLine) XXX_DiscardUnknown() {
	xxx_messageInfo_UnstructuredCommandLine.DiscardUnknown(m)
}

var xxx_messageInfo_UnstructuredCommandLine proto.InternalMessageInfo

// Payload of an event reporting on the parsed options, grouped in various ways.
type OptionsParsed struct {
	StartupOptions         []string                            `protobuf:"bytes,1,rep,name=startup_options,json=startupOptions,proto3" json:"startup_options,omitempty"`
	ExplicitStartupOptions []string                            `protobuf:"bytes,2,rep,name=explicit_startup_options,json=explicitStartupOptions,proto3" json:"explicit_startup_options,omitempty"`
	CmdLine                []string                            `protobuf:"bytes,3,rep,name=cmd_line,json=cmdLine,proto3" json:"cmd_line,omitempty"`
	ExplicitCmdLine        []string                            `protobuf:"bytes,4,rep,name=explicit_cmd_line,json=explicitCmdLine,proto3" json:"explicit_cmd_line,omitempty"`
	InvocationPolicy       *invocation_policy.InvocationPolicy `protobuf:"bytes,5,opt,name=invocation_policy,json=invocationPolicy,proto3" json:"invocation_policy,omitempty"`
	ToolTag                string                              `protobuf:"bytes,6,opt,name=tool_tag,json=toolTag,proto3" json:"tool_tag,omitempty"`
}

func (m *OptionsParsed) Reset()         { *m = OptionsParsed{} }
func (m *OptionsParsed) String() string { return proto.CompactTextString(m) }
func (*OptionsParsed) ProtoMessage()    {}
func (*OptionsParsed) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{6}
}
func (m *OptionsParsed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OptionsParsed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OptionsParsed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionsParsed.Merge(m, src)
}
func (m *OptionsParsed) XXX_Size() int {
	return m.Size()
}
func (m *OptionsParsed) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionsParsed.DiscardUnknown(m)
}

var xxx_messageInfo_OptionsParsed proto.InternalMessageInfo

// Payload of an event indicating that an external resource was fetched. This
// event will only occur in streams where an actual fetch happened, not in ones
// where a cached copy of the entity to be fetched was used.
type Fetch struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *Fetch) Reset()         { *m = Fetch{} }
func (m *Fetch) String() string { return proto.CompactTextString(m) }
func (*Fetch) ProtoMessage()    {}
func (*Fetch) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{7}
}
func (m *Fetch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fetch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Fetch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fetch.Merge(m, src)
}
func (m *Fetch) XXX_Size() int {
	return m.Size()
}
func (m *Fetch) XXX_DiscardUnknown() {
	xxx_messageInfo_Fetch.DiscardUnknown(m)
}

var xxx_messageInfo_Fetch proto.InternalMessageInfo

// Payload of an event reporting the workspace status. Key-value pairs can be
// provided by specifying the workspace_status_command to an executable that
// returns one key-value pair per line of output (key and value separated by a
// space).
type WorkspaceStatus struct {
	Item []*WorkspaceStatus_Item `protobuf:"bytes,1,rep,name=item,proto3" json:"item,omitempty"`
}

func (m *WorkspaceStatus) Reset()         { *m = WorkspaceStatus{} }
func (m *WorkspaceStatus) String() string { return proto.CompactTextString(m) }
func (*WorkspaceStatus) ProtoMessage()    {}
func (*WorkspaceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{8}
}
func (m *WorkspaceStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkspaceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WorkspaceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkspaceStatus.Merge(m, src)
}
func (m *WorkspaceStatus) XXX_Size() int {
	return m.Size()
}
func (m *WorkspaceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkspaceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WorkspaceStatus proto.InternalMessageInfo

type WorkspaceStatus_Item struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *WorkspaceStatus_Item) Reset()         { *m = WorkspaceStatus_Item{} }
func (m *WorkspaceStatus_Item) String() string { return proto.CompactTextString(m) }
func (*WorkspaceStatus_Item) ProtoMessage()    {}
func (*WorkspaceStatus_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{8, 0}
}
func (m *WorkspaceStatus_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkspaceStatus_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WorkspaceStatus_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkspaceStatus_Item.Merge(m, src)
}
func (m *WorkspaceStatus_Item) XXX_Size() int {
	return m.Size()
}
func (m *WorkspaceStatus_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkspaceStatus_Item.DiscardUnknown(m)
}

var xxx_messageInfo_WorkspaceStatus_Item proto.InternalMessageInfo

// Payload of an event reporting custom key-value metadata associated with the
// build.
type BuildMetadata struct {
	// Custom metadata for the build.
	Metadata map[string]string `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *BuildMetadata) Reset()         { *m = BuildMetadata{} }
func (m *BuildMetadata) String() string { return proto.CompactTextString(m) }
func (*BuildMetadata) ProtoMessage()    {}
func (*BuildMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{9}
}
func (m *BuildMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildMetadata.Merge(m, src)
}
func (m *BuildMetadata) XXX_Size() int {
	return m.Size()
}
func (m *BuildMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_BuildMetadata proto.InternalMessageInfo

// Payload of an event reporting details of a given configuration.
type Configuration struct {
	Mnemonic     string            `protobuf:"bytes,1,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	PlatformName string            `protobuf:"bytes,2,opt,name=platform_name,json=platformName,proto3" json:"platform_name,omitempty"`
	Cpu          string            `protobuf:"bytes,3,opt,name=cpu,proto3" json:"cpu,omitempty"`
	MakeVariable map[string]string `protobuf:"bytes,4,rep,name=make_variable,json=makeVariable,proto3" json:"make_variable,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Whether this configuration is used for building tools.
	IsTool bool `protobuf:"varint,5,opt,name=is_tool,json=isTool,proto3" json:"is_tool,omitempty"`
}

func (m *Configuration) Reset()         { *m = Configuration{} }
func (m *Configuration) String() string { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()    {}
func (*Configuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{10}
}
func (m *Configuration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Configuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Configuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configuration.Merge(m, src)
}
func (m *Configuration) XXX_Size() int {
	return m.Size()
}
func (m *Configuration) XXX_DiscardUnknown() {
	xxx_messageInfo_Configuration.DiscardUnknown(m)
}

var xxx_messageInfo_Configuration proto.InternalMessageInfo

// Payload of the event indicating the expansion of a target pattern.
// The main information is in the chaining part: the id will contain the
// target pattern that was expanded and the children id will contain the
// target or target pattern it was expanded to.
type PatternExpanded struct {
	// All test suites requested via top-level target patterns. Does not include
	// test suites whose label matched a negative pattern.
	TestSuiteExpansions []*PatternExpanded_TestSuiteExpansion `protobuf:"bytes,1,rep,name=test_suite_expansions,json=testSuiteExpansions,proto3" json:"test_suite_expansions,omitempty"`
}

func (m *PatternExpanded) Reset()         { *m = PatternExpanded{} }
func (m *PatternExpanded) String() string { return proto.CompactTextString(m) }
func (*PatternExpanded) ProtoMessage()    {}
func (*PatternExpanded) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{11}
}
func (m *PatternExpanded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PatternExpanded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PatternExpanded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatternExpanded.Merge(m, src)
}
func (m *PatternExpanded) XXX_Size() int {
	return m.Size()
}
func (m *PatternExpanded) XXX_DiscardUnknown() {
	xxx_messageInfo_PatternExpanded.DiscardUnknown(m)
}

var xxx_messageInfo_PatternExpanded proto.InternalMessageInfo

// Represents a test_suite target and the tests that it expanded to. Nested
// test suites are recursively expanded. The test labels only contain the
// final test targets, not any nested suites.
type PatternExpanded_TestSuiteExpansion struct {
	// The label of the test_suite rule.
	SuiteLabel string `protobuf:"bytes,1,opt,name=suite_label,json=suiteLabel,proto3" json:"suite_label,omitempty"`
	// Labels of the test targets included in the suite. Includes all tests in
	// the suite regardless of any filters or negative patterns which may result
	// in the test not actually being run.
	TestLabels []string `protobuf:"bytes,2,rep,name=test_labels,json=testLabels,proto3" json:"test_labels,omitempty"`
}

func (m *PatternExpanded_TestSuiteExpansion) Reset()         { *m = PatternExpanded_TestSuiteExpansion{} }
func (m *PatternExpanded_TestSuiteExpansion) String() string { return proto.CompactTextString(m) }
func (*PatternExpanded_TestSuiteExpansion) ProtoMessage()    {}
func (*PatternExpanded_TestSuiteExpansion) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{11, 0}
}
func (m *PatternExpanded_TestSuiteExpansion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PatternExpanded_TestSuiteExpansion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PatternExpanded_TestSuiteExpansion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatternExpanded_TestSuiteExpansion.Merge(m, src)
}
func (m *PatternExpanded_TestSuiteExpansion) XXX_Size() int {
	return m.Size()
}
func (m *PatternExpanded_TestSuiteExpansion) XXX_DiscardUnknown() {
	xxx_messageInfo_PatternExpanded_TestSuiteExpansion.DiscardUnknown(m)
}

var xxx_messageInfo_PatternExpanded_TestSuiteExpansion proto.InternalMessageInfo

// Payload of the event indicating that the configurations for a target have
// been identified. As with pattern expansion the main information is in the
// chaining part: the id will contain the target that was configured and the
// children id will contain the configured targets it was configured to.
type TargetConfigured struct {
	// The kind of target (e.g.,  e.g. "cc_library rule", "source file",
	// "generated file") where the completion is reported.
	TargetKind string `protobuf:"bytes,1,opt,name=target_kind,json=targetKind,proto3" json:"target_kind,omitempty"`
	// The size of the test, if the target is a test target. Unset otherwise.
	TestSize TestSize `protobuf:"varint,2,opt,name=test_size,json=testSize,proto3,enum=build_event_stream.TestSize" json:"test_size,omitempty"`
	// List of all tags associated with this target (for all possible
	// configurations).
	Tag []string `protobuf:"bytes,3,rep,name=tag,proto3" json:"tag,omitempty"`
}

func (m *TargetConfigured) Reset()         { *m = TargetConfigured{} }
func (m *TargetConfigured) String() string { return proto.CompactTextString(m) }
func (*TargetConfigured) ProtoMessage()    {}
func (*TargetConfigured) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{12}
}
func (m *TargetConfigured) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TargetConfigured) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TargetConfigured) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetConfigured.Merge(m, src)
}
func (m *TargetConfigured) XXX_Size() int {
	return m.Size()
}
func (m *TargetConfigured) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetConfigured.DiscardUnknown(m)
}

var xxx_messageInfo_TargetConfigured proto.InternalMessageInfo

type File struct {
	// A sequence of prefixes to apply to the file name to construct a full path.
	// In most but not all cases, there will be 3 entries:
	//  1. A root output directory, eg "bazel-out"
	//  2. A configuration mnemonic, eg "k8-fastbuild"
	//  3. An output category, eg "genfiles"
	PathPrefix []string `protobuf:"bytes,4,rep,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
	// identifier indicating the nature of the file (e.g., "stdout", "stderr")
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to File:
	//	*File_Uri
	//	*File_Contents
	File isFile_File `protobuf_oneof:"file"`
	// Digest of the file, using the build tool's configured digest algorithm,
	// hex-encoded.
	Digest string `protobuf:"bytes,5,opt,name=digest,proto3" json:"digest,omitempty"`
	// Length of the file in bytes.
	Length int64 `protobuf:"varint,6,opt,name=length,proto3" json:"length,omitempty"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{13}
}
func (m *File) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return m.Size()
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

type isFile_File interface {
	isFile_File()
	MarshalTo([]byte) (int, error)
	Size() int
}

type File_Uri struct {
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3,oneof" json:"uri,omitempty"`
}
type File_Contents struct {
	Contents []byte `protobuf:"bytes,3,opt,name=contents,proto3,oneof" json:"contents,omitempty"`
}

func (*File_Uri) isFile_File()      {}
func (*File_Contents) isFile_File() {}

func (m *File) GetFile() isFile_File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *File) GetUri() string {
	if x, ok := m.GetFile().(*File_Uri); ok {
		return x.Uri
	}
	return ""
}

func (m *File) GetContents() []byte {
	if x, ok := m.GetFile().(*File_Contents); ok {
		return x.Contents
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*File) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*File_Uri)(nil),
		(*File_Contents)(nil),
	}
}

// Payload of a message to describe a set of files, usually build artifacts, to
// be referred to later by their name. In this way, files that occur identically
// as outputs of several targets have to be named only once.
type NamedSetOfFiles struct {
	// Files that belong to this named set of files.
	Files []*File `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	// Other named sets whose members also belong to this set.
	FileSets []*BuildEventId_NamedSetOfFilesId `protobuf:"bytes,2,rep,name=file_sets,json=fileSets,proto3" json:"file_sets,omitempty"`
}

func (m *NamedSetOfFiles) Reset()         { *m = NamedSetOfFiles{} }
func (m *NamedSetOfFiles) String() string { return proto.CompactTextString(m) }
func (*NamedSetOfFiles) ProtoMessage()    {}
func (*NamedSetOfFiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{14}
}
func (m *NamedSetOfFiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamedSetOfFiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NamedSetOfFiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamedSetOfFiles.Merge(m, src)
}
func (m *NamedSetOfFiles) XXX_Size() int {
	return m.Size()
}
func (m *NamedSetOfFiles) XXX_DiscardUnknown() {
	xxx_messageInfo_NamedSetOfFiles.DiscardUnknown(m)
}

var xxx_messageInfo_NamedSetOfFiles proto.InternalMessageInfo

// Payload of the event indicating the completion of an action. The main purpose
// of posting those events is to provide details on the root cause for a target
// failing; however, consumers of the build-event protocol must not assume
// that only failed actions are posted.
type ActionExecuted struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// The mnemonic of the action that was executed
	Type string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	// The exit code of the action, if it is available.
	ExitCode int32 `protobuf:"varint,2,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// Location where to find the standard output of the action
	// (e.g., a file path).
	Stdout *File `protobuf:"bytes,3,opt,name=stdout,proto3" json:"stdout,omitempty"`
	// Location where to find the standard error of the action
	// (e.g., a file path).
	Stderr *File `protobuf:"bytes,4,opt,name=stderr,proto3" json:"stderr,omitempty"`
	// Deprecated. This field is now present on ActionCompletedId.
	Label string `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"` // Deprecated: Do not use.
	// Deprecated. This field is now present on ActionCompletedId.
	Configuration *BuildEventId_ConfigurationId `protobuf:"bytes,7,opt,name=configuration,proto3" json:"configuration,omitempty"` // Deprecated: Do not use.
	// Primary output; only provided for successful actions.
	PrimaryOutput *File `protobuf:"bytes,6,opt,name=primary_output,json=primaryOutput,proto3" json:"primary_output,omitempty"`
	// The command-line of the action, if the action is a command.
	CommandLine []string `protobuf:"bytes,9,rep,name=command_line,json=commandLine,proto3" json:"command_line,omitempty"`
	// List of paths to log files
	ActionMetadataLogs []*File `protobuf:"bytes,10,rep,name=action_metadata_logs,json=actionMetadataLogs,proto3" json:"action_metadata_logs,omitempty"`
	// Only populated if success = false, and sometimes not even then.
	FailureDetail *failure_details.FailureDetail `protobuf:"bytes,11,opt,name=failure_detail,json=failureDetail,proto3" json:"failure_detail,omitempty"`
}

func (m *ActionExecuted) Reset()         { *m = ActionExecuted{} }
func (m *ActionExecuted) String() string { return proto.CompactTextString(m) }
func (*ActionExecuted) ProtoMessage()    {}
func (*ActionExecuted) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{15}
}
func (m *ActionExecuted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionExecuted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ActionExecuted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionExecuted.Merge(m, src)
}
func (m *ActionExecuted) XXX_Size() int {
	return m.Size()
}
func (m *ActionExecuted) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionExecuted.DiscardUnknown(m)
}

var xxx_messageInfo_ActionExecuted proto.InternalMessageInfo

// Collection of all output files belonging to that output group.
type OutputGroup struct {
	// Name of the output group
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// List of file sets that belong to this output group as well.
	FileSets []*BuildEventId_NamedSetOfFilesId `protobuf:"bytes,3,rep,name=file_sets,json=fileSets,proto3" json:"file_sets,omitempty"`
	// Indicates that one or more of the output group's files were not built
	// successfully (the generating action failed).
	Incomplete bool `protobuf:"varint,4,opt,name=incomplete,proto3" json:"incomplete,omitempty"`
}

func (m *OutputGroup) Reset()         { *m = OutputGroup{} }
func (m *OutputGroup) String() string { return proto.CompactTextString(m) }
func (*OutputGroup) ProtoMessage()    {}
func (*OutputGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{16}
}
func (m *OutputGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutputGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OutputGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputGroup.Merge(m, src)
}
func (m *OutputGroup) XXX_Size() int {
	return m.Size()
}
func (m *OutputGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputGroup.DiscardUnknown(m)
}

var xxx_messageInfo_OutputGroup proto.InternalMessageInfo

// Payload of the event indicating the completion of a target. The target is
// specified in the id. If the target failed the root causes are provided as
// children events.
type TargetComplete struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// The kind of target (e.g.,  e.g. "cc_library rule", "source file",
	// "generated file") where the completion is reported.
	// Deprecated: use the target_kind field in TargetConfigured instead.
	TargetKind string `protobuf:"bytes,5,opt,name=target_kind,json=targetKind,proto3" json:"target_kind,omitempty"` // Deprecated: Do not use.
	// The size of the test, if the target is a test target. Unset otherwise.
	// Deprecated: use the test_size field in TargetConfigured instead.
	TestSize TestSize `protobuf:"varint,6,opt,name=test_size,json=testSize,proto3,enum=build_event_stream.TestSize" json:"test_size,omitempty"` // Deprecated: Do not use.
	// The output files are arranged by their output group. If an output file
	// is part of multiple output groups, it appears once in each output
	// group.
	OutputGroup []*OutputGroup `protobuf:"bytes,2,rep,name=output_group,json=outputGroup,proto3" json:"output_group,omitempty"`
	// Temporarily, also report the important outputs directly. This is only to
	// allow existing clients help transition to the deduplicated representation;
	// new clients should not use it.
	ImportantOutput []*File `protobuf:"bytes,4,rep,name=important_output,json=importantOutput,proto3" json:"important_output,omitempty"` // Deprecated: Do not use.
	// Report output artifacts (referenced transitively via output_group) which
	// emit directories instead of singleton files. These directory_output entries
	// will never include a uri.
	DirectoryOutput []*File `protobuf:"bytes,8,rep,name=directory_output,json=directoryOutput,proto3" json:"directory_output,omitempty"`
	// List of tags associated with this configured target.
	Tag []string `protobuf:"bytes,3,rep,name=tag,proto3" json:"tag,omitempty"`
	// The timeout specified for test actions under this configured target.
	//
	// Deprecated, use `test_timeout` instead.
	//
	// TODO(yannic): Remove.
	TestTimeoutSeconds int64 `protobuf:"varint,7,opt,name=test_timeout_seconds,json=testTimeoutSeconds,proto3" json:"test_timeout_seconds,omitempty"` // Deprecated: Do not use.
	// The timeout specified for test actions under this configured target.
	TestTimeout *types.Duration `protobuf:"bytes,10,opt,name=test_timeout,json=testTimeout,proto3" json:"test_timeout,omitempty"`
	// Failure information about the target, only populated if success is false,
	// and sometimes not even then. Equal to one of the ActionExecuted
	// failure_detail fields for one of the root cause ActionExecuted events.
	FailureDetail *failure_details.FailureDetail `protobuf:"bytes,9,opt,name=failure_detail,json=failureDetail,proto3" json:"failure_detail,omitempty"`
}

func (m *TargetComplete) Reset()         { *m = TargetComplete{} }
func (m *TargetComplete) String() string { return proto.CompactTextString(m) }
func (*TargetComplete) ProtoMessage()    {}
func (*TargetComplete) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{17}
}
func (m *TargetComplete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TargetComplete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TargetComplete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetComplete.Merge(m, src)
}
func (m *TargetComplete) XXX_Size() int {
	return m.Size()
}
func (m *TargetComplete) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetComplete.DiscardUnknown(m)
}

var xxx_messageInfo_TargetComplete proto.InternalMessageInfo

// Payload on events reporting about individual test action.
type TestResult struct {
	// The status of this test.
	Status TestStatus `protobuf:"varint,5,opt,name=status,proto3,enum=build_event_stream.TestStatus" json:"status,omitempty"`
	// Additional details about the status of the test. This is intended for
	// user display and must not be parsed.
	StatusDetails string `protobuf:"bytes,9,opt,name=status_details,json=statusDetails,proto3" json:"status_details,omitempty"`
	// True, if the reported attempt is taken from the tool's local cache.
	CachedLocally bool `protobuf:"varint,4,opt,name=cached_locally,json=cachedLocally,proto3" json:"cached_locally,omitempty"`
	// Time in milliseconds since the epoch at which the test attempt was started.
	// Note: for cached test results, this is time can be before the start of the
	// build.
	//
	// Deprecated, use `test_attempt_start` instead.
	//
	// TODO(yannic): Remove.
	TestAttemptStartMillisEpoch int64 `protobuf:"varint,6,opt,name=test_attempt_start_millis_epoch,json=testAttemptStartMillisEpoch,proto3" json:"test_attempt_start_millis_epoch,omitempty"` // Deprecated: Do not use.
	// Time at which the test attempt was started.
	// Note: for cached test results, this is time can be before the start of the
	// build.
	TestAttemptStart *types.Timestamp `protobuf:"bytes,10,opt,name=test_attempt_start,json=testAttemptStart,proto3" json:"test_attempt_start,omitempty"`
	// Time the test took to run. For locally cached results, this is the time
	// the cached invocation took when it was invoked.
	//
	// Deprecated, use `test_attempt_duration` instead.
	//
	// TODO(yannic): Remove.
	TestAttemptDurationMillis int64 `protobuf:"varint,3,opt,name=test_attempt_duration_millis,json=testAttemptDurationMillis,proto3" json:"test_attempt_duration_millis,omitempty"` // Deprecated: Do not use.
	// Time the test took to run. For locally cached results, this is the time
	// the cached invocation took when it was invoked.
	TestAttemptDuration *types.Duration `protobuf:"bytes,11,opt,name=test_attempt_duration,json=testAttemptDuration,proto3" json:"test_attempt_duration,omitempty"`
	// Files (logs, test.xml, undeclared outputs, etc) generated by that test
	// action.
	TestActionOutput []*File `protobuf:"bytes,2,rep,name=test_action_output,json=testActionOutput,proto3" json:"test_action_output,omitempty"`
	// Warnings generated by that test action.
	Warning       []string                  `protobuf:"bytes,7,rep,name=warning,proto3" json:"warning,omitempty"`
	ExecutionInfo *TestResult_ExecutionInfo `protobuf:"bytes,8,opt,name=execution_info,json=executionInfo,proto3" json:"execution_info,omitempty"`
}

func (m *TestResult) Reset()         { *m = TestResult{} }
func (m *TestResult) String() string { return proto.CompactTextString(m) }
func (*TestResult) ProtoMessage()    {}
func (*TestResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{18}
}
func (m *TestResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TestResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResult.Merge(m, src)
}
func (m *TestResult) XXX_Size() int {
	return m.Size()
}
func (m *TestResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResult.DiscardUnknown(m)
}

var xxx_messageInfo_TestResult proto.InternalMessageInfo

// Message providing optional meta data on the execution of the test action,
// if available.
type TestResult_ExecutionInfo struct {
	// Deprecated, use TargetComplete.test_timeout instead.
	TimeoutSeconds int32 `protobuf:"varint,1,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"` // Deprecated: Do not use.
	// Name of the strategy to execute this test action (e.g., "local",
	// "remote")
	Strategy string `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
	// True, if the reported attempt was a cache hit in a remote cache.
	CachedRemotely bool `protobuf:"varint,6,opt,name=cached_remotely,json=cachedRemotely,proto3" json:"cached_remotely,omitempty"`
	// The exit code of the test action.
	ExitCode int32 `protobuf:"varint,7,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// The hostname of the machine where the test action was executed (in case
	// of remote execution), if known.
	Hostname        string                                    `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	TimingBreakdown *TestResult_ExecutionInfo_TimingBreakdown `protobuf:"bytes,4,opt,name=timing_breakdown,json=timingBreakdown,proto3" json:"timing_breakdown,omitempty"`
	ResourceUsage   []*TestResult_ExecutionInfo_ResourceUsage `protobuf:"bytes,5,rep,name=resource_usage,json=resourceUsage,proto3" json:"resource_usage,omitempty"`
}

func (m *TestResult_ExecutionInfo) Reset()         { *m = TestResult_ExecutionInfo{} }
func (m *TestResult_ExecutionInfo) String() string { return proto.CompactTextString(m) }
func (*TestResult_ExecutionInfo) ProtoMessage()    {}
func (*TestResult_ExecutionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{18, 0}
}
func (m *TestResult_ExecutionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestResult_ExecutionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TestResult_ExecutionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResult_ExecutionInfo.Merge(m, src)
}
func (m *TestResult_ExecutionInfo) XXX_Size() int {
	return m.Size()
}
func (m *TestResult_ExecutionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResult_ExecutionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TestResult_ExecutionInfo proto.InternalMessageInfo

// Represents a hierarchical timing breakdown of an activity.
// The top level time should be the total time of the activity.
// Invariant: `time` >= sum of `time`s of all direct children.
type TestResult_ExecutionInfo_TimingBreakdown struct {
	Child []*TestResult_ExecutionInfo_TimingBreakdown `protobuf:"bytes,1,rep,name=child,proto3" json:"child,omitempty"`
	Name  string                                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Deprecated, use `time` instead.
	//
	// TODO(yannic): Remove.
	TimeMillis int64           `protobuf:"varint,3,opt,name=time_millis,json=timeMillis,proto3" json:"time_millis,omitempty"` // Deprecated: Do not use.
	Time       *types.Duration `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *TestResult_ExecutionInfo_TimingBreakdown) Reset() {
	*m = TestResult_ExecutionInfo_TimingBreakdown{}
}
func (m *TestResult_ExecutionInfo_TimingBreakdown) String() string { return proto.CompactTextString(m) }
func (*TestResult_ExecutionInfo_TimingBreakdown) ProtoMessage()    {}
func (*TestResult_ExecutionInfo_TimingBreakdown) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{18, 0, 0}
}
func (m *TestResult_ExecutionInfo_TimingBreakdown) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestResult_ExecutionInfo_TimingBreakdown) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TestResult_ExecutionInfo_TimingBreakdown) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResult_ExecutionInfo_TimingBreakdown.Merge(m, src)
}
func (m *TestResult_ExecutionInfo_TimingBreakdown) XXX_Size() int {
	return m.Size()
}
func (m *TestResult_ExecutionInfo_TimingBreakdown) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResult_ExecutionInfo_TimingBreakdown.DiscardUnknown(m)
}

var xxx_messageInfo_TestResult_ExecutionInfo_TimingBreakdown proto.InternalMessageInfo

type TestResult_ExecutionInfo_ResourceUsage struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *TestResult_ExecutionInfo_ResourceUsage) Reset() {
	*m = TestResult_ExecutionInfo_ResourceUsage{}
}
func (m *TestResult_ExecutionInfo_ResourceUsage) String() string { return proto.CompactTextString(m) }
func (*TestResult_ExecutionInfo_ResourceUsage) ProtoMessage()    {}
func (*TestResult_ExecutionInfo_ResourceUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{18, 0, 1}
}
func (m *TestResult_ExecutionInfo_ResourceUsage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestResult_ExecutionInfo_ResourceUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TestResult_ExecutionInfo_ResourceUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResult_ExecutionInfo_ResourceUsage.Merge(m, src)
}
func (m *TestResult_ExecutionInfo_ResourceUsage) XXX_Size() int {
	return m.Size()
}
func (m *TestResult_ExecutionInfo_ResourceUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResult_ExecutionInfo_ResourceUsage.DiscardUnknown(m)
}

var xxx_messageInfo_TestResult_ExecutionInfo_ResourceUsage proto.InternalMessageInfo

// Payload of the event summarizing a test.
type TestSummary struct {
	// Wrapper around BlazeTestStatus to support importing that enum to proto3.
	// Overall status of test, accumulated over all runs, shards, and attempts.
	OverallStatus TestStatus `protobuf:"varint,5,opt,name=overall_status,json=overallStatus,proto3,enum=build_event_stream.TestStatus" json:"overall_status,omitempty"`
	// Total number of shard attempts.
	// E.g., if a target has 4 runs, 3 shards, each with 2 attempts,
	// then total_run_count will be 4*3*2 = 24.
	TotalRunCount int32 `protobuf:"varint,1,opt,name=total_run_count,json=totalRunCount,proto3" json:"total_run_count,omitempty"`
	// Value of runs_per_test for the test.
	RunCount int32 `protobuf:"varint,10,opt,name=run_count,json=runCount,proto3" json:"run_count,omitempty"`
	// Number of attempts.
	// If there are a different number of attempts per shard, the highest attempt
	// count across all shards for each run is used.
	AttemptCount int32 `protobuf:"varint,15,opt,name=attempt_count,json=attemptCount,proto3" json:"attempt_count,omitempty"`
	// Number of shards.
	ShardCount int32 `protobuf:"varint,11,opt,name=shard_count,json=shardCount,proto3" json:"shard_count,omitempty"`
	// Path to logs of passed runs.
	Passed []*File `protobuf:"bytes,3,rep,name=passed,proto3" json:"passed,omitempty"`
	// Path to logs of failed runs;
	Failed []*File `protobuf:"bytes,4,rep,name=failed,proto3" json:"failed,omitempty"`
	// Total number of cached test actions
	TotalNumCached int32 `protobuf:"varint,6,opt,name=total_num_cached,json=totalNumCached,proto3" json:"total_num_cached,omitempty"`
	// When the test first started running.
	//
	// Deprecated, use `first_start_time` instead.
	//
	// TODO(yannic): Remove.
	FirstStartTimeMillis int64 `protobuf:"varint,7,opt,name=first_start_time_millis,json=firstStartTimeMillis,proto3" json:"first_start_time_millis,omitempty"` // Deprecated: Do not use.
	// When the test first started running.
	FirstStartTime *types.Timestamp `protobuf:"bytes,13,opt,name=first_start_time,json=firstStartTime,proto3" json:"first_start_time,omitempty"`
	// When the last test action completed.
	//
	// Deprecated, use `last_stop_time` instead.
	//
	// TODO(yannic): Remove.
	LastStopTimeMillis int64 `protobuf:"varint,8,opt,name=last_stop_time_millis,json=lastStopTimeMillis,proto3" json:"last_stop_time_millis,omitempty"` // Deprecated: Do not use.
	// When the test first started running.
	LastStopTime *types.Timestamp `protobuf:"bytes,14,opt,name=last_stop_time,json=lastStopTime,proto3" json:"last_stop_time,omitempty"`
	// The total runtime of the test.
	//
	// Deprecated, use `total_run` instead.
	//
	// TODO(yannic): Remove.
	TotalRunDurationMillis int64 `protobuf:"varint,9,opt,name=total_run_duration_millis,json=totalRunDurationMillis,proto3" json:"total_run_duration_millis,omitempty"` // Deprecated: Do not use.
	// The total runtime of the test.
	TotalRunDuration *types.Duration `protobuf:"bytes,12,opt,name=total_run_duration,json=totalRunDuration,proto3" json:"total_run_duration,omitempty"`
}

func (m *TestSummary) Reset()         { *m = TestSummary{} }
func (m *TestSummary) String() string { return proto.CompactTextString(m) }
func (*TestSummary) ProtoMessage()    {}
func (*TestSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{19}
}
func (m *TestSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TestSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSummary.Merge(m, src)
}
func (m *TestSummary) XXX_Size() int {
	return m.Size()
}
func (m *TestSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSummary.DiscardUnknown(m)
}

var xxx_messageInfo_TestSummary proto.InternalMessageInfo

// Payload of the event summarizing a target (test or non-test).
type TargetSummary struct {
	// Conjunction of TargetComplete events for this target, including aspects.
	OverallBuildSuccess bool `protobuf:"varint,1,opt,name=overall_build_success,json=overallBuildSuccess,proto3" json:"overall_build_success,omitempty"`
	// Repeats TestSummary's overall_status if available.
	OverallTestStatus TestStatus `protobuf:"varint,2,opt,name=overall_test_status,json=overallTestStatus,proto3,enum=build_event_stream.TestStatus" json:"overall_test_status,omitempty"`
}

func (m *TargetSummary) Reset()         { *m = TargetSummary{} }
func (m *TargetSummary) String() string { return proto.CompactTextString(m) }
func (*TargetSummary) ProtoMessage()    {}
func (*TargetSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{20}
}
func (m *TargetSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TargetSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TargetSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetSummary.Merge(m, src)
}
func (m *TargetSummary) XXX_Size() int {
	return m.Size()
}
func (m *TargetSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetSummary.DiscardUnknown(m)
}

var xxx_messageInfo_TargetSummary proto.InternalMessageInfo

// Event indicating the end of a build.
type BuildFinished struct {
	// If the build succeeded or failed.
	OverallSuccess bool `protobuf:"varint,1,opt,name=overall_success,json=overallSuccess,proto3" json:"overall_success,omitempty"` // Deprecated: Do not use.
	// The overall status of the build. A build was successful iff
	// ExitCode.code equals 0.
	ExitCode *BuildFinished_ExitCode `protobuf:"bytes,3,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// End of the build in ms since the epoch.
	//
	// Deprecated, use `finish_time` instead.
	//
	// TODO(yannic): Remove.
	FinishTimeMillis int64 `protobuf:"varint,2,opt,name=finish_time_millis,json=finishTimeMillis,proto3" json:"finish_time_millis,omitempty"` // Deprecated: Do not use.
	// End of the build.
	FinishTime    *types.Timestamp             `protobuf:"bytes,5,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	AnomalyReport *BuildFinished_AnomalyReport `protobuf:"bytes,4,opt,name=anomaly_report,json=anomalyReport,proto3" json:"anomaly_report,omitempty"` // Deprecated: Do not use.
}

func (m *BuildFinished) Reset()         { *m = BuildFinished{} }
func (m *BuildFinished) String() string { return proto.CompactTextString(m) }
func (*BuildFinished) ProtoMessage()    {}
func (*BuildFinished) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{21}
}
func (m *BuildFinished) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildFinished) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildFinished) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildFinished.Merge(m, src)
}
func (m *BuildFinished) XXX_Size() int {
	return m.Size()
}
func (m *BuildFinished) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildFinished.DiscardUnknown(m)
}

var xxx_messageInfo_BuildFinished proto.InternalMessageInfo

// Exit code of a build. The possible values correspond to the predefined
// codes in bazel's lib.ExitCode class, as well as any custom exit code a
// module might define. The predefined exit codes are subject to change (but
// rarely do) and are not part of the public API.
//
// A build was successful iff ExitCode.code equals 0.
type BuildFinished_ExitCode struct {
	// The name of the exit code.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The exit code.
	Code int32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *BuildFinished_ExitCode) Reset()         { *m = BuildFinished_ExitCode{} }
func (m *BuildFinished_ExitCode) String() string { return proto.CompactTextString(m) }
func (*BuildFinished_ExitCode) ProtoMessage()    {}
func (*BuildFinished_ExitCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{21, 0}
}
func (m *BuildFinished_ExitCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildFinished_ExitCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildFinished_ExitCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildFinished_ExitCode.Merge(m, src)
}
func (m *BuildFinished_ExitCode) XXX_Size() int {
	return m.Size()
}
func (m *BuildFinished_ExitCode) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildFinished_ExitCode.DiscardUnknown(m)
}

var xxx_messageInfo_BuildFinished_ExitCode proto.InternalMessageInfo

// Things that happened during the build that could be of interest.
type BuildFinished_AnomalyReport struct {
	// Was the build suspended at any time during the build.
	// Examples of suspensions are SIGSTOP, or the hardware being put to sleep.
	// If was_suspended is true, then most of the timings for this build are
	// suspect.
	// NOTE: This is no longer set and is deprecated.
	WasSuspended bool `protobuf:"varint,1,opt,name=was_suspended,json=wasSuspended,proto3" json:"was_suspended,omitempty"`
}

func (m *BuildFinished_AnomalyReport) Reset()         { *m = BuildFinished_AnomalyReport{} }
func (m *BuildFinished_AnomalyReport) String() string { return proto.CompactTextString(m) }
func (*BuildFinished_AnomalyReport) ProtoMessage()    {}
func (*BuildFinished_AnomalyReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{21, 1}
}
func (m *BuildFinished_AnomalyReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildFinished_AnomalyReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildFinished_AnomalyReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildFinished_AnomalyReport.Merge(m, src)
}
func (m *BuildFinished_AnomalyReport) XXX_Size() int {
	return m.Size()
}
func (m *BuildFinished_AnomalyReport) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildFinished_AnomalyReport.DiscardUnknown(m)
}

var xxx_messageInfo_BuildFinished_AnomalyReport proto.InternalMessageInfo

type BuildMetrics struct {
	ActionSummary     *BuildMetrics_ActionSummary     `protobuf:"bytes,1,opt,name=action_summary,json=actionSummary,proto3" json:"action_summary,omitempty"`
	MemoryMetrics     *BuildMetrics_MemoryMetrics     `protobuf:"bytes,2,opt,name=memory_metrics,json=memoryMetrics,proto3" json:"memory_metrics,omitempty"`
	TargetMetrics     *BuildMetrics_TargetMetrics     `protobuf:"bytes,3,opt,name=target_metrics,json=targetMetrics,proto3" json:"target_metrics,omitempty"`
	PackageMetrics    *BuildMetrics_PackageMetrics    `protobuf:"bytes,4,opt,name=package_metrics,json=packageMetrics,proto3" json:"package_metrics,omitempty"`
	TimingMetrics     *BuildMetrics_TimingMetrics     `protobuf:"bytes,5,opt,name=timing_metrics,json=timingMetrics,proto3" json:"timing_metrics,omitempty"`
	CumulativeMetrics *BuildMetrics_CumulativeMetrics `protobuf:"bytes,6,opt,name=cumulative_metrics,json=cumulativeMetrics,proto3" json:"cumulative_metrics,omitempty"`
	ArtifactMetrics   *BuildMetrics_ArtifactMetrics   `protobuf:"bytes,7,opt,name=artifact_metrics,json=artifactMetrics,proto3" json:"artifact_metrics,omitempty"`
	BuildGraphMetrics *BuildMetrics_BuildGraphMetrics `protobuf:"bytes,8,opt,name=build_graph_metrics,json=buildGraphMetrics,proto3" json:"build_graph_metrics,omitempty"`
	WorkerMetrics     []*BuildMetrics_WorkerMetrics   `protobuf:"bytes,9,rep,name=worker_metrics,json=workerMetrics,proto3" json:"worker_metrics,omitempty"`
}

func (m *BuildMetrics) Reset()         { *m = BuildMetrics{} }
func (m *BuildMetrics) String() string { return proto.CompactTextString(m) }
func (*BuildMetrics) ProtoMessage()    {}
func (*BuildMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{22}
}
func (m *BuildMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildMetrics.Merge(m, src)
}
func (m *BuildMetrics) XXX_Size() int {
	return m.Size()
}
func (m *BuildMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_BuildMetrics proto.InternalMessageInfo

type BuildMetrics_ActionSummary struct {
	// The total number of actions created and registered during the build,
	// including both aspects and configured targets. This metric includes
	// unused actions that were constructed but not executed during this build.
	// It does not include actions that were created on prior builds that are
	// still valid, even if those actions had to be re-executed on this build.
	// For the total number of actions that would be created if this invocation
	// were "clean", see BuildGraphMetrics below.
	ActionsCreated int64 `protobuf:"varint,1,opt,name=actions_created,json=actionsCreated,proto3" json:"actions_created,omitempty"`
	// The total number of actions created this build just by configured
	// targets. Used mainly to allow consumers of actions_created, which used to
	// not include aspects' actions, to normalize across the Blaze release that
	// switched actions_created to include all created actions.
	ActionsCreatedNotIncludingAspects int64 `protobuf:"varint,3,opt,name=actions_created_not_including_aspects,json=actionsCreatedNotIncludingAspects,proto3" json:"actions_created_not_including_aspects,omitempty"`
	// The total number of actions executed during the build. This includes any
	// remote cache hits, but excludes local action cache hits.
	ActionsExecuted int64 `protobuf:"varint,2,opt,name=actions_executed,json=actionsExecuted,proto3" json:"actions_executed,omitempty"`
	// Contains the top N actions by number of actions executed.
	ActionData []*BuildMetrics_ActionSummary_ActionData `protobuf:"bytes,4,rep,name=action_data,json=actionData,proto3" json:"action_data,omitempty"`
	// Deprecated. The total number of remote cache hits.
	RemoteCacheHits int64                                     `protobuf:"varint,5,opt,name=remote_cache_hits,json=remoteCacheHits,proto3" json:"remote_cache_hits,omitempty"` // Deprecated: Do not use.
	RunnerCount     []*BuildMetrics_ActionSummary_RunnerCount `protobuf:"bytes,6,rep,name=runner_count,json=runnerCount,proto3" json:"runner_count,omitempty"`
}

func (m *BuildMetrics_ActionSummary) Reset()         { *m = BuildMetrics_ActionSummary{} }
func (m *BuildMetrics_ActionSummary) String() string { return proto.CompactTextString(m) }
func (*BuildMetrics_ActionSummary) ProtoMessage()    {}
func (*BuildMetrics_ActionSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{22, 0}
}
func (m *BuildMetrics_ActionSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildMetrics_ActionSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildMetrics_ActionSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildMetrics_ActionSummary.Merge(m, src)
}
func (m *BuildMetrics_ActionSummary) XXX_Size() int {
	return m.Size()
}
func (m *BuildMetrics_ActionSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildMetrics_ActionSummary.DiscardUnknown(m)
}

var xxx_messageInfo_BuildMetrics_ActionSummary proto.InternalMessageInfo

type BuildMetrics_ActionSummary_ActionData struct {
	Mnemonic string `protobuf:"bytes,1,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	// The total number of actions of this type executed during the build. As
	// above, includes remote cache hits but excludes local action cache hits.
	ActionsExecuted int64 `protobuf:"varint,2,opt,name=actions_executed,json=actionsExecuted,proto3" json:"actions_executed,omitempty"`
	// When the first action of this type started being executed, in
	// milliseconds from the epoch.
	FirstStartedMs int64 `protobuf:"varint,3,opt,name=first_started_ms,json=firstStartedMs,proto3" json:"first_started_ms,omitempty"`
	// When the last action of this type ended being executed, in
	// milliseconds from the epoch.
	LastEndedMs int64 `protobuf:"varint,4,opt,name=last_ended_ms,json=lastEndedMs,proto3" json:"last_ended_ms,omitempty"`
}

func (m *BuildMetrics_ActionSummary_ActionData) Reset()         { *m = BuildMetrics_ActionSummary_ActionData{} }
func (m *BuildMetrics_ActionSummary_ActionData) String() string { return proto.CompactTextString(m) }
func (*BuildMetrics_ActionSummary_ActionData) ProtoMessage()    {}
func (*BuildMetrics_ActionSummary_ActionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{22, 0, 0}
}
func (m *BuildMetrics_ActionSummary_ActionData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildMetrics_ActionSummary_ActionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildMetrics_ActionSummary_ActionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildMetrics_ActionSummary_ActionData.Merge(m, src)
}
func (m *BuildMetrics_ActionSummary_ActionData) XXX_Size() int {
	return m.Size()
}
func (m *BuildMetrics_ActionSummary_ActionData) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildMetrics_ActionSummary_ActionData.DiscardUnknown(m)
}

var xxx_messageInfo_BuildMetrics_ActionSummary_ActionData proto.InternalMessageInfo

type BuildMetrics_ActionSummary_RunnerCount struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *BuildMetrics_ActionSummary_RunnerCount) Reset() {
	*m = BuildMetrics_ActionSummary_RunnerCount{}
}
func (m *BuildMetrics_ActionSummary_RunnerCount) String() string { return proto.CompactTextString(m) }
func (*BuildMetrics_ActionSummary_RunnerCount) ProtoMessage()    {}
func (*BuildMetrics_ActionSummary_RunnerCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{22, 0, 1}
}
func (m *BuildMetrics_ActionSummary_RunnerCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildMetrics_ActionSummary_RunnerCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildMetrics_ActionSummary_RunnerCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildMetrics_ActionSummary_RunnerCount.Merge(m, src)
}
func (m *BuildMetrics_ActionSummary_RunnerCount) XXX_Size() int {
	return m.Size()
}
func (m *BuildMetrics_ActionSummary_RunnerCount) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildMetrics_ActionSummary_RunnerCount.DiscardUnknown(m)
}

var xxx_messageInfo_BuildMetrics_ActionSummary_RunnerCount proto.InternalMessageInfo

type BuildMetrics_MemoryMetrics struct {
	// Size of the JVM heap post build in bytes. This is only collected if
	// --memory_profile is set, since it forces a full GC.
	UsedHeapSizePostBuild int64 `protobuf:"varint,1,opt,name=used_heap_size_post_build,json=usedHeapSizePostBuild,proto3" json:"used_heap_size_post_build,omitempty"`
	// Size of the peak JVM heap size in bytes post GC. Note that this reports 0
	// if there was no major GC during the build.
	PeakPostGcHeapSize int64 `protobuf:"varint,2,opt,name=peak_post_gc_heap_size,json=peakPostGcHeapSize,proto3" json:"peak_post_gc_heap_size,omitempty"`
	// Size of the peak tenured space JVM heap size event in bytes post GC. Note
	// that this reports 0 if there was no major GC during the build.
	PeakPostGcTenuredSpaceHeapSize int64                                        `protobuf:"varint,4,opt,name=peak_post_gc_tenured_space_heap_size,json=peakPostGcTenuredSpaceHeapSize,proto3" json:"peak_post_gc_tenured_space_heap_size,omitempty"`
	GarbageMetrics                 []*BuildMetrics_MemoryMetrics_GarbageMetrics `protobuf:"bytes,3,rep,name=garbage_metrics,json=garbageMetrics,proto3" json:"garbage_metrics,omitempty"`
}

func (m *BuildMetrics_MemoryMetrics) Reset()         { *m = BuildMetrics_MemoryMetrics{} }
func (m *BuildMetrics_MemoryMetrics) String() string { return proto.CompactTextString(m) }
func (*BuildMetrics_MemoryMetrics) ProtoMessage()    {}
func (*BuildMetrics_MemoryMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{22, 1}
}
func (m *BuildMetrics_MemoryMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildMetrics_MemoryMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildMetrics_MemoryMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildMetrics_MemoryMetrics.Merge(m, src)
}
func (m *BuildMetrics_MemoryMetrics) XXX_Size() int {
	return m.Size()
}
func (m *BuildMetrics_MemoryMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildMetrics_MemoryMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_BuildMetrics_MemoryMetrics proto.InternalMessageInfo

type BuildMetrics_MemoryMetrics_GarbageMetrics struct {
	// Type of garbage collected, e.g. G1 Old Gen.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Number of bytes of garbage of the given type collected during this
	// invocation.
	GarbageCollected int64 `protobuf:"varint,2,opt,name=garbage_collected,json=garbageCollected,proto3" json:"garbage_collected,omitempty"`
}

func (m *BuildMetrics_MemoryMetrics_GarbageMetrics) Reset() {
	*m = BuildMetrics_MemoryMetrics_GarbageMetrics{}
}
func (m *BuildMetrics_MemoryMetrics_GarbageMetrics) String() string {
	return proto.CompactTextString(m)
}
func (*BuildMetrics_MemoryMetrics_GarbageMetrics) ProtoMessage() {}
func (*BuildMetrics_MemoryMetrics_GarbageMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{22, 1, 0}
}
func (m *BuildMetrics_MemoryMetrics_GarbageMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildMetrics_MemoryMetrics_GarbageMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildMetrics_MemoryMetrics_GarbageMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildMetrics_MemoryMetrics_GarbageMetrics.Merge(m, src)
}
func (m *BuildMetrics_MemoryMetrics_GarbageMetrics) XXX_Size() int {
	return m.Size()
}
func (m *BuildMetrics_MemoryMetrics_GarbageMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildMetrics_MemoryMetrics_GarbageMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_BuildMetrics_MemoryMetrics_GarbageMetrics proto.InternalMessageInfo

type BuildMetrics_TargetMetrics struct {
	// DEPRECATED
	// No longer populated. It never measured what it was supposed to (targets
	// loaded): it counted targets that were analyzed even if the underlying
	// package had not changed.
	// TODO(janakr): rename and remove.
	TargetsLoaded int64 `protobuf:"varint,1,opt,name=targets_loaded,json=targetsLoaded,proto3" json:"targets_loaded,omitempty"`
	// Number of targets/aspects configured during this build. Does not include
	// targets/aspects that were configured on prior builds on this server and
	// were cached. See BuildGraphMetrics below if you need that.
	TargetsConfigured int64 `protobuf:"varint,2,opt,name=targets_configured,json=targetsConfigured,proto3" json:"targets_configured,omitempty"`
	// Number of configured targets analyzed during this build. Does not include
	// aspects. Used mainly to allow consumers of targets_configured, which used
	// to not include aspects, to normalize across the Blaze release that
	// switched targets_configured to include aspects.
	TargetsConfiguredNotIncludingAspects int64 `protobuf:"varint,3,opt,name=targets_configured_not_including_aspects,json=targetsConfiguredNotIncludingAspects,proto3" json:"targets_configured_not_including_aspects,omitempty"`
}

func (m *BuildMetrics_TargetMetrics) Reset()         { *m = BuildMetrics_TargetMetrics{} }
func (m *BuildMetrics_TargetMetrics) String() string { return proto.CompactTextString(m) }
func (*BuildMetrics_TargetMetrics) ProtoMessage()    {}
func (*BuildMetrics_TargetMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{22, 2}
}
func (m *BuildMetrics_TargetMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildMetrics_TargetMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildMetrics_TargetMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildMetrics_TargetMetrics.Merge(m, src)
}
func (m *BuildMetrics_TargetMetrics) XXX_Size() int {
	return m.Size()
}
func (m *BuildMetrics_TargetMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildMetrics_TargetMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_BuildMetrics_TargetMetrics proto.InternalMessageInfo

type BuildMetrics_PackageMetrics struct {
	// Number of BUILD files (aka packages) successfully loaded during this
	// build.
	//
	// [For Bazel binaries built at source states] Before Dec 2021, this value
	// was the number of packages attempted to be loaded, for a particular
	// definition of "attempted".
	//
	// After Dec 2021, this value would sometimes overcount because the same
	// package could sometimes be attempted to be loaded multiple times due to
	// memory pressure.
	//
	// After Feb 2022, this value is the number of packages successfully
	// loaded.
	PackagesLoaded int64 `protobuf:"varint,1,opt,name=packages_loaded,json=packagesLoaded,proto3" json:"packages_loaded,omitempty"`
}

func (m *BuildMetrics_PackageMetrics) Reset()         { *m = BuildMetrics_PackageMetrics{} }
func (m *BuildMetrics_PackageMetrics) String() string { return proto.CompactTextString(m) }
func (*BuildMetrics_PackageMetrics) ProtoMessage()    {}
func (*BuildMetrics_PackageMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{22, 3}
}
func (m *BuildMetrics_PackageMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildMetrics_PackageMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildMetrics_PackageMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildMetrics_PackageMetrics.Merge(m, src)
}
func (m *BuildMetrics_PackageMetrics) XXX_Size() int {
	return m.Size()
}
func (m *BuildMetrics_PackageMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildMetrics_PackageMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_BuildMetrics_PackageMetrics proto.InternalMessageInfo

type BuildMetrics_TimingMetrics struct {
	// The CPU time in milliseconds consumed during this build.
	CpuTimeInMs int64 `protobuf:"varint,1,opt,name=cpu_time_in_ms,json=cpuTimeInMs,proto3" json:"cpu_time_in_ms,omitempty"`
	// The elapsed wall time in milliseconds during this build.
	WallTimeInMs int64 `protobuf:"varint,2,opt,name=wall_time_in_ms,json=wallTimeInMs,proto3" json:"wall_time_in_ms,omitempty"`
	// The elapsed wall time in milliseconds during the analysis phase.
	// When analysis and execution phases are interleaved, this measures the
	// elapsed time from the first analysis work to the last.
	AnalysisPhaseTimeInMs int64 `protobuf:"varint,3,opt,name=analysis_phase_time_in_ms,json=analysisPhaseTimeInMs,proto3" json:"analysis_phase_time_in_ms,omitempty"`
}

func (m *BuildMetrics_TimingMetrics) Reset()         { *m = BuildMetrics_TimingMetrics{} }
func (m *BuildMetrics_TimingMetrics) String() string { return proto.CompactTextString(m) }
func (*BuildMetrics_TimingMetrics) ProtoMessage()    {}
func (*BuildMetrics_TimingMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{22, 4}
}
func (m *BuildMetrics_TimingMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildMetrics_TimingMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildMetrics_TimingMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildMetrics_TimingMetrics.Merge(m, src)
}
func (m *BuildMetrics_TimingMetrics) XXX_Size() int {
	return m.Size()
}
func (m *BuildMetrics_TimingMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildMetrics_TimingMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_BuildMetrics_TimingMetrics proto.InternalMessageInfo

type BuildMetrics_CumulativeMetrics struct {
	// One-indexed number of "analyses" the server has run, including the
	// current one. Will be incremented for every build/test/cquery/etc. command
	// that reaches the analysis phase.
	NumAnalyses int32 `protobuf:"varint,11,opt,name=num_analyses,json=numAnalyses,proto3" json:"num_analyses,omitempty"`
	// One-indexed number of "builds" the server has run, including the current
	// one. Will be incremented for every build/test/run/etc. command that
	// reaches the execution phase.
	NumBuilds int32 `protobuf:"varint,12,opt,name=num_builds,json=numBuilds,proto3" json:"num_builds,omitempty"`
}

func (m *BuildMetrics_CumulativeMetrics) Reset()         { *m = BuildMetrics_CumulativeMetrics{} }
func (m *BuildMetrics_CumulativeMetrics) String() string { return proto.CompactTextString(m) }
func (*BuildMetrics_CumulativeMetrics) ProtoMessage()    {}
func (*BuildMetrics_CumulativeMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{22, 5}
}
func (m *BuildMetrics_CumulativeMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildMetrics_CumulativeMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildMetrics_CumulativeMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildMetrics_CumulativeMetrics.Merge(m, src)
}
func (m *BuildMetrics_CumulativeMetrics) XXX_Size() int {
	return m.Size()
}
func (m *BuildMetrics_CumulativeMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildMetrics_CumulativeMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_BuildMetrics_CumulativeMetrics proto.InternalMessageInfo

type BuildMetrics_ArtifactMetrics struct {
	// Measures all source files newly read this build. Does not include
	// unchanged sources on incremental builds.
	SourceArtifactsRead *BuildMetrics_ArtifactMetrics_FilesMetric `protobuf:"bytes,2,opt,name=source_artifacts_read,json=sourceArtifactsRead,proto3" json:"source_artifacts_read,omitempty"`
	// Measures all output artifacts from executed actions. This includes
	// actions that were cached locally (via the action cache) or remotely (via
	// a remote cache or executor), but does *not* include outputs of actions
	// that were cached internally in Skyframe.
	OutputArtifactsSeen *BuildMetrics_ArtifactMetrics_FilesMetric `protobuf:"bytes,3,opt,name=output_artifacts_seen,json=outputArtifactsSeen,proto3" json:"output_artifacts_seen,omitempty"`
	// Measures all output artifacts from actions that were cached locally
	// via the action cache. These artifacts were already present on disk at the
	// start of the build. Does not include Skyframe-cached actions' outputs.
	OutputArtifactsFromActionCache *BuildMetrics_ArtifactMetrics_FilesMetric `protobuf:"bytes,4,opt,name=output_artifacts_from_action_cache,json=outputArtifactsFromActionCache,proto3" json:"output_artifacts_from_action_cache,omitempty"`
	// Measures all artifacts that belong to a top-level output group. Does not
	// deduplicate, so if there are two top-level targets in this build that
	// share an artifact, it will be counted twice.
	TopLevelArtifacts *BuildMetrics_ArtifactMetrics_FilesMetric `protobuf:"bytes,5,opt,name=top_level_artifacts,json=topLevelArtifacts,proto3" json:"top_level_artifacts,omitempty"`
}

func (m *BuildMetrics_ArtifactMetrics) Reset()         { *m = BuildMetrics_ArtifactMetrics{} }
func (m *BuildMetrics_ArtifactMetrics) String() string { return proto.CompactTextString(m) }
func (*BuildMetrics_ArtifactMetrics) ProtoMessage()    {}
func (*BuildMetrics_ArtifactMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{22, 6}
}
func (m *BuildMetrics_ArtifactMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildMetrics_ArtifactMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildMetrics_ArtifactMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildMetrics_ArtifactMetrics.Merge(m, src)
}
func (m *BuildMetrics_ArtifactMetrics) XXX_Size() int {
	return m.Size()
}
func (m *BuildMetrics_ArtifactMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildMetrics_ArtifactMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_BuildMetrics_ArtifactMetrics proto.InternalMessageInfo

type BuildMetrics_ArtifactMetrics_FilesMetric struct {
	SizeInBytes int64 `protobuf:"varint,1,opt,name=size_in_bytes,json=sizeInBytes,proto3" json:"size_in_bytes,omitempty"`
	Count       int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *BuildMetrics_ArtifactMetrics_FilesMetric) Reset() {
	*m = BuildMetrics_ArtifactMetrics_FilesMetric{}
}
func (m *BuildMetrics_ArtifactMetrics_FilesMetric) String() string { return proto.CompactTextString(m) }
func (*BuildMetrics_ArtifactMetrics_FilesMetric) ProtoMessage()    {}
func (*BuildMetrics_ArtifactMetrics_FilesMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{22, 6, 0}
}
func (m *BuildMetrics_ArtifactMetrics_FilesMetric) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildMetrics_ArtifactMetrics_FilesMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildMetrics_ArtifactMetrics_FilesMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildMetrics_ArtifactMetrics_FilesMetric.Merge(m, src)
}
func (m *BuildMetrics_ArtifactMetrics_FilesMetric) XXX_Size() int {
	return m.Size()
}
func (m *BuildMetrics_ArtifactMetrics_FilesMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildMetrics_ArtifactMetrics_FilesMetric.DiscardUnknown(m)
}

var xxx_messageInfo_BuildMetrics_ArtifactMetrics_FilesMetric proto.InternalMessageInfo

// Information about the size and shape of the build graph. Some fields may
// not be populated if Bazel was able to skip steps due to caching.
type BuildMetrics_BuildGraphMetrics struct {
	// How many configured targets/aspects were in this build, including any
	// that were analyzed on a prior build and are still valid. May not be
	// populated if analysis phase was fully cached. Note: for historical
	// reasons this includes input/output files and other configured targets
	// that do not actually have associated actions.
	ActionLookupValueCount int32 `protobuf:"varint,1,opt,name=action_lookup_value_count,json=actionLookupValueCount,proto3" json:"action_lookup_value_count,omitempty"`
	// How many configured targets alone were in this build: always at most
	// action_lookup_value_count. Useful mainly for historical comparisons to
	// TargetMetrics.targets_configured, which used to not count aspects. This
	// also includes configured targets that do not have associated actions.
	ActionLookupValueCountNotIncludingAspects int32 `protobuf:"varint,5,opt,name=action_lookup_value_count_not_including_aspects,json=actionLookupValueCountNotIncludingAspects,proto3" json:"action_lookup_value_count_not_including_aspects,omitempty"`
	// How many actions belonged to the configured targets/aspects above. It may
	// not be necessary to execute all of these actions to build the requested
	// targets. May not be populated if analysis phase was fully cached.
	ActionCount int32 `protobuf:"varint,2,opt,name=action_count,json=actionCount,proto3" json:"action_count,omitempty"`
	// How many actions belonged to configured targets: always at most
	// action_count. Useful mainly for historical comparisons to
	// ActionMetrics.actions_created, which used to not count aspects' actions.
	ActionCountNotIncludingAspects int32 `protobuf:"varint,6,opt,name=action_count_not_including_aspects,json=actionCountNotIncludingAspects,proto3" json:"action_count_not_including_aspects,omitempty"`
	// How many "input file" configured targets there were: one per source file.
	// Should agree with artifact_metrics.source_artifacts_read.count above,
	InputFileConfiguredTargetCount int32 `protobuf:"varint,7,opt,name=input_file_configured_target_count,json=inputFileConfiguredTargetCount,proto3" json:"input_file_configured_target_count,omitempty"`
	// How many "output file" configured targets there were: output files that
	// are targets (not implicit outputs).
	OutputFileConfiguredTargetCount int32 `protobuf:"varint,8,opt,name=output_file_configured_target_count,json=outputFileConfiguredTargetCount,proto3" json:"output_file_configured_target_count,omitempty"`
	// How many "other" configured targets there were (like alias,
	// package_group, and other non-rule non-file configured targets).
	OtherConfiguredTargetCount int32 `protobuf:"varint,9,opt,name=other_configured_target_count,json=otherConfiguredTargetCount,proto3" json:"other_configured_target_count,omitempty"`
	// How many artifacts are outputs of the above actions. May not be populated
	// if analysis phase was fully cached.
	OutputArtifactCount int32 `protobuf:"varint,3,opt,name=output_artifact_count,json=outputArtifactCount,proto3" json:"output_artifact_count,omitempty"`
	// How many Skyframe nodes there are in memory at the end of the build. This
	// may underestimate the number of nodes when running with memory-saving
	// settings or with Skybuild, and may overestimate if there are nodes from
	// prior evaluations still in the cache.
	PostInvocationSkyframeNodeCount int32 `protobuf:"varint,4,opt,name=post_invocation_skyframe_node_count,json=postInvocationSkyframeNodeCount,proto3" json:"post_invocation_skyframe_node_count,omitempty"`
}

func (m *BuildMetrics_BuildGraphMetrics) Reset()         { *m = BuildMetrics_BuildGraphMetrics{} }
func (m *BuildMetrics_BuildGraphMetrics) String() string { return proto.CompactTextString(m) }
func (*BuildMetrics_BuildGraphMetrics) ProtoMessage()    {}
func (*BuildMetrics_BuildGraphMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{22, 7}
}
func (m *BuildMetrics_BuildGraphMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildMetrics_BuildGraphMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildMetrics_BuildGraphMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildMetrics_BuildGraphMetrics.Merge(m, src)
}
func (m *BuildMetrics_BuildGraphMetrics) XXX_Size() int {
	return m.Size()
}
func (m *BuildMetrics_BuildGraphMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildMetrics_BuildGraphMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_BuildMetrics_BuildGraphMetrics proto.InternalMessageInfo

// Information about all workers that were alive during the invocation.
type BuildMetrics_WorkerMetrics struct {
	// Unique id of worker.
	WorkerId int32 `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	// Worker process id. If there is no process for worker, equals to zero.
	ProcessId uint32 `protobuf:"varint,2,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	// Mnemonic of running worker.
	Mnemonic string `protobuf:"bytes,3,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	// Multiplex or singleplex worker.
	IsMultiplex bool `protobuf:"varint,4,opt,name=is_multiplex,json=isMultiplex,proto3" json:"is_multiplex,omitempty"`
	// Using worker sandbox file system or not.
	IsSandbox bool `protobuf:"varint,5,opt,name=is_sandbox,json=isSandbox,proto3" json:"is_sandbox,omitempty"`
	// Shows is worker stats measured at the end of invocation.
	IsMeasurable bool `protobuf:"varint,6,opt,name=is_measurable,json=isMeasurable,proto3" json:"is_measurable,omitempty"`
	// Combined workers statistics.
	WorkerStats []*BuildMetrics_WorkerMetrics_WorkerStats `protobuf:"bytes,7,rep,name=worker_stats,json=workerStats,proto3" json:"worker_stats,omitempty"`
}

func (m *BuildMetrics_WorkerMetrics) Reset()         { *m = BuildMetrics_WorkerMetrics{} }
func (m *BuildMetrics_WorkerMetrics) String() string { return proto.CompactTextString(m) }
func (*BuildMetrics_WorkerMetrics) ProtoMessage()    {}
func (*BuildMetrics_WorkerMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{22, 8}
}
func (m *BuildMetrics_WorkerMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildMetrics_WorkerMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildMetrics_WorkerMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildMetrics_WorkerMetrics.Merge(m, src)
}
func (m *BuildMetrics_WorkerMetrics) XXX_Size() int {
	return m.Size()
}
func (m *BuildMetrics_WorkerMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildMetrics_WorkerMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_BuildMetrics_WorkerMetrics proto.InternalMessageInfo

// Information collected from worker at some point.
type BuildMetrics_WorkerMetrics_WorkerStats struct {
	// Epoch unix time of collection of metrics.
	CollectTimeInMs int64 `protobuf:"varint,1,opt,name=collect_time_in_ms,json=collectTimeInMs,proto3" json:"collect_time_in_ms,omitempty"`
	// RSS size of worker process.
	WorkerMemoryInKb int32 `protobuf:"varint,2,opt,name=worker_memory_in_kb,json=workerMemoryInKb,proto3" json:"worker_memory_in_kb,omitempty"`
}

func (m *BuildMetrics_WorkerMetrics_WorkerStats) Reset() {
	*m = BuildMetrics_WorkerMetrics_WorkerStats{}
}
func (m *BuildMetrics_WorkerMetrics_WorkerStats) String() string { return proto.CompactTextString(m) }
func (*BuildMetrics_WorkerMetrics_WorkerStats) ProtoMessage()    {}
func (*BuildMetrics_WorkerMetrics_WorkerStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{22, 8, 0}
}
func (m *BuildMetrics_WorkerMetrics_WorkerStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildMetrics_WorkerMetrics_WorkerStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildMetrics_WorkerMetrics_WorkerStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildMetrics_WorkerMetrics_WorkerStats.Merge(m, src)
}
func (m *BuildMetrics_WorkerMetrics_WorkerStats) XXX_Size() int {
	return m.Size()
}
func (m *BuildMetrics_WorkerMetrics_WorkerStats) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildMetrics_WorkerMetrics_WorkerStats.DiscardUnknown(m)
}

var xxx_messageInfo_BuildMetrics_WorkerMetrics_WorkerStats proto.InternalMessageInfo

// Event providing additional statistics/logs after completion of the build.
type BuildToolLogs struct {
	Log []*File `protobuf:"bytes,1,rep,name=log,proto3" json:"log,omitempty"`
}

func (m *BuildToolLogs) Reset()         { *m = BuildToolLogs{} }
func (m *BuildToolLogs) String() string { return proto.CompactTextString(m) }
func (*BuildToolLogs) ProtoMessage()    {}
func (*BuildToolLogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{23}
}
func (m *BuildToolLogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildToolLogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildToolLogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildToolLogs.Merge(m, src)
}
func (m *BuildToolLogs) XXX_Size() int {
	return m.Size()
}
func (m *BuildToolLogs) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildToolLogs.DiscardUnknown(m)
}

var xxx_messageInfo_BuildToolLogs proto.InternalMessageInfo

// Event describing all convenience symlinks (i.e., workspace symlinks) to be
// created or deleted once the execution phase has begun. Note that this event
// does not say anything about whether or not the build tool actually executed
// these filesystem operations; it only says what logical operations should be
// performed. This event is emitted exactly once per build; if no symlinks are
// to be modified, the event is still emitted with empty contents.
type ConvenienceSymlinksIdentified struct {
	ConvenienceSymlinks []*ConvenienceSymlink `protobuf:"bytes,1,rep,name=convenience_symlinks,json=convenienceSymlinks,proto3" json:"convenience_symlinks,omitempty"`
}

func (m *ConvenienceSymlinksIdentified) Reset()         { *m = ConvenienceSymlinksIdentified{} }
func (m *ConvenienceSymlinksIdentified) String() string { return proto.CompactTextString(m) }
func (*ConvenienceSymlinksIdentified) ProtoMessage()    {}
func (*ConvenienceSymlinksIdentified) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{24}
}
func (m *ConvenienceSymlinksIdentified) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConvenienceSymlinksIdentified) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConvenienceSymlinksIdentified) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConvenienceSymlinksIdentified.Merge(m, src)
}
func (m *ConvenienceSymlinksIdentified) XXX_Size() int {
	return m.Size()
}
func (m *ConvenienceSymlinksIdentified) XXX_DiscardUnknown() {
	xxx_messageInfo_ConvenienceSymlinksIdentified.DiscardUnknown(m)
}

var xxx_messageInfo_ConvenienceSymlinksIdentified proto.InternalMessageInfo

// The message that contains what type of action to perform on a given path and
// target of a symlink.
type ConvenienceSymlink struct {
	// The path of the symlink to be created or deleted, absolute or relative to
	// the workspace, creating any directories necessary. If a symlink already
	// exists at that location, then it should be replaced by a symlink pointing
	// to the new target.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The operation we are performing on the symlink.
	Action ConvenienceSymlink_Action `protobuf:"varint,2,opt,name=action,proto3,enum=build_event_stream.ConvenienceSymlink_Action" json:"action,omitempty"`
	// If action is CREATE, this is the target path that the symlink should point
	// to. If the path points underneath the output base, it is relative to the
	// output base; otherwise it is absolute.
	//
	// If action is DELETE, this field is not set.
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *ConvenienceSymlink) Reset()         { *m = ConvenienceSymlink{} }
func (m *ConvenienceSymlink) String() string { return proto.CompactTextString(m) }
func (*ConvenienceSymlink) ProtoMessage()    {}
func (*ConvenienceSymlink) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{25}
}
func (m *ConvenienceSymlink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConvenienceSymlink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConvenienceSymlink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConvenienceSymlink.Merge(m, src)
}
func (m *ConvenienceSymlink) XXX_Size() int {
	return m.Size()
}
func (m *ConvenienceSymlink) XXX_DiscardUnknown() {
	xxx_messageInfo_ConvenienceSymlink.DiscardUnknown(m)
}

var xxx_messageInfo_ConvenienceSymlink proto.InternalMessageInfo

// Message describing a build event. Events will have an identifier that
// is unique within a given build invocation; they also announce follow-up
// events as children. More details, which are specific to the kind of event
// that is observed, is provided in the payload. More options for the payload
// might be added in the future.
type BuildEvent struct {
	Id          *BuildEventId   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Children    []*BuildEventId `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
	LastMessage bool            `protobuf:"varint,20,opt,name=last_message,json=lastMessage,proto3" json:"last_message,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*BuildEvent_Progress
	//	*BuildEvent_Aborted
	//	*BuildEvent_Started
	//	*BuildEvent_UnstructuredCommandLine
	//	*BuildEvent_StructuredCommandLine
	//	*BuildEvent_OptionsParsed
	//	*BuildEvent_WorkspaceStatus
	//	*BuildEvent_Fetch
	//	*BuildEvent_Configuration
	//	*BuildEvent_Expanded
	//	*BuildEvent_Configured
	//	*BuildEvent_Action
	//	*BuildEvent_NamedSetOfFiles
	//	*BuildEvent_Completed
	//	*BuildEvent_TestResult
	//	*BuildEvent_TestSummary
	//	*BuildEvent_TargetSummary
	//	*BuildEvent_Finished
	//	*BuildEvent_BuildToolLogs
	//	*BuildEvent_BuildMetrics
	//	*BuildEvent_WorkspaceInfo
	//	*BuildEvent_BuildMetadata
	//	*BuildEvent_ConvenienceSymlinksIdentified
	Payload isBuildEvent_Payload `protobuf_oneof:"payload"`
}

func (m *BuildEvent) Reset()         { *m = BuildEvent{} }
func (m *BuildEvent) String() string { return proto.CompactTextString(m) }
func (*BuildEvent) ProtoMessage()    {}
func (*BuildEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc886698dc93d8e, []int{26}
}
func (m *BuildEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildEvent.Merge(m, src)
}
func (m *BuildEvent) XXX_Size() int {
	return m.Size()
}
func (m *BuildEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BuildEvent proto.InternalMessageInfo

type isBuildEvent_Payload interface {
	isBuildEvent_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BuildEvent_Progress struct {
	Progress *Progress `protobuf:"bytes,3,opt,name=progress,proto3,oneof" json:"progress,omitempty"`
}
type BuildEvent_Aborted struct {
	Aborted *Aborted `protobuf:"bytes,4,opt,name=aborted,proto3,oneof" json:"aborted,omitempty"`
}
type BuildEvent_Started struct {
	Started *BuildStarted `protobuf:"bytes,5,opt,name=started,proto3,oneof" json:"started,omitempty"`
}
type BuildEvent_UnstructuredCommandLine struct {
	UnstructuredCommandLine *UnstructuredCommandLine `protobuf:"bytes,12,opt,name=unstructured_command_line,json=unstructuredCommandLine,proto3,oneof" json:"unstructured_command_line,omitempty"`
}
type BuildEvent_StructuredCommandLine struct {
	StructuredCommandLine *command_line.CommandLine `protobuf:"bytes,22,opt,name=structured_command_line,json=structuredCommandLine,proto3,oneof" json:"structured_command_line,omitempty"`
}
type BuildEvent_OptionsParsed struct {
	OptionsParsed *OptionsParsed `protobuf:"bytes,13,opt,name=options_parsed,json=optionsParsed,proto3,oneof" json:"options_parsed,omitempty"`
}
type BuildEvent_WorkspaceStatus struct {
	WorkspaceStatus *WorkspaceStatus `protobuf:"bytes,16,opt,name=workspace_status,json=workspaceStatus,proto3,oneof" json:"workspace_status,omitempty"`
}
type BuildEvent_Fetch struct {
	Fetch *Fetch `protobuf:"bytes,21,opt,name=fetch,proto3,oneof" json:"fetch,omitempty"`
}
type BuildEvent_Configuration struct {
	Configuration *Configuration `protobuf:"bytes,17,opt,name=configuration,proto3,oneof" json:"configuration,omitempty"`
}
type BuildEvent_Expanded struct {
	Expanded *PatternExpanded `protobuf:"bytes,6,opt,name=expanded,proto3,oneof" json:"expanded,omitempty"`
}
type BuildEvent_Configured struct {
	Configured *TargetConfigured `protobuf:"bytes,18,opt,name=configured,proto3,oneof" json:"configured,omitempty"`
}
type BuildEvent_Action struct {
	Action *ActionExecuted `protobuf:"bytes,7,opt,name=action,proto3,oneof" json:"action,omitempty"`
}
type BuildEvent_NamedSetOfFiles struct {
	NamedSetOfFiles *NamedSetOfFiles `protobuf:"bytes,15,opt,name=named_set_of_files,json=namedSetOfFiles,proto3,oneof" json:"named_set_of_files,omitempty"`
}
type BuildEvent_Completed struct {
	Completed *TargetComplete `protobuf:"bytes,8,opt,name=completed,proto3,oneof" json:"completed,omitempty"`
}
type BuildEvent_TestResult struct {
	TestResult *TestResult `protobuf:"bytes,10,opt,name=test_result,json=testResult,proto3,oneof" json:"test_result,omitempty"`
}
type BuildEvent_TestSummary struct {
	TestSummary *TestSummary `protobuf:"bytes,9,opt,name=test_summary,json=testSummary,proto3,oneof" json:"test_summary,omitempty"`
}
type BuildEvent_TargetSummary struct {
	TargetSummary *TargetSummary `protobuf:"bytes,28,opt,name=target_summary,json=targetSummary,proto3,oneof" json:"target_summary,omitempty"`
}
type BuildEvent_Finished struct {
	Finished *BuildFinished `protobuf:"bytes,14,opt,name=finished,proto3,oneof" json:"finished,omitempty"`
}
type BuildEvent_BuildToolLogs struct {
	BuildToolLogs *BuildToolLogs `protobuf:"bytes,23,opt,name=build_tool_logs,json=buildToolLogs,proto3,oneof" json:"build_tool_logs,omitempty"`
}
type BuildEvent_BuildMetrics struct {
	BuildMetrics *BuildMetrics `protobuf:"bytes,24,opt,name=build_metrics,json=buildMetrics,proto3,oneof" json:"build_metrics,omitempty"`
}
type BuildEvent_WorkspaceInfo struct {
	WorkspaceInfo *WorkspaceConfig `protobuf:"bytes,25,opt,name=workspace_info,json=workspaceInfo,proto3,oneof" json:"workspace_info,omitempty"`
}
type BuildEvent_BuildMetadata struct {
	BuildMetadata *BuildMetadata `protobuf:"bytes,26,opt,name=build_metadata,json=buildMetadata,proto3,oneof" json:"build_metadata,omitempty"`
}
type BuildEvent_ConvenienceSymlinksIdentified struct {
	ConvenienceSymlinksIdentified *ConvenienceSymlinksIdentified `protobuf:"bytes,27,opt,name=convenience_symlinks_identified,json=convenienceSymlinksIdentified,proto3,oneof" json:"convenience_symlinks_identified,omitempty"`
}

func (*BuildEvent_Progress) isBuildEvent_Payload()                      {}
func (*BuildEvent_Aborted) isBuildEvent_Payload()                       {}
func (*BuildEvent_Started) isBuildEvent_Payload()                       {}
func (*BuildEvent_UnstructuredCommandLine) isBuildEvent_Payload()       {}
func (*BuildEvent_StructuredCommandLine) isBuildEvent_Payload()         {}
func (*BuildEvent_OptionsParsed) isBuildEvent_Payload()                 {}
func (*BuildEvent_WorkspaceStatus) isBuildEvent_Payload()               {}
func (*BuildEvent_Fetch) isBuildEvent_Payload()                         {}
func (*BuildEvent_Configuration) isBuildEvent_Payload()                 {}
func (*BuildEvent_Expanded) isBuildEvent_Payload()                      {}
func (*BuildEvent_Configured) isBuildEvent_Payload()                    {}
func (*BuildEvent_Action) isBuildEvent_Payload()                        {}
func (*BuildEvent_NamedSetOfFiles) isBuildEvent_Payload()               {}
func (*BuildEvent_Completed) isBuildEvent_Payload()                     {}
func (*BuildEvent_TestResult) isBuildEvent_Payload()                    {}
func (*BuildEvent_TestSummary) isBuildEvent_Payload()                   {}
func (*BuildEvent_TargetSummary) isBuildEvent_Payload()                 {}
func (*BuildEvent_Finished) isBuildEvent_Payload()                      {}
func (*BuildEvent_BuildToolLogs) isBuildEvent_Payload()                 {}
func (*BuildEvent_BuildMetrics) isBuildEvent_Payload()                  {}
func (*BuildEvent_WorkspaceInfo) isBuildEvent_Payload()                 {}
func (*BuildEvent_BuildMetadata) isBuildEvent_Payload()                 {}
func (*BuildEvent_ConvenienceSymlinksIdentified) isBuildEvent_Payload() {}

func (m *BuildEvent) GetPayload() isBuildEvent_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *BuildEvent) GetProgress() *Progress {
	if x, ok := m.GetPayload().(*BuildEvent_Progress); ok {
		return x.Progress
	}
	return nil
}

func (m *BuildEvent) GetAborted() *Aborted {
	if x, ok := m.GetPayload().(*BuildEvent_Aborted); ok {
		return x.Aborted
	}
	return nil
}

func (m *BuildEvent) GetStarted() *BuildStarted {
	if x, ok := m.GetPayload().(*BuildEvent_Started); ok {
		return x.Started
	}
	return nil
}

func (m *BuildEvent) GetUnstructuredCommandLine() *UnstructuredCommandLine {
	if x, ok := m.GetPayload().(*BuildEvent_UnstructuredCommandLine); ok {
		return x.UnstructuredCommandLine
	}
	return nil
}

func (m *BuildEvent) GetStructuredCommandLine() *command_line.CommandLine {
	if x, ok := m.GetPayload().(*BuildEvent_StructuredCommandLine); ok {
		return x.StructuredCommandLine
	}
	return nil
}

func (m *BuildEvent) GetOptionsParsed() *OptionsParsed {
	if x, ok := m.GetPayload().(*BuildEvent_OptionsParsed); ok {
		return x.OptionsParsed
	}
	return nil
}

func (m *BuildEvent) GetWorkspaceStatus() *WorkspaceStatus {
	if x, ok := m.GetPayload().(*BuildEvent_WorkspaceStatus); ok {
		return x.WorkspaceStatus
	}
	return nil
}

func (m *BuildEvent) GetFetch() *Fetch {
	if x, ok := m.GetPayload().(*BuildEvent_Fetch); ok {
		return x.Fetch
	}
	return nil
}

func (m *BuildEvent) GetConfiguration() *Configuration {
	if x, ok := m.GetPayload().(*BuildEvent_Configuration); ok {
		return x.Configuration
	}
	return nil
}

func (m *BuildEvent) GetExpanded() *PatternExpanded {
	if x, ok := m.GetPayload().(*BuildEvent_Expanded); ok {
		return x.Expanded
	}
	return nil
}

func (m *BuildEvent) GetConfigured() *TargetConfigured {
	if x, ok := m.GetPayload().(*BuildEvent_Configured); ok {
		return x.Configured
	}
	return nil
}

func (m *BuildEvent) GetAction() *ActionExecuted {
	if x, ok := m.GetPayload().(*BuildEvent_Action); ok {
		return x.Action
	}
	return nil
}

func (m *BuildEvent) GetNamedSetOfFiles() *NamedSetOfFiles {
	if x, ok := m.GetPayload().(*BuildEvent_NamedSetOfFiles); ok {
		return x.NamedSetOfFiles
	}
	return nil
}

func (m *BuildEvent) GetCompleted() *TargetComplete {
	if x, ok := m.GetPayload().(*BuildEvent_Completed); ok {
		return x.Completed
	}
	return nil
}

func (m *BuildEvent) GetTestResult() *TestResult {
	if x, ok := m.GetPayload().(*BuildEvent_TestResult); ok {
		return x.TestResult
	}
	return nil
}

func (m *BuildEvent) GetTestSummary() *TestSummary {
	if x, ok := m.GetPayload().(*BuildEvent_TestSummary); ok {
		return x.TestSummary
	}
	return nil
}

func (m *BuildEvent) GetTargetSummary() *TargetSummary {
	if x, ok := m.GetPayload().(*BuildEvent_TargetSummary); ok {
		return x.TargetSummary
	}
	return nil
}

func (m *BuildEvent) GetFinished() *BuildFinished {
	if x, ok := m.GetPayload().(*BuildEvent_Finished); ok {
		return x.Finished
	}
	return nil
}

func (m *BuildEvent) GetBuildToolLogs() *BuildToolLogs {
	if x, ok := m.GetPayload().(*BuildEvent_BuildToolLogs); ok {
		return x.BuildToolLogs
	}
	return nil
}

func (m *BuildEvent) GetBuildMetrics() *BuildMetrics {
	if x, ok := m.GetPayload().(*BuildEvent_BuildMetrics); ok {
		return x.BuildMetrics
	}
	return nil
}

func (m *BuildEvent) GetWorkspaceInfo() *WorkspaceConfig {
	if x, ok := m.GetPayload().(*BuildEvent_WorkspaceInfo); ok {
		return x.WorkspaceInfo
	}
	return nil
}

func (m *BuildEvent) GetBuildMetadata() *BuildMetadata {
	if x, ok := m.GetPayload().(*BuildEvent_BuildMetadata); ok {
		return x.BuildMetadata
	}
	return nil
}

func (m *BuildEvent) GetConvenienceSymlinksIdentified() *ConvenienceSymlinksIdentified {
	if x, ok := m.GetPayload().(*BuildEvent_ConvenienceSymlinksIdentified); ok {
		return x.ConvenienceSymlinksIdentified
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BuildEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BuildEvent_Progress)(nil),
		(*BuildEvent_Aborted)(nil),
		(*BuildEvent_Started)(nil),
		(*BuildEvent_UnstructuredCommandLine)(nil),
		(*BuildEvent_StructuredCommandLine)(nil),
		(*BuildEvent_OptionsParsed)(nil),
		(*BuildEvent_WorkspaceStatus)(nil),
		(*BuildEvent_Fetch)(nil),
		(*BuildEvent_Configuration)(nil),
		(*BuildEvent_Expanded)(nil),
		(*BuildEvent_Configured)(nil),
		(*BuildEvent_Action)(nil),
		(*BuildEvent_NamedSetOfFiles)(nil),
		(*BuildEvent_Completed)(nil),
		(*BuildEvent_TestResult)(nil),
		(*BuildEvent_TestSummary)(nil),
		(*BuildEvent_TargetSummary)(nil),
		(*BuildEvent_Finished)(nil),
		(*BuildEvent_BuildToolLogs)(nil),
		(*BuildEvent_BuildMetrics)(nil),
		(*BuildEvent_WorkspaceInfo)(nil),
		(*BuildEvent_BuildMetadata)(nil),
		(*BuildEvent_ConvenienceSymlinksIdentified)(nil),
	}
}

func init() {
	proto.RegisterEnum("build_event_stream.TestSize", TestSize_name, TestSize_value)
	proto.RegisterEnum("build_event_stream.TestStatus", TestStatus_name, TestStatus_value)
	proto.RegisterEnum("build_event_stream.Aborted_AbortReason", Aborted_AbortReason_name, Aborted_AbortReason_value)
	proto.RegisterEnum("build_event_stream.ConvenienceSymlink_Action", ConvenienceSymlink_Action_name, ConvenienceSymlink_Action_value)
	proto.RegisterType((*BuildEventId)(nil), "build_event_stream.BuildEventId")
	proto.RegisterType((*BuildEventId_UnknownBuildEventId)(nil), "build_event_stream.BuildEventId.UnknownBuildEventId")
	proto.RegisterType((*BuildEventId_ProgressId)(nil), "build_event_stream.BuildEventId.ProgressId")
	proto.RegisterType((*BuildEventId_BuildStartedId)(nil), "build_event_stream.BuildEventId.BuildStartedId")
	proto.RegisterType((*BuildEventId_UnstructuredCommandLineId)(nil), "build_event_stream.BuildEventId.UnstructuredCommandLineId")
	proto.RegisterType((*BuildEventId_StructuredCommandLineId)(nil), "build_event_stream.BuildEventId.StructuredCommandLineId")
	proto.RegisterType((*BuildEventId_WorkspaceStatusId)(nil), "build_event_stream.BuildEventId.WorkspaceStatusId")
	proto.RegisterType((*BuildEventId_OptionsParsedId)(nil), "build_event_stream.BuildEventId.OptionsParsedId")
	proto.RegisterType((*BuildEventId_FetchId)(nil), "build_event_stream.BuildEventId.FetchId")
	proto.RegisterType((*BuildEventId_PatternExpandedId)(nil), "build_event_stream.BuildEventId.PatternExpandedId")
	proto.RegisterType((*BuildEventId_WorkspaceConfigId)(nil), "build_event_stream.BuildEventId.WorkspaceConfigId")
	proto.RegisterType((*BuildEventId_BuildMetadataId)(nil), "build_event_stream.BuildEventId.BuildMetadataId")
	proto.RegisterType((*BuildEventId_TargetConfiguredId)(nil), "build_event_stream.BuildEventId.TargetConfiguredId")
	proto.RegisterType((*BuildEventId_NamedSetOfFilesId)(nil), "build_event_stream.BuildEventId.NamedSetOfFilesId")
	proto.RegisterType((*BuildEventId_ConfigurationId)(nil), "build_event_stream.BuildEventId.ConfigurationId")
	proto.RegisterType((*BuildEventId_TargetCompletedId)(nil), "build_event_stream.BuildEventId.TargetCompletedId")
	proto.RegisterType((*BuildEventId_ActionCompletedId)(nil), "build_event_stream.BuildEventId.ActionCompletedId")
	proto.RegisterType((*BuildEventId_UnconfiguredLabelId)(nil), "build_event_stream.BuildEventId.UnconfiguredLabelId")
	proto.RegisterType((*BuildEventId_ConfiguredLabelId)(nil), "build_event_stream.BuildEventId.ConfiguredLabelId")
	proto.RegisterType((*BuildEventId_TestResultId)(nil), "build_event_stream.BuildEventId.TestResultId")
	proto.RegisterType((*BuildEventId_TestSummaryId)(nil), "build_event_stream.BuildEventId.TestSummaryId")
	proto.RegisterType((*BuildEventId_TargetSummaryId)(nil), "build_event_stream.BuildEventId.TargetSummaryId")
	proto.RegisterType((*BuildEventId_BuildFinishedId)(nil), "build_event_stream.BuildEventId.BuildFinishedId")
	proto.RegisterType((*BuildEventId_BuildToolLogsId)(nil), "build_event_stream.BuildEventId.BuildToolLogsId")
	proto.RegisterType((*BuildEventId_BuildMetricsId)(nil), "build_event_stream.BuildEventId.BuildMetricsId")
	proto.RegisterType((*BuildEventId_ConvenienceSymlinksIdentifiedId)(nil), "build_event_stream.BuildEventId.ConvenienceSymlinksIdentifiedId")
	proto.RegisterType((*Progress)(nil), "build_event_stream.Progress")
	proto.RegisterType((*Aborted)(nil), "build_event_stream.Aborted")
	proto.RegisterType((*BuildStarted)(nil), "build_event_stream.BuildStarted")
	proto.RegisterType((*WorkspaceConfig)(nil), "build_event_stream.WorkspaceConfig")
	proto.RegisterType((*UnstructuredCommandLine)(nil), "build_event_stream.UnstructuredCommandLine")
	proto.RegisterType((*OptionsParsed)(nil), "build_event_stream.OptionsParsed")
	proto.RegisterType((*Fetch)(nil), "build_event_stream.Fetch")
	proto.RegisterType((*WorkspaceStatus)(nil), "build_event_stream.WorkspaceStatus")
	proto.RegisterType((*WorkspaceStatus_Item)(nil), "build_event_stream.WorkspaceStatus.Item")
	proto.RegisterType((*BuildMetadata)(nil), "build_event_stream.BuildMetadata")
	proto.RegisterMapType((map[string]string)(nil), "build_event_stream.BuildMetadata.MetadataEntry")
	proto.RegisterType((*Configuration)(nil), "build_event_stream.Configuration")
	proto.RegisterMapType((map[string]string)(nil), "build_event_stream.Configuration.MakeVariableEntry")
	proto.RegisterType((*PatternExpanded)(nil), "build_event_stream.PatternExpanded")
	proto.RegisterType((*PatternExpanded_TestSuiteExpansion)(nil), "build_event_stream.PatternExpanded.TestSuiteExpansion")
	proto.RegisterType((*TargetConfigured)(nil), "build_event_stream.TargetConfigured")
	proto.RegisterType((*File)(nil), "build_event_stream.File")
	proto.RegisterType((*NamedSetOfFiles)(nil), "build_event_stream.NamedSetOfFiles")
	proto.RegisterType((*ActionExecuted)(nil), "build_event_stream.ActionExecuted")
	proto.RegisterType((*OutputGroup)(nil), "build_event_stream.OutputGroup")
	proto.RegisterType((*TargetComplete)(nil), "build_event_stream.TargetComplete")
	proto.RegisterType((*TestResult)(nil), "build_event_stream.TestResult")
	proto.RegisterType((*TestResult_ExecutionInfo)(nil), "build_event_stream.TestResult.ExecutionInfo")
	proto.RegisterType((*TestResult_ExecutionInfo_TimingBreakdown)(nil), "build_event_stream.TestResult.ExecutionInfo.TimingBreakdown")
	proto.RegisterType((*TestResult_ExecutionInfo_ResourceUsage)(nil), "build_event_stream.TestResult.ExecutionInfo.ResourceUsage")
	proto.RegisterType((*TestSummary)(nil), "build_event_stream.TestSummary")
	proto.RegisterType((*TargetSummary)(nil), "build_event_stream.TargetSummary")
	proto.RegisterType((*BuildFinished)(nil), "build_event_stream.BuildFinished")
	proto.RegisterType((*BuildFinished_ExitCode)(nil), "build_event_stream.BuildFinished.ExitCode")
	proto.RegisterType((*BuildFinished_AnomalyReport)(nil), "build_event_stream.BuildFinished.AnomalyReport")
	proto.RegisterType((*BuildMetrics)(nil), "build_event_stream.BuildMetrics")
	proto.RegisterType((*BuildMetrics_ActionSummary)(nil), "build_event_stream.BuildMetrics.ActionSummary")
	proto.RegisterType((*BuildMetrics_ActionSummary_ActionData)(nil), "build_event_stream.BuildMetrics.ActionSummary.ActionData")
	proto.RegisterType((*BuildMetrics_ActionSummary_RunnerCount)(nil), "build_event_stream.BuildMetrics.ActionSummary.RunnerCount")
	proto.RegisterType((*BuildMetrics_MemoryMetrics)(nil), "build_event_stream.BuildMetrics.MemoryMetrics")
	proto.RegisterType((*BuildMetrics_MemoryMetrics_GarbageMetrics)(nil), "build_event_stream.BuildMetrics.MemoryMetrics.GarbageMetrics")
	proto.RegisterType((*BuildMetrics_TargetMetrics)(nil), "build_event_stream.BuildMetrics.TargetMetrics")
	proto.RegisterType((*BuildMetrics_PackageMetrics)(nil), "build_event_stream.BuildMetrics.PackageMetrics")
	proto.RegisterType((*BuildMetrics_TimingMetrics)(nil), "build_event_stream.BuildMetrics.TimingMetrics")
	proto.RegisterType((*BuildMetrics_CumulativeMetrics)(nil), "build_event_stream.BuildMetrics.CumulativeMetrics")
	proto.RegisterType((*BuildMetrics_ArtifactMetrics)(nil), "build_event_stream.BuildMetrics.ArtifactMetrics")
	proto.RegisterType((*BuildMetrics_ArtifactMetrics_FilesMetric)(nil), "build_event_stream.BuildMetrics.ArtifactMetrics.FilesMetric")
	proto.RegisterType((*BuildMetrics_BuildGraphMetrics)(nil), "build_event_stream.BuildMetrics.BuildGraphMetrics")
	proto.RegisterType((*BuildMetrics_WorkerMetrics)(nil), "build_event_stream.BuildMetrics.WorkerMetrics")
	proto.RegisterType((*BuildMetrics_WorkerMetrics_WorkerStats)(nil), "build_event_stream.BuildMetrics.WorkerMetrics.WorkerStats")
	proto.RegisterType((*BuildToolLogs)(nil), "build_event_stream.BuildToolLogs")
	proto.RegisterType((*ConvenienceSymlinksIdentified)(nil), "build_event_stream.ConvenienceSymlinksIdentified")
	proto.RegisterType((*ConvenienceSymlink)(nil), "build_event_stream.ConvenienceSymlink")
	proto.RegisterType((*BuildEvent)(nil), "build_event_stream.BuildEvent")
}

func init() {
	proto.RegisterFile("build/bazel/bes/build_event_stream.proto", fileDescriptor_3fc886698dc93d8e)
}

var fileDescriptor_3fc886698dc93d8e = []byte{
	// 5396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5b, 0xcb, 0x6f, 0x23, 0x47,
	0x7a, 0x17, 0x25, 0x52, 0x22, 0x3f, 0x8a, 0xaf, 0xd2, 0x3c, 0x38, 0x3d, 0xb6, 0xc6, 0xc3, 0xf1,
	0x63, 0xec, 0xd9, 0x91, 0xbc, 0xb3, 0xce, 0xae, 0xc7, 0x1e, 0xc3, 0xd6, 0x83, 0x92, 0x38, 0xa3,
	0xd7, 0x36, 0xa9, 0xf1, 0x23, 0x58, 0x34, 0x5a, 0xdd, 0x25, 0xaa, 0xa3, 0x66, 0x77, 0xa7, 0xbb,
	0x7a, 0x66, 0x34, 0x41, 0xb0, 0x1b, 0x04, 0x08, 0x82, 0xe4, 0xb2, 0x49, 0x90, 0x64, 0xf7, 0x18,
	0x20, 0x01, 0x72, 0xd8, 0x5c, 0x73, 0x08, 0xb0, 0x39, 0xef, 0x25, 0xc0, 0x1e, 0x12, 0x60, 0x8f,
	0x89, 0x8d, 0x1c, 0x72, 0xca, 0x5f, 0x10, 0x20, 0xa8, 0x57, 0xbf, 0x48, 0x8a, 0x94, 0xbd, 0xf0,
	0x89, 0xac, 0xaf, 0xbe, 0xef, 0x57, 0x8f, 0xfe, 0xea, 0xfb, 0xbe, 0xfa, 0xaa, 0x0a, 0xee, 0x1e,
	0x87, 0x96, 0x6d, 0xae, 0x1e, 0xeb, 0x2f, 0xb1, 0xbd, 0x7a, 0x8c, 0x83, 0x55, 0x56, 0xd6, 0xf0,
	0x33, 0xec, 0x10, 0x2d, 0x20, 0x3e, 0xd6, 0x07, 0x2b, 0x9e, 0xef, 0x12, 0x17, 0xa1, 0xe1, 0x1a,
	0x65, 0xb9, 0xef, 0xba, 0x7d, 0x1b, 0xaf, 0x32, 0x8e, 0xe3, 0xf0, 0x64, 0xd5, 0x0c, 0x7d, 0x9d,
	0x58, 0xae, 0xc3, 0x65, 0x94, 0x5b, 0xd9, 0x7a, 0x62, 0x0d, 0x70, 0x40, 0xf4, 0x81, 0x27, 0x18,
	0x5e, 0x0f, 0x7c, 0x63, 0x75, 0xa0, 0x5b, 0x4e, 0xcc, 0x62, 0xb8, 0x83, 0x81, 0xee, 0x98, 0x9a,
	0x6d, 0x39, 0x58, 0x70, 0xbd, 0x35, 0xcc, 0x75, 0xa2, 0x5b, 0x76, 0xe8, 0x63, 0xcd, 0xc4, 0x44,
	0xb7, 0xec, 0x40, 0x30, 0xbe, 0x3d, 0xcc, 0x68, 0x39, 0xcf, 0x5c, 0x83, 0xf5, 0x49, 0xf3, 0x5c,
	0xdb, 0x32, 0xce, 0x39, 0x6b, 0xeb, 0x6f, 0x6f, 0xc1, 0xe2, 0x3a, 0x1d, 0x51, 0x9b, 0x0e, 0xa8,
	0x63, 0xa2, 0x43, 0x58, 0x08, 0x9d, 0x33, 0xc7, 0x7d, 0xee, 0x34, 0x73, 0xaf, 0xe5, 0xee, 0x96,
	0x1f, 0xbc, 0xb7, 0x32, 0x62, 0x2e, 0x92, 0x22, 0x2b, 0x47, 0x9c, 0x3f, 0x49, 0xdb, 0x99, 0x51,
	0x25, 0x0c, 0xea, 0x40, 0xd1, 0xf3, 0xdd, 0xbe, 0x8f, 0x83, 0xa0, 0x39, 0xcb, 0x20, 0xef, 0x4d,
	0x84, 0x3c, 0x14, 0x02, 0x0c, 0x29, 0x12, 0x47, 0x4f, 0x60, 0x21, 0x20, 0xba, 0x4f, 0xb0, 0xd9,
	0x9c, 0x63, 0x48, 0xab, 0x13, 0x91, 0x58, 0xa1, 0xcb, 0x85, 0x78, 0xbf, 0x04, 0x02, 0x7a, 0x01,
	0x37, 0x42, 0x27, 0x20, 0x7e, 0x68, 0x90, 0xd0, 0xc7, 0xa6, 0x96, 0x9c, 0xf1, 0x66, 0x99, 0xc1,
	0x7f, 0x30, 0xc5, 0xd8, 0x63, 0x84, 0x0d, 0x0e, 0xb0, 0x6b, 0x39, 0x98, 0xb5, 0x74, 0x3d, 0x1c,
	0x5d, 0x89, 0x7c, 0xb8, 0x3e, 0xae, 0x5d, 0xc4, 0xda, 0x7d, 0x7f, 0x62, 0xbb, 0xdd, 0xb1, 0xad,
	0x5e, 0x1d, 0xdd, 0xa6, 0x06, 0xf5, 0xe7, 0xae, 0x7f, 0x16, 0x78, 0xba, 0x81, 0xb5, 0x80, 0xe8,
	0x24, 0x0c, 0x9a, 0x55, 0xd6, 0xd8, 0x83, 0x89, 0x8d, 0x7d, 0x2a, 0x05, 0xbb, 0x4c, 0x8e, 0x35,
	0x53, 0x7b, 0x9e, 0x26, 0xa2, 0xcf, 0xa1, 0xea, 0x7a, 0x54, 0xc1, 0x02, 0xcd, 0xd3, 0xfd, 0x00,
	0x9b, 0xcd, 0x45, 0x06, 0xff, 0xee, 0x44, 0xf8, 0x03, 0x2e, 0x76, 0xc8, 0xa4, 0x18, 0x78, 0xc5,
	0x4d, 0x92, 0xd0, 0x27, 0x50, 0x38, 0xc1, 0xc4, 0x38, 0x6d, 0x36, 0x18, 0xe2, 0xdd, 0x89, 0x88,
	0x5b, 0x94, 0x9b, 0x21, 0x71, 0x41, 0xf4, 0x19, 0x54, 0x0c, 0xd7, 0x39, 0xb1, 0xfa, 0x62, 0x61,
	0x36, 0x6b, 0x53, 0xf6, 0x6d, 0x23, 0x29, 0xc5, 0xfb, 0x96, 0x02, 0x42, 0xc7, 0xd0, 0x20, 0xba,
	0xdf, 0xc7, 0x44, 0x93, 0x74, 0x6c, 0x36, 0xeb, 0x0c, 0xfd, 0x7b, 0x13, 0xd1, 0x7b, 0x4c, 0x72,
	0x23, 0x12, 0x64, 0x0d, 0xd4, 0x49, 0x86, 0x8a, 0xf6, 0x61, 0xc1, 0xd3, 0x09, 0xc1, 0xbe, 0xd3,
	0xcc, 0x4f, 0xf9, 0xc9, 0x0e, 0x39, 0x7f, 0xfb, 0x85, 0xa7, 0x3b, 0xa6, 0xd4, 0x7c, 0x01, 0x82,
	0x7e, 0x04, 0x35, 0xf1, 0x57, 0x0b, 0xce, 0x2c, 0xcf, 0xc3, 0x66, 0x13, 0xbe, 0x01, 0x6e, 0x55,
	0x80, 0x75, 0x39, 0x16, 0xfa, 0x21, 0x94, 0x1c, 0x7d, 0x80, 0x4d, 0x2d, 0xc0, 0xa4, 0x59, 0x99,
	0x12, 0x78, 0x9f, 0x4a, 0x74, 0x31, 0x39, 0x38, 0xd9, 0xb2, 0x6c, 0x2c, 0x16, 0xbe, 0x23, 0x88,
	0x54, 0x7b, 0xa3, 0x59, 0x1e, 0x78, 0x36, 0xa6, 0x16, 0xa0, 0x30, 0x25, 0xb2, 0x9c, 0x64, 0x21,
	0xc7, 0xb5, 0x97, 0xa4, 0x89, 0xb4, 0x01, 0xdd, 0x60, 0xe6, 0x31, 0x6e, 0x60, 0x7e, 0xca, 0x06,
	0xd6, 0x98, 0x60, 0xa6, 0x01, 0x3d, 0x4d, 0x44, 0x18, 0x50, 0xe8, 0xc4, 0x2a, 0xa2, 0xd9, 0xfa,
	0x31, 0xb6, 0x9b, 0x4b, 0x53, 0x9b, 0xd8, 0x58, 0x74, 0x97, 0x4a, 0xb2, 0x46, 0x1a, 0x61, 0x96,
	0x4c, 0xc7, 0x31, 0xd4, 0xc8, 0xd5, 0x29, 0xc7, 0xb1, 0x31, 0xa2, 0x89, 0x5a, 0xb6, 0x81, 0x43,
	0x28, 0x13, 0x1c, 0x10, 0xcd, 0xc7, 0x41, 0x68, 0x93, 0x66, 0x91, 0x61, 0xdf, 0x9f, 0xfc, 0x11,
	0x70, 0x40, 0x54, 0x26, 0xc2, 0x60, 0x81, 0x44, 0x65, 0xd4, 0x85, 0x45, 0x86, 0x18, 0x84, 0x83,
	0x81, 0xee, 0x9f, 0x37, 0x17, 0x18, 0xe4, 0xca, 0x54, 0x90, 0x5d, 0x2e, 0xc3, 0x30, 0x59, 0xbf,
	0x04, 0x81, 0x5a, 0x23, 0xa1, 0x30, 0x12, 0x56, 0x99, 0x72, 0xc5, 0x73, 0x75, 0x49, 0x02, 0x57,
	0x48, 0x92, 0x44, 0xa1, 0x39, 0xc6, 0x89, 0xe5, 0x58, 0xc1, 0x29, 0x36, 0x9b, 0xa5, 0x29, 0xa1,
	0x59, 0x61, 0x4b, 0x48, 0x71, 0xe8, 0xe3, 0x24, 0x09, 0x7d, 0x01, 0x35, 0x8e, 0x41, 0x5c, 0xd7,
	0xd6, 0x6c, 0xb7, 0x1f, 0x34, 0xaf, 0x5c, 0x06, 0xbb, 0xe7, 0xba, 0xf6, 0xae, 0xdb, 0x0f, 0x12,
	0xd8, 0x92, 0x84, 0x9e, 0x02, 0x27, 0x68, 0x03, 0x4c, 0x7c, 0xcb, 0x08, 0x9a, 0xd7, 0x2e, 0xe3,
	0x41, 0xf7, 0xb8, 0x10, 0x03, 0x5e, 0x3c, 0x4e, 0x50, 0x90, 0x0a, 0xa5, 0xc8, 0x15, 0x34, 0xaf,
	0x5f, 0xd6, 0xa3, 0x70, 0x9d, 0x63, 0xb0, 0x31, 0x4c, 0x3c, 0xc5, 0x03, 0x4c, 0x74, 0x53, 0x27,
	0x7a, 0xb3, 0x79, 0x99, 0x69, 0xd8, 0x13, 0x52, 0x89, 0x69, 0x90, 0x24, 0xf4, 0x67, 0x39, 0xb8,
	0x65, 0xb8, 0xce, 0x33, 0xec, 0x58, 0xd8, 0xa1, 0xae, 0xf0, 0x7c, 0x60, 0x5b, 0xce, 0x59, 0xa0,
	0x59, 0x26, 0x76, 0x88, 0x75, 0x62, 0x61, 0xb3, 0x79, 0x83, 0x35, 0xf6, 0xc9, 0x34, 0x0b, 0x46,
	0xe2, 0x74, 0x05, 0x4c, 0x27, 0x42, 0x61, 0x8d, 0xbf, 0x6a, 0x5c, 0xc4, 0xa2, 0xac, 0xc2, 0xd2,
	0x88, 0xe0, 0x09, 0x35, 0x61, 0x41, 0x04, 0x74, 0x2c, 0x06, 0x2b, 0xa9, 0xb2, 0xa8, 0xac, 0x02,
	0xc4, 0xa1, 0x11, 0xba, 0x0d, 0x8b, 0xae, 0xa7, 0xff, 0x7e, 0x88, 0x35, 0xc3, 0x0d, 0x1d, 0xc2,
	0x98, 0x0b, 0x6a, 0x99, 0xd3, 0x36, 0x28, 0x49, 0xa9, 0x43, 0x35, 0x1d, 0x01, 0x29, 0x37, 0xe1,
	0xc6, 0xd8, 0xa0, 0x45, 0xd9, 0x86, 0xeb, 0x63, 0x22, 0x0b, 0xf4, 0x1d, 0x40, 0xc9, 0x48, 0x45,
	0xd8, 0x16, 0xde, 0xbf, 0xba, 0x11, 0xb3, 0x32, 0x33, 0xa1, 0x2c, 0x41, 0x63, 0x28, 0x6a, 0x50,
	0x1a, 0x50, 0xcb, 0xf8, 0x7a, 0xe5, 0x26, 0x2c, 0x08, 0x67, 0x8d, 0xea, 0x30, 0x17, 0xfa, 0x12,
	0x91, 0xfe, 0x55, 0xee, 0x43, 0x63, 0xc8, 0xdf, 0xd0, 0xc9, 0x91, 0xce, 0x30, 0xf7, 0xda, 0x1c,
	0x9d, 0x1c, 0x51, 0x4c, 0xb5, 0x29, 0xf5, 0x8a, 0xb6, 0x99, 0xd1, 0x09, 0x65, 0x1d, 0xd0, 0xb0,
	0xe3, 0x45, 0x57, 0xa0, 0x90, 0x1c, 0x12, 0x2f, 0xa0, 0x6b, 0x30, 0xaf, 0x07, 0x1e, 0x36, 0x08,
	0x0b, 0x5d, 0x4b, 0xaa, 0x28, 0x29, 0x77, 0xa0, 0x31, 0xe4, 0xb1, 0x50, 0x15, 0x66, 0x2d, 0x53,
	0xc8, 0xcf, 0x5a, 0xa6, 0x72, 0x1b, 0x6a, 0x99, 0xf8, 0x61, 0x88, 0xe5, 0xe7, 0x39, 0x68, 0x0c,
	0x39, 0xa8, 0x31, 0x7d, 0x79, 0x9a, 0x0d, 0x62, 0xe6, 0xbe, 0x5e, 0x10, 0x93, 0x0d, 0x61, 0xc6,
	0x8d, 0xf1, 0x1f, 0x73, 0xd0, 0x18, 0xf2, 0x6d, 0xe8, 0x0d, 0xa8, 0x7a, 0xbe, 0x45, 0x2d, 0xa1,
	0xe6, 0x86, 0xc4, 0x0b, 0x89, 0xe8, 0x64, 0x45, 0x50, 0x0f, 0x18, 0x31, 0x1e, 0xc2, 0xec, 0xb7,
	0x30, 0x04, 0xe5, 0x1e, 0x5d, 0x48, 0x43, 0x2e, 0x72, 0xf4, 0x3c, 0x2a, 0x7f, 0x94, 0x83, 0xc6,
	0xc6, 0x74, 0xbc, 0xc3, 0x1d, 0x9e, 0xfd, 0xed, 0x74, 0xf8, 0x5f, 0x73, 0xb0, 0x98, 0xf4, 0x89,
	0xd3, 0x36, 0x5f, 0xf8, 0xed, 0x7c, 0xf2, 0x3a, 0xcc, 0xf9, 0x21, 0x1f, 0x4c, 0x41, 0xa5, 0x7f,
	0x69, 0xfb, 0xc1, 0xa9, 0xee, 0xf3, 0x8d, 0x55, 0x41, 0xe5, 0x05, 0xba, 0xd8, 0xe8, 0xe2, 0x1a,
	0x78, 0x84, 0x45, 0x9e, 0x05, 0x55, 0x16, 0x95, 0x3f, 0x84, 0x4a, 0xca, 0x01, 0x7f, 0xcb, 0xf3,
	0xf7, 0x63, 0xa8, 0x65, 0x1c, 0xf5, 0xb7, 0xdc, 0x01, 0x69, 0x57, 0x62, 0x77, 0x1e, 0x91, 0x62,
	0x2f, 0x1c, 0x99, 0xdf, 0xc8, 0x7d, 0x2a, 0xb7, 0xe1, 0xd6, 0x04, 0xb7, 0xb1, 0x9e, 0xa7, 0x36,
	0xa2, 0xf5, 0x01, 0x14, 0xa5, 0xa9, 0xa7, 0x2b, 0x34, 0x20, 0xa6, 0x1b, 0xad, 0x35, 0x51, 0x12,
	0x74, 0xec, 0xfb, 0x72, 0xe5, 0xf2, 0x52, 0xeb, 0xdf, 0x67, 0x61, 0x61, 0xed, 0xd8, 0x65, 0xdb,
	0xdc, 0x8f, 0x61, 0xde, 0xc7, 0x7a, 0xe0, 0xf2, 0xfd, 0x7c, 0xf5, 0xc1, 0x5b, 0xa3, 0x46, 0x2e,
	0x98, 0xf9, 0xaf, 0xca, 0xd8, 0x55, 0x21, 0x86, 0x5e, 0x83, 0xb2, 0x89, 0x03, 0xc3, 0xb7, 0xbc,
	0x68, 0xfe, 0x4a, 0x6a, 0x92, 0xd4, 0xfa, 0xef, 0x1c, 0x94, 0x13, 0x92, 0xa8, 0x0c, 0x0b, 0x47,
	0xfb, 0x4f, 0xf6, 0x0f, 0x3e, 0xdd, 0xaf, 0xcf, 0xa0, 0x2b, 0x50, 0x3f, 0xea, 0xb6, 0x55, 0xad,
	0xb3, 0xdf, 0x6b, 0xab, 0xea, 0xd1, 0x61, 0xaf, 0xbd, 0x59, 0xcf, 0xa1, 0x2a, 0xc0, 0xfe, 0x81,
	0xb6, 0xb6, 0xbf, 0xb6, 0xfb, 0xf9, 0x17, 0xed, 0x7a, 0x11, 0x2d, 0x42, 0x71, 0xff, 0x40, 0x5b,
	0x3f, 0xea, 0xec, 0x6e, 0xd6, 0x4b, 0xb4, 0xd4, 0xeb, 0xec, 0xb5, 0xb5, 0x83, 0xa3, 0x5e, 0x7d,
	0x16, 0x2d, 0x83, 0xa2, 0xb6, 0xf7, 0x0e, 0x7a, 0x6d, 0xad, 0xbd, 0xff, 0xb4, 0xa3, 0x1e, 0xec,
	0xef, 0xb5, 0xf7, 0x7b, 0xda, 0xd6, 0x5a, 0x67, 0xf7, 0x48, 0x6d, 0xd7, 0xe7, 0x28, 0x37, 0x03,
	0xdf, 0x5f, 0xdb, 0xad, 0xe7, 0xd1, 0x12, 0xd4, 0x76, 0x0f, 0xd6, 0x36, 0x3b, 0xfb, 0xdb, 0x11,
	0x4b, 0x81, 0x76, 0x82, 0xb5, 0xd5, 0xed, 0x74, 0x23, 0xea, 0x3c, 0xed, 0x67, 0xf7, 0x49, 0xe7,
	0xf0, 0xb0, 0xbd, 0x59, 0x5f, 0xa0, 0x3d, 0xea, 0xec, 0x6f, 0x1c, 0xec, 0x1d, 0xee, 0xb6, 0x7b,
	0xed, 0x3a, 0xa0, 0x06, 0x54, 0x0e, 0x8e, 0x7a, 0xda, 0xc1, 0x96, 0xb6, 0xd7, 0xde, 0x3b, 0x50,
	0x3f, 0xaf, 0x97, 0x5b, 0x7f, 0x3c, 0x27, 0x92, 0x25, 0xc2, 0x9b, 0x22, 0x04, 0xf9, 0x30, 0x8c,
	0xec, 0x39, 0xfb, 0x8f, 0x56, 0xa0, 0xc1, 0x32, 0x0c, 0x1a, 0xb1, 0x06, 0x58, 0x1b, 0x58, 0xb6,
	0x6d, 0xf1, 0xbc, 0xc7, 0xdc, 0xfa, 0x6c, 0x33, 0xa7, 0xd6, 0x58, 0x65, 0xcf, 0x1a, 0xe0, 0x3d,
	0x56, 0x85, 0x1e, 0x02, 0xc4, 0xfc, 0x22, 0x94, 0x54, 0x56, 0x78, 0xc6, 0x68, 0x45, 0xe6, 0x6f,
	0x56, 0x7a, 0x32, 0x63, 0xa4, 0x96, 0x22, 0x00, 0xea, 0x92, 0x13, 0xe1, 0xe2, 0x33, 0xec, 0x07,
	0xd2, 0xa4, 0x96, 0xd4, 0x7a, 0x14, 0xfd, 0x3d, 0xe5, 0x74, 0xb4, 0x0a, 0x4b, 0x72, 0x83, 0x9e,
	0xfc, 0x9e, 0x79, 0xc6, 0x8e, 0x44, 0xd5, 0x66, 0x5c, 0x43, 0x17, 0xbf, 0xf0, 0xeb, 0xcc, 0xec,
	0x94, 0x54, 0x59, 0x44, 0xf7, 0xa0, 0x41, 0x83, 0x35, 0xcb, 0xe9, 0x6b, 0xa6, 0xe5, 0x63, 0x83,
	0xb8, 0xfe, 0x39, 0xdb, 0x2e, 0x95, 0xd4, 0xba, 0xa8, 0xd8, 0x94, 0x74, 0xda, 0x6e, 0x9c, 0x79,
	0x88, 0xd9, 0x17, 0x78, 0xbb, 0x51, 0x55, 0x2c, 0xf0, 0x2a, 0x40, 0x80, 0xfd, 0x67, 0xd8, 0xd7,
	0x3c, 0xcb, 0x64, 0x3b, 0x8c, 0x39, 0xb5, 0xc4, 0x29, 0x87, 0x96, 0xd9, 0x7a, 0x08, 0xb5, 0x8c,
	0x9b, 0x47, 0x6f, 0x42, 0xcd, 0x76, 0x0d, 0xdd, 0xd6, 0xf0, 0x0b, 0x6c, 0x68, 0xbe, 0xeb, 0x46,
	0x4e, 0x89, 0x91, 0xdb, 0x2f, 0xb0, 0xa1, 0xba, 0x2e, 0x69, 0xdd, 0x87, 0xeb, 0x63, 0x62, 0x1f,
	0xfa, 0x29, 0x75, 0xbf, 0x1f, 0x88, 0x98, 0x82, 0xfd, 0x6f, 0xfd, 0x62, 0x16, 0x2a, 0xa9, 0x80,
	0x05, 0xbd, 0x05, 0xfc, 0xfb, 0x85, 0x9e, 0x26, 0x26, 0x4c, 0x08, 0x54, 0x05, 0x59, 0xb0, 0xa3,
	0xf7, 0xa1, 0x89, 0x5f, 0x78, 0xb6, 0x65, 0x58, 0x74, 0x8d, 0xa5, 0x25, 0x66, 0x99, 0xc4, 0x35,
	0x59, 0xdf, 0x4d, 0x4b, 0xde, 0x80, 0xa2, 0x31, 0x10, 0xd9, 0xa0, 0x39, 0x1e, 0xe0, 0x18, 0x03,
	0xde, 0xc7, 0x77, 0xa0, 0x11, 0x81, 0x46, 0x3c, 0x79, 0xc6, 0x53, 0x93, 0x15, 0x1b, 0x82, 0xf7,
	0x29, 0x34, 0x86, 0x72, 0x7e, 0xc2, 0x7b, 0xbc, 0xbd, 0x72, 0x6c, 0xeb, 0x2f, 0xf1, 0xca, 0x70,
	0x4e, 0xb0, 0x13, 0x51, 0x0e, 0x19, 0x41, 0xad, 0x5b, 0x19, 0x0a, 0xed, 0x1e, 0xd3, 0x36, 0xa2,
	0xf7, 0xc5, 0x17, 0x5f, 0xa0, 0xe5, 0x9e, 0xde, 0x6f, 0xdd, 0x86, 0x02, 0x8b, 0xe5, 0xa8, 0xe2,
	0x04, 0xa1, 0x61, 0xe0, 0x80, 0xc7, 0xaf, 0x45, 0x55, 0x16, 0x5b, 0x3f, 0x4e, 0x7c, 0x3b, 0x91,
	0x37, 0x7a, 0x04, 0x79, 0x8b, 0xe0, 0x01, 0x9b, 0xc7, 0x31, 0xb9, 0x9d, 0x8c, 0xc8, 0x4a, 0x87,
	0xe0, 0x81, 0xca, 0xa4, 0x94, 0x15, 0xc8, 0xd3, 0x12, 0x75, 0x68, 0x67, 0xf8, 0x5c, 0x06, 0x8f,
	0x67, 0xf8, 0x9c, 0xba, 0x83, 0x67, 0xba, 0x1d, 0x62, 0x19, 0x80, 0xb0, 0x42, 0xeb, 0xe7, 0x39,
	0xa8, 0xa4, 0xe2, 0x41, 0xf4, 0x04, 0x8a, 0xd1, 0x2e, 0x83, 0xf7, 0x61, 0xfc, 0x96, 0x48, 0x0a,
	0xad, 0xc8, 0x3f, 0x6d, 0x87, 0xf8, 0xe7, 0x6a, 0x04, 0xa0, 0x7c, 0x08, 0x95, 0x54, 0xd5, 0xb4,
	0xfd, 0xfa, 0x60, 0xf6, 0xfd, 0x5c, 0xeb, 0x6f, 0x66, 0xa1, 0x92, 0xf2, 0x3a, 0x48, 0x81, 0xe2,
	0xc0, 0xc1, 0x03, 0xd7, 0xb1, 0x0c, 0x01, 0x11, 0x95, 0xd1, 0x1d, 0xa8, 0x78, 0xb6, 0x4e, 0x4e,
	0x5c, 0x7f, 0xa0, 0x39, 0xfa, 0x40, 0xe2, 0x2d, 0x4a, 0x22, 0x0d, 0x4f, 0x69, 0xf3, 0x86, 0x17,
	0x0a, 0x93, 0x40, 0xff, 0xa2, 0xcf, 0xa0, 0x32, 0xd0, 0xcf, 0xb0, 0xf6, 0x4c, 0xf7, 0x2d, 0xfd,
	0xd8, 0xe6, 0xfa, 0x33, 0x26, 0x57, 0x95, 0xea, 0xcc, 0xca, 0x9e, 0x7e, 0x86, 0x9f, 0x0a, 0x29,
	0x3e, 0xee, 0xc5, 0x41, 0x82, 0x84, 0xae, 0xc3, 0x82, 0x15, 0x30, 0x53, 0xc4, 0xf4, 0xac, 0xa8,
	0xce, 0x5b, 0x01, 0xb5, 0x3f, 0xca, 0xc7, 0xd0, 0x18, 0x92, 0xbd, 0xd4, 0xc4, 0xfc, 0x47, 0x0e,
	0x6a, 0x99, 0x8d, 0x00, 0xfa, 0x3d, 0xb8, 0x2a, 0xb2, 0x06, 0x16, 0xc1, 0x1a, 0xa6, 0xe4, 0x20,
	0x5a, 0x8f, 0xe5, 0x07, 0xdf, 0x1f, 0x35, 0x9e, 0x0c, 0x86, 0xc8, 0x20, 0x58, 0x04, 0xb7, 0xa5,
	0xb8, 0xba, 0x44, 0x86, 0x68, 0x81, 0xf2, 0x14, 0xd0, 0x30, 0x2b, 0xba, 0x05, 0x65, 0xde, 0x78,
	0x32, 0xea, 0x00, 0x46, 0xe2, 0xa9, 0x92, 0x5b, 0x22, 0x55, 0xc2, 0xea, 0xe5, 0xb2, 0x67, 0x99,
	0x0f, 0x56, 0x1f, 0xb4, 0x7e, 0x92, 0x83, 0x7a, 0x76, 0x27, 0xc2, 0xa4, 0x78, 0xe6, 0xe2, 0xcc,
	0x72, 0xa4, 0x6b, 0x01, 0x4e, 0x7a, 0x62, 0x39, 0x26, 0x7a, 0x08, 0x25, 0x3e, 0x72, 0xeb, 0x25,
	0x9f, 0xab, 0xea, 0x83, 0x57, 0x46, 0x8d, 0x96, 0x75, 0xd9, 0x7a, 0x89, 0xd5, 0x22, 0x11, 0xff,
	0xe8, 0xa4, 0xd3, 0x75, 0xcb, 0xcd, 0x0a, 0xfd, 0xdb, 0xfa, 0x87, 0x1c, 0xe4, 0xe9, 0xf6, 0x85,
	0x36, 0xeb, 0xe9, 0xe4, 0x54, 0xf3, 0x7c, 0x7c, 0x62, 0xbd, 0x10, 0x56, 0x05, 0x28, 0xe9, 0x90,
	0x51, 0xa8, 0x81, 0x64, 0x6a, 0x26, 0x7c, 0x1d, 0xfd, 0x8f, 0x10, 0xdd, 0xb2, 0x59, 0xfc, 0x83,
	0xed, 0xcc, 0xd0, 0x4d, 0x9b, 0x85, 0x5e, 0x81, 0xa2, 0xe1, 0x3a, 0x04, 0x3b, 0x24, 0x60, 0x7a,
	0xb7, 0xb8, 0x33, 0xa3, 0x46, 0x14, 0x1a, 0xb1, 0x98, 0x56, 0x1f, 0x07, 0x44, 0xb8, 0x14, 0x51,
	0xa2, 0x74, 0x1b, 0x3b, 0x7d, 0x72, 0xca, 0x8c, 0xca, 0x9c, 0x2a, 0x4a, 0xeb, 0xf3, 0x90, 0x3f,
	0xb1, 0x6c, 0xdc, 0xfa, 0xcb, 0x1c, 0xd4, 0x32, 0x1b, 0x2e, 0xb4, 0x02, 0x05, 0x5a, 0x27, 0x3f,
	0x79, 0x73, 0xd4, 0x24, 0x50, 0x4e, 0x95, 0xb3, 0xa1, 0x03, 0x28, 0xd1, 0x3f, 0x5a, 0x80, 0x09,
	0xff, 0x1a, 0x5f, 0x2b, 0x2f, 0xa9, 0x16, 0x29, 0x48, 0x17, 0x93, 0xa0, 0xf5, 0x8b, 0x3c, 0x54,
	0xf9, 0x06, 0x89, 0x7a, 0x98, 0x90, 0x46, 0x04, 0x63, 0x4d, 0x1f, 0x9d, 0x3f, 0x72, 0xee, 0x61,
	0xe6, 0xcf, 0x4a, 0x2a, 0xfb, 0x8f, 0x6e, 0x42, 0x09, 0xbf, 0xa0, 0xc6, 0xdc, 0x35, 0xb1, 0x08,
	0xc6, 0x8b, 0x94, 0xb0, 0xe1, 0x9a, 0x18, 0xbd, 0x1b, 0x05, 0x7d, 0x7c, 0x93, 0x34, 0x7e, 0x7c,
	0x32, 0x1c, 0x7c, 0x37, 0x0a, 0x07, 0xf3, 0x53, 0x48, 0x60, 0xdf, 0x47, 0x4d, 0x19, 0x33, 0xb3,
	0xaf, 0xc1, 0x02, 0x14, 0x11, 0x37, 0x7f, 0x91, 0x8d, 0x9b, 0x17, 0xbe, 0x5e, 0xdc, 0xcc, 0x30,
	0x33, 0xbb, 0x8f, 0x8f, 0x87, 0xb6, 0x90, 0xf3, 0x13, 0xfa, 0x9b, 0xd9, 0x5c, 0xde, 0x86, 0xc5,
	0xd4, 0xa9, 0x49, 0x89, 0x69, 0x6b, 0x39, 0x91, 0x85, 0x40, 0x8f, 0xe1, 0x8a, 0x48, 0xe8, 0x4a,
	0xe3, 0xcc, 0xf3, 0x69, 0x30, 0x41, 0x57, 0x10, 0x97, 0x92, 0x56, 0x9c, 0xa5, 0xce, 0xda, 0x50,
	0x4d, 0x1f, 0xb4, 0x89, 0xe3, 0xa1, 0xe5, 0x95, 0xec, 0xf9, 0xdb, 0x16, 0x2f, 0x6f, 0xb2, 0xa2,
	0x5a, 0x39, 0x49, 0x16, 0x5b, 0x3f, 0xcb, 0x41, 0x99, 0x0f, 0x60, 0xdb, 0x77, 0x43, 0x6f, 0xe4,
	0x8a, 0x4a, 0xe9, 0xe8, 0xdc, 0x37, 0xd7, 0x51, 0xb4, 0x0c, 0x60, 0x39, 0x32, 0xa7, 0xcd, 0xf4,
	0xa2, 0xa8, 0x26, 0x28, 0x8f, 0xf3, 0xc5, 0xd9, 0xfa, 0x5c, 0xeb, 0x9f, 0xf2, 0x50, 0x4d, 0xa7,
	0x21, 0x2e, 0xd0, 0xe4, 0x3b, 0x69, 0x0b, 0x15, 0xab, 0x4e, 0xd2, 0x4a, 0x7d, 0x94, 0xb4, 0x52,
	0xf3, 0x93, 0xad, 0x14, 0x03, 0x88, 0x2d, 0xd5, 0x3a, 0x2c, 0x72, 0xd5, 0xd0, 0xfa, 0x74, 0xae,
	0xc4, 0x72, 0xbd, 0x35, 0x0a, 0x21, 0x31, 0xa5, 0x6a, 0xd9, 0x4d, 0xcc, 0xef, 0x36, 0xd4, 0xad,
	0x81, 0xe7, 0xfa, 0x44, 0x77, 0x88, 0x54, 0xb4, 0xfc, 0xc5, 0x9f, 0x9f, 0x87, 0xe8, 0x91, 0x94,
	0x50, 0xb7, 0x0d, 0xa8, 0x47, 0x71, 0xab, 0x04, 0x2a, 0x4e, 0xd0, 0xa3, 0x5a, 0x24, 0x21, 0x40,
	0x86, 0x6c, 0x2f, 0x7a, 0x0f, 0xae, 0xb0, 0x29, 0xa2, 0x81, 0xbf, 0x1b, 0x12, 0x2d, 0xc0, 0x86,
	0xeb, 0x98, 0x01, 0x5b, 0x69, 0x7c, 0xb3, 0x80, 0x68, 0x7d, 0x8f, 0x57, 0x77, 0x79, 0x2d, 0x7a,
	0x24, 0xd2, 0xe5, 0x42, 0x4a, 0x9c, 0xdc, 0xdc, 0x18, 0xda, 0x31, 0x6c, 0x8a, 0xd5, 0xc6, 0xf3,
	0xe2, 0x02, 0x64, 0x84, 0x2a, 0x97, 0xbe, 0x8e, 0x2a, 0xff, 0x39, 0x00, 0xc4, 0xe9, 0x0b, 0xf4,
	0x7d, 0x6a, 0x78, 0xd8, 0x91, 0x62, 0x81, 0x7d, 0xe9, 0xe5, 0xb1, 0x5f, 0x9a, 0x71, 0xa9, 0x82,
	0x1b, 0xbd, 0x01, 0x55, 0xfe, 0x4f, 0xb6, 0xca, 0x7a, 0x53, 0x52, 0x2b, 0x9c, 0xca, 0x1b, 0x63,
	0x6c, 0x86, 0x6e, 0x9c, 0x62, 0x53, 0x63, 0xe1, 0xbc, 0x7d, 0x2e, 0xf4, 0xb8, 0xc2, 0xa9, 0xbb,
	0x9c, 0x88, 0x76, 0xe0, 0x16, 0x9b, 0x19, 0x91, 0xa2, 0xe0, 0x71, 0xb7, 0xd8, 0x81, 0x69, 0xd8,
	0x73, 0x0d, 0xe1, 0x5c, 0xd8, 0xd4, 0xde, 0xa4, 0xac, 0x6b, 0x9c, 0x93, 0x45, 0xe0, 0x7c, 0x3b,
	0xd6, 0xa6, 0x6c, 0x68, 0x07, 0xd0, 0x30, 0x92, 0x98, 0xe9, 0x8b, 0xf6, 0x66, 0xf5, 0x2c, 0x28,
	0xda, 0x80, 0x57, 0x52, 0x48, 0xf2, 0x66, 0x80, 0xdc, 0x18, 0xce, 0x45, 0x1d, 0xba, 0x91, 0x90,
	0x95, 0xdf, 0x4e, 0x6c, 0x11, 0xf7, 0x44, 0xac, 0x93, 0x05, 0x11, 0x66, 0xe8, 0x82, 0x6f, 0xbf,
	0x34, 0x02, 0x14, 0x6d, 0xc9, 0xd1, 0x71, 0xfb, 0x28, 0x14, 0x7a, 0x76, 0x82, 0x42, 0xf3, 0xb1,
	0x31, 0x11, 0xa1, 0xd1, 0x4d, 0x58, 0x78, 0xae, 0xfb, 0x8e, 0xe5, 0xf4, 0x9b, 0x0b, 0x7c, 0xa3,
	0x22, 0x8a, 0xa8, 0x0b, 0x55, 0xcc, 0x3c, 0x22, 0xc5, 0xb7, 0x9c, 0x13, 0x57, 0x9c, 0x13, 0x7d,
	0x67, 0x9c, 0x5e, 0x70, 0x3d, 0x5a, 0x69, 0x4b, 0xa1, 0x8e, 0x73, 0xe2, 0xaa, 0x15, 0x9c, 0x2c,
	0x2a, 0x7f, 0x51, 0x80, 0x4a, 0x8a, 0x01, 0xdd, 0x83, 0x5a, 0x76, 0xed, 0xb0, 0x14, 0x38, 0x9b,
	0xcf, 0x2a, 0x49, 0xaf, 0x1b, 0x05, 0x8a, 0x01, 0xf1, 0x75, 0x82, 0xfb, 0xe7, 0x22, 0xc2, 0x8c,
	0xca, 0x74, 0x5b, 0x27, 0x14, 0xcc, 0xc7, 0x03, 0x97, 0x60, 0x9b, 0xef, 0x66, 0x8b, 0xaa, 0xd0,
	0x3b, 0x55, 0x50, 0xd3, 0x0e, 0x7b, 0x21, 0xe3, 0xb0, 0x15, 0x28, 0x9e, 0xba, 0x01, 0x61, 0x36,
	0x9d, 0x47, 0xdc, 0x51, 0x19, 0xf5, 0xa1, 0x4e, 0xac, 0x01, 0xdd, 0x30, 0x1f, 0xfb, 0x58, 0x3f,
	0x33, 0xdd, 0xe7, 0xf2, 0x2c, 0xf7, 0xd1, 0x65, 0xe6, 0x84, 0xea, 0x9a, 0xe5, 0xf4, 0xd7, 0x25,
	0x86, 0x5a, 0x23, 0x69, 0x02, 0xd2, 0xa1, 0xea, 0xe3, 0xc0, 0x0d, 0x7d, 0x03, 0x6b, 0x61, 0xa0,
	0xf7, 0x71, 0xb3, 0xc0, 0x3e, 0xec, 0x07, 0x97, 0x6a, 0x46, 0x15, 0x10, 0x47, 0x14, 0x41, 0xad,
	0xf8, 0xc9, 0xa2, 0xf2, 0x6f, 0x39, 0xa8, 0x65, 0xfa, 0x81, 0x54, 0x28, 0x18, 0xa7, 0x96, 0x6d,
	0x8a, 0x58, 0xec, 0x9b, 0x0d, 0x8a, 0x43, 0x45, 0xfe, 0x71, 0x36, 0xe1, 0x1f, 0xa9, 0xef, 0x49,
	0xe4, 0x55, 0xe2, 0xe5, 0x03, 0x24, 0x4e, 0xa9, 0xdc, 0x87, 0x3c, 0x4b, 0xa6, 0xe4, 0x27, 0x2d,
	0x0f, 0xc6, 0xa6, 0x3c, 0x84, 0x4a, 0x6a, 0xbc, 0x23, 0x1d, 0x73, 0x6a, 0x77, 0x32, 0x27, 0x76,
	0x27, 0x8f, 0xf3, 0xc5, 0x5c, 0x7d, 0xb6, 0xf5, 0xbf, 0x05, 0x28, 0x27, 0x92, 0xa1, 0xd4, 0xc8,
	0xba, 0xcf, 0xb0, 0xaf, 0xdb, 0xb6, 0x76, 0x29, 0xb3, 0x58, 0x11, 0x52, 0x62, 0x67, 0xfc, 0x26,
	0xd4, 0x88, 0x4b, 0x74, 0x5b, 0xf3, 0x43, 0x27, 0x75, 0xc2, 0x53, 0x61, 0x64, 0x35, 0x74, 0xd8,
	0x19, 0x0f, 0x55, 0xca, 0x98, 0x03, 0xb8, 0x52, 0xfa, 0xb2, 0xf2, 0x0e, 0x54, 0xa4, 0xd9, 0xe0,
	0x0c, 0x35, 0xc6, 0xb0, 0x28, 0x88, 0x9c, 0x89, 0x6e, 0x65, 0x4e, 0x75, 0xdf, 0x14, 0x2c, 0x65,
	0xc6, 0x02, 0x8c, 0xc4, 0x19, 0xde, 0x85, 0x79, 0x4f, 0x0f, 0x02, 0x76, 0xef, 0xe6, 0x62, 0x33,
	0x21, 0xf8, 0xa8, 0x04, 0x75, 0x19, 0xd8, 0x9c, 0xe4, 0x72, 0x55, 0xc1, 0x87, 0xee, 0x42, 0x9d,
	0x0f, 0xd7, 0x09, 0x07, 0x1a, 0x5f, 0x77, 0x6c, 0x15, 0x16, 0xd4, 0x2a, 0xa3, 0xef, 0x87, 0x83,
	0x0d, 0x46, 0x45, 0x0f, 0xe1, 0xfa, 0x89, 0xe5, 0x07, 0xd2, 0xc2, 0x27, 0x15, 0x22, 0xf6, 0x9d,
	0x57, 0x18, 0x4b, 0x37, 0x93, 0x6d, 0xdb, 0x84, 0x7a, 0x56, 0x54, 0x5c, 0x51, 0xb8, 0xc8, 0xae,
	0x57, 0xd3, 0x58, 0xe8, 0x77, 0xe0, 0xaa, 0xad, 0x33, 0x10, 0xd7, 0x4b, 0x35, 0x5f, 0x8c, 0x5d,
	0x37, 0x65, 0xe8, 0x12, 0xd7, 0x4b, 0x34, 0xfe, 0x09, 0x54, 0xd3, 0x62, 0xe2, 0x06, 0xce, 0x45,
	0x4d, 0x2f, 0x26, 0x71, 0xd0, 0x47, 0x70, 0x23, 0x56, 0x89, 0xac, 0x2f, 0x29, 0x45, 0x8d, 0x5f,
	0x93, 0x0a, 0x92, 0x71, 0x24, 0xdb, 0x80, 0x86, 0xc5, 0xc5, 0x3d, 0x9d, 0x0b, 0x96, 0x49, 0x3d,
	0x0b, 0xd7, 0xfa, 0xab, 0x1c, 0x54, 0x52, 0xf9, 0x77, 0xf4, 0x00, 0xae, 0x4a, 0x9d, 0xe7, 0x1f,
	0x3a, 0x1d, 0x3c, 0x2e, 0x89, 0x4a, 0x9e, 0x3e, 0x15, 0x81, 0xe4, 0x3e, 0x48, 0xb2, 0xc6, 0x63,
	0x45, 0xbe, 0x58, 0x66, 0xa7, 0x5a, 0x2c, 0x0d, 0x21, 0x1a, 0x93, 0x5a, 0xff, 0x32, 0x27, 0x92,
	0x3b, 0xd1, 0x81, 0xfa, 0x3d, 0xa8, 0x45, 0x2b, 0x31, 0xd9, 0x1f, 0xee, 0x21, 0xe4, 0x72, 0x13,
	0xdd, 0xd9, 0x4e, 0x1a, 0x77, 0xbe, 0xe7, 0x7a, 0x67, 0x6c, 0xec, 0x2d, 0x9b, 0x58, 0x69, 0x0b,
	0xf3, 0x9f, 0xda, 0xb9, 0x21, 0x7e, 0x37, 0x60, 0x4c, 0x0e, 0xb8, 0xce, 0x6b, 0x13, 0x9a, 0xf1,
	0x21, 0x94, 0x13, 0x12, 0x22, 0x4f, 0x77, 0x91, 0x5a, 0x40, 0x0c, 0x81, 0xbe, 0x80, 0xaa, 0xee,
	0xb8, 0x03, 0xdd, 0x3e, 0xd7, 0x7c, 0x4c, 0x23, 0x57, 0x61, 0xf8, 0x56, 0x27, 0x77, 0x7e, 0x8d,
	0xcb, 0xa9, 0x4c, 0x8c, 0x6f, 0xd5, 0xf4, 0x24, 0x49, 0x79, 0x00, 0x45, 0x39, 0xc0, 0x31, 0x19,
	0x80, 0x7c, 0x62, 0xf3, 0xca, 0xfe, 0x2b, 0xef, 0x41, 0x25, 0x85, 0x4b, 0x6d, 0xd0, 0x73, 0x3d,
	0xd0, 0x82, 0x30, 0xf0, 0xb0, 0x63, 0x62, 0x53, 0xe8, 0xc4, 0xe2, 0x73, 0x3d, 0xe8, 0x4a, 0x5a,
	0xeb, 0xa7, 0xf2, 0x26, 0xa2, 0xbc, 0x58, 0x70, 0x04, 0x55, 0x11, 0xa1, 0xc8, 0x2b, 0x1c, 0xb9,
	0x09, 0x37, 0x43, 0x84, 0xa4, 0xb8, 0x90, 0x23, 0x34, 0x53, 0xad, 0xe8, 0xc9, 0x22, 0x85, 0x1d,
	0xe0, 0x01, 0x8d, 0xe4, 0xe5, 0x45, 0x88, 0xd9, 0x29, 0x61, 0xf7, 0x98, 0x98, 0x28, 0xa9, 0x95,
	0x41, 0xb2, 0x48, 0x61, 0xc5, 0xa6, 0x48, 0xc2, 0xce, 0x4d, 0x09, 0xcb, 0xd7, 0x51, 0x04, 0x4b,
	0x92, 0x45, 0xf4, 0x19, 0xd4, 0x3c, 0xdd, 0x38, 0xd3, 0xfb, 0x38, 0xc2, 0x9d, 0xf4, 0x71, 0x25,
	0xee, 0x21, 0x97, 0x93, 0xc0, 0x55, 0x2f, 0x55, 0x66, 0x1d, 0xe6, 0x11, 0x89, 0x04, 0x2e, 0x4c,
	0xdb, 0x61, 0x26, 0x16, 0x77, 0x38, 0x59, 0x44, 0x3a, 0x20, 0x23, 0x1c, 0x84, 0xb6, 0x4e, 0xac,
	0x67, 0x71, 0x9f, 0x27, 0x5d, 0xa5, 0x92, 0xd0, 0x1b, 0x91, 0xa8, 0x84, 0x6f, 0x18, 0x59, 0x12,
	0xfa, 0x5d, 0xa8, 0xeb, 0x3e, 0xb1, 0x4e, 0x74, 0x23, 0x9e, 0xec, 0x49, 0xd9, 0x89, 0x48, 0x35,
	0x84, 0xa0, 0x84, 0xaf, 0xe9, 0x69, 0x02, 0x3a, 0x86, 0x25, 0x8e, 0xd1, 0xf7, 0x75, 0xef, 0x34,
	0xc2, 0x2f, 0x4e, 0x39, 0x00, 0x56, 0xd8, 0xa6, 0xa2, 0xd1, 0x00, 0x8e, 0xb3, 0x24, 0x3a, 0xf5,
	0xcf, 0x5d, 0xff, 0x0c, 0xfb, 0x11, 0x7c, 0x89, 0xf9, 0xc8, 0xc9, 0x53, 0xff, 0x29, 0x13, 0x8b,
	0xa6, 0xfe, 0x79, 0xb2, 0xa8, 0xfc, 0x5f, 0x1e, 0x2a, 0x29, 0xd5, 0xa7, 0x71, 0x2d, 0x57, 0xfe,
	0x40, 0x33, 0x7c, 0xac, 0x13, 0xb1, 0xf4, 0xe6, 0x54, 0xb1, 0xb2, 0x82, 0x0d, 0x4e, 0x45, 0x87,
	0xf0, 0x46, 0x86, 0x51, 0x73, 0x5c, 0xa2, 0x59, 0x8e, 0x61, 0x87, 0x26, 0xd5, 0x11, 0x7e, 0x25,
	0x40, 0x04, 0x5c, 0xea, 0xed, 0xb4, 0xf8, 0xbe, 0x4b, 0x3a, 0x92, 0x73, 0x8d, 0x33, 0xa2, 0xb7,
	0xe5, 0x85, 0xba, 0x40, 0xc3, 0x22, 0x39, 0x26, 0x42, 0x27, 0xd9, 0xa5, 0x28, 0x67, 0xf6, 0x05,
	0x94, 0xc5, 0x42, 0x67, 0x49, 0x78, 0x1e, 0x2f, 0x3c, 0xbc, 0xdc, 0x2a, 0x17, 0xa5, 0x4d, 0x9d,
	0xe8, 0x2a, 0xe8, 0xd1, 0x7f, 0xb4, 0x02, 0x0d, 0x1e, 0xd2, 0xf3, 0x88, 0x42, 0x3b, 0xb5, 0x08,
	0x57, 0x74, 0x71, 0x1a, 0xc7, 0x2b, 0x59, 0x5c, 0xb1, 0x63, 0x91, 0x00, 0xfd, 0x08, 0x16, 0xfd,
	0xd0, 0x71, 0xb0, 0x2f, 0x42, 0xa1, 0xf9, 0xf1, 0xc1, 0xf3, 0x05, 0x9d, 0x51, 0x19, 0x04, 0x0b,
	0x9d, 0xd4, 0xb2, 0x1f, 0x17, 0x94, 0xbf, 0xcb, 0x01, 0xc4, 0x3d, 0xbd, 0x30, 0xbf, 0x7f, 0x89,
	0x09, 0xbc, 0x9b, 0x0a, 0x6a, 0xb0, 0xa9, 0x0d, 0xe4, 0x87, 0x4a, 0x04, 0x2e, 0xd8, 0xdc, 0x0b,
	0x50, 0x0b, 0x2a, 0x2c, 0x02, 0x61, 0x26, 0x97, 0xb2, 0xe5, 0x19, 0x5b, 0x99, 0x12, 0xdb, 0x94,
	0xb6, 0x17, 0x28, 0x3f, 0x80, 0x72, 0xa2, 0xff, 0xe3, 0x82, 0x61, 0x3e, 0x3d, 0xdc, 0xec, 0xf3,
	0x82, 0xf2, 0x27, 0x73, 0x50, 0x49, 0xd9, 0x48, 0xf4, 0x3e, 0xdc, 0x08, 0x03, 0x6c, 0x6a, 0xa7,
	0x58, 0xf7, 0x58, 0x26, 0x48, 0xf3, 0xdc, 0x80, 0xf0, 0x00, 0x41, 0x68, 0xe2, 0x55, 0xca, 0xb0,
	0x83, 0x75, 0xaf, 0x6b, 0xbd, 0xc4, 0x87, 0x6e, 0x40, 0xd8, 0xb4, 0xa2, 0x07, 0x70, 0xcd, 0xc3,
	0xfa, 0x19, 0xe7, 0xef, 0x1b, 0x31, 0x82, 0x98, 0x03, 0x44, 0x6b, 0x29, 0xfb, 0xb6, 0x21, 0x85,
	0xd1, 0x2e, 0xbc, 0x9e, 0x92, 0x21, 0xd8, 0x61, 0xb7, 0x20, 0xf9, 0xc9, 0x63, 0x8c, 0xc0, 0xc7,
	0xbc, 0x1c, 0x23, 0xf4, 0x38, 0x63, 0x97, 0xf2, 0x45, 0x68, 0x27, 0x50, 0xeb, 0xeb, 0xfe, 0x71,
	0xd2, 0xf2, 0xf2, 0xd8, 0xf7, 0xa3, 0xcb, 0x39, 0x8a, 0x95, 0x6d, 0x8e, 0x12, 0xd9, 0xe1, 0x7e,
	0xaa, 0xac, 0xfc, 0x10, 0xaa, 0x69, 0x8e, 0x28, 0x53, 0x9c, 0x4b, 0x64, 0x8a, 0xef, 0x41, 0x43,
	0xf6, 0xc6, 0x70, 0x6d, 0x1b, 0x1b, 0xb1, 0x3a, 0xd4, 0x45, 0xc5, 0x86, 0xa4, 0x2b, 0xbf, 0x8c,
	0xa2, 0x33, 0x09, 0xf9, 0x86, 0xf4, 0x4e, 0x81, 0x66, 0xbb, 0xba, 0x19, 0xd9, 0x01, 0xe1, 0x6d,
	0x82, 0x5d, 0x46, 0x44, 0xf7, 0x01, 0x49, 0xb6, 0xc4, 0x6d, 0x66, 0xde, 0x8c, 0xb8, 0xe6, 0x1c,
	0x24, 0x8e, 0x2a, 0x9e, 0xc2, 0xdd, 0x61, 0xf6, 0x0b, 0x0d, 0xc7, 0xeb, 0x43, 0x20, 0x23, 0x6c,
	0x87, 0xf2, 0x10, 0xaa, 0x69, 0xe7, 0x45, 0x0d, 0x99, 0x70, 0x5f, 0x99, 0x01, 0x48, 0xaf, 0x26,
	0x46, 0xa0, 0xfc, 0x35, 0x1d, 0x7a, 0xca, 0x21, 0xdd, 0x81, 0xaa, 0xe1, 0x85, 0x3c, 0x12, 0xb3,
	0x1c, 0xaa, 0xf3, 0x5c, 0xb2, 0x6c, 0x78, 0x21, 0x0d, 0x9f, 0x3a, 0xce, 0x1e, 0x9d, 0x9f, 0xda,
	0x73, 0x16, 0x86, 0xc6, 0x5c, 0x7c, 0xd4, 0x8b, 0x94, 0x1c, 0xb1, 0xbd, 0x0f, 0x37, 0x74, 0x47,
	0xb7, 0xcf, 0x03, 0x2b, 0xd0, 0xbc, 0x53, 0x3d, 0xc0, 0x49, 0x01, 0x3e, 0xc2, 0xab, 0x92, 0xe1,
	0x90, 0xd6, 0x4b, 0x49, 0xe5, 0x08, 0x1a, 0x43, 0xbe, 0x0d, 0xdd, 0x86, 0x45, 0xba, 0xd7, 0xe1,
	0x12, 0x38, 0x10, 0xfb, 0xae, 0xb2, 0x13, 0x0e, 0xd6, 0x04, 0x09, 0xbd, 0x0a, 0x40, 0x59, 0x98,
	0xc6, 0x05, 0x2c, 0x52, 0x2f, 0xa8, 0x25, 0x27, 0x1c, 0x30, 0x7d, 0x0b, 0x94, 0x5f, 0xe6, 0xa1,
	0x96, 0x71, 0x69, 0xc8, 0x83, 0xab, 0x62, 0xff, 0x2f, 0x7d, 0x5b, 0xa0, 0xf9, 0x58, 0x37, 0x45,
	0x9c, 0xf3, 0xe8, 0xb2, 0x3e, 0x92, 0xed, 0xd2, 0x02, 0x5e, 0x50, 0x97, 0x38, 0xb4, 0x64, 0x09,
	0x54, 0xac, 0x9b, 0xb4, 0x45, 0x91, 0xac, 0x8d, 0x5b, 0x0c, 0x30, 0x96, 0xb7, 0xbb, 0xbe, 0x61,
	0x8b, 0x1c, 0x3a, 0x6a, 0xb1, 0x8b, 0xb1, 0x83, 0xfe, 0x34, 0x07, 0xad, 0xa1, 0x26, 0x4f, 0x7c,
	0x77, 0x20, 0x93, 0x5a, 0xcc, 0xda, 0x5f, 0x94, 0x61, 0x99, 0xba, 0xfd, 0xe5, 0x4c, 0xfb, 0x5b,
	0xbe, 0x3b, 0x10, 0xb7, 0xe2, 0x68, 0x1b, 0xc8, 0x86, 0x25, 0xba, 0x9d, 0xb3, 0xf1, 0x33, 0x6c,
	0xc7, 0x9d, 0x11, 0xc1, 0xd4, 0x37, 0x6b, 0xba, 0x41, 0x5c, 0x6f, 0x97, 0xe2, 0x46, 0x8d, 0x2b,
	0xdb, 0x50, 0x4e, 0x70, 0x50, 0x7b, 0xce, 0xcc, 0xaa, 0xe5, 0x68, 0xc7, 0xe7, 0x04, 0x47, 0xba,
	0x4d, 0x89, 0x1d, 0x67, 0x9d, 0x92, 0x46, 0x1b, 0x6b, 0x9e, 0xb9, 0x50, 0x7e, 0x52, 0x80, 0xc6,
	0x50, 0xc8, 0x82, 0x1e, 0xc2, 0x0d, 0x31, 0x8d, 0xb6, 0xeb, 0x9e, 0x85, 0x9e, 0xc6, 0x92, 0x1d,
	0xa9, 0x14, 0xc4, 0x35, 0xce, 0xb0, 0xcb, 0xea, 0x9f, 0xd2, 0x6a, 0xee, 0x2d, 0x8e, 0x61, 0x75,
	0xac, 0xe8, 0x18, 0xcb, 0x50, 0x60, 0x80, 0x6f, 0x8f, 0x06, 0x1c, 0x15, 0x5a, 0xdc, 0x86, 0xc5,
	0xe8, 0xae, 0x7e, 0x3c, 0xae, 0xb2, 0xbc, 0x71, 0x4f, 0xbb, 0xf1, 0x18, 0x5a, 0x49, 0x96, 0x31,
	0x2d, 0xf3, 0xec, 0xc2, 0x72, 0x42, 0x70, 0x54, 0x73, 0x8f, 0xa1, 0x65, 0x39, 0x54, 0xd3, 0xd8,
	0xc1, 0x4c, 0xc2, 0xd0, 0x45, 0x2f, 0x12, 0x68, 0x27, 0x78, 0x32, 0x70, 0x99, 0x71, 0xd2, 0x2f,
	0x14, 0x5b, 0x38, 0x79, 0xae, 0x42, 0xfb, 0xb5, 0x0b, 0x77, 0x84, 0xda, 0x5e, 0x08, 0x56, 0x64,
	0x60, 0xb7, 0x38, 0xeb, 0x78, 0xb4, 0x35, 0x78, 0xd5, 0x25, 0xa7, 0x2c, 0x56, 0x19, 0x8d, 0x53,
	0x62, 0x38, 0x0a, 0x63, 0x1a, 0x0d, 0xf1, 0x60, 0x68, 0xe9, 0x0a, 0x51, 0x7e, 0x0d, 0x30, 0xb3,
	0xf8, 0xa2, 0x41, 0x30, 0x17, 0x9b, 0xb8, 0x3f, 0x12, 0x9c, 0x9d, 0x9f, 0xf8, 0xfa, 0x00, 0x6b,
	0x8e, 0x6b, 0x4a, 0x45, 0xe1, 0x17, 0x06, 0x6f, 0x51, 0xd6, 0xf8, 0x5e, 0x49, 0x57, 0x30, 0xee,
	0xbb, 0xa6, 0xb8, 0xa1, 0xfc, 0xb3, 0x39, 0xa8, 0xa4, 0xc2, 0x5a, 0x74, 0x93, 0xdf, 0x28, 0xc7,
	0xbe, 0x26, 0xae, 0x56, 0x15, 0xd4, 0x22, 0x27, 0x74, 0x4c, 0x6a, 0x10, 0x3d, 0xdf, 0xa5, 0xfb,
	0x75, 0x5a, 0x4b, 0x3f, 0x7d, 0x45, 0x2d, 0x09, 0x4a, 0xc7, 0x4c, 0x45, 0x54, 0x73, 0x99, 0x88,
	0xea, 0x36, 0x2c, 0x5a, 0x81, 0x36, 0x08, 0x6d, 0x62, 0x79, 0x36, 0x7e, 0x21, 0x0e, 0x11, 0xca,
	0x56, 0xb0, 0x27, 0x49, 0x14, 0xdd, 0x0a, 0xb4, 0x40, 0x77, 0xcc, 0x63, 0xf7, 0x85, 0xb8, 0xc6,
	0x50, 0xb2, 0x82, 0x2e, 0x27, 0xd0, 0x8d, 0x2c, 0x45, 0xc0, 0x7a, 0x10, 0xfa, 0xec, 0xf2, 0x04,
	0xcf, 0x12, 0x2f, 0x5a, 0xc1, 0x5e, 0x44, 0xa3, 0x21, 0xa4, 0xe8, 0x7e, 0x40, 0x74, 0x12, 0xb0,
	0xdc, 0xf8, 0x34, 0x21, 0x64, 0x6a, 0x12, 0x44, 0xa9, 0x4b, 0x11, 0xd4, 0xf2, 0xf3, 0xb8, 0xa0,
	0x58, 0x50, 0x4e, 0xd4, 0xa1, 0x7b, 0x80, 0x44, 0x40, 0x30, 0xec, 0xe2, 0x6a, 0xa2, 0x26, 0xf2,
	0x5f, 0xf7, 0xf9, 0x55, 0x2c, 0xb6, 0xf1, 0x60, 0x5b, 0x60, 0xcb, 0xd1, 0xce, 0x8e, 0xc5, 0x02,
	0xaa, 0xcb, 0xdd, 0x04, 0xad, 0xe9, 0x38, 0x4f, 0x8e, 0x5b, 0x1f, 0x8a, 0x74, 0x4a, 0xf4, 0x86,
	0xe0, 0x1d, 0x98, 0xb3, 0xdd, 0xfe, 0xc4, 0xf3, 0x76, 0xca, 0xd4, 0x7a, 0x09, 0xaf, 0x5e, 0x78,
	0xd1, 0x11, 0x7d, 0x0e, 0x57, 0x46, 0x5d, 0xc4, 0x17, 0xe8, 0x6f, 0x8e, 0xb9, 0x90, 0x92, 0x01,
	0x54, 0x97, 0x46, 0xdc, 0xb0, 0x6f, 0xfd, 0x73, 0x0e, 0xd0, 0x30, 0x2f, 0x0d, 0xac, 0x3c, 0x9d,
	0x9c, 0xca, 0xc0, 0x8a, 0xfe, 0x47, 0x6d, 0x98, 0xe7, 0xeb, 0x5f, 0xa4, 0x9d, 0xee, 0x4f, 0xd7,
	0xae, 0x08, 0xf8, 0x55, 0x21, 0x8c, 0xae, 0xc1, 0x3c, 0x5f, 0x79, 0x42, 0xeb, 0x44, 0xa9, 0x75,
	0x1f, 0xe6, 0x39, 0x67, 0xfa, 0x52, 0x24, 0xc0, 0xfc, 0x86, 0xda, 0x5e, 0xeb, 0xb5, 0xeb, 0x39,
	0xfa, 0x7f, 0xb3, 0xcd, 0x2e, 0x1d, 0xce, 0xb6, 0xfe, 0xa7, 0x0a, 0x10, 0x1f, 0xed, 0xa2, 0x77,
	0xa3, 0xdb, 0xe2, 0xe5, 0x07, 0xaf, 0x4d, 0x3a, 0x06, 0x56, 0x67, 0x2d, 0x13, 0x3d, 0x82, 0x22,
	0x4b, 0x9e, 0xfb, 0xd8, 0x11, 0x27, 0x3a, 0x93, 0xe5, 0x22, 0x09, 0xba, 0x42, 0xd8, 0xf6, 0x60,
	0x80, 0x03, 0x76, 0x74, 0x70, 0x85, 0xaf, 0x10, 0x4a, 0xdb, 0xe3, 0x24, 0xf4, 0x41, 0xe2, 0x35,
	0x27, 0x77, 0xef, 0x23, 0x8f, 0x75, 0xe5, 0xd5, 0xd5, 0xd4, 0xf3, 0xcd, 0x1f, 0xc0, 0x82, 0xce,
	0x2f, 0x9a, 0x0a, 0xcf, 0x7c, 0xf3, 0x82, 0xbb, 0xa8, 0x3b, 0x33, 0xaa, 0xe4, 0x46, 0x8f, 0xe2,
	0x77, 0x9f, 0x85, 0x09, 0x93, 0x21, 0xf6, 0x3a, 0xc9, 0x87, 0x9e, 0xd6, 0x45, 0x0f, 0x3d, 0x17,
	0xc7, 0xbf, 0x48, 0x1d, 0x73, 0x55, 0xf0, 0xa2, 0x97, 0x9d, 0xdd, 0xf1, 0x2f, 0x3b, 0xaf, 0x89,
	0x2c, 0x6b, 0xea, 0x61, 0x6f, 0x1a, 0x76, 0xcc, 0xd3, 0xcd, 0xc7, 0x43, 0x2f, 0x2b, 0x79, 0xc6,
	0xfa, 0xf6, 0xc8, 0xd3, 0xf0, 0xe4, 0x7d, 0xc5, 0xe1, 0xa7, 0x94, 0x87, 0x23, 0x9e, 0x81, 0xf2,
	0xd7, 0x8a, 0x77, 0xa6, 0xb8, 0x79, 0x37, 0xea, 0xdd, 0xe7, 0x77, 0xe5, 0xe3, 0xcc, 0xab, 0x62,
	0x80, 0xa3, 0xac, 0x02, 0x65, 0x88, 0x5f, 0x63, 0x76, 0xb2, 0x77, 0x4b, 0x1a, 0xe3, 0xc7, 0x93,
	0xba, 0x4e, 0x32, 0xfc, 0xfc, 0x72, 0x0d, 0x8a, 0x58, 0x5c, 0xe7, 0x12, 0x49, 0xa6, 0x3b, 0x53,
	0xdc, 0xfc, 0xa2, 0x5a, 0x29, 0xc5, 0xd0, 0x16, 0x40, 0x62, 0xb3, 0xc3, 0x1f, 0xe0, 0xbe, 0x3e,
	0x32, 0xf9, 0x9c, 0xb9, 0xaa, 0xb5, 0x33, 0xa3, 0x26, 0x24, 0xd1, 0xa3, 0xc8, 0x92, 0xf0, 0x64,
	0x54, 0x6b, 0xa4, 0x72, 0xa7, 0xae, 0x0b, 0xed, 0xcc, 0x44, 0x06, 0x44, 0x05, 0x14, 0x3d, 0x9a,
	0xd4, 0xdc, 0x13, 0x8d, 0xdf, 0x6c, 0xaa, 0x8d, 0x1f, 0x52, 0xe6, 0xd2, 0x07, 0xfd, 0x34, 0x4e,
	0xe6, 0x82, 0xd4, 0x3a, 0x94, 0xe2, 0xd7, 0x8c, 0xc5, 0xf1, 0x9d, 0x4a, 0xdf, 0xfc, 0xd8, 0x99,
	0x51, 0x63, 0x31, 0xb4, 0x96, 0x7e, 0xef, 0x07, 0xe2, 0xb6, 0xc0, 0x85, 0xc7, 0x7b, 0x99, 0x07,
	0x7e, 0x9b, 0x99, 0x07, 0x7e, 0xfc, 0xc6, 0xc1, 0xad, 0xb1, 0xf9, 0x7d, 0xce, 0x96, 0x7d, 0xd1,
	0xf7, 0x78, 0xe8, 0x45, 0xdf, 0x2b, 0xe3, 0xb5, 0x26, 0x75, 0x36, 0x31, 0xfc, 0x84, 0xef, 0x63,
	0x28, 0x46, 0x8f, 0xf7, 0xaa, 0xe3, 0x51, 0x52, 0xb9, 0x72, 0xaa, 0x33, 0x52, 0x08, 0x3d, 0x19,
	0x7e, 0xa8, 0x77, 0x7d, 0x02, 0x8e, 0x74, 0xa2, 0xc3, 0x2f, 0xf3, 0xb6, 0xb3, 0x2f, 0xf3, 0x9a,
	0x13, 0x6c, 0x9c, 0x88, 0x11, 0x86, 0x9e, 0xe2, 0xed, 0xf2, 0xbc, 0x22, 0x5f, 0xdc, 0xec, 0xd8,
	0xfd, 0xc6, 0x14, 0x4b, 0x9b, 0x2b, 0x34, 0xed, 0x56, 0x24, 0xcc, 0x4e, 0xd7, 0x1f, 0x0f, 0x3d,
	0xc2, 0x53, 0x26, 0x0c, 0x51, 0x5e, 0x9a, 0x1a, 0x7e, 0x75, 0xf7, 0x07, 0x93, 0x1f, 0xdd, 0xdd,
	0x64, 0xe0, 0xdf, 0x9d, 0xce, 0xfd, 0x26, 0xe2, 0x88, 0x89, 0xaf, 0xec, 0xd6, 0x4b, 0xb0, 0xe0,
	0xe9, 0xe7, 0xb6, 0xab, 0x9b, 0x8f, 0xf3, 0xc5, 0x72, 0x7d, 0xf1, 0x71, 0xbe, 0xb8, 0x54, 0xbf,
	0xf2, 0xce, 0x36, 0x14, 0xe5, 0xe5, 0xa3, 0xb4, 0x73, 0x2e, 0x41, 0xa1, 0xbb, 0xb7, 0xb6, 0xbb,
	0xcb, 0x7d, 0xf3, 0x5e, 0x7b, 0xb3, 0x73, 0xb4, 0x57, 0x9f, 0xa5, 0xe4, 0xdd, 0x35, 0x75, 0x5b,
	0xbc, 0x38, 0x68, 0xef, 0x1f, 0xa8, 0x7b, 0x07, 0x47, 0xdd, 0x7a, 0xfe, 0x9d, 0xbf, 0xcf, 0xf1,
	0xcb, 0x30, 0xc2, 0x20, 0x56, 0xa0, 0xb4, 0x7f, 0xa0, 0x75, 0x7b, 0x6b, 0xbd, 0xa3, 0x2e, 0x77,
	0xf5, 0x87, 0x6b, 0xdd, 0x2e, 0x7b, 0xf5, 0x50, 0x82, 0xc2, 0xd6, 0xee, 0xda, 0x93, 0xcf, 0xeb,
	0xb3, 0xb4, 0xc5, 0x5e, 0x67, 0xaf, 0x7d, 0x70, 0xd4, 0xab, 0xcf, 0x51, 0x9e, 0xad, 0xb5, 0xce,
	0x6e, 0x7b, 0xb3, 0x9e, 0xcf, 0xbc, 0x43, 0x28, 0x20, 0x04, 0x55, 0xf1, 0xfa, 0x21, 0x7e, 0xb8,
	0xb0, 0x04, 0x35, 0xce, 0xaf, 0xf5, 0xe4, 0xa3, 0x89, 0x05, 0xb4, 0x0c, 0x4a, 0xef, 0xe0, 0x60,
	0x57, 0xdb, 0x59, 0xdb, 0xed, 0xb5, 0x37, 0xb5, 0xf5, 0xf6, 0xd6, 0x81, 0xda, 0xd6, 0x7a, 0xed,
	0x6e, 0xaf, 0xb3, 0xbf, 0x5d, 0x2f, 0xae, 0x9f, 0xfe, 0xea, 0xbf, 0x96, 0x67, 0x7e, 0xf5, 0xe5,
	0x72, 0xee, 0xd7, 0x5f, 0x2e, 0xe7, 0x7e, 0xf3, 0xe5, 0x72, 0xee, 0x3f, 0xbf, 0x5c, 0xce, 0xfd,
	0xf4, 0xab, 0xe5, 0x99, 0x5f, 0x7f, 0xb5, 0x3c, 0xf3, 0x9b, 0xaf, 0x96, 0x67, 0x80, 0xfa, 0x26,
	0x79, 0xe6, 0x64, 0xe2, 0x67, 0x54, 0xb7, 0x03, 0xfe, 0x3d, 0x56, 0x6c, 0xeb, 0x98, 0xff, 0x63,
	0x1f, 0x86, 0x7f, 0x97, 0xf5, 0x6b, 0x71, 0x18, 0xd1, 0x65, 0x94, 0x43, 0xdf, 0x25, 0x6e, 0x70,
	0x3c, 0xcf, 0x0e, 0xac, 0xbe, 0xf7, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x09, 0x77, 0xee,
	0x56, 0x43, 0x00, 0x00,
}

func (m *BuildEventId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size := m.Id.Size()
			i -= size
			if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BuildEventId_Unknown) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_Unknown) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Unknown != nil {
		{
			size, err := m.Unknown.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_Progress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_Progress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Progress != nil {
		{
			size, err := m.Progress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_Started) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_Started) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Started != nil {
		{
			size, err := m.Started.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_Pattern) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_Pattern) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pattern != nil {
		{
			size, err := m.Pattern.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_TargetCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_TargetCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TargetCompleted != nil {
		{
			size, err := m.TargetCompleted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_ActionCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_ActionCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActionCompleted != nil {
		{
			size, err := m.ActionCompleted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_TestSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_TestSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TestSummary != nil {
		{
			size, err := m.TestSummary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_TestResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_TestResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TestResult != nil {
		{
			size, err := m.TestResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_BuildFinished) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_BuildFinished) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BuildFinished != nil {
		{
			size, err := m.BuildFinished.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_PatternSkipped) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_PatternSkipped) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PatternSkipped != nil {
		{
			size, err := m.PatternSkipped.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_UnstructuredCommandLine) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_UnstructuredCommandLine) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnstructuredCommandLine != nil {
		{
			size, err := m.UnstructuredCommandLine.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_OptionsParsed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_OptionsParsed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OptionsParsed != nil {
		{
			size, err := m.OptionsParsed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_NamedSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_NamedSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NamedSet != nil {
		{
			size, err := m.NamedSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_WorkspaceStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_WorkspaceStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkspaceStatus != nil {
		{
			size, err := m.WorkspaceStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_Configuration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_Configuration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_TargetConfigured) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_TargetConfigured) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TargetConfigured != nil {
		{
			size, err := m.TargetConfigured.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_Fetch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_Fetch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Fetch != nil {
		{
			size, err := m.Fetch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_StructuredCommandLine) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_StructuredCommandLine) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StructuredCommandLine != nil {
		{
			size, err := m.StructuredCommandLine.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_UnconfiguredLabel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_UnconfiguredLabel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnconfiguredLabel != nil {
		{
			size, err := m.UnconfiguredLabel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_BuildToolLogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_BuildToolLogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BuildToolLogs != nil {
		{
			size, err := m.BuildToolLogs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_ConfiguredLabel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_ConfiguredLabel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConfiguredLabel != nil {
		{
			size, err := m.ConfiguredLabel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_BuildMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_BuildMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BuildMetrics != nil {
		{
			size, err := m.BuildMetrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_Workspace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_Workspace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Workspace != nil {
		{
			size, err := m.Workspace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_BuildMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_BuildMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BuildMetadata != nil {
		{
			size, err := m.BuildMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_ConvenienceSymlinksIdentified) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_ConvenienceSymlinksIdentified) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConvenienceSymlinksIdentified != nil {
		{
			size, err := m.ConvenienceSymlinksIdentified.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_TargetSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_TargetSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TargetSummary != nil {
		{
			size, err := m.TargetSummary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *BuildEventId_UnknownBuildEventId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_UnknownBuildEventId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_UnknownBuildEventId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildEventId_ProgressId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_ProgressId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_ProgressId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OpaqueCount != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.OpaqueCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildEventId_BuildStartedId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_BuildStartedId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_BuildStartedId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BuildEventId_UnstructuredCommandLineId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_UnstructuredCommandLineId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_UnstructuredCommandLineId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BuildEventId_StructuredCommandLineId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_StructuredCommandLineId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_StructuredCommandLineId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommandLineLabel) > 0 {
		i -= len(m.CommandLineLabel)
		copy(dAtA[i:], m.CommandLineLabel)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.CommandLineLabel)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildEventId_WorkspaceStatusId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_WorkspaceStatusId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_WorkspaceStatusId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BuildEventId_OptionsParsedId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_OptionsParsedId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_OptionsParsedId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BuildEventId_FetchId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_FetchId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_FetchId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildEventId_PatternExpandedId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_PatternExpandedId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_PatternExpandedId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pattern) > 0 {
		for iNdEx := len(m.Pattern) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Pattern[iNdEx])
			copy(dAtA[i:], m.Pattern[iNdEx])
			i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Pattern[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BuildEventId_WorkspaceConfigId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_WorkspaceConfigId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_WorkspaceConfigId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BuildEventId_BuildMetadataId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_BuildMetadataId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_BuildMetadataId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BuildEventId_TargetConfiguredId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_TargetConfiguredId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_TargetConfiguredId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Aspect) > 0 {
		i -= len(m.Aspect)
		copy(dAtA[i:], m.Aspect)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Aspect)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildEventId_NamedSetOfFilesId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_NamedSetOfFilesId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_NamedSetOfFilesId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildEventId_ConfigurationId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_ConfigurationId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_ConfigurationId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildEventId_TargetCompletedId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_TargetCompletedId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_TargetCompletedId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Aspect) > 0 {
		i -= len(m.Aspect)
		copy(dAtA[i:], m.Aspect)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Aspect)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildEventId_ActionCompletedId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_ActionCompletedId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_ActionCompletedId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PrimaryOutput) > 0 {
		i -= len(m.PrimaryOutput)
		copy(dAtA[i:], m.PrimaryOutput)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.PrimaryOutput)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildEventId_UnconfiguredLabelId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_UnconfiguredLabelId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_UnconfiguredLabelId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildEventId_ConfiguredLabelId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_ConfiguredLabelId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_ConfiguredLabelId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildEventId_TestResultId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_TestResultId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_TestResultId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Attempt != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x20
	}
	if m.Shard != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.Shard))
		i--
		dAtA[i] = 0x18
	}
	if m.Run != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.Run))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildEventId_TestSummaryId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_TestSummaryId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_TestSummaryId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildEventId_TargetSummaryId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_TargetSummaryId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_TargetSummaryId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildEventId_BuildFinishedId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_BuildFinishedId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_BuildFinishedId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BuildEventId_BuildToolLogsId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_BuildToolLogsId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_BuildToolLogsId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BuildEventId_BuildMetricsId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_BuildMetricsId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_BuildMetricsId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BuildEventId_ConvenienceSymlinksIdentifiedId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEventId_ConvenienceSymlinksIdentifiedId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEventId_ConvenienceSymlinksIdentifiedId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Progress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Progress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Progress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stderr) > 0 {
		i -= len(m.Stderr)
		copy(dAtA[i:], m.Stderr)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Stderr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stdout) > 0 {
		i -= len(m.Stdout)
		copy(dAtA[i:], m.Stdout)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Stdout)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Aborted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Aborted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Aborted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Reason != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildStarted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildStarted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildStarted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ServerPid != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.ServerPid))
		i--
		dAtA[i] = 0x40
	}
	if len(m.WorkspaceDirectory) > 0 {
		i -= len(m.WorkspaceDirectory)
		copy(dAtA[i:], m.WorkspaceDirectory)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.WorkspaceDirectory)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.WorkingDirectory) > 0 {
		i -= len(m.WorkingDirectory)
		copy(dAtA[i:], m.WorkingDirectory)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.WorkingDirectory)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OptionsDescription) > 0 {
		i -= len(m.OptionsDescription)
		copy(dAtA[i:], m.OptionsDescription)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.OptionsDescription)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BuildToolVersion) > 0 {
		i -= len(m.BuildToolVersion)
		copy(dAtA[i:], m.BuildToolVersion)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.BuildToolVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StartTimeMillis != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.StartTimeMillis))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkspaceConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkspaceConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkspaceConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LocalExecRoot) > 0 {
		i -= len(m.LocalExecRoot)
		copy(dAtA[i:], m.LocalExecRoot)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.LocalExecRoot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnstructuredCommandLine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnstructuredCommandLine) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnstructuredCommandLine) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OptionsParsed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptionsParsed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptionsParsed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToolTag) > 0 {
		i -= len(m.ToolTag)
		copy(dAtA[i:], m.ToolTag)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.ToolTag)))
		i--
		dAtA[i] = 0x32
	}
	if m.InvocationPolicy != nil {
		{
			size, err := m.InvocationPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExplicitCmdLine) > 0 {
		for iNdEx := len(m.ExplicitCmdLine) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExplicitCmdLine[iNdEx])
			copy(dAtA[i:], m.ExplicitCmdLine[iNdEx])
			i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.ExplicitCmdLine[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CmdLine) > 0 {
		for iNdEx := len(m.CmdLine) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CmdLine[iNdEx])
			copy(dAtA[i:], m.CmdLine[iNdEx])
			i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.CmdLine[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ExplicitStartupOptions) > 0 {
		for iNdEx := len(m.ExplicitStartupOptions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExplicitStartupOptions[iNdEx])
			copy(dAtA[i:], m.ExplicitStartupOptions[iNdEx])
			i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.ExplicitStartupOptions[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.StartupOptions) > 0 {
		for iNdEx := len(m.StartupOptions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StartupOptions[iNdEx])
			copy(dAtA[i:], m.StartupOptions[iNdEx])
			i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.StartupOptions[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Fetch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fetch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fetch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkspaceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkspaceStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkspaceStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Item) > 0 {
		for iNdEx := len(m.Item) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Item[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorkspaceStatus_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkspaceStatus_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkspaceStatus_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		keysForMetadata := make([]string, 0, len(m.Metadata))
		for k := range m.Metadata {
			keysForMetadata = append(keysForMetadata, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
		for iNdEx := len(keysForMetadata) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Metadata[string(keysForMetadata[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBuildEventStream(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForMetadata[iNdEx])
			copy(dAtA[i:], keysForMetadata[iNdEx])
			i = encodeVarintBuildEventStream(dAtA, i, uint64(len(keysForMetadata[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBuildEventStream(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Configuration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Configuration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Configuration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsTool {
		i--
		if m.IsTool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.MakeVariable) > 0 {
		keysForMakeVariable := make([]string, 0, len(m.MakeVariable))
		for k := range m.MakeVariable {
			keysForMakeVariable = append(keysForMakeVariable, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForMakeVariable)
		for iNdEx := len(keysForMakeVariable) - 1; iNdEx >= 0; iNdEx-- {
			v := m.MakeVariable[string(keysForMakeVariable[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBuildEventStream(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForMakeVariable[iNdEx])
			copy(dAtA[i:], keysForMakeVariable[iNdEx])
			i = encodeVarintBuildEventStream(dAtA, i, uint64(len(keysForMakeVariable[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBuildEventStream(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Cpu) > 0 {
		i -= len(m.Cpu)
		copy(dAtA[i:], m.Cpu)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Cpu)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PlatformName) > 0 {
		i -= len(m.PlatformName)
		copy(dAtA[i:], m.PlatformName)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.PlatformName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Mnemonic) > 0 {
		i -= len(m.Mnemonic)
		copy(dAtA[i:], m.Mnemonic)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Mnemonic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PatternExpanded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PatternExpanded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PatternExpanded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TestSuiteExpansions) > 0 {
		for iNdEx := len(m.TestSuiteExpansions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TestSuiteExpansions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PatternExpanded_TestSuiteExpansion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PatternExpanded_TestSuiteExpansion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PatternExpanded_TestSuiteExpansion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TestLabels) > 0 {
		for iNdEx := len(m.TestLabels) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TestLabels[iNdEx])
			copy(dAtA[i:], m.TestLabels[iNdEx])
			i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.TestLabels[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SuiteLabel) > 0 {
		i -= len(m.SuiteLabel)
		copy(dAtA[i:], m.SuiteLabel)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.SuiteLabel)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TargetConfigured) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetConfigured) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TargetConfigured) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tag) > 0 {
		for iNdEx := len(m.Tag) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tag[iNdEx])
			copy(dAtA[i:], m.Tag[iNdEx])
			i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Tag[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TestSize != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.TestSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TargetKind) > 0 {
		i -= len(m.TargetKind)
		copy(dAtA[i:], m.TargetKind)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.TargetKind)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *File) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *File) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *File) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Length != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Digest) > 0 {
		i -= len(m.Digest)
		copy(dAtA[i:], m.Digest)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Digest)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PathPrefix) > 0 {
		for iNdEx := len(m.PathPrefix) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PathPrefix[iNdEx])
			copy(dAtA[i:], m.PathPrefix[iNdEx])
			i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.PathPrefix[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.File != nil {
		{
			size := m.File.Size()
			i -= size
			if _, err := m.File.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *File_Uri) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *File_Uri) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Uri)
	copy(dAtA[i:], m.Uri)
	i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Uri)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *File_Contents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *File_Contents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Contents != nil {
		i -= len(m.Contents)
		copy(dAtA[i:], m.Contents)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Contents)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *NamedSetOfFiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamedSetOfFiles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamedSetOfFiles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FileSets) > 0 {
		for iNdEx := len(m.FileSets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FileSets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActionExecuted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionExecuted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionExecuted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FailureDetail != nil {
		{
			size, err := m.FailureDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ActionMetadataLogs) > 0 {
		for iNdEx := len(m.ActionMetadataLogs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActionMetadataLogs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.CommandLine) > 0 {
		for iNdEx := len(m.CommandLine) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CommandLine[iNdEx])
			copy(dAtA[i:], m.CommandLine[iNdEx])
			i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.CommandLine[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x42
	}
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.PrimaryOutput != nil {
		{
			size, err := m.PrimaryOutput.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Stderr != nil {
		{
			size, err := m.Stderr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Stdout != nil {
		{
			size, err := m.Stdout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ExitCode != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.ExitCode))
		i--
		dAtA[i] = 0x10
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OutputGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutputGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutputGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Incomplete {
		i--
		if m.Incomplete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.FileSets) > 0 {
		for iNdEx := len(m.FileSets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FileSets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TargetComplete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetComplete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TargetComplete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TestTimeout != nil {
		{
			size, err := m.TestTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.FailureDetail != nil {
		{
			size, err := m.FailureDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DirectoryOutput) > 0 {
		for iNdEx := len(m.DirectoryOutput) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DirectoryOutput[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.TestTimeoutSeconds != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.TestTimeoutSeconds))
		i--
		dAtA[i] = 0x38
	}
	if m.TestSize != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.TestSize))
		i--
		dAtA[i] = 0x30
	}
	if len(m.TargetKind) > 0 {
		i -= len(m.TargetKind)
		copy(dAtA[i:], m.TargetKind)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.TargetKind)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ImportantOutput) > 0 {
		for iNdEx := len(m.ImportantOutput) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ImportantOutput[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Tag) > 0 {
		for iNdEx := len(m.Tag) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tag[iNdEx])
			copy(dAtA[i:], m.Tag[iNdEx])
			i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Tag[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.OutputGroup) > 0 {
		for iNdEx := len(m.OutputGroup) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutputGroup[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TestResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TestAttemptDuration != nil {
		{
			size, err := m.TestAttemptDuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.TestAttemptStart != nil {
		{
			size, err := m.TestAttemptStart.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.StatusDetails) > 0 {
		i -= len(m.StatusDetails)
		copy(dAtA[i:], m.StatusDetails)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.StatusDetails)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ExecutionInfo != nil {
		{
			size, err := m.ExecutionInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Warning) > 0 {
		for iNdEx := len(m.Warning) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Warning[iNdEx])
			copy(dAtA[i:], m.Warning[iNdEx])
			i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Warning[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.TestAttemptStartMillisEpoch != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.TestAttemptStartMillisEpoch))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.CachedLocally {
		i--
		if m.CachedLocally {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.TestAttemptDurationMillis != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.TestAttemptDurationMillis))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TestActionOutput) > 0 {
		for iNdEx := len(m.TestActionOutput) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TestActionOutput[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *TestResult_ExecutionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestResult_ExecutionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestResult_ExecutionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExitCode != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.ExitCode))
		i--
		dAtA[i] = 0x38
	}
	if m.CachedRemotely {
		i--
		if m.CachedRemotely {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.ResourceUsage) > 0 {
		for iNdEx := len(m.ResourceUsage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourceUsage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.TimingBreakdown != nil {
		{
			size, err := m.TimingBreakdown.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Strategy) > 0 {
		i -= len(m.Strategy)
		copy(dAtA[i:], m.Strategy)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Strategy)))
		i--
		dAtA[i] = 0x12
	}
	if m.TimeoutSeconds != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.TimeoutSeconds))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TestResult_ExecutionInfo_TimingBreakdown) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestResult_ExecutionInfo_TimingBreakdown) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestResult_ExecutionInfo_TimingBreakdown) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != nil {
		{
			size, err := m.Time.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TimeMillis != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.TimeMillis))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Child) > 0 {
		for iNdEx := len(m.Child) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Child[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TestResult_ExecutionInfo_ResourceUsage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestResult_ExecutionInfo_ResourceUsage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestResult_ExecutionInfo_ResourceUsage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AttemptCount != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.AttemptCount))
		i--
		dAtA[i] = 0x78
	}
	if m.LastStopTime != nil {
		{
			size, err := m.LastStopTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.FirstStartTime != nil {
		{
			size, err := m.FirstStartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.TotalRunDuration != nil {
		{
			size, err := m.TotalRunDuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.ShardCount != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.ShardCount))
		i--
		dAtA[i] = 0x58
	}
	if m.RunCount != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.RunCount))
		i--
		dAtA[i] = 0x50
	}
	if m.TotalRunDurationMillis != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.TotalRunDurationMillis))
		i--
		dAtA[i] = 0x48
	}
	if m.LastStopTimeMillis != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.LastStopTimeMillis))
		i--
		dAtA[i] = 0x40
	}
	if m.FirstStartTimeMillis != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.FirstStartTimeMillis))
		i--
		dAtA[i] = 0x38
	}
	if m.TotalNumCached != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.TotalNumCached))
		i--
		dAtA[i] = 0x30
	}
	if m.OverallStatus != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.OverallStatus))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Failed) > 0 {
		for iNdEx := len(m.Failed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Failed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Passed) > 0 {
		for iNdEx := len(m.Passed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Passed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TotalRunCount != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.TotalRunCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TargetSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TargetSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OverallTestStatus != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.OverallTestStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.OverallBuildSuccess {
		i--
		if m.OverallBuildSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildFinished) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildFinished) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildFinished) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinishTime != nil {
		{
			size, err := m.FinishTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.AnomalyReport != nil {
		{
			size, err := m.AnomalyReport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ExitCode != nil {
		{
			size, err := m.ExitCode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FinishTimeMillis != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.FinishTimeMillis))
		i--
		dAtA[i] = 0x10
	}
	if m.OverallSuccess {
		i--
		if m.OverallSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildFinished_ExitCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildFinished_ExitCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildFinished_ExitCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildFinished_AnomalyReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildFinished_AnomalyReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildFinished_AnomalyReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WasSuspended {
		i--
		if m.WasSuspended {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkerMetrics) > 0 {
		for iNdEx := len(m.WorkerMetrics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WorkerMetrics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.BuildGraphMetrics != nil {
		{
			size, err := m.BuildGraphMetrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ArtifactMetrics != nil {
		{
			size, err := m.ArtifactMetrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CumulativeMetrics != nil {
		{
			size, err := m.CumulativeMetrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.TimingMetrics != nil {
		{
			size, err := m.TimingMetrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PackageMetrics != nil {
		{
			size, err := m.PackageMetrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TargetMetrics != nil {
		{
			size, err := m.TargetMetrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MemoryMetrics != nil {
		{
			size, err := m.MemoryMetrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ActionSummary != nil {
		{
			size, err := m.ActionSummary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildMetrics_ActionSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildMetrics_ActionSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildMetrics_ActionSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RunnerCount) > 0 {
		for iNdEx := len(m.RunnerCount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RunnerCount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.RemoteCacheHits != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.RemoteCacheHits))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ActionData) > 0 {
		for iNdEx := len(m.ActionData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActionData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ActionsCreatedNotIncludingAspects != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.ActionsCreatedNotIncludingAspects))
		i--
		dAtA[i] = 0x18
	}
	if m.ActionsExecuted != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.ActionsExecuted))
		i--
		dAtA[i] = 0x10
	}
	if m.ActionsCreated != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.ActionsCreated))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildMetrics_ActionSummary_ActionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildMetrics_ActionSummary_ActionData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildMetrics_ActionSummary_ActionData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastEndedMs != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.LastEndedMs))
		i--
		dAtA[i] = 0x20
	}
	if m.FirstStartedMs != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.FirstStartedMs))
		i--
		dAtA[i] = 0x18
	}
	if m.ActionsExecuted != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.ActionsExecuted))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Mnemonic) > 0 {
		i -= len(m.Mnemonic)
		copy(dAtA[i:], m.Mnemonic)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Mnemonic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildMetrics_ActionSummary_RunnerCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildMetrics_ActionSummary_RunnerCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildMetrics_ActionSummary_RunnerCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildMetrics_MemoryMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildMetrics_MemoryMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildMetrics_MemoryMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeakPostGcTenuredSpaceHeapSize != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.PeakPostGcTenuredSpaceHeapSize))
		i--
		dAtA[i] = 0x20
	}
	if len(m.GarbageMetrics) > 0 {
		for iNdEx := len(m.GarbageMetrics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GarbageMetrics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PeakPostGcHeapSize != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.PeakPostGcHeapSize))
		i--
		dAtA[i] = 0x10
	}
	if m.UsedHeapSizePostBuild != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.UsedHeapSizePostBuild))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildMetrics_MemoryMetrics_GarbageMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildMetrics_MemoryMetrics_GarbageMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildMetrics_MemoryMetrics_GarbageMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GarbageCollected != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.GarbageCollected))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildMetrics_TargetMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildMetrics_TargetMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildMetrics_TargetMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetsConfiguredNotIncludingAspects != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.TargetsConfiguredNotIncludingAspects))
		i--
		dAtA[i] = 0x18
	}
	if m.TargetsConfigured != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.TargetsConfigured))
		i--
		dAtA[i] = 0x10
	}
	if m.TargetsLoaded != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.TargetsLoaded))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildMetrics_PackageMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildMetrics_PackageMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildMetrics_PackageMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PackagesLoaded != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.PackagesLoaded))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildMetrics_TimingMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildMetrics_TimingMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildMetrics_TimingMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AnalysisPhaseTimeInMs != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.AnalysisPhaseTimeInMs))
		i--
		dAtA[i] = 0x18
	}
	if m.WallTimeInMs != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.WallTimeInMs))
		i--
		dAtA[i] = 0x10
	}
	if m.CpuTimeInMs != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.CpuTimeInMs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildMetrics_CumulativeMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildMetrics_CumulativeMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildMetrics_CumulativeMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumBuilds != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.NumBuilds))
		i--
		dAtA[i] = 0x60
	}
	if m.NumAnalyses != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.NumAnalyses))
		i--
		dAtA[i] = 0x58
	}
	return len(dAtA) - i, nil
}

func (m *BuildMetrics_ArtifactMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildMetrics_ArtifactMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildMetrics_ArtifactMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopLevelArtifacts != nil {
		{
			size, err := m.TopLevelArtifacts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.OutputArtifactsFromActionCache != nil {
		{
			size, err := m.OutputArtifactsFromActionCache.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.OutputArtifactsSeen != nil {
		{
			size, err := m.OutputArtifactsSeen.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SourceArtifactsRead != nil {
		{
			size, err := m.SourceArtifactsRead.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *BuildMetrics_ArtifactMetrics_FilesMetric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildMetrics_ArtifactMetrics_FilesMetric) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildMetrics_ArtifactMetrics_FilesMetric) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.SizeInBytes != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.SizeInBytes))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildMetrics_BuildGraphMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildMetrics_BuildGraphMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildMetrics_BuildGraphMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OtherConfiguredTargetCount != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.OtherConfiguredTargetCount))
		i--
		dAtA[i] = 0x48
	}
	if m.OutputFileConfiguredTargetCount != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.OutputFileConfiguredTargetCount))
		i--
		dAtA[i] = 0x40
	}
	if m.InputFileConfiguredTargetCount != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.InputFileConfiguredTargetCount))
		i--
		dAtA[i] = 0x38
	}
	if m.ActionCountNotIncludingAspects != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.ActionCountNotIncludingAspects))
		i--
		dAtA[i] = 0x30
	}
	if m.ActionLookupValueCountNotIncludingAspects != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.ActionLookupValueCountNotIncludingAspects))
		i--
		dAtA[i] = 0x28
	}
	if m.PostInvocationSkyframeNodeCount != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.PostInvocationSkyframeNodeCount))
		i--
		dAtA[i] = 0x20
	}
	if m.OutputArtifactCount != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.OutputArtifactCount))
		i--
		dAtA[i] = 0x18
	}
	if m.ActionCount != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.ActionCount))
		i--
		dAtA[i] = 0x10
	}
	if m.ActionLookupValueCount != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.ActionLookupValueCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildMetrics_WorkerMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildMetrics_WorkerMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildMetrics_WorkerMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkerStats) > 0 {
		for iNdEx := len(m.WorkerStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WorkerStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.IsMeasurable {
		i--
		if m.IsMeasurable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsSandbox {
		i--
		if m.IsSandbox {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IsMultiplex {
		i--
		if m.IsMultiplex {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Mnemonic) > 0 {
		i -= len(m.Mnemonic)
		copy(dAtA[i:], m.Mnemonic)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Mnemonic)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ProcessId != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.ProcessId))
		i--
		dAtA[i] = 0x10
	}
	if m.WorkerId != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.WorkerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildMetrics_WorkerMetrics_WorkerStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildMetrics_WorkerMetrics_WorkerStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildMetrics_WorkerMetrics_WorkerStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WorkerMemoryInKb != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.WorkerMemoryInKb))
		i--
		dAtA[i] = 0x10
	}
	if m.CollectTimeInMs != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.CollectTimeInMs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildToolLogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildToolLogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildToolLogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Log) > 0 {
		for iNdEx := len(m.Log) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Log[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConvenienceSymlinksIdentified) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConvenienceSymlinksIdentified) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConvenienceSymlinksIdentified) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConvenienceSymlinks) > 0 {
		for iNdEx := len(m.ConvenienceSymlinks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConvenienceSymlinks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConvenienceSymlink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConvenienceSymlink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConvenienceSymlink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Action != 0 {
		i = encodeVarintBuildEventStream(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintBuildEventStream(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LastMessage {
		i--
		if m.LastMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Children[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildEvent_Progress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_Progress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Progress != nil {
		{
			size, err := m.Progress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_Aborted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_Aborted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Aborted != nil {
		{
			size, err := m.Aborted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_Started) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_Started) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Started != nil {
		{
			size, err := m.Started.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_Expanded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_Expanded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Expanded != nil {
		{
			size, err := m.Expanded.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_Action) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_Action) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_Completed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_Completed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Completed != nil {
		{
			size, err := m.Completed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_TestSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_TestSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TestSummary != nil {
		{
			size, err := m.TestSummary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_TestResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_TestResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TestResult != nil {
		{
			size, err := m.TestResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_UnstructuredCommandLine) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_UnstructuredCommandLine) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnstructuredCommandLine != nil {
		{
			size, err := m.UnstructuredCommandLine.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_OptionsParsed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_OptionsParsed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OptionsParsed != nil {
		{
			size, err := m.OptionsParsed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_Finished) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_Finished) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Finished != nil {
		{
			size, err := m.Finished.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_NamedSetOfFiles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_NamedSetOfFiles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NamedSetOfFiles != nil {
		{
			size, err := m.NamedSetOfFiles.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_WorkspaceStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_WorkspaceStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkspaceStatus != nil {
		{
			size, err := m.WorkspaceStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_Configuration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_Configuration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_Configured) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_Configured) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Configured != nil {
		{
			size, err := m.Configured.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_Fetch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_Fetch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Fetch != nil {
		{
			size, err := m.Fetch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_StructuredCommandLine) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_StructuredCommandLine) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StructuredCommandLine != nil {
		{
			size, err := m.StructuredCommandLine.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_BuildToolLogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_BuildToolLogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BuildToolLogs != nil {
		{
			size, err := m.BuildToolLogs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_BuildMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_BuildMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BuildMetrics != nil {
		{
			size, err := m.BuildMetrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_WorkspaceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_WorkspaceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkspaceInfo != nil {
		{
			size, err := m.WorkspaceInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_BuildMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_BuildMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BuildMetadata != nil {
		{
			size, err := m.BuildMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_ConvenienceSymlinksIdentified) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_ConvenienceSymlinksIdentified) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConvenienceSymlinksIdentified != nil {
		{
			size, err := m.ConvenienceSymlinksIdentified.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *BuildEvent_TargetSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildEvent_TargetSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TargetSummary != nil {
		{
			size, err := m.TargetSummary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuildEventStream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func encodeVarintBuildEventStream(dAtA []byte, offset int, v uint64) int {
	offset -= sovBuildEventStream(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BuildEventId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += m.Id.Size()
	}
	return n
}

func (m *BuildEventId_Unknown) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Unknown != nil {
		l = m.Unknown.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_Progress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Progress != nil {
		l = m.Progress.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_Started) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Started != nil {
		l = m.Started.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_Pattern) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pattern != nil {
		l = m.Pattern.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_TargetCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetCompleted != nil {
		l = m.TargetCompleted.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_ActionCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionCompleted != nil {
		l = m.ActionCompleted.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_TestSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TestSummary != nil {
		l = m.TestSummary.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_TestResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TestResult != nil {
		l = m.TestResult.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_BuildFinished) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuildFinished != nil {
		l = m.BuildFinished.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_PatternSkipped) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PatternSkipped != nil {
		l = m.PatternSkipped.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_UnstructuredCommandLine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnstructuredCommandLine != nil {
		l = m.UnstructuredCommandLine.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_OptionsParsed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OptionsParsed != nil {
		l = m.OptionsParsed.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_NamedSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NamedSet != nil {
		l = m.NamedSet.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_WorkspaceStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkspaceStatus != nil {
		l = m.WorkspaceStatus.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_Configuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_TargetConfigured) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetConfigured != nil {
		l = m.TargetConfigured.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_Fetch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fetch != nil {
		l = m.Fetch.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_StructuredCommandLine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StructuredCommandLine != nil {
		l = m.StructuredCommandLine.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_UnconfiguredLabel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnconfiguredLabel != nil {
		l = m.UnconfiguredLabel.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_BuildToolLogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuildToolLogs != nil {
		l = m.BuildToolLogs.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_ConfiguredLabel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfiguredLabel != nil {
		l = m.ConfiguredLabel.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_BuildMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuildMetrics != nil {
		l = m.BuildMetrics.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_Workspace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Workspace != nil {
		l = m.Workspace.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_BuildMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuildMetadata != nil {
		l = m.BuildMetadata.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_ConvenienceSymlinksIdentified) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvenienceSymlinksIdentified != nil {
		l = m.ConvenienceSymlinksIdentified.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_TargetSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetSummary != nil {
		l = m.TargetSummary.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEventId_UnknownBuildEventId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *BuildEventId_ProgressId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OpaqueCount != 0 {
		n += 1 + sovBuildEventStream(uint64(m.OpaqueCount))
	}
	return n
}

func (m *BuildEventId_BuildStartedId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BuildEventId_UnstructuredCommandLineId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BuildEventId_StructuredCommandLineId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommandLineLabel)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *BuildEventId_WorkspaceStatusId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BuildEventId_OptionsParsedId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BuildEventId_FetchId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *BuildEventId_PatternExpandedId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pattern) > 0 {
		for _, s := range m.Pattern {
			l = len(s)
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	return n
}

func (m *BuildEventId_WorkspaceConfigId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BuildEventId_BuildMetadataId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BuildEventId_TargetConfiguredId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	l = len(m.Aspect)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *BuildEventId_NamedSetOfFilesId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *BuildEventId_ConfigurationId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *BuildEventId_TargetCompletedId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	l = len(m.Aspect)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *BuildEventId_ActionCompletedId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PrimaryOutput)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *BuildEventId_UnconfiguredLabelId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *BuildEventId_ConfiguredLabelId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *BuildEventId_TestResultId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.Run != 0 {
		n += 1 + sovBuildEventStream(uint64(m.Run))
	}
	if m.Shard != 0 {
		n += 1 + sovBuildEventStream(uint64(m.Shard))
	}
	if m.Attempt != 0 {
		n += 1 + sovBuildEventStream(uint64(m.Attempt))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *BuildEventId_TestSummaryId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *BuildEventId_TargetSummaryId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *BuildEventId_BuildFinishedId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BuildEventId_BuildToolLogsId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BuildEventId_BuildMetricsId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BuildEventId_ConvenienceSymlinksIdentifiedId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Progress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Stdout)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	l = len(m.Stderr)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *Aborted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reason != 0 {
		n += 1 + sovBuildEventStream(uint64(m.Reason))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *BuildStarted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.StartTimeMillis != 0 {
		n += 1 + sovBuildEventStream(uint64(m.StartTimeMillis))
	}
	l = len(m.BuildToolVersion)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	l = len(m.OptionsDescription)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	l = len(m.WorkingDirectory)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	l = len(m.WorkspaceDirectory)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.ServerPid != 0 {
		n += 1 + sovBuildEventStream(uint64(m.ServerPid))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *WorkspaceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LocalExecRoot)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *UnstructuredCommandLine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	return n
}

func (m *OptionsParsed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StartupOptions) > 0 {
		for _, s := range m.StartupOptions {
			l = len(s)
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	if len(m.ExplicitStartupOptions) > 0 {
		for _, s := range m.ExplicitStartupOptions {
			l = len(s)
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	if len(m.CmdLine) > 0 {
		for _, s := range m.CmdLine {
			l = len(s)
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	if len(m.ExplicitCmdLine) > 0 {
		for _, s := range m.ExplicitCmdLine {
			l = len(s)
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	if m.InvocationPolicy != nil {
		l = m.InvocationPolicy.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	l = len(m.ToolTag)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *Fetch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *WorkspaceStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	return n
}

func (m *WorkspaceStatus_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *BuildMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBuildEventStream(uint64(len(k))) + 1 + len(v) + sovBuildEventStream(uint64(len(v)))
			n += mapEntrySize + 1 + sovBuildEventStream(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Configuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mnemonic)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	l = len(m.PlatformName)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	l = len(m.Cpu)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if len(m.MakeVariable) > 0 {
		for k, v := range m.MakeVariable {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBuildEventStream(uint64(len(k))) + 1 + len(v) + sovBuildEventStream(uint64(len(v)))
			n += mapEntrySize + 1 + sovBuildEventStream(uint64(mapEntrySize))
		}
	}
	if m.IsTool {
		n += 2
	}
	return n
}

func (m *PatternExpanded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TestSuiteExpansions) > 0 {
		for _, e := range m.TestSuiteExpansions {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	return n
}

func (m *PatternExpanded_TestSuiteExpansion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SuiteLabel)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if len(m.TestLabels) > 0 {
		for _, s := range m.TestLabels {
			l = len(s)
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	return n
}

func (m *TargetConfigured) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TargetKind)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.TestSize != 0 {
		n += 1 + sovBuildEventStream(uint64(m.TestSize))
	}
	if len(m.Tag) > 0 {
		for _, s := range m.Tag {
			l = len(s)
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	return n
}

func (m *File) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.File != nil {
		n += m.File.Size()
	}
	if len(m.PathPrefix) > 0 {
		for _, s := range m.PathPrefix {
			l = len(s)
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.Length != 0 {
		n += 1 + sovBuildEventStream(uint64(m.Length))
	}
	return n
}

func (m *File_Uri) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uri)
	n += 1 + l + sovBuildEventStream(uint64(l))
	return n
}
func (m *File_Contents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contents != nil {
		l = len(m.Contents)
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *NamedSetOfFiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	if len(m.FileSets) > 0 {
		for _, e := range m.FileSets {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	return n
}

func (m *ActionExecuted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.ExitCode != 0 {
		n += 1 + sovBuildEventStream(uint64(m.ExitCode))
	}
	if m.Stdout != nil {
		l = m.Stdout.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.Stderr != nil {
		l = m.Stderr.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.PrimaryOutput != nil {
		l = m.PrimaryOutput.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if len(m.CommandLine) > 0 {
		for _, s := range m.CommandLine {
			l = len(s)
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	if len(m.ActionMetadataLogs) > 0 {
		for _, e := range m.ActionMetadataLogs {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	if m.FailureDetail != nil {
		l = m.FailureDetail.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *OutputGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if len(m.FileSets) > 0 {
		for _, e := range m.FileSets {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	if m.Incomplete {
		n += 2
	}
	return n
}

func (m *TargetComplete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if len(m.OutputGroup) > 0 {
		for _, e := range m.OutputGroup {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	if len(m.Tag) > 0 {
		for _, s := range m.Tag {
			l = len(s)
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	if len(m.ImportantOutput) > 0 {
		for _, e := range m.ImportantOutput {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	l = len(m.TargetKind)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.TestSize != 0 {
		n += 1 + sovBuildEventStream(uint64(m.TestSize))
	}
	if m.TestTimeoutSeconds != 0 {
		n += 1 + sovBuildEventStream(uint64(m.TestTimeoutSeconds))
	}
	if len(m.DirectoryOutput) > 0 {
		for _, e := range m.DirectoryOutput {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	if m.FailureDetail != nil {
		l = m.FailureDetail.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.TestTimeout != nil {
		l = m.TestTimeout.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *TestResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TestActionOutput) > 0 {
		for _, e := range m.TestActionOutput {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	if m.TestAttemptDurationMillis != 0 {
		n += 1 + sovBuildEventStream(uint64(m.TestAttemptDurationMillis))
	}
	if m.CachedLocally {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovBuildEventStream(uint64(m.Status))
	}
	if m.TestAttemptStartMillisEpoch != 0 {
		n += 1 + sovBuildEventStream(uint64(m.TestAttemptStartMillisEpoch))
	}
	if len(m.Warning) > 0 {
		for _, s := range m.Warning {
			l = len(s)
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	if m.ExecutionInfo != nil {
		l = m.ExecutionInfo.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	l = len(m.StatusDetails)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.TestAttemptStart != nil {
		l = m.TestAttemptStart.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.TestAttemptDuration != nil {
		l = m.TestAttemptDuration.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *TestResult_ExecutionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeoutSeconds != 0 {
		n += 1 + sovBuildEventStream(uint64(m.TimeoutSeconds))
	}
	l = len(m.Strategy)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.TimingBreakdown != nil {
		l = m.TimingBreakdown.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if len(m.ResourceUsage) > 0 {
		for _, e := range m.ResourceUsage {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	if m.CachedRemotely {
		n += 2
	}
	if m.ExitCode != 0 {
		n += 1 + sovBuildEventStream(uint64(m.ExitCode))
	}
	return n
}

func (m *TestResult_ExecutionInfo_TimingBreakdown) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Child) > 0 {
		for _, e := range m.Child {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.TimeMillis != 0 {
		n += 1 + sovBuildEventStream(uint64(m.TimeMillis))
	}
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *TestResult_ExecutionInfo_ResourceUsage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovBuildEventStream(uint64(m.Value))
	}
	return n
}

func (m *TestSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalRunCount != 0 {
		n += 1 + sovBuildEventStream(uint64(m.TotalRunCount))
	}
	if len(m.Passed) > 0 {
		for _, e := range m.Passed {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	if len(m.Failed) > 0 {
		for _, e := range m.Failed {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	if m.OverallStatus != 0 {
		n += 1 + sovBuildEventStream(uint64(m.OverallStatus))
	}
	if m.TotalNumCached != 0 {
		n += 1 + sovBuildEventStream(uint64(m.TotalNumCached))
	}
	if m.FirstStartTimeMillis != 0 {
		n += 1 + sovBuildEventStream(uint64(m.FirstStartTimeMillis))
	}
	if m.LastStopTimeMillis != 0 {
		n += 1 + sovBuildEventStream(uint64(m.LastStopTimeMillis))
	}
	if m.TotalRunDurationMillis != 0 {
		n += 1 + sovBuildEventStream(uint64(m.TotalRunDurationMillis))
	}
	if m.RunCount != 0 {
		n += 1 + sovBuildEventStream(uint64(m.RunCount))
	}
	if m.ShardCount != 0 {
		n += 1 + sovBuildEventStream(uint64(m.ShardCount))
	}
	if m.TotalRunDuration != nil {
		l = m.TotalRunDuration.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.FirstStartTime != nil {
		l = m.FirstStartTime.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.LastStopTime != nil {
		l = m.LastStopTime.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.AttemptCount != 0 {
		n += 1 + sovBuildEventStream(uint64(m.AttemptCount))
	}
	return n
}

func (m *TargetSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OverallBuildSuccess {
		n += 2
	}
	if m.OverallTestStatus != 0 {
		n += 1 + sovBuildEventStream(uint64(m.OverallTestStatus))
	}
	return n
}

func (m *BuildFinished) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OverallSuccess {
		n += 2
	}
	if m.FinishTimeMillis != 0 {
		n += 1 + sovBuildEventStream(uint64(m.FinishTimeMillis))
	}
	if m.ExitCode != nil {
		l = m.ExitCode.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.AnomalyReport != nil {
		l = m.AnomalyReport.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.FinishTime != nil {
		l = m.FinishTime.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *BuildFinished_ExitCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovBuildEventStream(uint64(m.Code))
	}
	return n
}

func (m *BuildFinished_AnomalyReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WasSuspended {
		n += 2
	}
	return n
}

func (m *BuildMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionSummary != nil {
		l = m.ActionSummary.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.MemoryMetrics != nil {
		l = m.MemoryMetrics.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.TargetMetrics != nil {
		l = m.TargetMetrics.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.PackageMetrics != nil {
		l = m.PackageMetrics.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.TimingMetrics != nil {
		l = m.TimingMetrics.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.CumulativeMetrics != nil {
		l = m.CumulativeMetrics.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.ArtifactMetrics != nil {
		l = m.ArtifactMetrics.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.BuildGraphMetrics != nil {
		l = m.BuildGraphMetrics.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if len(m.WorkerMetrics) > 0 {
		for _, e := range m.WorkerMetrics {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	return n
}

func (m *BuildMetrics_ActionSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionsCreated != 0 {
		n += 1 + sovBuildEventStream(uint64(m.ActionsCreated))
	}
	if m.ActionsExecuted != 0 {
		n += 1 + sovBuildEventStream(uint64(m.ActionsExecuted))
	}
	if m.ActionsCreatedNotIncludingAspects != 0 {
		n += 1 + sovBuildEventStream(uint64(m.ActionsCreatedNotIncludingAspects))
	}
	if len(m.ActionData) > 0 {
		for _, e := range m.ActionData {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	if m.RemoteCacheHits != 0 {
		n += 1 + sovBuildEventStream(uint64(m.RemoteCacheHits))
	}
	if len(m.RunnerCount) > 0 {
		for _, e := range m.RunnerCount {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	return n
}

func (m *BuildMetrics_ActionSummary_ActionData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mnemonic)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.ActionsExecuted != 0 {
		n += 1 + sovBuildEventStream(uint64(m.ActionsExecuted))
	}
	if m.FirstStartedMs != 0 {
		n += 1 + sovBuildEventStream(uint64(m.FirstStartedMs))
	}
	if m.LastEndedMs != 0 {
		n += 1 + sovBuildEventStream(uint64(m.LastEndedMs))
	}
	return n
}

func (m *BuildMetrics_ActionSummary_RunnerCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovBuildEventStream(uint64(m.Count))
	}
	return n
}

func (m *BuildMetrics_MemoryMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsedHeapSizePostBuild != 0 {
		n += 1 + sovBuildEventStream(uint64(m.UsedHeapSizePostBuild))
	}
	if m.PeakPostGcHeapSize != 0 {
		n += 1 + sovBuildEventStream(uint64(m.PeakPostGcHeapSize))
	}
	if len(m.GarbageMetrics) > 0 {
		for _, e := range m.GarbageMetrics {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	if m.PeakPostGcTenuredSpaceHeapSize != 0 {
		n += 1 + sovBuildEventStream(uint64(m.PeakPostGcTenuredSpaceHeapSize))
	}
	return n
}

func (m *BuildMetrics_MemoryMetrics_GarbageMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.GarbageCollected != 0 {
		n += 1 + sovBuildEventStream(uint64(m.GarbageCollected))
	}
	return n
}

func (m *BuildMetrics_TargetMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetsLoaded != 0 {
		n += 1 + sovBuildEventStream(uint64(m.TargetsLoaded))
	}
	if m.TargetsConfigured != 0 {
		n += 1 + sovBuildEventStream(uint64(m.TargetsConfigured))
	}
	if m.TargetsConfiguredNotIncludingAspects != 0 {
		n += 1 + sovBuildEventStream(uint64(m.TargetsConfiguredNotIncludingAspects))
	}
	return n
}

func (m *BuildMetrics_PackageMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PackagesLoaded != 0 {
		n += 1 + sovBuildEventStream(uint64(m.PackagesLoaded))
	}
	return n
}

func (m *BuildMetrics_TimingMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CpuTimeInMs != 0 {
		n += 1 + sovBuildEventStream(uint64(m.CpuTimeInMs))
	}
	if m.WallTimeInMs != 0 {
		n += 1 + sovBuildEventStream(uint64(m.WallTimeInMs))
	}
	if m.AnalysisPhaseTimeInMs != 0 {
		n += 1 + sovBuildEventStream(uint64(m.AnalysisPhaseTimeInMs))
	}
	return n
}

func (m *BuildMetrics_CumulativeMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumAnalyses != 0 {
		n += 1 + sovBuildEventStream(uint64(m.NumAnalyses))
	}
	if m.NumBuilds != 0 {
		n += 1 + sovBuildEventStream(uint64(m.NumBuilds))
	}
	return n
}

func (m *BuildMetrics_ArtifactMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceArtifactsRead != nil {
		l = m.SourceArtifactsRead.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.OutputArtifactsSeen != nil {
		l = m.OutputArtifactsSeen.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.OutputArtifactsFromActionCache != nil {
		l = m.OutputArtifactsFromActionCache.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.TopLevelArtifacts != nil {
		l = m.TopLevelArtifacts.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *BuildMetrics_ArtifactMetrics_FilesMetric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SizeInBytes != 0 {
		n += 1 + sovBuildEventStream(uint64(m.SizeInBytes))
	}
	if m.Count != 0 {
		n += 1 + sovBuildEventStream(uint64(m.Count))
	}
	return n
}

func (m *BuildMetrics_BuildGraphMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionLookupValueCount != 0 {
		n += 1 + sovBuildEventStream(uint64(m.ActionLookupValueCount))
	}
	if m.ActionCount != 0 {
		n += 1 + sovBuildEventStream(uint64(m.ActionCount))
	}
	if m.OutputArtifactCount != 0 {
		n += 1 + sovBuildEventStream(uint64(m.OutputArtifactCount))
	}
	if m.PostInvocationSkyframeNodeCount != 0 {
		n += 1 + sovBuildEventStream(uint64(m.PostInvocationSkyframeNodeCount))
	}
	if m.ActionLookupValueCountNotIncludingAspects != 0 {
		n += 1 + sovBuildEventStream(uint64(m.ActionLookupValueCountNotIncludingAspects))
	}
	if m.ActionCountNotIncludingAspects != 0 {
		n += 1 + sovBuildEventStream(uint64(m.ActionCountNotIncludingAspects))
	}
	if m.InputFileConfiguredTargetCount != 0 {
		n += 1 + sovBuildEventStream(uint64(m.InputFileConfiguredTargetCount))
	}
	if m.OutputFileConfiguredTargetCount != 0 {
		n += 1 + sovBuildEventStream(uint64(m.OutputFileConfiguredTargetCount))
	}
	if m.OtherConfiguredTargetCount != 0 {
		n += 1 + sovBuildEventStream(uint64(m.OtherConfiguredTargetCount))
	}
	return n
}

func (m *BuildMetrics_WorkerMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkerId != 0 {
		n += 1 + sovBuildEventStream(uint64(m.WorkerId))
	}
	if m.ProcessId != 0 {
		n += 1 + sovBuildEventStream(uint64(m.ProcessId))
	}
	l = len(m.Mnemonic)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.IsMultiplex {
		n += 2
	}
	if m.IsSandbox {
		n += 2
	}
	if m.IsMeasurable {
		n += 2
	}
	if len(m.WorkerStats) > 0 {
		for _, e := range m.WorkerStats {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	return n
}

func (m *BuildMetrics_WorkerMetrics_WorkerStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollectTimeInMs != 0 {
		n += 1 + sovBuildEventStream(uint64(m.CollectTimeInMs))
	}
	if m.WorkerMemoryInKb != 0 {
		n += 1 + sovBuildEventStream(uint64(m.WorkerMemoryInKb))
	}
	return n
}

func (m *BuildToolLogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Log) > 0 {
		for _, e := range m.Log {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	return n
}

func (m *ConvenienceSymlinksIdentified) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ConvenienceSymlinks) > 0 {
		for _, e := range m.ConvenienceSymlinks {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	return n
}

func (m *ConvenienceSymlink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovBuildEventStream(uint64(m.Action))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func (m *BuildEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovBuildEventStream(uint64(l))
		}
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	if m.LastMessage {
		n += 3
	}
	return n
}

func (m *BuildEvent_Progress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Progress != nil {
		l = m.Progress.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_Aborted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aborted != nil {
		l = m.Aborted.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_Started) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Started != nil {
		l = m.Started.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_Expanded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Expanded != nil {
		l = m.Expanded.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_Action) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_Completed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Completed != nil {
		l = m.Completed.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_TestSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TestSummary != nil {
		l = m.TestSummary.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_TestResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TestResult != nil {
		l = m.TestResult.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_UnstructuredCommandLine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnstructuredCommandLine != nil {
		l = m.UnstructuredCommandLine.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_OptionsParsed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OptionsParsed != nil {
		l = m.OptionsParsed.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_Finished) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Finished != nil {
		l = m.Finished.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_NamedSetOfFiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NamedSetOfFiles != nil {
		l = m.NamedSetOfFiles.Size()
		n += 1 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_WorkspaceStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkspaceStatus != nil {
		l = m.WorkspaceStatus.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_Configuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_Configured) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Configured != nil {
		l = m.Configured.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_Fetch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fetch != nil {
		l = m.Fetch.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_StructuredCommandLine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StructuredCommandLine != nil {
		l = m.StructuredCommandLine.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_BuildToolLogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuildToolLogs != nil {
		l = m.BuildToolLogs.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_BuildMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuildMetrics != nil {
		l = m.BuildMetrics.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_WorkspaceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkspaceInfo != nil {
		l = m.WorkspaceInfo.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_BuildMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuildMetadata != nil {
		l = m.BuildMetadata.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_ConvenienceSymlinksIdentified) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvenienceSymlinksIdentified != nil {
		l = m.ConvenienceSymlinksIdentified.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}
func (m *BuildEvent_TargetSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetSummary != nil {
		l = m.TargetSummary.Size()
		n += 2 + l + sovBuildEventStream(uint64(l))
	}
	return n
}

func sovBuildEventStream(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozBuildEventStream(x uint64) (n int) {
	return sovBuildEventStream(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BuildEventId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildEventId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildEventId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unknown", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_Unknown
				field BuildEventId_UnknownBuildEventId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Unknown = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_Progress
				field BuildEventId_ProgressId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Progress = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Started", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_Started
				field BuildEventId_BuildStartedId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Started = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_Pattern
				field BuildEventId_PatternExpandedId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Pattern = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCompleted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_TargetCompleted
				field BuildEventId_TargetCompletedId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.TargetCompleted = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionCompleted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_ActionCompleted
				field BuildEventId_ActionCompletedId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.ActionCompleted = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_TestSummary
				field BuildEventId_TestSummaryId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.TestSummary = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_TestResult
				field BuildEventId_TestResultId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.TestResult = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildFinished", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_BuildFinished
				field BuildEventId_BuildFinishedId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.BuildFinished = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatternSkipped", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_PatternSkipped
				field BuildEventId_PatternExpandedId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.PatternSkipped = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstructuredCommandLine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_UnstructuredCommandLine
				field BuildEventId_UnstructuredCommandLineId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.UnstructuredCommandLine = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionsParsed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_OptionsParsed
				field BuildEventId_OptionsParsedId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.OptionsParsed = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamedSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_NamedSet
				field BuildEventId_NamedSetOfFilesId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.NamedSet = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspaceStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_WorkspaceStatus
				field BuildEventId_WorkspaceStatusId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.WorkspaceStatus = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_Configuration
				field BuildEventId_ConfigurationId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Configuration = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetConfigured", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_TargetConfigured
				field BuildEventId_TargetConfiguredId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.TargetConfigured = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fetch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_Fetch
				field BuildEventId_FetchId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Fetch = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructuredCommandLine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_StructuredCommandLine
				field BuildEventId_StructuredCommandLineId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.StructuredCommandLine = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnconfiguredLabel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_UnconfiguredLabel
				field BuildEventId_UnconfiguredLabelId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.UnconfiguredLabel = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildToolLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_BuildToolLogs
				field BuildEventId_BuildToolLogsId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.BuildToolLogs = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfiguredLabel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_ConfiguredLabel
				field BuildEventId_ConfiguredLabelId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.ConfiguredLabel = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_BuildMetrics
				field BuildEventId_BuildMetricsId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.BuildMetrics = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_Workspace
				field BuildEventId_WorkspaceConfigId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Workspace = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_BuildMetadata
				field BuildEventId_BuildMetadataId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.BuildMetadata = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvenienceSymlinksIdentified", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_ConvenienceSymlinksIdentified
				field BuildEventId_ConvenienceSymlinksIdentifiedId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.ConvenienceSymlinksIdentified = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEventId_TargetSummary
				field BuildEventId_TargetSummaryId
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.TargetSummary = &alloc.field
			m.Id = &alloc.value
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_UnknownBuildEventId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnknownBuildEventId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnknownBuildEventId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_ProgressId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProgressId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProgressId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpaqueCount", wireType)
			}
			m.OpaqueCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpaqueCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_BuildStartedId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildStartedId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildStartedId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_UnstructuredCommandLineId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnstructuredCommandLineId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnstructuredCommandLineId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_StructuredCommandLineId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StructuredCommandLineId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StructuredCommandLineId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandLineLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandLineLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_WorkspaceStatusId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkspaceStatusId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkspaceStatusId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_OptionsParsedId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptionsParsedId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptionsParsedId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_FetchId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_PatternExpandedId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PatternExpandedId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PatternExpandedId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = append(m.Pattern, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_WorkspaceConfigId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkspaceConfigId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkspaceConfigId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_BuildMetadataId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildMetadataId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildMetadataId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_TargetConfiguredId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetConfiguredId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetConfiguredId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aspect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aspect = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_NamedSetOfFilesId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamedSetOfFilesId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamedSetOfFilesId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_ConfigurationId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigurationId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigurationId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_TargetCompletedId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetCompletedId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetCompletedId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aspect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aspect = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &BuildEventId_ConfigurationId{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_ActionCompletedId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionCompletedId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionCompletedId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryOutput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryOutput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &BuildEventId_ConfigurationId{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_UnconfiguredLabelId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnconfiguredLabelId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnconfiguredLabelId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_ConfiguredLabelId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfiguredLabelId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfiguredLabelId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &BuildEventId_ConfigurationId{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_TestResultId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestResultId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestResultId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Run", wireType)
			}
			m.Run = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Run |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &BuildEventId_ConfigurationId{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_TestSummaryId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestSummaryId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestSummaryId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &BuildEventId_ConfigurationId{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_TargetSummaryId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetSummaryId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetSummaryId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &BuildEventId_ConfigurationId{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_BuildFinishedId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildFinishedId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildFinishedId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_BuildToolLogsId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildToolLogsId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildToolLogsId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_BuildMetricsId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildMetricsId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildMetricsId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEventId_ConvenienceSymlinksIdentifiedId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConvenienceSymlinksIdentifiedId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConvenienceSymlinksIdentifiedId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Progress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Progress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Progress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stdout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stdout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stderr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stderr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Aborted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Aborted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Aborted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= Aborted_AbortReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildStarted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildStarted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildStarted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeMillis", wireType)
			}
			m.StartTimeMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimeMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildToolVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildToolVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionsDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OptionsDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkingDirectory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkingDirectory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspaceDirectory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkspaceDirectory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPid", wireType)
			}
			m.ServerPid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerPid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &types.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkspaceConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkspaceConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkspaceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalExecRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalExecRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnstructuredCommandLine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnstructuredCommandLine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnstructuredCommandLine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptionsParsed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptionsParsed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptionsParsed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartupOptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartupOptions = append(m.StartupOptions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplicitStartupOptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExplicitStartupOptions = append(m.ExplicitStartupOptions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdLine", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CmdLine = append(m.CmdLine, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplicitCmdLine", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExplicitCmdLine = append(m.ExplicitCmdLine, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvocationPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InvocationPolicy == nil {
				m.InvocationPolicy = &invocation_policy.InvocationPolicy{}
			}
			if err := m.InvocationPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToolTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToolTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fetch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fetch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fetch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkspaceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkspaceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkspaceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &WorkspaceStatus_Item{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkspaceStatus_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBuildEventStream
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBuildEventStream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBuildEventStream
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBuildEventStream
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBuildEventStream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBuildEventStream
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBuildEventStream
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBuildEventStream(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBuildEventStream
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Configuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Configuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Configuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mnemonic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mnemonic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakeVariable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MakeVariable == nil {
				m.MakeVariable = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBuildEventStream
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBuildEventStream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBuildEventStream
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBuildEventStream
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBuildEventStream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBuildEventStream
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBuildEventStream
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBuildEventStream(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBuildEventStream
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MakeVariable[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTool = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PatternExpanded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PatternExpanded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PatternExpanded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestSuiteExpansions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestSuiteExpansions = append(m.TestSuiteExpansions, &PatternExpanded_TestSuiteExpansion{})
			if err := m.TestSuiteExpansions[len(m.TestSuiteExpansions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PatternExpanded_TestSuiteExpansion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestSuiteExpansion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestSuiteExpansion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuiteLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuiteLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestLabels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestLabels = append(m.TestLabels, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetConfigured) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetConfigured: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetConfigured: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetKind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestSize", wireType)
			}
			m.TestSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TestSize |= TestSize(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = append(m.Tag, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *File) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: File: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: File: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = &File_Uri{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.File = &File_Contents{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathPrefix = append(m.PathPrefix, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamedSetOfFiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamedSetOfFiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamedSetOfFiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &File{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSets = append(m.FileSets, &BuildEventId_NamedSetOfFilesId{})
			if err := m.FileSets[len(m.FileSets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionExecuted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionExecuted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionExecuted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			m.ExitCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stdout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stdout == nil {
				m.Stdout = &File{}
			}
			if err := m.Stdout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stderr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stderr == nil {
				m.Stderr = &File{}
			}
			if err := m.Stderr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryOutput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrimaryOutput == nil {
				m.PrimaryOutput = &File{}
			}
			if err := m.PrimaryOutput.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &BuildEventId_ConfigurationId{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandLine", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandLine = append(m.CommandLine, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionMetadataLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionMetadataLogs = append(m.ActionMetadataLogs, &File{})
			if err := m.ActionMetadataLogs[len(m.ActionMetadataLogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FailureDetail == nil {
				m.FailureDetail = &failure_details.FailureDetail{}
			}
			if err := m.FailureDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutputGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutputGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutputGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSets = append(m.FileSets, &BuildEventId_NamedSetOfFilesId{})
			if err := m.FileSets[len(m.FileSets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Incomplete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Incomplete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetComplete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetComplete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetComplete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputGroup = append(m.OutputGroup, &OutputGroup{})
			if err := m.OutputGroup[len(m.OutputGroup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = append(m.Tag, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImportantOutput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImportantOutput = append(m.ImportantOutput, &File{})
			if err := m.ImportantOutput[len(m.ImportantOutput)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetKind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestSize", wireType)
			}
			m.TestSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TestSize |= TestSize(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestTimeoutSeconds", wireType)
			}
			m.TestTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TestTimeoutSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectoryOutput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirectoryOutput = append(m.DirectoryOutput, &File{})
			if err := m.DirectoryOutput[len(m.DirectoryOutput)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FailureDetail == nil {
				m.FailureDetail = &failure_details.FailureDetail{}
			}
			if err := m.FailureDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestTimeout == nil {
				m.TestTimeout = &types.Duration{}
			}
			if err := m.TestTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestActionOutput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestActionOutput = append(m.TestActionOutput, &File{})
			if err := m.TestActionOutput[len(m.TestActionOutput)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestAttemptDurationMillis", wireType)
			}
			m.TestAttemptDurationMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TestAttemptDurationMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CachedLocally", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CachedLocally = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestAttemptStartMillisEpoch", wireType)
			}
			m.TestAttemptStartMillisEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TestAttemptStartMillisEpoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warning", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warning = append(m.Warning, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutionInfo == nil {
				m.ExecutionInfo = &TestResult_ExecutionInfo{}
			}
			if err := m.ExecutionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusDetails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusDetails = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestAttemptStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestAttemptStart == nil {
				m.TestAttemptStart = &types.Timestamp{}
			}
			if err := m.TestAttemptStart.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestAttemptDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestAttemptDuration == nil {
				m.TestAttemptDuration = &types.Duration{}
			}
			if err := m.TestAttemptDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestResult_ExecutionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutSeconds", wireType)
			}
			m.TimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strategy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimingBreakdown", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimingBreakdown == nil {
				m.TimingBreakdown = &TestResult_ExecutionInfo_TimingBreakdown{}
			}
			if err := m.TimingBreakdown.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceUsage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceUsage = append(m.ResourceUsage, &TestResult_ExecutionInfo_ResourceUsage{})
			if err := m.ResourceUsage[len(m.ResourceUsage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CachedRemotely", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CachedRemotely = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			m.ExitCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestResult_ExecutionInfo_TimingBreakdown) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimingBreakdown: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimingBreakdown: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Child = append(m.Child, &TestResult_ExecutionInfo_TimingBreakdown{})
			if err := m.Child[len(m.Child)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeMillis", wireType)
			}
			m.TimeMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &types.Duration{}
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestResult_ExecutionInfo_ResourceUsage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceUsage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceUsage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRunCount", wireType)
			}
			m.TotalRunCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRunCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passed = append(m.Passed, &File{})
			if err := m.Passed[len(m.Passed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Failed = append(m.Failed, &File{})
			if err := m.Failed[len(m.Failed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverallStatus", wireType)
			}
			m.OverallStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverallStatus |= TestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNumCached", wireType)
			}
			m.TotalNumCached = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNumCached |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstStartTimeMillis", wireType)
			}
			m.FirstStartTimeMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstStartTimeMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStopTimeMillis", wireType)
			}
			m.LastStopTimeMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastStopTimeMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRunDurationMillis", wireType)
			}
			m.TotalRunDurationMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRunDurationMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunCount", wireType)
			}
			m.RunCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardCount", wireType)
			}
			m.ShardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRunDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalRunDuration == nil {
				m.TotalRunDuration = &types.Duration{}
			}
			if err := m.TotalRunDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstStartTime == nil {
				m.FirstStartTime = &types.Timestamp{}
			}
			if err := m.FirstStartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStopTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastStopTime == nil {
				m.LastStopTime = &types.Timestamp{}
			}
			if err := m.LastStopTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttemptCount", wireType)
			}
			m.AttemptCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttemptCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverallBuildSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OverallBuildSuccess = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverallTestStatus", wireType)
			}
			m.OverallTestStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverallTestStatus |= TestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildFinished) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildFinished: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildFinished: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverallSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OverallSuccess = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTimeMillis", wireType)
			}
			m.FinishTimeMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishTimeMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExitCode == nil {
				m.ExitCode = &BuildFinished_ExitCode{}
			}
			if err := m.ExitCode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnomalyReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AnomalyReport == nil {
				m.AnomalyReport = &BuildFinished_AnomalyReport{}
			}
			if err := m.AnomalyReport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinishTime == nil {
				m.FinishTime = &types.Timestamp{}
			}
			if err := m.FinishTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildFinished_ExitCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildFinished_AnomalyReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnomalyReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnomalyReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WasSuspended", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WasSuspended = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActionSummary == nil {
				m.ActionSummary = &BuildMetrics_ActionSummary{}
			}
			if err := m.ActionSummary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemoryMetrics == nil {
				m.MemoryMetrics = &BuildMetrics_MemoryMetrics{}
			}
			if err := m.MemoryMetrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetMetrics == nil {
				m.TargetMetrics = &BuildMetrics_TargetMetrics{}
			}
			if err := m.TargetMetrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PackageMetrics == nil {
				m.PackageMetrics = &BuildMetrics_PackageMetrics{}
			}
			if err := m.PackageMetrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimingMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimingMetrics == nil {
				m.TimingMetrics = &BuildMetrics_TimingMetrics{}
			}
			if err := m.TimingMetrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CumulativeMetrics == nil {
				m.CumulativeMetrics = &BuildMetrics_CumulativeMetrics{}
			}
			if err := m.CumulativeMetrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtifactMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ArtifactMetrics == nil {
				m.ArtifactMetrics = &BuildMetrics_ArtifactMetrics{}
			}
			if err := m.ArtifactMetrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildGraphMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuildGraphMetrics == nil {
				m.BuildGraphMetrics = &BuildMetrics_BuildGraphMetrics{}
			}
			if err := m.BuildGraphMetrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerMetrics = append(m.WorkerMetrics, &BuildMetrics_WorkerMetrics{})
			if err := m.WorkerMetrics[len(m.WorkerMetrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildMetrics_ActionSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionsCreated", wireType)
			}
			m.ActionsCreated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionsCreated |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionsExecuted", wireType)
			}
			m.ActionsExecuted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionsExecuted |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionsCreatedNotIncludingAspects", wireType)
			}
			m.ActionsCreatedNotIncludingAspects = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionsCreatedNotIncludingAspects |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionData = append(m.ActionData, &BuildMetrics_ActionSummary_ActionData{})
			if err := m.ActionData[len(m.ActionData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteCacheHits", wireType)
			}
			m.RemoteCacheHits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoteCacheHits |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunnerCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunnerCount = append(m.RunnerCount, &BuildMetrics_ActionSummary_RunnerCount{})
			if err := m.RunnerCount[len(m.RunnerCount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildMetrics_ActionSummary_ActionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mnemonic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mnemonic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionsExecuted", wireType)
			}
			m.ActionsExecuted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionsExecuted |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstStartedMs", wireType)
			}
			m.FirstStartedMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstStartedMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastEndedMs", wireType)
			}
			m.LastEndedMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastEndedMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildMetrics_ActionSummary_RunnerCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunnerCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunnerCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildMetrics_MemoryMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedHeapSizePostBuild", wireType)
			}
			m.UsedHeapSizePostBuild = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedHeapSizePostBuild |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeakPostGcHeapSize", wireType)
			}
			m.PeakPostGcHeapSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeakPostGcHeapSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GarbageMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GarbageMetrics = append(m.GarbageMetrics, &BuildMetrics_MemoryMetrics_GarbageMetrics{})
			if err := m.GarbageMetrics[len(m.GarbageMetrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeakPostGcTenuredSpaceHeapSize", wireType)
			}
			m.PeakPostGcTenuredSpaceHeapSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeakPostGcTenuredSpaceHeapSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildMetrics_MemoryMetrics_GarbageMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GarbageMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GarbageMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GarbageCollected", wireType)
			}
			m.GarbageCollected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GarbageCollected |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildMetrics_TargetMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetsLoaded", wireType)
			}
			m.TargetsLoaded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetsLoaded |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetsConfigured", wireType)
			}
			m.TargetsConfigured = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetsConfigured |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetsConfiguredNotIncludingAspects", wireType)
			}
			m.TargetsConfiguredNotIncludingAspects = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetsConfiguredNotIncludingAspects |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildMetrics_PackageMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackageMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackageMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackagesLoaded", wireType)
			}
			m.PackagesLoaded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PackagesLoaded |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildMetrics_TimingMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimingMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimingMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuTimeInMs", wireType)
			}
			m.CpuTimeInMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuTimeInMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WallTimeInMs", wireType)
			}
			m.WallTimeInMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WallTimeInMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalysisPhaseTimeInMs", wireType)
			}
			m.AnalysisPhaseTimeInMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnalysisPhaseTimeInMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildMetrics_CumulativeMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CumulativeMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CumulativeMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumAnalyses", wireType)
			}
			m.NumAnalyses = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumAnalyses |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBuilds", wireType)
			}
			m.NumBuilds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBuilds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildMetrics_ArtifactMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArtifactMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArtifactMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceArtifactsRead", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SourceArtifactsRead == nil {
				m.SourceArtifactsRead = &BuildMetrics_ArtifactMetrics_FilesMetric{}
			}
			if err := m.SourceArtifactsRead.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputArtifactsSeen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutputArtifactsSeen == nil {
				m.OutputArtifactsSeen = &BuildMetrics_ArtifactMetrics_FilesMetric{}
			}
			if err := m.OutputArtifactsSeen.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputArtifactsFromActionCache", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutputArtifactsFromActionCache == nil {
				m.OutputArtifactsFromActionCache = &BuildMetrics_ArtifactMetrics_FilesMetric{}
			}
			if err := m.OutputArtifactsFromActionCache.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopLevelArtifacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopLevelArtifacts == nil {
				m.TopLevelArtifacts = &BuildMetrics_ArtifactMetrics_FilesMetric{}
			}
			if err := m.TopLevelArtifacts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildMetrics_ArtifactMetrics_FilesMetric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilesMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilesMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeInBytes", wireType)
			}
			m.SizeInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildMetrics_BuildGraphMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildGraphMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildGraphMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionLookupValueCount", wireType)
			}
			m.ActionLookupValueCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionLookupValueCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionCount", wireType)
			}
			m.ActionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputArtifactCount", wireType)
			}
			m.OutputArtifactCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputArtifactCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostInvocationSkyframeNodeCount", wireType)
			}
			m.PostInvocationSkyframeNodeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostInvocationSkyframeNodeCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionLookupValueCountNotIncludingAspects", wireType)
			}
			m.ActionLookupValueCountNotIncludingAspects = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionLookupValueCountNotIncludingAspects |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionCountNotIncludingAspects", wireType)
			}
			m.ActionCountNotIncludingAspects = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionCountNotIncludingAspects |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputFileConfiguredTargetCount", wireType)
			}
			m.InputFileConfiguredTargetCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputFileConfiguredTargetCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputFileConfiguredTargetCount", wireType)
			}
			m.OutputFileConfiguredTargetCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputFileConfiguredTargetCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherConfiguredTargetCount", wireType)
			}
			m.OtherConfiguredTargetCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtherConfiguredTargetCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildMetrics_WorkerMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerId", wireType)
			}
			m.WorkerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessId", wireType)
			}
			m.ProcessId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mnemonic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mnemonic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMultiplex", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMultiplex = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSandbox", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSandbox = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMeasurable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMeasurable = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerStats = append(m.WorkerStats, &BuildMetrics_WorkerMetrics_WorkerStats{})
			if err := m.WorkerStats[len(m.WorkerStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildMetrics_WorkerMetrics_WorkerStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectTimeInMs", wireType)
			}
			m.CollectTimeInMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectTimeInMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerMemoryInKb", wireType)
			}
			m.WorkerMemoryInKb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerMemoryInKb |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildToolLogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildToolLogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildToolLogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = append(m.Log, &File{})
			if err := m.Log[len(m.Log)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConvenienceSymlinksIdentified) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConvenienceSymlinksIdentified: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConvenienceSymlinksIdentified: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvenienceSymlinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConvenienceSymlinks = append(m.ConvenienceSymlinks, &ConvenienceSymlink{})
			if err := m.ConvenienceSymlinks[len(m.ConvenienceSymlinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConvenienceSymlink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConvenienceSymlink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConvenienceSymlink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= ConvenienceSymlink_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &BuildEventId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &BuildEventId{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_Progress
				field Progress
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Progress = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aborted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_Aborted
				field Aborted
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Aborted = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Started", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_Started
				field BuildStarted
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Started = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expanded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_Expanded
				field PatternExpanded
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Expanded = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_Action
				field ActionExecuted
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Action = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_Completed
				field TargetComplete
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Completed = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_TestSummary
				field TestSummary
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.TestSummary = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_TestResult
				field TestResult
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.TestResult = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstructuredCommandLine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_UnstructuredCommandLine
				field UnstructuredCommandLine
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.UnstructuredCommandLine = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionsParsed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_OptionsParsed
				field OptionsParsed
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.OptionsParsed = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finished", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_Finished
				field BuildFinished
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Finished = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamedSetOfFiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_NamedSetOfFiles
				field NamedSetOfFiles
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.NamedSetOfFiles = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspaceStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_WorkspaceStatus
				field WorkspaceStatus
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.WorkspaceStatus = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_Configuration
				field Configuration
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Configuration = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configured", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_Configured
				field TargetConfigured
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Configured = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastMessage = bool(v != 0)
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fetch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_Fetch
				field Fetch
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Fetch = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructuredCommandLine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_StructuredCommandLine
				field command_line.CommandLine
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.StructuredCommandLine = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildToolLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_BuildToolLogs
				field BuildToolLogs
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.BuildToolLogs = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_BuildMetrics
				field BuildMetrics
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.BuildMetrics = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspaceInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_WorkspaceInfo
				field WorkspaceConfig
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.WorkspaceInfo = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_BuildMetadata
				field BuildMetadata
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.BuildMetadata = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvenienceSymlinksIdentified", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_ConvenienceSymlinksIdentified
				field ConvenienceSymlinksIdentified
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.ConvenienceSymlinksIdentified = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value BuildEvent_TargetSummary
				field TargetSummary
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.TargetSummary = &alloc.field
			m.Payload = &alloc.value
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuildEventStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuildEventStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBuildEventStream(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBuildEventStream
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuildEventStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBuildEventStream
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBuildEventStream
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBuildEventStream
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBuildEventStream        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBuildEventStream          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBuildEventStream = fmt.Errorf("proto: unexpected end of group")
)

