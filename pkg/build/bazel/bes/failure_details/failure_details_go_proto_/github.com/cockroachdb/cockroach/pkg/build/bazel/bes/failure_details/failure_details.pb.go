// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/main/protobuf/failure_details.proto

package failure_details

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Interrupted_Code int32

const (
	// Unknown interrupt. Avoid using this code, instead use INTERRUPTED.
	Interrupted_INTERRUPTED_UNKNOWN Interrupted_Code = 0
	// Command was interrupted (cancelled).
	Interrupted_INTERRUPTED Interrupted_Code = 28
	// The following more specific interrupt codes have been deprecated and
	// consolidated into INTERRUPTED.
	Interrupted_DEPRECATED_BUILD                  Interrupted_Code = 4
	Interrupted_DEPRECATED_BUILD_COMPLETION       Interrupted_Code = 5
	Interrupted_DEPRECATED_PACKAGE_LOADING_SYNC   Interrupted_Code = 6
	Interrupted_DEPRECATED_EXECUTOR_COMPLETION    Interrupted_Code = 7
	Interrupted_DEPRECATED_COMMAND_DISPATCH       Interrupted_Code = 8
	Interrupted_DEPRECATED_INFO_ITEM              Interrupted_Code = 9
	Interrupted_DEPRECATED_AFTER_QUERY            Interrupted_Code = 10
	Interrupted_DEPRECATED_FETCH_COMMAND          Interrupted_Code = 17
	Interrupted_DEPRECATED_SYNC_COMMAND           Interrupted_Code = 18
	Interrupted_DEPRECATED_CLEAN_COMMAND          Interrupted_Code = 20
	Interrupted_DEPRECATED_MOBILE_INSTALL_COMMAND Interrupted_Code = 21
	Interrupted_DEPRECATED_QUERY                  Interrupted_Code = 22
	Interrupted_DEPRECATED_RUN_COMMAND            Interrupted_Code = 23
	Interrupted_DEPRECATED_OPTIONS_PARSING        Interrupted_Code = 27
)

var Interrupted_Code_name = map[int32]string{
	0:  "INTERRUPTED_UNKNOWN",
	28: "INTERRUPTED",
	4:  "DEPRECATED_BUILD",
	5:  "DEPRECATED_BUILD_COMPLETION",
	6:  "DEPRECATED_PACKAGE_LOADING_SYNC",
	7:  "DEPRECATED_EXECUTOR_COMPLETION",
	8:  "DEPRECATED_COMMAND_DISPATCH",
	9:  "DEPRECATED_INFO_ITEM",
	10: "DEPRECATED_AFTER_QUERY",
	17: "DEPRECATED_FETCH_COMMAND",
	18: "DEPRECATED_SYNC_COMMAND",
	20: "DEPRECATED_CLEAN_COMMAND",
	21: "DEPRECATED_MOBILE_INSTALL_COMMAND",
	22: "DEPRECATED_QUERY",
	23: "DEPRECATED_RUN_COMMAND",
	27: "DEPRECATED_OPTIONS_PARSING",
}

var Interrupted_Code_value = map[string]int32{
	"INTERRUPTED_UNKNOWN":               0,
	"INTERRUPTED":                       28,
	"DEPRECATED_BUILD":                  4,
	"DEPRECATED_BUILD_COMPLETION":       5,
	"DEPRECATED_PACKAGE_LOADING_SYNC":   6,
	"DEPRECATED_EXECUTOR_COMPLETION":    7,
	"DEPRECATED_COMMAND_DISPATCH":       8,
	"DEPRECATED_INFO_ITEM":              9,
	"DEPRECATED_AFTER_QUERY":            10,
	"DEPRECATED_FETCH_COMMAND":          17,
	"DEPRECATED_SYNC_COMMAND":           18,
	"DEPRECATED_CLEAN_COMMAND":          20,
	"DEPRECATED_MOBILE_INSTALL_COMMAND": 21,
	"DEPRECATED_QUERY":                  22,
	"DEPRECATED_RUN_COMMAND":            23,
	"DEPRECATED_OPTIONS_PARSING":        27,
}

func (x Interrupted_Code) String() string {
	return proto.EnumName(Interrupted_Code_name, int32(x))
}

func (Interrupted_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{2, 0}
}

type Spawn_Code int32

const (
	Spawn_SPAWN_UNKNOWN Spawn_Code = 0
	// See the SpawnResult.Status Java enum for definitions of the following
	// Spawn failure codes.
	Spawn_NON_ZERO_EXIT Spawn_Code = 1
	Spawn_TIMEOUT       Spawn_Code = 2
	// Note: Spawn OUT_OF_MEMORY leads to a BUILD_FAILURE exit_code because the
	// build tool itself did not run out of memory.
	Spawn_OUT_OF_MEMORY                       Spawn_Code = 3
	Spawn_EXECUTION_FAILED                    Spawn_Code = 4
	Spawn_EXECUTION_DENIED                    Spawn_Code = 5
	Spawn_REMOTE_CACHE_FAILED                 Spawn_Code = 6
	Spawn_COMMAND_LINE_EXPANSION_FAILURE      Spawn_Code = 7
	Spawn_EXEC_IO_EXCEPTION                   Spawn_Code = 8
	Spawn_INVALID_TIMEOUT                     Spawn_Code = 9
	Spawn_INVALID_REMOTE_EXECUTION_PROPERTIES Spawn_Code = 10
	Spawn_NO_USABLE_STRATEGY_FOUND            Spawn_Code = 11
	// TODO(b/138456686): this code should be deprecated when SpawnResult is
	//   refactored to prohibit undetailed failures
	Spawn_UNSPECIFIED_EXECUTION_FAILURE Spawn_Code = 12
	Spawn_FORBIDDEN_INPUT               Spawn_Code = 13
)

var Spawn_Code_name = map[int32]string{
	0:  "SPAWN_UNKNOWN",
	1:  "NON_ZERO_EXIT",
	2:  "TIMEOUT",
	3:  "OUT_OF_MEMORY",
	4:  "EXECUTION_FAILED",
	5:  "EXECUTION_DENIED",
	6:  "REMOTE_CACHE_FAILED",
	7:  "COMMAND_LINE_EXPANSION_FAILURE",
	8:  "EXEC_IO_EXCEPTION",
	9:  "INVALID_TIMEOUT",
	10: "INVALID_REMOTE_EXECUTION_PROPERTIES",
	11: "NO_USABLE_STRATEGY_FOUND",
	12: "UNSPECIFIED_EXECUTION_FAILURE",
	13: "FORBIDDEN_INPUT",
}

var Spawn_Code_value = map[string]int32{
	"SPAWN_UNKNOWN":                       0,
	"NON_ZERO_EXIT":                       1,
	"TIMEOUT":                             2,
	"OUT_OF_MEMORY":                       3,
	"EXECUTION_FAILED":                    4,
	"EXECUTION_DENIED":                    5,
	"REMOTE_CACHE_FAILED":                 6,
	"COMMAND_LINE_EXPANSION_FAILURE":      7,
	"EXEC_IO_EXCEPTION":                   8,
	"INVALID_TIMEOUT":                     9,
	"INVALID_REMOTE_EXECUTION_PROPERTIES": 10,
	"NO_USABLE_STRATEGY_FOUND":            11,
	"UNSPECIFIED_EXECUTION_FAILURE":       12,
	"FORBIDDEN_INPUT":                     13,
}

func (x Spawn_Code) String() string {
	return proto.EnumName(Spawn_Code_name, int32(x))
}

func (Spawn_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{3, 0}
}

type ExternalRepository_Code int32

const (
	ExternalRepository_EXTERNAL_REPOSITORY_UNKNOWN             ExternalRepository_Code = 0
	ExternalRepository_OVERRIDE_DISALLOWED_MANAGED_DIRECTORIES ExternalRepository_Code = 1
	ExternalRepository_BAD_DOWNLOADER_CONFIG                   ExternalRepository_Code = 2
)

var ExternalRepository_Code_name = map[int32]string{
	0: "EXTERNAL_REPOSITORY_UNKNOWN",
	1: "OVERRIDE_DISALLOWED_MANAGED_DIRECTORIES",
	2: "BAD_DOWNLOADER_CONFIG",
}

var ExternalRepository_Code_value = map[string]int32{
	"EXTERNAL_REPOSITORY_UNKNOWN":             0,
	"OVERRIDE_DISALLOWED_MANAGED_DIRECTORIES": 1,
	"BAD_DOWNLOADER_CONFIG":                   2,
}

func (x ExternalRepository_Code) String() string {
	return proto.EnumName(ExternalRepository_Code_name, int32(x))
}

func (ExternalRepository_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{4, 0}
}

type BuildProgress_Code int32

const (
	BuildProgress_BUILD_PROGRESS_UNKNOWN                        BuildProgress_Code = 0
	BuildProgress_OUTPUT_INITIALIZATION                         BuildProgress_Code = 3
	BuildProgress_BES_RUNS_PER_TEST_LIMIT_UNSUPPORTED           BuildProgress_Code = 4
	BuildProgress_BES_LOCAL_WRITE_ERROR                         BuildProgress_Code = 5
	BuildProgress_BES_INITIALIZATION_ERROR                      BuildProgress_Code = 6
	BuildProgress_BES_UPLOAD_TIMEOUT_ERROR                      BuildProgress_Code = 7
	BuildProgress_BES_FILE_WRITE_TIMEOUT                        BuildProgress_Code = 8
	BuildProgress_BES_FILE_WRITE_IO_ERROR                       BuildProgress_Code = 9
	BuildProgress_BES_FILE_WRITE_INTERRUPTED                    BuildProgress_Code = 10
	BuildProgress_BES_FILE_WRITE_CANCELED                       BuildProgress_Code = 11
	BuildProgress_BES_FILE_WRITE_UNKNOWN_ERROR                  BuildProgress_Code = 12
	BuildProgress_BES_UPLOAD_LOCAL_FILE_ERROR                   BuildProgress_Code = 13
	BuildProgress_BES_STREAM_NOT_RETRYING_FAILURE               BuildProgress_Code = 14
	BuildProgress_BES_STREAM_COMPLETED_WITH_UNACK_EVENTS_ERROR  BuildProgress_Code = 15
	BuildProgress_BES_STREAM_COMPLETED_WITH_UNSENT_EVENTS_ERROR BuildProgress_Code = 16
	BuildProgress_BES_STREAM_COMPLETED_WITH_REMOTE_ERROR        BuildProgress_Code = 19
	BuildProgress_BES_UPLOAD_RETRY_LIMIT_EXCEEDED_FAILURE       BuildProgress_Code = 17
)

var BuildProgress_Code_name = map[int32]string{
	0:  "BUILD_PROGRESS_UNKNOWN",
	3:  "OUTPUT_INITIALIZATION",
	4:  "BES_RUNS_PER_TEST_LIMIT_UNSUPPORTED",
	5:  "BES_LOCAL_WRITE_ERROR",
	6:  "BES_INITIALIZATION_ERROR",
	7:  "BES_UPLOAD_TIMEOUT_ERROR",
	8:  "BES_FILE_WRITE_TIMEOUT",
	9:  "BES_FILE_WRITE_IO_ERROR",
	10: "BES_FILE_WRITE_INTERRUPTED",
	11: "BES_FILE_WRITE_CANCELED",
	12: "BES_FILE_WRITE_UNKNOWN_ERROR",
	13: "BES_UPLOAD_LOCAL_FILE_ERROR",
	14: "BES_STREAM_NOT_RETRYING_FAILURE",
	15: "BES_STREAM_COMPLETED_WITH_UNACK_EVENTS_ERROR",
	16: "BES_STREAM_COMPLETED_WITH_UNSENT_EVENTS_ERROR",
	19: "BES_STREAM_COMPLETED_WITH_REMOTE_ERROR",
	17: "BES_UPLOAD_RETRY_LIMIT_EXCEEDED_FAILURE",
}

var BuildProgress_Code_value = map[string]int32{
	"BUILD_PROGRESS_UNKNOWN":                        0,
	"OUTPUT_INITIALIZATION":                         3,
	"BES_RUNS_PER_TEST_LIMIT_UNSUPPORTED":           4,
	"BES_LOCAL_WRITE_ERROR":                         5,
	"BES_INITIALIZATION_ERROR":                      6,
	"BES_UPLOAD_TIMEOUT_ERROR":                      7,
	"BES_FILE_WRITE_TIMEOUT":                        8,
	"BES_FILE_WRITE_IO_ERROR":                       9,
	"BES_FILE_WRITE_INTERRUPTED":                    10,
	"BES_FILE_WRITE_CANCELED":                       11,
	"BES_FILE_WRITE_UNKNOWN_ERROR":                  12,
	"BES_UPLOAD_LOCAL_FILE_ERROR":                   13,
	"BES_STREAM_NOT_RETRYING_FAILURE":               14,
	"BES_STREAM_COMPLETED_WITH_UNACK_EVENTS_ERROR":  15,
	"BES_STREAM_COMPLETED_WITH_UNSENT_EVENTS_ERROR": 16,
	"BES_STREAM_COMPLETED_WITH_REMOTE_ERROR":        19,
	"BES_UPLOAD_RETRY_LIMIT_EXCEEDED_FAILURE":       17,
}

func (x BuildProgress_Code) String() string {
	return proto.EnumName(BuildProgress_Code_name, int32(x))
}

func (BuildProgress_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{5, 0}
}

type RemoteOptions_Code int32

const (
	RemoteOptions_REMOTE_OPTIONS_UNKNOWN                     RemoteOptions_Code = 0
	RemoteOptions_REMOTE_DEFAULT_EXEC_PROPERTIES_LOGIC_ERROR RemoteOptions_Code = 1
	// Credentials could not be read from the requested file/socket/process/etc.
	RemoteOptions_CREDENTIALS_READ_FAILURE RemoteOptions_Code = 2
	// Credentials could not be written to a shared, temporary file.
	RemoteOptions_CREDENTIALS_WRITE_FAILURE     RemoteOptions_Code = 3
	RemoteOptions_DOWNLOADER_WITHOUT_GRPC_CACHE RemoteOptions_Code = 4
	RemoteOptions_EXECUTION_WITH_INVALID_CACHE  RemoteOptions_Code = 5
)

var RemoteOptions_Code_name = map[int32]string{
	0: "REMOTE_OPTIONS_UNKNOWN",
	1: "REMOTE_DEFAULT_EXEC_PROPERTIES_LOGIC_ERROR",
	2: "CREDENTIALS_READ_FAILURE",
	3: "CREDENTIALS_WRITE_FAILURE",
	4: "DOWNLOADER_WITHOUT_GRPC_CACHE",
	5: "EXECUTION_WITH_INVALID_CACHE",
}

var RemoteOptions_Code_value = map[string]int32{
	"REMOTE_OPTIONS_UNKNOWN":                     0,
	"REMOTE_DEFAULT_EXEC_PROPERTIES_LOGIC_ERROR": 1,
	"CREDENTIALS_READ_FAILURE":                   2,
	"CREDENTIALS_WRITE_FAILURE":                  3,
	"DOWNLOADER_WITHOUT_GRPC_CACHE":              4,
	"EXECUTION_WITH_INVALID_CACHE":               5,
}

func (x RemoteOptions_Code) String() string {
	return proto.EnumName(RemoteOptions_Code_name, int32(x))
}

func (RemoteOptions_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{6, 0}
}

type ClientEnvironment_Code int32

const (
	ClientEnvironment_CLIENT_ENVIRONMENT_UNKNOWN ClientEnvironment_Code = 0
	ClientEnvironment_CLIENT_CWD_MALFORMED       ClientEnvironment_Code = 1
)

var ClientEnvironment_Code_name = map[int32]string{
	0: "CLIENT_ENVIRONMENT_UNKNOWN",
	1: "CLIENT_CWD_MALFORMED",
}

var ClientEnvironment_Code_value = map[string]int32{
	"CLIENT_ENVIRONMENT_UNKNOWN": 0,
	"CLIENT_CWD_MALFORMED":       1,
}

func (x ClientEnvironment_Code) String() string {
	return proto.EnumName(ClientEnvironment_Code_name, int32(x))
}

func (ClientEnvironment_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{7, 0}
}

type Crash_Code int32

const (
	Crash_CRASH_UNKNOWN Crash_Code = 0
	Crash_CRASH_OOM     Crash_Code = 1
)

var Crash_Code_name = map[int32]string{
	0: "CRASH_UNKNOWN",
	1: "CRASH_OOM",
}

var Crash_Code_value = map[string]int32{
	"CRASH_UNKNOWN": 0,
	"CRASH_OOM":     1,
}

func (x Crash_Code) String() string {
	return proto.EnumName(Crash_Code_name, int32(x))
}

func (Crash_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{8, 0}
}

type SymlinkForest_Code int32

const (
	SymlinkForest_SYMLINK_FOREST_UNKNOWN                SymlinkForest_Code = 0
	SymlinkForest_TOPLEVEL_OUTDIR_PACKAGE_PATH_CONFLICT SymlinkForest_Code = 1
	SymlinkForest_TOPLEVEL_OUTDIR_USED_AS_SOURCE        SymlinkForest_Code = 2
	SymlinkForest_CREATION_FAILED                       SymlinkForest_Code = 3
)

var SymlinkForest_Code_name = map[int32]string{
	0: "SYMLINK_FOREST_UNKNOWN",
	1: "TOPLEVEL_OUTDIR_PACKAGE_PATH_CONFLICT",
	2: "TOPLEVEL_OUTDIR_USED_AS_SOURCE",
	3: "CREATION_FAILED",
}

var SymlinkForest_Code_value = map[string]int32{
	"SYMLINK_FOREST_UNKNOWN":                0,
	"TOPLEVEL_OUTDIR_PACKAGE_PATH_CONFLICT": 1,
	"TOPLEVEL_OUTDIR_USED_AS_SOURCE":        2,
	"CREATION_FAILED":                       3,
}

func (x SymlinkForest_Code) String() string {
	return proto.EnumName(SymlinkForest_Code_name, int32(x))
}

func (SymlinkForest_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{10, 0}
}

type PackageOptions_Code int32

const (
	PackageOptions_PACKAGE_OPTIONS_UNKNOWN PackageOptions_Code = 0
	PackageOptions_PACKAGE_PATH_INVALID    PackageOptions_Code = 1
)

var PackageOptions_Code_name = map[int32]string{
	0: "PACKAGE_OPTIONS_UNKNOWN",
	1: "PACKAGE_PATH_INVALID",
}

var PackageOptions_Code_value = map[string]int32{
	"PACKAGE_OPTIONS_UNKNOWN": 0,
	"PACKAGE_PATH_INVALID":    1,
}

func (x PackageOptions_Code) String() string {
	return proto.EnumName(PackageOptions_Code_name, int32(x))
}

func (PackageOptions_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{11, 0}
}

// The association of some of these options with exit code 2, "command line
// error", seems sketchy. Especially worth reconsidering are the channel init
// failure modes, which can correspond to failures occurring in gRPC setup.
// These all correspond with current Bazel behavior.
type RemoteExecution_Code int32

const (
	RemoteExecution_REMOTE_EXECUTION_UNKNOWN                               RemoteExecution_Code = 0
	RemoteExecution_CAPABILITIES_QUERY_FAILURE                             RemoteExecution_Code = 1
	RemoteExecution_CREDENTIALS_INIT_FAILURE                               RemoteExecution_Code = 2
	RemoteExecution_CACHE_INIT_FAILURE                                     RemoteExecution_Code = 3
	RemoteExecution_RPC_LOG_FAILURE                                        RemoteExecution_Code = 4
	RemoteExecution_EXEC_CHANNEL_INIT_FAILURE                              RemoteExecution_Code = 5
	RemoteExecution_CACHE_CHANNEL_INIT_FAILURE                             RemoteExecution_Code = 6
	RemoteExecution_DOWNLOADER_CHANNEL_INIT_FAILURE                        RemoteExecution_Code = 7
	RemoteExecution_LOG_DIR_CLEANUP_FAILURE                                RemoteExecution_Code = 8
	RemoteExecution_CLIENT_SERVER_INCOMPATIBLE                             RemoteExecution_Code = 9
	RemoteExecution_DOWNLOADED_INPUTS_DELETION_FAILURE                     RemoteExecution_Code = 10
	RemoteExecution_REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_DOTD  RemoteExecution_Code = 11
	RemoteExecution_REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_JDEPS RemoteExecution_Code = 12
	RemoteExecution_INCOMPLETE_OUTPUT_DOWNLOAD_CLEANUP_FAILURE             RemoteExecution_Code = 13
	RemoteExecution_REMOTE_DEFAULT_PLATFORM_PROPERTIES_PARSE_FAILURE       RemoteExecution_Code = 14
	RemoteExecution_ILLEGAL_OUTPUT                                         RemoteExecution_Code = 15
	RemoteExecution_INVALID_EXEC_AND_PLATFORM_PROPERTIES                   RemoteExecution_Code = 16
)

var RemoteExecution_Code_name = map[int32]string{
	0:  "REMOTE_EXECUTION_UNKNOWN",
	1:  "CAPABILITIES_QUERY_FAILURE",
	2:  "CREDENTIALS_INIT_FAILURE",
	3:  "CACHE_INIT_FAILURE",
	4:  "RPC_LOG_FAILURE",
	5:  "EXEC_CHANNEL_INIT_FAILURE",
	6:  "CACHE_CHANNEL_INIT_FAILURE",
	7:  "DOWNLOADER_CHANNEL_INIT_FAILURE",
	8:  "LOG_DIR_CLEANUP_FAILURE",
	9:  "CLIENT_SERVER_INCOMPATIBLE",
	10: "DOWNLOADED_INPUTS_DELETION_FAILURE",
	11: "REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_DOTD",
	12: "REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_JDEPS",
	13: "INCOMPLETE_OUTPUT_DOWNLOAD_CLEANUP_FAILURE",
	14: "REMOTE_DEFAULT_PLATFORM_PROPERTIES_PARSE_FAILURE",
	15: "ILLEGAL_OUTPUT",
	16: "INVALID_EXEC_AND_PLATFORM_PROPERTIES",
}

var RemoteExecution_Code_value = map[string]int32{
	"REMOTE_EXECUTION_UNKNOWN":                               0,
	"CAPABILITIES_QUERY_FAILURE":                             1,
	"CREDENTIALS_INIT_FAILURE":                               2,
	"CACHE_INIT_FAILURE":                                     3,
	"RPC_LOG_FAILURE":                                        4,
	"EXEC_CHANNEL_INIT_FAILURE":                              5,
	"CACHE_CHANNEL_INIT_FAILURE":                             6,
	"DOWNLOADER_CHANNEL_INIT_FAILURE":                        7,
	"LOG_DIR_CLEANUP_FAILURE":                                8,
	"CLIENT_SERVER_INCOMPATIBLE":                             9,
	"DOWNLOADED_INPUTS_DELETION_FAILURE":                     10,
	"REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_DOTD":  11,
	"REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_JDEPS": 12,
	"INCOMPLETE_OUTPUT_DOWNLOAD_CLEANUP_FAILURE":             13,
	"REMOTE_DEFAULT_PLATFORM_PROPERTIES_PARSE_FAILURE":       14,
	"ILLEGAL_OUTPUT":                                         15,
	"INVALID_EXEC_AND_PLATFORM_PROPERTIES":                   16,
}

func (x RemoteExecution_Code) String() string {
	return proto.EnumName(RemoteExecution_Code_name, int32(x))
}

func (RemoteExecution_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{12, 0}
}

type Execution_Code int32

const (
	Execution_EXECUTION_UNKNOWN                                   Execution_Code = 0
	Execution_EXECUTION_LOG_INITIALIZATION_FAILURE                Execution_Code = 1
	Execution_EXECUTION_LOG_WRITE_FAILURE                         Execution_Code = 2
	Execution_EXECROOT_CREATION_FAILURE                           Execution_Code = 3
	Execution_TEMP_ACTION_OUTPUT_DIRECTORY_DELETION_FAILURE       Execution_Code = 4
	Execution_TEMP_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE       Execution_Code = 5
	Execution_PERSISTENT_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE Execution_Code = 6
	Execution_LOCAL_OUTPUT_DIRECTORY_SYMLINK_FAILURE              Execution_Code = 7
	// SOURCE_INPUT_MISSING
	Execution_LOCAL_TEMPLATE_EXPANSION_FAILURE             Execution_Code = 9
	Execution_INPUT_DIRECTORY_CHECK_IO_EXCEPTION           Execution_Code = 10
	Execution_EXTRA_ACTION_OUTPUT_CREATION_FAILURE         Execution_Code = 11
	Execution_TEST_RUNNER_IO_EXCEPTION                     Execution_Code = 12
	Execution_FILE_WRITE_IO_EXCEPTION                      Execution_Code = 13
	Execution_TEST_OUT_ERR_IO_EXCEPTION                    Execution_Code = 14
	Execution_SYMLINK_TREE_MANIFEST_COPY_IO_EXCEPTION      Execution_Code = 15
	Execution_SYMLINK_TREE_MANIFEST_LINK_IO_EXCEPTION      Execution_Code = 16
	Execution_SYMLINK_TREE_CREATION_IO_EXCEPTION           Execution_Code = 17
	Execution_SYMLINK_TREE_CREATION_COMMAND_EXCEPTION      Execution_Code = 18
	Execution_ACTION_INPUT_READ_IO_EXCEPTION               Execution_Code = 19
	Execution_ACTION_NOT_UP_TO_DATE                        Execution_Code = 20
	Execution_PSEUDO_ACTION_EXECUTION_PROHIBITED           Execution_Code = 21
	Execution_DISCOVERED_INPUT_DOES_NOT_EXIST              Execution_Code = 22
	Execution_ACTION_OUTPUTS_DELETION_FAILURE              Execution_Code = 23
	Execution_ACTION_OUTPUTS_NOT_CREATED                   Execution_Code = 24
	Execution_ACTION_FINALIZATION_FAILURE                  Execution_Code = 25
	Execution_ACTION_INPUT_LOST                            Execution_Code = 26
	Execution_FILESYSTEM_CONTEXT_UPDATE_FAILURE            Execution_Code = 27
	Execution_ACTION_OUTPUT_CLOSE_FAILURE                  Execution_Code = 28
	Execution_INPUT_DISCOVERY_IO_EXCEPTION                 Execution_Code = 29
	Execution_TREE_ARTIFACT_DIRECTORY_CREATION_FAILURE     Execution_Code = 30
	Execution_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE     Execution_Code = 31
	Execution_ACTION_FS_OUTPUT_DIRECTORY_CREATION_FAILURE  Execution_Code = 32
	Execution_ACTION_FS_OUT_ERR_DIRECTORY_CREATION_FAILURE Execution_Code = 33
	Execution_NON_ACTION_EXECUTION_FAILURE                 Execution_Code = 34
	Execution_CYCLE                                        Execution_Code = 35
	Execution_SOURCE_INPUT_MISSING                         Execution_Code = 36
	Execution_UNEXPECTED_EXCEPTION                         Execution_Code = 37
	Execution_SOURCE_INPUT_IO_EXCEPTION                    Execution_Code = 39
)

var Execution_Code_name = map[int32]string{
	0:  "EXECUTION_UNKNOWN",
	1:  "EXECUTION_LOG_INITIALIZATION_FAILURE",
	2:  "EXECUTION_LOG_WRITE_FAILURE",
	3:  "EXECROOT_CREATION_FAILURE",
	4:  "TEMP_ACTION_OUTPUT_DIRECTORY_DELETION_FAILURE",
	5:  "TEMP_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE",
	6:  "PERSISTENT_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE",
	7:  "LOCAL_OUTPUT_DIRECTORY_SYMLINK_FAILURE",
	9:  "LOCAL_TEMPLATE_EXPANSION_FAILURE",
	10: "INPUT_DIRECTORY_CHECK_IO_EXCEPTION",
	11: "EXTRA_ACTION_OUTPUT_CREATION_FAILURE",
	12: "TEST_RUNNER_IO_EXCEPTION",
	13: "FILE_WRITE_IO_EXCEPTION",
	14: "TEST_OUT_ERR_IO_EXCEPTION",
	15: "SYMLINK_TREE_MANIFEST_COPY_IO_EXCEPTION",
	16: "SYMLINK_TREE_MANIFEST_LINK_IO_EXCEPTION",
	17: "SYMLINK_TREE_CREATION_IO_EXCEPTION",
	18: "SYMLINK_TREE_CREATION_COMMAND_EXCEPTION",
	19: "ACTION_INPUT_READ_IO_EXCEPTION",
	20: "ACTION_NOT_UP_TO_DATE",
	21: "PSEUDO_ACTION_EXECUTION_PROHIBITED",
	22: "DISCOVERED_INPUT_DOES_NOT_EXIST",
	23: "ACTION_OUTPUTS_DELETION_FAILURE",
	24: "ACTION_OUTPUTS_NOT_CREATED",
	25: "ACTION_FINALIZATION_FAILURE",
	26: "ACTION_INPUT_LOST",
	27: "FILESYSTEM_CONTEXT_UPDATE_FAILURE",
	28: "ACTION_OUTPUT_CLOSE_FAILURE",
	29: "INPUT_DISCOVERY_IO_EXCEPTION",
	30: "TREE_ARTIFACT_DIRECTORY_CREATION_FAILURE",
	31: "ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE",
	32: "ACTION_FS_OUTPUT_DIRECTORY_CREATION_FAILURE",
	33: "ACTION_FS_OUT_ERR_DIRECTORY_CREATION_FAILURE",
	34: "NON_ACTION_EXECUTION_FAILURE",
	35: "CYCLE",
	36: "SOURCE_INPUT_MISSING",
	37: "UNEXPECTED_EXCEPTION",
	39: "SOURCE_INPUT_IO_EXCEPTION",
}

var Execution_Code_value = map[string]int32{
	"EXECUTION_UNKNOWN":                                   0,
	"EXECUTION_LOG_INITIALIZATION_FAILURE":                1,
	"EXECUTION_LOG_WRITE_FAILURE":                         2,
	"EXECROOT_CREATION_FAILURE":                           3,
	"TEMP_ACTION_OUTPUT_DIRECTORY_DELETION_FAILURE":       4,
	"TEMP_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE":       5,
	"PERSISTENT_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE": 6,
	"LOCAL_OUTPUT_DIRECTORY_SYMLINK_FAILURE":              7,
	"LOCAL_TEMPLATE_EXPANSION_FAILURE":                    9,
	"INPUT_DIRECTORY_CHECK_IO_EXCEPTION":                  10,
	"EXTRA_ACTION_OUTPUT_CREATION_FAILURE":                11,
	"TEST_RUNNER_IO_EXCEPTION":                            12,
	"FILE_WRITE_IO_EXCEPTION":                             13,
	"TEST_OUT_ERR_IO_EXCEPTION":                           14,
	"SYMLINK_TREE_MANIFEST_COPY_IO_EXCEPTION":             15,
	"SYMLINK_TREE_MANIFEST_LINK_IO_EXCEPTION":             16,
	"SYMLINK_TREE_CREATION_IO_EXCEPTION":                  17,
	"SYMLINK_TREE_CREATION_COMMAND_EXCEPTION":             18,
	"ACTION_INPUT_READ_IO_EXCEPTION":                      19,
	"ACTION_NOT_UP_TO_DATE":                               20,
	"PSEUDO_ACTION_EXECUTION_PROHIBITED":                  21,
	"DISCOVERED_INPUT_DOES_NOT_EXIST":                     22,
	"ACTION_OUTPUTS_DELETION_FAILURE":                     23,
	"ACTION_OUTPUTS_NOT_CREATED":                          24,
	"ACTION_FINALIZATION_FAILURE":                         25,
	"ACTION_INPUT_LOST":                                   26,
	"FILESYSTEM_CONTEXT_UPDATE_FAILURE":                   27,
	"ACTION_OUTPUT_CLOSE_FAILURE":                         28,
	"INPUT_DISCOVERY_IO_EXCEPTION":                        29,
	"TREE_ARTIFACT_DIRECTORY_CREATION_FAILURE":            30,
	"ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE":            31,
	"ACTION_FS_OUTPUT_DIRECTORY_CREATION_FAILURE":         32,
	"ACTION_FS_OUT_ERR_DIRECTORY_CREATION_FAILURE":        33,
	"NON_ACTION_EXECUTION_FAILURE":                        34,
	"CYCLE":                                               35,
	"SOURCE_INPUT_MISSING":                                36,
	"UNEXPECTED_EXCEPTION":                                37,
	"SOURCE_INPUT_IO_EXCEPTION":                           39,
}

func (x Execution_Code) String() string {
	return proto.EnumName(Execution_Code_name, int32(x))
}

func (Execution_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{13, 0}
}

type Workspaces_Code int32

const (
	Workspaces_WORKSPACES_UNKNOWN                    Workspaces_Code = 0
	Workspaces_WORKSPACES_LOG_INITIALIZATION_FAILURE Workspaces_Code = 1
	Workspaces_WORKSPACES_LOG_WRITE_FAILURE          Workspaces_Code = 2
	// See `managed_directories` in
	// https://bazel.build/rules/lib/globals#workspace.
	Workspaces_ILLEGAL_WORKSPACE_FILE_SYMLINK_WITH_MANAGED_DIRECTORIES Workspaces_Code = 3
	Workspaces_WORKSPACE_FILE_READ_FAILURE_WITH_MANAGED_DIRECTORIES    Workspaces_Code = 4
)

var Workspaces_Code_name = map[int32]string{
	0: "WORKSPACES_UNKNOWN",
	1: "WORKSPACES_LOG_INITIALIZATION_FAILURE",
	2: "WORKSPACES_LOG_WRITE_FAILURE",
	3: "ILLEGAL_WORKSPACE_FILE_SYMLINK_WITH_MANAGED_DIRECTORIES",
	4: "WORKSPACE_FILE_READ_FAILURE_WITH_MANAGED_DIRECTORIES",
}

var Workspaces_Code_value = map[string]int32{
	"WORKSPACES_UNKNOWN":                                      0,
	"WORKSPACES_LOG_INITIALIZATION_FAILURE":                   1,
	"WORKSPACES_LOG_WRITE_FAILURE":                            2,
	"ILLEGAL_WORKSPACE_FILE_SYMLINK_WITH_MANAGED_DIRECTORIES": 3,
	"WORKSPACE_FILE_READ_FAILURE_WITH_MANAGED_DIRECTORIES":    4,
}

func (x Workspaces_Code) String() string {
	return proto.EnumName(Workspaces_Code_name, int32(x))
}

func (Workspaces_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{14, 0}
}

type CrashOptions_Code int32

const (
	CrashOptions_CRASH_OPTIONS_UNKNOWN CrashOptions_Code = 0
)

var CrashOptions_Code_name = map[int32]string{
	0: "CRASH_OPTIONS_UNKNOWN",
}

var CrashOptions_Code_value = map[string]int32{
	"CRASH_OPTIONS_UNKNOWN": 0,
}

func (x CrashOptions_Code) String() string {
	return proto.EnumName(CrashOptions_Code_name, int32(x))
}

func (CrashOptions_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{15, 0}
}

type Filesystem_Code int32

const (
	Filesystem_FILESYSTEM_UNKNOWN                         Filesystem_Code = 0
	Filesystem_EMBEDDED_BINARIES_ENUMERATION_FAILURE      Filesystem_Code = 3
	Filesystem_SERVER_PID_TXT_FILE_READ_FAILURE           Filesystem_Code = 4
	Filesystem_SERVER_FILE_WRITE_FAILURE                  Filesystem_Code = 5
	Filesystem_DEFAULT_DIGEST_HASH_FUNCTION_INVALID_VALUE Filesystem_Code = 6
)

var Filesystem_Code_name = map[int32]string{
	0: "FILESYSTEM_UNKNOWN",
	3: "EMBEDDED_BINARIES_ENUMERATION_FAILURE",
	4: "SERVER_PID_TXT_FILE_READ_FAILURE",
	5: "SERVER_FILE_WRITE_FAILURE",
	6: "DEFAULT_DIGEST_HASH_FUNCTION_INVALID_VALUE",
}

var Filesystem_Code_value = map[string]int32{
	"FILESYSTEM_UNKNOWN":                         0,
	"EMBEDDED_BINARIES_ENUMERATION_FAILURE":      3,
	"SERVER_PID_TXT_FILE_READ_FAILURE":           4,
	"SERVER_FILE_WRITE_FAILURE":                  5,
	"DEFAULT_DIGEST_HASH_FUNCTION_INVALID_VALUE": 6,
}

func (x Filesystem_Code) String() string {
	return proto.EnumName(Filesystem_Code_name, int32(x))
}

func (Filesystem_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{16, 0}
}

// All numerical exit code associations correspond to pre-existing Bazel
// behavior. These associations are suspicious:
// - REQUESTED_STRATEGY_INCOMPATIBLE_WITH_SANDBOXING (instead: 2?)
// - DEPRECATED_LOCAL_RESOURCES_USED (instead: 2?)
// TODO(b/138456686): Revise these after the (intentionally non-breaking)
//
//	initial rollout of FailureDetail-based encoding.
type ExecutionOptions_Code int32

const (
	ExecutionOptions_EXECUTION_OPTIONS_UNKNOWN                       ExecutionOptions_Code = 0
	ExecutionOptions_INVALID_STRATEGY                                ExecutionOptions_Code = 3
	ExecutionOptions_REQUESTED_STRATEGY_INCOMPATIBLE_WITH_SANDBOXING ExecutionOptions_Code = 4
	ExecutionOptions_DEPRECATED_LOCAL_RESOURCES_USED                 ExecutionOptions_Code = 5
	ExecutionOptions_INVALID_CYCLIC_DYNAMIC_STRATEGY                 ExecutionOptions_Code = 6
	ExecutionOptions_RESTRICTION_UNMATCHED_TO_ACTION_CONTEXT         ExecutionOptions_Code = 7
	ExecutionOptions_REMOTE_FALLBACK_STRATEGY_NOT_ABSTRACT_SPAWN     ExecutionOptions_Code = 8
	ExecutionOptions_STRATEGY_NOT_FOUND                              ExecutionOptions_Code = 9
	ExecutionOptions_DYNAMIC_STRATEGY_NOT_SANDBOXED                  ExecutionOptions_Code = 10
)

var ExecutionOptions_Code_name = map[int32]string{
	0:  "EXECUTION_OPTIONS_UNKNOWN",
	3:  "INVALID_STRATEGY",
	4:  "REQUESTED_STRATEGY_INCOMPATIBLE_WITH_SANDBOXING",
	5:  "DEPRECATED_LOCAL_RESOURCES_USED",
	6:  "INVALID_CYCLIC_DYNAMIC_STRATEGY",
	7:  "RESTRICTION_UNMATCHED_TO_ACTION_CONTEXT",
	8:  "REMOTE_FALLBACK_STRATEGY_NOT_ABSTRACT_SPAWN",
	9:  "STRATEGY_NOT_FOUND",
	10: "DYNAMIC_STRATEGY_NOT_SANDBOXED",
}

var ExecutionOptions_Code_value = map[string]int32{
	"EXECUTION_OPTIONS_UNKNOWN":                       0,
	"INVALID_STRATEGY":                                3,
	"REQUESTED_STRATEGY_INCOMPATIBLE_WITH_SANDBOXING": 4,
	"DEPRECATED_LOCAL_RESOURCES_USED":                 5,
	"INVALID_CYCLIC_DYNAMIC_STRATEGY":                 6,
	"RESTRICTION_UNMATCHED_TO_ACTION_CONTEXT":         7,
	"REMOTE_FALLBACK_STRATEGY_NOT_ABSTRACT_SPAWN":     8,
	"STRATEGY_NOT_FOUND":                              9,
	"DYNAMIC_STRATEGY_NOT_SANDBOXED":                  10,
}

func (x ExecutionOptions_Code) String() string {
	return proto.EnumName(ExecutionOptions_Code_name, int32(x))
}

func (ExecutionOptions_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{17, 0}
}

type Command_Code int32

const (
	// The name "COMMAND_UNKNOWN" might reasonably be interpreted as "command
	// not found". The enum's default value should represent a lack of knowledge
	// about the failure instead.
	Command_COMMAND_FAILURE_UNKNOWN                          Command_Code = 0
	Command_COMMAND_NOT_FOUND                                Command_Code = 1
	Command_ANOTHER_COMMAND_RUNNING                          Command_Code = 2
	Command_PREVIOUSLY_SHUTDOWN                              Command_Code = 3
	Command_STARLARK_CPU_PROFILE_FILE_INITIALIZATION_FAILURE Command_Code = 4
	Command_STARLARK_CPU_PROFILING_INITIALIZATION_FAILURE    Command_Code = 5
	Command_STARLARK_CPU_PROFILE_FILE_WRITE_FAILURE          Command_Code = 6
	Command_INVOCATION_POLICY_PARSE_FAILURE                  Command_Code = 7
	Command_INVOCATION_POLICY_INVALID                        Command_Code = 8
	Command_OPTIONS_PARSE_FAILURE                            Command_Code = 9
	Command_STARLARK_OPTIONS_PARSE_FAILURE                   Command_Code = 10
	Command_ARGUMENTS_NOT_RECOGNIZED                         Command_Code = 11
	Command_NOT_IN_WORKSPACE                                 Command_Code = 12
	Command_SPACES_IN_WORKSPACE_PATH                         Command_Code = 13
	Command_IN_OUTPUT_DIRECTORY                              Command_Code = 14
)

var Command_Code_name = map[int32]string{
	0:  "COMMAND_FAILURE_UNKNOWN",
	1:  "COMMAND_NOT_FOUND",
	2:  "ANOTHER_COMMAND_RUNNING",
	3:  "PREVIOUSLY_SHUTDOWN",
	4:  "STARLARK_CPU_PROFILE_FILE_INITIALIZATION_FAILURE",
	5:  "STARLARK_CPU_PROFILING_INITIALIZATION_FAILURE",
	6:  "STARLARK_CPU_PROFILE_FILE_WRITE_FAILURE",
	7:  "INVOCATION_POLICY_PARSE_FAILURE",
	8:  "INVOCATION_POLICY_INVALID",
	9:  "OPTIONS_PARSE_FAILURE",
	10: "STARLARK_OPTIONS_PARSE_FAILURE",
	11: "ARGUMENTS_NOT_RECOGNIZED",
	12: "NOT_IN_WORKSPACE",
	13: "SPACES_IN_WORKSPACE_PATH",
	14: "IN_OUTPUT_DIRECTORY",
}

var Command_Code_value = map[string]int32{
	"COMMAND_FAILURE_UNKNOWN":                          0,
	"COMMAND_NOT_FOUND":                                1,
	"ANOTHER_COMMAND_RUNNING":                          2,
	"PREVIOUSLY_SHUTDOWN":                              3,
	"STARLARK_CPU_PROFILE_FILE_INITIALIZATION_FAILURE": 4,
	"STARLARK_CPU_PROFILING_INITIALIZATION_FAILURE":    5,
	"STARLARK_CPU_PROFILE_FILE_WRITE_FAILURE":          6,
	"INVOCATION_POLICY_PARSE_FAILURE":                  7,
	"INVOCATION_POLICY_INVALID":                        8,
	"OPTIONS_PARSE_FAILURE":                            9,
	"STARLARK_OPTIONS_PARSE_FAILURE":                   10,
	"ARGUMENTS_NOT_RECOGNIZED":                         11,
	"NOT_IN_WORKSPACE":                                 12,
	"SPACES_IN_WORKSPACE_PATH":                         13,
	"IN_OUTPUT_DIRECTORY":                              14,
}

func (x Command_Code) String() string {
	return proto.EnumName(Command_Code_name, int32(x))
}

func (Command_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{18, 0}
}

type GrpcServer_Code int32

const (
	GrpcServer_GRPC_SERVER_UNKNOWN         GrpcServer_Code = 0
	GrpcServer_GRPC_SERVER_NOT_COMPILED_IN GrpcServer_Code = 1
	GrpcServer_SERVER_BIND_FAILURE         GrpcServer_Code = 2
	GrpcServer_BAD_COOKIE                  GrpcServer_Code = 3
	GrpcServer_NO_CLIENT_DESCRIPTION       GrpcServer_Code = 4
)

var GrpcServer_Code_name = map[int32]string{
	0: "GRPC_SERVER_UNKNOWN",
	1: "GRPC_SERVER_NOT_COMPILED_IN",
	2: "SERVER_BIND_FAILURE",
	3: "BAD_COOKIE",
	4: "NO_CLIENT_DESCRIPTION",
}

var GrpcServer_Code_value = map[string]int32{
	"GRPC_SERVER_UNKNOWN":         0,
	"GRPC_SERVER_NOT_COMPILED_IN": 1,
	"SERVER_BIND_FAILURE":         2,
	"BAD_COOKIE":                  3,
	"NO_CLIENT_DESCRIPTION":       4,
}

func (x GrpcServer_Code) String() string {
	return proto.EnumName(GrpcServer_Code_name, int32(x))
}

func (GrpcServer_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{19, 0}
}

type CanonicalizeFlags_Code int32

const (
	CanonicalizeFlags_CANONICALIZE_FLAGS_UNKNOWN CanonicalizeFlags_Code = 0
	CanonicalizeFlags_FOR_COMMAND_INVALID        CanonicalizeFlags_Code = 1
)

var CanonicalizeFlags_Code_name = map[int32]string{
	0: "CANONICALIZE_FLAGS_UNKNOWN",
	1: "FOR_COMMAND_INVALID",
}

var CanonicalizeFlags_Code_value = map[string]int32{
	"CANONICALIZE_FLAGS_UNKNOWN": 0,
	"FOR_COMMAND_INVALID":        1,
}

func (x CanonicalizeFlags_Code) String() string {
	return proto.EnumName(CanonicalizeFlags_Code_name, int32(x))
}

func (CanonicalizeFlags_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{20, 0}
}

type BuildConfiguration_Code int32

const (
	BuildConfiguration_BUILD_CONFIGURATION_UNKNOWN              BuildConfiguration_Code = 0
	BuildConfiguration_PLATFORM_MAPPING_EVALUATION_FAILURE      BuildConfiguration_Code = 1
	BuildConfiguration_PLATFORM_MAPPINGS_FILE_IS_DIRECTORY      BuildConfiguration_Code = 2
	BuildConfiguration_PLATFORM_MAPPINGS_FILE_NOT_FOUND         BuildConfiguration_Code = 3
	BuildConfiguration_TOP_LEVEL_CONFIGURATION_CREATION_FAILURE BuildConfiguration_Code = 4
	BuildConfiguration_INVALID_CONFIGURATION                    BuildConfiguration_Code = 5
	BuildConfiguration_INVALID_BUILD_OPTIONS                    BuildConfiguration_Code = 6
	BuildConfiguration_MULTI_CPU_PREREQ_UNMET                   BuildConfiguration_Code = 7
	BuildConfiguration_HEURISTIC_INSTRUMENTATION_FILTER_INVALID BuildConfiguration_Code = 8
	BuildConfiguration_CYCLE                                    BuildConfiguration_Code = 9
	BuildConfiguration_CONFLICTING_CONFIGURATIONS               BuildConfiguration_Code = 10
	// This can come from either an invalid user-specified option or a
	// configuration transition. There's no sure-fire way to distinguish the two
	// possibilities in Bazel, so we go with the more straightforward
	// command-line error exit code 2.
	BuildConfiguration_INVALID_OUTPUT_DIRECTORY_MNEMONIC BuildConfiguration_Code = 11
)

var BuildConfiguration_Code_name = map[int32]string{
	0:  "BUILD_CONFIGURATION_UNKNOWN",
	1:  "PLATFORM_MAPPING_EVALUATION_FAILURE",
	2:  "PLATFORM_MAPPINGS_FILE_IS_DIRECTORY",
	3:  "PLATFORM_MAPPINGS_FILE_NOT_FOUND",
	4:  "TOP_LEVEL_CONFIGURATION_CREATION_FAILURE",
	5:  "INVALID_CONFIGURATION",
	6:  "INVALID_BUILD_OPTIONS",
	7:  "MULTI_CPU_PREREQ_UNMET",
	8:  "HEURISTIC_INSTRUMENTATION_FILTER_INVALID",
	9:  "CYCLE",
	10: "CONFLICTING_CONFIGURATIONS",
	11: "INVALID_OUTPUT_DIRECTORY_MNEMONIC",
}

var BuildConfiguration_Code_value = map[string]int32{
	"BUILD_CONFIGURATION_UNKNOWN":              0,
	"PLATFORM_MAPPING_EVALUATION_FAILURE":      1,
	"PLATFORM_MAPPINGS_FILE_IS_DIRECTORY":      2,
	"PLATFORM_MAPPINGS_FILE_NOT_FOUND":         3,
	"TOP_LEVEL_CONFIGURATION_CREATION_FAILURE": 4,
	"INVALID_CONFIGURATION":                    5,
	"INVALID_BUILD_OPTIONS":                    6,
	"MULTI_CPU_PREREQ_UNMET":                   7,
	"HEURISTIC_INSTRUMENTATION_FILTER_INVALID": 8,
	"CYCLE":                             9,
	"CONFLICTING_CONFIGURATIONS":        10,
	"INVALID_OUTPUT_DIRECTORY_MNEMONIC": 11,
}

func (x BuildConfiguration_Code) String() string {
	return proto.EnumName(BuildConfiguration_Code_name, int32(x))
}

func (BuildConfiguration_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{21, 0}
}

// The distinction between a failure to write a single info item and a failure
// to write them all seems sketchy. Why do they have different exit codes?
// This reflects current Bazel behavior, but deserves more thought.
type InfoCommand_Code int32

const (
	InfoCommand_INFO_COMMAND_UNKNOWN     InfoCommand_Code = 0
	InfoCommand_TOO_MANY_KEYS            InfoCommand_Code = 1
	InfoCommand_KEY_NOT_RECOGNIZED       InfoCommand_Code = 2
	InfoCommand_INFO_BLOCK_WRITE_FAILURE InfoCommand_Code = 3
	InfoCommand_ALL_INFO_WRITE_FAILURE   InfoCommand_Code = 4
)

var InfoCommand_Code_name = map[int32]string{
	0: "INFO_COMMAND_UNKNOWN",
	1: "TOO_MANY_KEYS",
	2: "KEY_NOT_RECOGNIZED",
	3: "INFO_BLOCK_WRITE_FAILURE",
	4: "ALL_INFO_WRITE_FAILURE",
}

var InfoCommand_Code_value = map[string]int32{
	"INFO_COMMAND_UNKNOWN":     0,
	"TOO_MANY_KEYS":            1,
	"KEY_NOT_RECOGNIZED":       2,
	"INFO_BLOCK_WRITE_FAILURE": 3,
	"ALL_INFO_WRITE_FAILURE":   4,
}

func (x InfoCommand_Code) String() string {
	return proto.EnumName(InfoCommand_Code_name, int32(x))
}

func (InfoCommand_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{22, 0}
}

type MemoryOptions_Code int32

const (
	MemoryOptions_MEMORY_OPTIONS_UNKNOWN                                    MemoryOptions_Code = 0
	MemoryOptions_EXPERIMENTAL_OOM_MORE_EAGERLY_THRESHOLD_INVALID_VALUE     MemoryOptions_Code = 1
	MemoryOptions_EXPERIMENTAL_OOM_MORE_EAGERLY_NO_TENURED_COLLECTORS_FOUND MemoryOptions_Code = 2
)

var MemoryOptions_Code_name = map[int32]string{
	0: "MEMORY_OPTIONS_UNKNOWN",
	1: "EXPERIMENTAL_OOM_MORE_EAGERLY_THRESHOLD_INVALID_VALUE",
	2: "EXPERIMENTAL_OOM_MORE_EAGERLY_NO_TENURED_COLLECTORS_FOUND",
}

var MemoryOptions_Code_value = map[string]int32{
	"MEMORY_OPTIONS_UNKNOWN":                                    0,
	"EXPERIMENTAL_OOM_MORE_EAGERLY_THRESHOLD_INVALID_VALUE":     1,
	"EXPERIMENTAL_OOM_MORE_EAGERLY_NO_TENURED_COLLECTORS_FOUND": 2,
}

func (x MemoryOptions_Code) String() string {
	return proto.EnumName(MemoryOptions_Code_name, int32(x))
}

func (MemoryOptions_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{23, 0}
}

type Query_Code int32

const (
	Query_QUERY_UNKNOWN                           Query_Code = 0
	Query_QUERY_FILE_WITH_COMMAND_LINE_EXPRESSION Query_Code = 1
	Query_QUERY_FILE_READ_FAILURE                 Query_Code = 2
	Query_COMMAND_LINE_EXPRESSION_MISSING         Query_Code = 3
	Query_OUTPUT_FORMAT_INVALID                   Query_Code = 4
	Query_GRAPHLESS_PREREQ_UNMET                  Query_Code = 5
	Query_QUERY_OUTPUT_WRITE_FAILURE              Query_Code = 6
	Query_QUERY_STDOUT_FLUSH_FAILURE              Query_Code = 13
	Query_ANALYSIS_QUERY_PREREQ_UNMET             Query_Code = 14
	Query_QUERY_RESULTS_FLUSH_FAILURE             Query_Code = 15
	// Deprecated - folded into SYNTAX_ERROR.
	Query_DEPRECATED_UNCLOSED_QUOTATION_EXPRESSION_ERROR            Query_Code = 16
	Query_VARIABLE_NAME_INVALID                                     Query_Code = 17
	Query_VARIABLE_UNDEFINED                                        Query_Code = 18
	Query_BUILDFILES_AND_LOADFILES_CANNOT_USE_OUTPUT_LOCATION_ERROR Query_Code = 19
	Query_BUILD_FILE_ERROR                                          Query_Code = 20
	Query_CYCLE                                                     Query_Code = 21
	Query_UNIQUE_SKYKEY_THRESHOLD_EXCEEDED                          Query_Code = 22
	Query_TARGET_NOT_IN_UNIVERSE_SCOPE                              Query_Code = 23
	Query_INVALID_FULL_UNIVERSE_EXPRESSION                          Query_Code = 24
	Query_UNIVERSE_SCOPE_LIMIT_EXCEEDED                             Query_Code = 25
	Query_INVALIDATION_LIMIT_EXCEEDED                               Query_Code = 26
	Query_OUTPUT_FORMAT_PREREQ_UNMET                                Query_Code = 27
	Query_ARGUMENTS_MISSING                                         Query_Code = 28
	Query_RBUILDFILES_FUNCTION_REQUIRES_SKYQUERY                    Query_Code = 29
	Query_FULL_TARGETS_NOT_SUPPORTED                                Query_Code = 30
	// Deprecated - folded into SYNTAX_ERROR.
	Query_DEPRECATED_UNEXPECTED_TOKEN_ERROR Query_Code = 31
	// Deprecated - folded into SYNTAX_ERROR.
	Query_DEPRECATED_INTEGER_LITERAL_MISSING Query_Code = 32
	// Deprecated - folded into SYNTAX_ERROR.
	Query_DEPRECATED_INVALID_STARTING_CHARACTER_ERROR Query_Code = 33
	// Deprecated - folded into SYNTAX_ERROR.
	Query_DEPRECATED_PREMATURE_END_OF_INPUT_ERROR Query_Code = 34
	// Indicates the user specified invalid query syntax.
	Query_SYNTAX_ERROR                     Query_Code = 35
	Query_OUTPUT_FORMATTER_IO_EXCEPTION    Query_Code = 36
	Query_SKYQUERY_TRANSITIVE_TARGET_ERROR Query_Code = 37
	Query_SKYQUERY_TARGET_EXCEPTION        Query_Code = 38
	Query_INVALID_LABEL_IN_TEST_SUITE      Query_Code = 39
	// Indicates any usage of flags that must not be combined.
	Query_ILLEGAL_FLAG_COMBINATION Query_Code = 40
	// Indicates a non-detailed exception that halted a query. This is a
	// deficiency in Blaze/Bazel and code should be changed to attach a detailed
	// exit code to this failure mode.
	Query_NON_DETAILED_ERROR Query_Code = 41
)

var Query_Code_name = map[int32]string{
	0:  "QUERY_UNKNOWN",
	1:  "QUERY_FILE_WITH_COMMAND_LINE_EXPRESSION",
	2:  "QUERY_FILE_READ_FAILURE",
	3:  "COMMAND_LINE_EXPRESSION_MISSING",
	4:  "OUTPUT_FORMAT_INVALID",
	5:  "GRAPHLESS_PREREQ_UNMET",
	6:  "QUERY_OUTPUT_WRITE_FAILURE",
	13: "QUERY_STDOUT_FLUSH_FAILURE",
	14: "ANALYSIS_QUERY_PREREQ_UNMET",
	15: "QUERY_RESULTS_FLUSH_FAILURE",
	16: "DEPRECATED_UNCLOSED_QUOTATION_EXPRESSION_ERROR",
	17: "VARIABLE_NAME_INVALID",
	18: "VARIABLE_UNDEFINED",
	19: "BUILDFILES_AND_LOADFILES_CANNOT_USE_OUTPUT_LOCATION_ERROR",
	20: "BUILD_FILE_ERROR",
	21: "CYCLE",
	22: "UNIQUE_SKYKEY_THRESHOLD_EXCEEDED",
	23: "TARGET_NOT_IN_UNIVERSE_SCOPE",
	24: "INVALID_FULL_UNIVERSE_EXPRESSION",
	25: "UNIVERSE_SCOPE_LIMIT_EXCEEDED",
	26: "INVALIDATION_LIMIT_EXCEEDED",
	27: "OUTPUT_FORMAT_PREREQ_UNMET",
	28: "ARGUMENTS_MISSING",
	29: "RBUILDFILES_FUNCTION_REQUIRES_SKYQUERY",
	30: "FULL_TARGETS_NOT_SUPPORTED",
	31: "DEPRECATED_UNEXPECTED_TOKEN_ERROR",
	32: "DEPRECATED_INTEGER_LITERAL_MISSING",
	33: "DEPRECATED_INVALID_STARTING_CHARACTER_ERROR",
	34: "DEPRECATED_PREMATURE_END_OF_INPUT_ERROR",
	35: "SYNTAX_ERROR",
	36: "OUTPUT_FORMATTER_IO_EXCEPTION",
	37: "SKYQUERY_TRANSITIVE_TARGET_ERROR",
	38: "SKYQUERY_TARGET_EXCEPTION",
	39: "INVALID_LABEL_IN_TEST_SUITE",
	40: "ILLEGAL_FLAG_COMBINATION",
	41: "NON_DETAILED_ERROR",
}

var Query_Code_value = map[string]int32{
	"QUERY_UNKNOWN": 0,
	"QUERY_FILE_WITH_COMMAND_LINE_EXPRESSION":                   1,
	"QUERY_FILE_READ_FAILURE":                                   2,
	"COMMAND_LINE_EXPRESSION_MISSING":                           3,
	"OUTPUT_FORMAT_INVALID":                                     4,
	"GRAPHLESS_PREREQ_UNMET":                                    5,
	"QUERY_OUTPUT_WRITE_FAILURE":                                6,
	"QUERY_STDOUT_FLUSH_FAILURE":                                13,
	"ANALYSIS_QUERY_PREREQ_UNMET":                               14,
	"QUERY_RESULTS_FLUSH_FAILURE":                               15,
	"DEPRECATED_UNCLOSED_QUOTATION_EXPRESSION_ERROR":            16,
	"VARIABLE_NAME_INVALID":                                     17,
	"VARIABLE_UNDEFINED":                                        18,
	"BUILDFILES_AND_LOADFILES_CANNOT_USE_OUTPUT_LOCATION_ERROR": 19,
	"BUILD_FILE_ERROR":                                          20,
	"CYCLE":                                                     21,
	"UNIQUE_SKYKEY_THRESHOLD_EXCEEDED":                          22,
	"TARGET_NOT_IN_UNIVERSE_SCOPE":                              23,
	"INVALID_FULL_UNIVERSE_EXPRESSION":                          24,
	"UNIVERSE_SCOPE_LIMIT_EXCEEDED":                             25,
	"INVALIDATION_LIMIT_EXCEEDED":                               26,
	"OUTPUT_FORMAT_PREREQ_UNMET":                                27,
	"ARGUMENTS_MISSING":                                         28,
	"RBUILDFILES_FUNCTION_REQUIRES_SKYQUERY":                    29,
	"FULL_TARGETS_NOT_SUPPORTED":                                30,
	"DEPRECATED_UNEXPECTED_TOKEN_ERROR":                         31,
	"DEPRECATED_INTEGER_LITERAL_MISSING":                        32,
	"DEPRECATED_INVALID_STARTING_CHARACTER_ERROR":               33,
	"DEPRECATED_PREMATURE_END_OF_INPUT_ERROR":                   34,
	"SYNTAX_ERROR":                                              35,
	"OUTPUT_FORMATTER_IO_EXCEPTION":                             36,
	"SKYQUERY_TRANSITIVE_TARGET_ERROR":                          37,
	"SKYQUERY_TARGET_EXCEPTION":                                 38,
	"INVALID_LABEL_IN_TEST_SUITE":                               39,
	"ILLEGAL_FLAG_COMBINATION":                                  40,
	"NON_DETAILED_ERROR":                                        41,
}

func (x Query_Code) String() string {
	return proto.EnumName(Query_Code_name, int32(x))
}

func (Query_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{24, 0}
}

type LocalExecution_Code int32

const (
	LocalExecution_LOCAL_EXECUTION_UNKNOWN      LocalExecution_Code = 0
	LocalExecution_LOCKFREE_OUTPUT_PREREQ_UNMET LocalExecution_Code = 1
)

var LocalExecution_Code_name = map[int32]string{
	0: "LOCAL_EXECUTION_UNKNOWN",
	1: "LOCKFREE_OUTPUT_PREREQ_UNMET",
}

var LocalExecution_Code_value = map[string]int32{
	"LOCAL_EXECUTION_UNKNOWN":      0,
	"LOCKFREE_OUTPUT_PREREQ_UNMET": 1,
}

func (x LocalExecution_Code) String() string {
	return proto.EnumName(LocalExecution_Code_name, int32(x))
}

func (LocalExecution_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{25, 0}
}

type ActionCache_Code int32

const (
	ActionCache_ACTION_CACHE_UNKNOWN   ActionCache_Code = 0
	ActionCache_INITIALIZATION_FAILURE ActionCache_Code = 1
)

var ActionCache_Code_name = map[int32]string{
	0: "ACTION_CACHE_UNKNOWN",
	1: "INITIALIZATION_FAILURE",
}

var ActionCache_Code_value = map[string]int32{
	"ACTION_CACHE_UNKNOWN":   0,
	"INITIALIZATION_FAILURE": 1,
}

func (x ActionCache_Code) String() string {
	return proto.EnumName(ActionCache_Code_name, int32(x))
}

func (ActionCache_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{26, 0}
}

type FetchCommand_Code int32

const (
	FetchCommand_FETCH_COMMAND_UNKNOWN  FetchCommand_Code = 0
	FetchCommand_EXPRESSION_MISSING     FetchCommand_Code = 1
	FetchCommand_OPTIONS_INVALID        FetchCommand_Code = 2
	FetchCommand_QUERY_PARSE_ERROR      FetchCommand_Code = 3
	FetchCommand_QUERY_EVALUATION_ERROR FetchCommand_Code = 4
)

var FetchCommand_Code_name = map[int32]string{
	0: "FETCH_COMMAND_UNKNOWN",
	1: "EXPRESSION_MISSING",
	2: "OPTIONS_INVALID",
	3: "QUERY_PARSE_ERROR",
	4: "QUERY_EVALUATION_ERROR",
}

var FetchCommand_Code_value = map[string]int32{
	"FETCH_COMMAND_UNKNOWN":  0,
	"EXPRESSION_MISSING":     1,
	"OPTIONS_INVALID":        2,
	"QUERY_PARSE_ERROR":      3,
	"QUERY_EVALUATION_ERROR": 4,
}

func (x FetchCommand_Code) String() string {
	return proto.EnumName(FetchCommand_Code_name, int32(x))
}

func (FetchCommand_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{27, 0}
}

type SyncCommand_Code int32

const (
	SyncCommand_SYNC_COMMAND_UNKNOWN       SyncCommand_Code = 0
	SyncCommand_PACKAGE_LOOKUP_ERROR       SyncCommand_Code = 1
	SyncCommand_WORKSPACE_EVALUATION_ERROR SyncCommand_Code = 2
	SyncCommand_REPOSITORY_FETCH_ERRORS    SyncCommand_Code = 3
	SyncCommand_REPOSITORY_NAME_INVALID    SyncCommand_Code = 4
)

var SyncCommand_Code_name = map[int32]string{
	0: "SYNC_COMMAND_UNKNOWN",
	1: "PACKAGE_LOOKUP_ERROR",
	2: "WORKSPACE_EVALUATION_ERROR",
	3: "REPOSITORY_FETCH_ERRORS",
	4: "REPOSITORY_NAME_INVALID",
}

var SyncCommand_Code_value = map[string]int32{
	"SYNC_COMMAND_UNKNOWN":       0,
	"PACKAGE_LOOKUP_ERROR":       1,
	"WORKSPACE_EVALUATION_ERROR": 2,
	"REPOSITORY_FETCH_ERRORS":    3,
	"REPOSITORY_NAME_INVALID":    4,
}

func (x SyncCommand_Code) String() string {
	return proto.EnumName(SyncCommand_Code_name, int32(x))
}

func (SyncCommand_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{28, 0}
}

type Sandbox_Code int32

const (
	Sandbox_SANDBOX_FAILURE_UNKNOWN           Sandbox_Code = 0
	Sandbox_INITIALIZATION_FAILURE            Sandbox_Code = 1
	Sandbox_EXECUTION_IO_EXCEPTION            Sandbox_Code = 2
	Sandbox_DOCKER_COMMAND_FAILURE            Sandbox_Code = 3
	Sandbox_NO_DOCKER_IMAGE                   Sandbox_Code = 4
	Sandbox_DOCKER_IMAGE_PREPARATION_FAILURE  Sandbox_Code = 5
	Sandbox_BIND_MOUNT_ANALYSIS_FAILURE       Sandbox_Code = 6
	Sandbox_MOUNT_SOURCE_DOES_NOT_EXIST       Sandbox_Code = 7
	Sandbox_MOUNT_SOURCE_TARGET_TYPE_MISMATCH Sandbox_Code = 8
	Sandbox_MOUNT_TARGET_DOES_NOT_EXIST       Sandbox_Code = 9
	Sandbox_SUBPROCESS_START_FAILED           Sandbox_Code = 10
	Sandbox_FORBIDDEN_INPUT                   Sandbox_Code = 11
)

var Sandbox_Code_name = map[int32]string{
	0:  "SANDBOX_FAILURE_UNKNOWN",
	1:  "INITIALIZATION_FAILURE",
	2:  "EXECUTION_IO_EXCEPTION",
	3:  "DOCKER_COMMAND_FAILURE",
	4:  "NO_DOCKER_IMAGE",
	5:  "DOCKER_IMAGE_PREPARATION_FAILURE",
	6:  "BIND_MOUNT_ANALYSIS_FAILURE",
	7:  "MOUNT_SOURCE_DOES_NOT_EXIST",
	8:  "MOUNT_SOURCE_TARGET_TYPE_MISMATCH",
	9:  "MOUNT_TARGET_DOES_NOT_EXIST",
	10: "SUBPROCESS_START_FAILED",
	11: "FORBIDDEN_INPUT",
}

var Sandbox_Code_value = map[string]int32{
	"SANDBOX_FAILURE_UNKNOWN":           0,
	"INITIALIZATION_FAILURE":            1,
	"EXECUTION_IO_EXCEPTION":            2,
	"DOCKER_COMMAND_FAILURE":            3,
	"NO_DOCKER_IMAGE":                   4,
	"DOCKER_IMAGE_PREPARATION_FAILURE":  5,
	"BIND_MOUNT_ANALYSIS_FAILURE":       6,
	"MOUNT_SOURCE_DOES_NOT_EXIST":       7,
	"MOUNT_SOURCE_TARGET_TYPE_MISMATCH": 8,
	"MOUNT_TARGET_DOES_NOT_EXIST":       9,
	"SUBPROCESS_START_FAILED":           10,
	"FORBIDDEN_INPUT":                   11,
}

func (x Sandbox_Code) String() string {
	return proto.EnumName(Sandbox_Code_name, int32(x))
}

func (Sandbox_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{29, 0}
}

type IncludeScanning_Code int32

const (
	IncludeScanning_INCLUDE_SCANNING_UNKNOWN          IncludeScanning_Code = 0
	IncludeScanning_INITIALIZE_INCLUDE_HINTS_ERROR    IncludeScanning_Code = 1
	IncludeScanning_SCANNING_IO_EXCEPTION             IncludeScanning_Code = 2
	IncludeScanning_INCLUDE_HINTS_FILE_NOT_IN_PACKAGE IncludeScanning_Code = 3
	IncludeScanning_INCLUDE_HINTS_READ_FAILURE        IncludeScanning_Code = 4
	IncludeScanning_ILLEGAL_ABSOLUTE_PATH             IncludeScanning_Code = 5
	// TODO(b/166268889): this code should be deprecated in favor of more finely
	//  resolved loading-phase codes.
	IncludeScanning_PACKAGE_LOAD_FAILURE                  IncludeScanning_Code = 6
	IncludeScanning_USER_PACKAGE_LOAD_FAILURE             IncludeScanning_Code = 7
	IncludeScanning_SYSTEM_PACKAGE_LOAD_FAILURE           IncludeScanning_Code = 8
	IncludeScanning_UNDIFFERENTIATED_PACKAGE_LOAD_FAILURE IncludeScanning_Code = 9
)

var IncludeScanning_Code_name = map[int32]string{
	0: "INCLUDE_SCANNING_UNKNOWN",
	1: "INITIALIZE_INCLUDE_HINTS_ERROR",
	2: "SCANNING_IO_EXCEPTION",
	3: "INCLUDE_HINTS_FILE_NOT_IN_PACKAGE",
	4: "INCLUDE_HINTS_READ_FAILURE",
	5: "ILLEGAL_ABSOLUTE_PATH",
	6: "PACKAGE_LOAD_FAILURE",
	7: "USER_PACKAGE_LOAD_FAILURE",
	8: "SYSTEM_PACKAGE_LOAD_FAILURE",
	9: "UNDIFFERENTIATED_PACKAGE_LOAD_FAILURE",
}

var IncludeScanning_Code_value = map[string]int32{
	"INCLUDE_SCANNING_UNKNOWN":              0,
	"INITIALIZE_INCLUDE_HINTS_ERROR":        1,
	"SCANNING_IO_EXCEPTION":                 2,
	"INCLUDE_HINTS_FILE_NOT_IN_PACKAGE":     3,
	"INCLUDE_HINTS_READ_FAILURE":            4,
	"ILLEGAL_ABSOLUTE_PATH":                 5,
	"PACKAGE_LOAD_FAILURE":                  6,
	"USER_PACKAGE_LOAD_FAILURE":             7,
	"SYSTEM_PACKAGE_LOAD_FAILURE":           8,
	"UNDIFFERENTIATED_PACKAGE_LOAD_FAILURE": 9,
}

func (x IncludeScanning_Code) String() string {
	return proto.EnumName(IncludeScanning_Code_name, int32(x))
}

func (IncludeScanning_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{30, 0}
}

type TestCommand_Code int32

const (
	TestCommand_TEST_COMMAND_UNKNOWN TestCommand_Code = 0
	TestCommand_NO_TEST_TARGETS      TestCommand_Code = 1
	TestCommand_TEST_WITH_NOANALYZE  TestCommand_Code = 2
	TestCommand_TESTS_FAILED         TestCommand_Code = 3
)

var TestCommand_Code_name = map[int32]string{
	0: "TEST_COMMAND_UNKNOWN",
	1: "NO_TEST_TARGETS",
	2: "TEST_WITH_NOANALYZE",
	3: "TESTS_FAILED",
}

var TestCommand_Code_value = map[string]int32{
	"TEST_COMMAND_UNKNOWN": 0,
	"NO_TEST_TARGETS":      1,
	"TEST_WITH_NOANALYZE":  2,
	"TESTS_FAILED":         3,
}

func (x TestCommand_Code) String() string {
	return proto.EnumName(TestCommand_Code_name, int32(x))
}

func (TestCommand_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{31, 0}
}

// All numerical exit code associations correspond to pre-existing Bazel
// behavior. These associations are suspicious:
//   - COMMAND_LINE_EXPANSION_FAILURE: this is associated with 2, the numerical
//     exit code for "bad Bazel command line", but is generated when an
//     action's command line fails to expand, which sounds similar but is
//     completely different.
//   - OUTPUT_FAILURE: this is associated with 6, an undocumented exit code.
//   - INVALID_AQUERY_EXPRESSION: this is associate with 1, which is not
//     documented for (a)query.
//
// TODO(b/138456686): Revise these after the (intentionally non-breaking)
//
//	initial rollout of FailureDetail-based encoding.
type ActionQuery_Code int32

const (
	ActionQuery_ACTION_QUERY_UNKNOWN                                ActionQuery_Code = 0
	ActionQuery_COMMAND_LINE_EXPANSION_FAILURE                      ActionQuery_Code = 1
	ActionQuery_OUTPUT_FAILURE                                      ActionQuery_Code = 2
	ActionQuery_COMMAND_LINE_EXPRESSION_MISSING                     ActionQuery_Code = 3
	ActionQuery_EXPRESSION_PARSE_FAILURE                            ActionQuery_Code = 4
	ActionQuery_SKYFRAME_STATE_WITH_COMMAND_LINE_EXPRESSION         ActionQuery_Code = 5
	ActionQuery_INVALID_AQUERY_EXPRESSION                           ActionQuery_Code = 6
	ActionQuery_SKYFRAME_STATE_PREREQ_UNMET                         ActionQuery_Code = 7
	ActionQuery_AQUERY_OUTPUT_TOO_BIG                               ActionQuery_Code = 8
	ActionQuery_ILLEGAL_PATTERN_SYNTAX                              ActionQuery_Code = 9
	ActionQuery_INCORRECT_ARGUMENTS                                 ActionQuery_Code = 10
	ActionQuery_TOP_LEVEL_TARGETS_WITH_SKYFRAME_STATE_NOT_SUPPORTED ActionQuery_Code = 11
	ActionQuery_SKYFRAME_STATE_AFTER_EXECUTION                      ActionQuery_Code = 12
	ActionQuery_LABELS_FUNCTION_NOT_SUPPORTED                       ActionQuery_Code = 13
	ActionQuery_TEMPLATE_EXPANSION_FAILURE                          ActionQuery_Code = 14
)

var ActionQuery_Code_name = map[int32]string{
	0:  "ACTION_QUERY_UNKNOWN",
	1:  "COMMAND_LINE_EXPANSION_FAILURE",
	2:  "OUTPUT_FAILURE",
	3:  "COMMAND_LINE_EXPRESSION_MISSING",
	4:  "EXPRESSION_PARSE_FAILURE",
	5:  "SKYFRAME_STATE_WITH_COMMAND_LINE_EXPRESSION",
	6:  "INVALID_AQUERY_EXPRESSION",
	7:  "SKYFRAME_STATE_PREREQ_UNMET",
	8:  "AQUERY_OUTPUT_TOO_BIG",
	9:  "ILLEGAL_PATTERN_SYNTAX",
	10: "INCORRECT_ARGUMENTS",
	11: "TOP_LEVEL_TARGETS_WITH_SKYFRAME_STATE_NOT_SUPPORTED",
	12: "SKYFRAME_STATE_AFTER_EXECUTION",
	13: "LABELS_FUNCTION_NOT_SUPPORTED",
	14: "TEMPLATE_EXPANSION_FAILURE",
}

var ActionQuery_Code_value = map[string]int32{
	"ACTION_QUERY_UNKNOWN":                                0,
	"COMMAND_LINE_EXPANSION_FAILURE":                      1,
	"OUTPUT_FAILURE":                                      2,
	"COMMAND_LINE_EXPRESSION_MISSING":                     3,
	"EXPRESSION_PARSE_FAILURE":                            4,
	"SKYFRAME_STATE_WITH_COMMAND_LINE_EXPRESSION":         5,
	"INVALID_AQUERY_EXPRESSION":                           6,
	"SKYFRAME_STATE_PREREQ_UNMET":                         7,
	"AQUERY_OUTPUT_TOO_BIG":                               8,
	"ILLEGAL_PATTERN_SYNTAX":                              9,
	"INCORRECT_ARGUMENTS":                                 10,
	"TOP_LEVEL_TARGETS_WITH_SKYFRAME_STATE_NOT_SUPPORTED": 11,
	"SKYFRAME_STATE_AFTER_EXECUTION":                      12,
	"LABELS_FUNCTION_NOT_SUPPORTED":                       13,
	"TEMPLATE_EXPANSION_FAILURE":                          14,
}

func (x ActionQuery_Code) String() string {
	return proto.EnumName(ActionQuery_Code_name, int32(x))
}

func (ActionQuery_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{32, 0}
}

type TargetPatterns_Code int32

const (
	TargetPatterns_TARGET_PATTERNS_UNKNOWN                       TargetPatterns_Code = 0
	TargetPatterns_TARGET_PATTERN_FILE_WITH_COMMAND_LINE_PATTERN TargetPatterns_Code = 1
	TargetPatterns_TARGET_PATTERN_FILE_READ_FAILURE              TargetPatterns_Code = 2
	TargetPatterns_TARGET_PATTERN_PARSE_FAILURE                  TargetPatterns_Code = 3
	TargetPatterns_PACKAGE_NOT_FOUND                             TargetPatterns_Code = 4
	TargetPatterns_TARGET_FORMAT_INVALID                         TargetPatterns_Code = 5
	TargetPatterns_ABSOLUTE_TARGET_PATTERN_INVALID               TargetPatterns_Code = 6
	TargetPatterns_CANNOT_DETERMINE_TARGET_FROM_FILENAME         TargetPatterns_Code = 7
	TargetPatterns_LABEL_SYNTAX_ERROR                            TargetPatterns_Code = 8
	TargetPatterns_TARGET_CANNOT_BE_EMPTY_STRING                 TargetPatterns_Code = 9
	TargetPatterns_PACKAGE_PART_CANNOT_END_IN_SLASH              TargetPatterns_Code = 10
	TargetPatterns_CYCLE                                         TargetPatterns_Code = 11
	TargetPatterns_CANNOT_PRELOAD_TARGET                         TargetPatterns_Code = 12
	TargetPatterns_TARGETS_MISSING                               TargetPatterns_Code = 13
	TargetPatterns_RECURSIVE_TARGET_PATTERNS_NOT_ALLOWED         TargetPatterns_Code = 14
	TargetPatterns_UP_LEVEL_REFERENCES_NOT_ALLOWED               TargetPatterns_Code = 15
	TargetPatterns_NEGATIVE_TARGET_PATTERN_NOT_ALLOWED           TargetPatterns_Code = 16
	TargetPatterns_TARGET_MUST_BE_A_FILE                         TargetPatterns_Code = 17
	TargetPatterns_DEPENDENCY_NOT_FOUND                          TargetPatterns_Code = 18
	TargetPatterns_PACKAGE_NAME_INVALID                          TargetPatterns_Code = 19
)

var TargetPatterns_Code_name = map[int32]string{
	0:  "TARGET_PATTERNS_UNKNOWN",
	1:  "TARGET_PATTERN_FILE_WITH_COMMAND_LINE_PATTERN",
	2:  "TARGET_PATTERN_FILE_READ_FAILURE",
	3:  "TARGET_PATTERN_PARSE_FAILURE",
	4:  "PACKAGE_NOT_FOUND",
	5:  "TARGET_FORMAT_INVALID",
	6:  "ABSOLUTE_TARGET_PATTERN_INVALID",
	7:  "CANNOT_DETERMINE_TARGET_FROM_FILENAME",
	8:  "LABEL_SYNTAX_ERROR",
	9:  "TARGET_CANNOT_BE_EMPTY_STRING",
	10: "PACKAGE_PART_CANNOT_END_IN_SLASH",
	11: "CYCLE",
	12: "CANNOT_PRELOAD_TARGET",
	13: "TARGETS_MISSING",
	14: "RECURSIVE_TARGET_PATTERNS_NOT_ALLOWED",
	15: "UP_LEVEL_REFERENCES_NOT_ALLOWED",
	16: "NEGATIVE_TARGET_PATTERN_NOT_ALLOWED",
	17: "TARGET_MUST_BE_A_FILE",
	18: "DEPENDENCY_NOT_FOUND",
	19: "PACKAGE_NAME_INVALID",
}

var TargetPatterns_Code_value = map[string]int32{
	"TARGET_PATTERNS_UNKNOWN":                       0,
	"TARGET_PATTERN_FILE_WITH_COMMAND_LINE_PATTERN": 1,
	"TARGET_PATTERN_FILE_READ_FAILURE":              2,
	"TARGET_PATTERN_PARSE_FAILURE":                  3,
	"PACKAGE_NOT_FOUND":                             4,
	"TARGET_FORMAT_INVALID":                         5,
	"ABSOLUTE_TARGET_PATTERN_INVALID":               6,
	"CANNOT_DETERMINE_TARGET_FROM_FILENAME":         7,
	"LABEL_SYNTAX_ERROR":                            8,
	"TARGET_CANNOT_BE_EMPTY_STRING":                 9,
	"PACKAGE_PART_CANNOT_END_IN_SLASH":              10,
	"CYCLE":                                         11,
	"CANNOT_PRELOAD_TARGET":                         12,
	"TARGETS_MISSING":                               13,
	"RECURSIVE_TARGET_PATTERNS_NOT_ALLOWED":         14,
	"UP_LEVEL_REFERENCES_NOT_ALLOWED":               15,
	"NEGATIVE_TARGET_PATTERN_NOT_ALLOWED":           16,
	"TARGET_MUST_BE_A_FILE":                         17,
	"DEPENDENCY_NOT_FOUND":                          18,
	"PACKAGE_NAME_INVALID":                          19,
}

func (x TargetPatterns_Code) String() string {
	return proto.EnumName(TargetPatterns_Code_name, int32(x))
}

func (TargetPatterns_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{33, 0}
}

type CleanCommand_Code int32

const (
	CleanCommand_CLEAN_COMMAND_UNKNOWN            CleanCommand_Code = 0
	CleanCommand_OUTPUT_SERVICE_CLEAN_FAILURE     CleanCommand_Code = 1
	CleanCommand_ACTION_CACHE_CLEAN_FAILURE       CleanCommand_Code = 2
	CleanCommand_OUT_ERR_CLOSE_FAILURE            CleanCommand_Code = 3
	CleanCommand_OUTPUT_BASE_DELETE_FAILURE       CleanCommand_Code = 4
	CleanCommand_OUTPUT_BASE_TEMP_MOVE_FAILURE    CleanCommand_Code = 5
	CleanCommand_ASYNC_OUTPUT_BASE_DELETE_FAILURE CleanCommand_Code = 6
	CleanCommand_EXECROOT_DELETE_FAILURE          CleanCommand_Code = 7
	CleanCommand_EXECROOT_TEMP_MOVE_FAILURE       CleanCommand_Code = 8
	CleanCommand_ASYNC_EXECROOT_DELETE_FAILURE    CleanCommand_Code = 9
	CleanCommand_ARGUMENTS_NOT_RECOGNIZED         CleanCommand_Code = 10
)

var CleanCommand_Code_name = map[int32]string{
	0:  "CLEAN_COMMAND_UNKNOWN",
	1:  "OUTPUT_SERVICE_CLEAN_FAILURE",
	2:  "ACTION_CACHE_CLEAN_FAILURE",
	3:  "OUT_ERR_CLOSE_FAILURE",
	4:  "OUTPUT_BASE_DELETE_FAILURE",
	5:  "OUTPUT_BASE_TEMP_MOVE_FAILURE",
	6:  "ASYNC_OUTPUT_BASE_DELETE_FAILURE",
	7:  "EXECROOT_DELETE_FAILURE",
	8:  "EXECROOT_TEMP_MOVE_FAILURE",
	9:  "ASYNC_EXECROOT_DELETE_FAILURE",
	10: "ARGUMENTS_NOT_RECOGNIZED",
}

var CleanCommand_Code_value = map[string]int32{
	"CLEAN_COMMAND_UNKNOWN":            0,
	"OUTPUT_SERVICE_CLEAN_FAILURE":     1,
	"ACTION_CACHE_CLEAN_FAILURE":       2,
	"OUT_ERR_CLOSE_FAILURE":            3,
	"OUTPUT_BASE_DELETE_FAILURE":       4,
	"OUTPUT_BASE_TEMP_MOVE_FAILURE":    5,
	"ASYNC_OUTPUT_BASE_DELETE_FAILURE": 6,
	"EXECROOT_DELETE_FAILURE":          7,
	"EXECROOT_TEMP_MOVE_FAILURE":       8,
	"ASYNC_EXECROOT_DELETE_FAILURE":    9,
	"ARGUMENTS_NOT_RECOGNIZED":         10,
}

func (x CleanCommand_Code) String() string {
	return proto.EnumName(CleanCommand_Code_name, int32(x))
}

func (CleanCommand_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{34, 0}
}

type ConfigCommand_Code int32

const (
	ConfigCommand_CONFIG_COMMAND_UNKNOWN  ConfigCommand_Code = 0
	ConfigCommand_TOO_MANY_CONFIG_IDS     ConfigCommand_Code = 1
	ConfigCommand_CONFIGURATION_NOT_FOUND ConfigCommand_Code = 2
)

var ConfigCommand_Code_name = map[int32]string{
	0: "CONFIG_COMMAND_UNKNOWN",
	1: "TOO_MANY_CONFIG_IDS",
	2: "CONFIGURATION_NOT_FOUND",
}

var ConfigCommand_Code_value = map[string]int32{
	"CONFIG_COMMAND_UNKNOWN":  0,
	"TOO_MANY_CONFIG_IDS":     1,
	"CONFIGURATION_NOT_FOUND": 2,
}

func (x ConfigCommand_Code) String() string {
	return proto.EnumName(ConfigCommand_Code_name, int32(x))
}

func (ConfigCommand_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{35, 0}
}

type ConfigurableQuery_Code int32

const (
	ConfigurableQuery_CONFIGURABLE_QUERY_UNKNOWN        ConfigurableQuery_Code = 0
	ConfigurableQuery_COMMAND_LINE_EXPRESSION_MISSING   ConfigurableQuery_Code = 1
	ConfigurableQuery_EXPRESSION_PARSE_FAILURE          ConfigurableQuery_Code = 2
	ConfigurableQuery_FILTERS_NOT_SUPPORTED             ConfigurableQuery_Code = 3
	ConfigurableQuery_BUILDFILES_FUNCTION_NOT_SUPPORTED ConfigurableQuery_Code = 4
	ConfigurableQuery_SIBLINGS_FUNCTION_NOT_SUPPORTED   ConfigurableQuery_Code = 5
	ConfigurableQuery_VISIBLE_FUNCTION_NOT_SUPPORTED    ConfigurableQuery_Code = 6
	ConfigurableQuery_ATTRIBUTE_MISSING                 ConfigurableQuery_Code = 7
	ConfigurableQuery_INCORRECT_CONFIG_ARGUMENT_ERROR   ConfigurableQuery_Code = 8
	ConfigurableQuery_TARGET_MISSING                    ConfigurableQuery_Code = 9
	ConfigurableQuery_STARLARK_SYNTAX_ERROR             ConfigurableQuery_Code = 10
	ConfigurableQuery_STARLARK_EVAL_ERROR               ConfigurableQuery_Code = 11
	// Indicates failure to correctly define a format function
	ConfigurableQuery_FORMAT_FUNCTION_ERROR ConfigurableQuery_Code = 12
)

var ConfigurableQuery_Code_name = map[int32]string{
	0:  "CONFIGURABLE_QUERY_UNKNOWN",
	1:  "COMMAND_LINE_EXPRESSION_MISSING",
	2:  "EXPRESSION_PARSE_FAILURE",
	3:  "FILTERS_NOT_SUPPORTED",
	4:  "BUILDFILES_FUNCTION_NOT_SUPPORTED",
	5:  "SIBLINGS_FUNCTION_NOT_SUPPORTED",
	6:  "VISIBLE_FUNCTION_NOT_SUPPORTED",
	7:  "ATTRIBUTE_MISSING",
	8:  "INCORRECT_CONFIG_ARGUMENT_ERROR",
	9:  "TARGET_MISSING",
	10: "STARLARK_SYNTAX_ERROR",
	11: "STARLARK_EVAL_ERROR",
	12: "FORMAT_FUNCTION_ERROR",
}

var ConfigurableQuery_Code_value = map[string]int32{
	"CONFIGURABLE_QUERY_UNKNOWN":        0,
	"COMMAND_LINE_EXPRESSION_MISSING":   1,
	"EXPRESSION_PARSE_FAILURE":          2,
	"FILTERS_NOT_SUPPORTED":             3,
	"BUILDFILES_FUNCTION_NOT_SUPPORTED": 4,
	"SIBLINGS_FUNCTION_NOT_SUPPORTED":   5,
	"VISIBLE_FUNCTION_NOT_SUPPORTED":    6,
	"ATTRIBUTE_MISSING":                 7,
	"INCORRECT_CONFIG_ARGUMENT_ERROR":   8,
	"TARGET_MISSING":                    9,
	"STARLARK_SYNTAX_ERROR":             10,
	"STARLARK_EVAL_ERROR":               11,
	"FORMAT_FUNCTION_ERROR":             12,
}

func (x ConfigurableQuery_Code) String() string {
	return proto.EnumName(ConfigurableQuery_Code_name, int32(x))
}

func (ConfigurableQuery_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{36, 0}
}

type DumpCommand_Code int32

const (
	DumpCommand_DUMP_COMMAND_UNKNOWN           DumpCommand_Code = 0
	DumpCommand_NO_OUTPUT_SPECIFIED            DumpCommand_Code = 1
	DumpCommand_ACTION_CACHE_DUMP_FAILED       DumpCommand_Code = 2
	DumpCommand_COMMAND_LINE_EXPANSION_FAILURE DumpCommand_Code = 3
	DumpCommand_ACTION_GRAPH_DUMP_FAILED       DumpCommand_Code = 4
	DumpCommand_STARLARK_HEAP_DUMP_FAILED      DumpCommand_Code = 5
)

var DumpCommand_Code_name = map[int32]string{
	0: "DUMP_COMMAND_UNKNOWN",
	1: "NO_OUTPUT_SPECIFIED",
	2: "ACTION_CACHE_DUMP_FAILED",
	3: "COMMAND_LINE_EXPANSION_FAILURE",
	4: "ACTION_GRAPH_DUMP_FAILED",
	5: "STARLARK_HEAP_DUMP_FAILED",
}

var DumpCommand_Code_value = map[string]int32{
	"DUMP_COMMAND_UNKNOWN":           0,
	"NO_OUTPUT_SPECIFIED":            1,
	"ACTION_CACHE_DUMP_FAILED":       2,
	"COMMAND_LINE_EXPANSION_FAILURE": 3,
	"ACTION_GRAPH_DUMP_FAILED":       4,
	"STARLARK_HEAP_DUMP_FAILED":      5,
}

func (x DumpCommand_Code) String() string {
	return proto.EnumName(DumpCommand_Code_name, int32(x))
}

func (DumpCommand_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{37, 0}
}

type HelpCommand_Code int32

const (
	HelpCommand_HELP_COMMAND_UNKNOWN HelpCommand_Code = 0
	HelpCommand_MISSING_ARGUMENT     HelpCommand_Code = 1
	HelpCommand_COMMAND_NOT_FOUND    HelpCommand_Code = 2
)

var HelpCommand_Code_name = map[int32]string{
	0: "HELP_COMMAND_UNKNOWN",
	1: "MISSING_ARGUMENT",
	2: "COMMAND_NOT_FOUND",
}

var HelpCommand_Code_value = map[string]int32{
	"HELP_COMMAND_UNKNOWN": 0,
	"MISSING_ARGUMENT":     1,
	"COMMAND_NOT_FOUND":    2,
}

func (x HelpCommand_Code) String() string {
	return proto.EnumName(HelpCommand_Code_name, int32(x))
}

func (HelpCommand_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{38, 0}
}

type MobileInstall_Code int32

const (
	MobileInstall_MOBILE_INSTALL_UNKNOWN     MobileInstall_Code = 0
	MobileInstall_CLASSIC_UNSUPPORTED        MobileInstall_Code = 1
	MobileInstall_NO_TARGET_SPECIFIED        MobileInstall_Code = 2
	MobileInstall_MULTIPLE_TARGETS_SPECIFIED MobileInstall_Code = 3
	MobileInstall_TARGET_TYPE_INVALID        MobileInstall_Code = 4
	MobileInstall_NON_ZERO_EXIT              MobileInstall_Code = 5
	MobileInstall_ERROR_RUNNING_PROGRAM      MobileInstall_Code = 6
)

var MobileInstall_Code_name = map[int32]string{
	0: "MOBILE_INSTALL_UNKNOWN",
	1: "CLASSIC_UNSUPPORTED",
	2: "NO_TARGET_SPECIFIED",
	3: "MULTIPLE_TARGETS_SPECIFIED",
	4: "TARGET_TYPE_INVALID",
	5: "NON_ZERO_EXIT",
	6: "ERROR_RUNNING_PROGRAM",
}

var MobileInstall_Code_value = map[string]int32{
	"MOBILE_INSTALL_UNKNOWN":     0,
	"CLASSIC_UNSUPPORTED":        1,
	"NO_TARGET_SPECIFIED":        2,
	"MULTIPLE_TARGETS_SPECIFIED": 3,
	"TARGET_TYPE_INVALID":        4,
	"NON_ZERO_EXIT":              5,
	"ERROR_RUNNING_PROGRAM":      6,
}

func (x MobileInstall_Code) String() string {
	return proto.EnumName(MobileInstall_Code_name, int32(x))
}

func (MobileInstall_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{39, 0}
}

type ProfileCommand_Code int32

const (
	ProfileCommand_PROFILE_COMMAND_UNKNOWN       ProfileCommand_Code = 0
	ProfileCommand_OLD_BINARY_FORMAT_UNSUPPORTED ProfileCommand_Code = 1
	ProfileCommand_FILE_READ_FAILURE             ProfileCommand_Code = 2
)

var ProfileCommand_Code_name = map[int32]string{
	0: "PROFILE_COMMAND_UNKNOWN",
	1: "OLD_BINARY_FORMAT_UNSUPPORTED",
	2: "FILE_READ_FAILURE",
}

var ProfileCommand_Code_value = map[string]int32{
	"PROFILE_COMMAND_UNKNOWN":       0,
	"OLD_BINARY_FORMAT_UNSUPPORTED": 1,
	"FILE_READ_FAILURE":             2,
}

func (x ProfileCommand_Code) String() string {
	return proto.EnumName(ProfileCommand_Code_name, int32(x))
}

func (ProfileCommand_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{40, 0}
}

type RunCommand_Code int32

const (
	RunCommand_RUN_COMMAND_UNKNOWN                     RunCommand_Code = 0
	RunCommand_NO_TARGET_SPECIFIED                     RunCommand_Code = 1
	RunCommand_TOO_MANY_TARGETS_SPECIFIED              RunCommand_Code = 2
	RunCommand_TARGET_NOT_EXECUTABLE                   RunCommand_Code = 3
	RunCommand_TARGET_BUILT_BUT_PATH_NOT_EXECUTABLE    RunCommand_Code = 4
	RunCommand_TARGET_BUILT_BUT_PATH_VALIDATION_FAILED RunCommand_Code = 5
	RunCommand_RUN_UNDER_TARGET_NOT_BUILT              RunCommand_Code = 6
	RunCommand_RUN_PREREQ_UNMET                        RunCommand_Code = 7
	RunCommand_TOO_MANY_TEST_SHARDS_OR_RUNS            RunCommand_Code = 8
	RunCommand_TEST_ENVIRONMENT_SETUP_FAILURE          RunCommand_Code = 9
	RunCommand_COMMAND_LINE_EXPANSION_FAILURE          RunCommand_Code = 10
	RunCommand_NO_SHELL_SPECIFIED                      RunCommand_Code = 11
	RunCommand_SCRIPT_WRITE_FAILURE                    RunCommand_Code = 12
	RunCommand_RUNFILES_DIRECTORIES_CREATION_FAILURE   RunCommand_Code = 13
	RunCommand_RUNFILES_SYMLINKS_CREATION_FAILURE      RunCommand_Code = 14
	RunCommand_TEST_ENVIRONMENT_SETUP_INTERRUPTED      RunCommand_Code = 15
)

var RunCommand_Code_name = map[int32]string{
	0:  "RUN_COMMAND_UNKNOWN",
	1:  "NO_TARGET_SPECIFIED",
	2:  "TOO_MANY_TARGETS_SPECIFIED",
	3:  "TARGET_NOT_EXECUTABLE",
	4:  "TARGET_BUILT_BUT_PATH_NOT_EXECUTABLE",
	5:  "TARGET_BUILT_BUT_PATH_VALIDATION_FAILED",
	6:  "RUN_UNDER_TARGET_NOT_BUILT",
	7:  "RUN_PREREQ_UNMET",
	8:  "TOO_MANY_TEST_SHARDS_OR_RUNS",
	9:  "TEST_ENVIRONMENT_SETUP_FAILURE",
	10: "COMMAND_LINE_EXPANSION_FAILURE",
	11: "NO_SHELL_SPECIFIED",
	12: "SCRIPT_WRITE_FAILURE",
	13: "RUNFILES_DIRECTORIES_CREATION_FAILURE",
	14: "RUNFILES_SYMLINKS_CREATION_FAILURE",
	15: "TEST_ENVIRONMENT_SETUP_INTERRUPTED",
}

var RunCommand_Code_value = map[string]int32{
	"RUN_COMMAND_UNKNOWN":                     0,
	"NO_TARGET_SPECIFIED":                     1,
	"TOO_MANY_TARGETS_SPECIFIED":              2,
	"TARGET_NOT_EXECUTABLE":                   3,
	"TARGET_BUILT_BUT_PATH_NOT_EXECUTABLE":    4,
	"TARGET_BUILT_BUT_PATH_VALIDATION_FAILED": 5,
	"RUN_UNDER_TARGET_NOT_BUILT":              6,
	"RUN_PREREQ_UNMET":                        7,
	"TOO_MANY_TEST_SHARDS_OR_RUNS":            8,
	"TEST_ENVIRONMENT_SETUP_FAILURE":          9,
	"COMMAND_LINE_EXPANSION_FAILURE":          10,
	"NO_SHELL_SPECIFIED":                      11,
	"SCRIPT_WRITE_FAILURE":                    12,
	"RUNFILES_DIRECTORIES_CREATION_FAILURE":   13,
	"RUNFILES_SYMLINKS_CREATION_FAILURE":      14,
	"TEST_ENVIRONMENT_SETUP_INTERRUPTED":      15,
}

func (x RunCommand_Code) String() string {
	return proto.EnumName(RunCommand_Code_name, int32(x))
}

func (RunCommand_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{41, 0}
}

type VersionCommand_Code int32

const (
	VersionCommand_VERSION_COMMAND_UNKNOWN VersionCommand_Code = 0
	VersionCommand_NOT_AVAILABLE           VersionCommand_Code = 1
)

var VersionCommand_Code_name = map[int32]string{
	0: "VERSION_COMMAND_UNKNOWN",
	1: "NOT_AVAILABLE",
}

var VersionCommand_Code_value = map[string]int32{
	"VERSION_COMMAND_UNKNOWN": 0,
	"NOT_AVAILABLE":           1,
}

func (x VersionCommand_Code) String() string {
	return proto.EnumName(VersionCommand_Code_name, int32(x))
}

func (VersionCommand_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{42, 0}
}

type PrintActionCommand_Code int32

const (
	PrintActionCommand_PRINT_ACTION_COMMAND_UNKNOWN   PrintActionCommand_Code = 0
	PrintActionCommand_TARGET_NOT_FOUND               PrintActionCommand_Code = 1
	PrintActionCommand_COMMAND_LINE_EXPANSION_FAILURE PrintActionCommand_Code = 2
	PrintActionCommand_TARGET_KIND_UNSUPPORTED        PrintActionCommand_Code = 3
	PrintActionCommand_ACTIONS_NOT_FOUND              PrintActionCommand_Code = 4
)

var PrintActionCommand_Code_name = map[int32]string{
	0: "PRINT_ACTION_COMMAND_UNKNOWN",
	1: "TARGET_NOT_FOUND",
	2: "COMMAND_LINE_EXPANSION_FAILURE",
	3: "TARGET_KIND_UNSUPPORTED",
	4: "ACTIONS_NOT_FOUND",
}

var PrintActionCommand_Code_value = map[string]int32{
	"PRINT_ACTION_COMMAND_UNKNOWN":   0,
	"TARGET_NOT_FOUND":               1,
	"COMMAND_LINE_EXPANSION_FAILURE": 2,
	"TARGET_KIND_UNSUPPORTED":        3,
	"ACTIONS_NOT_FOUND":              4,
}

func (x PrintActionCommand_Code) String() string {
	return proto.EnumName(PrintActionCommand_Code_name, int32(x))
}

func (PrintActionCommand_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{43, 0}
}

type WorkspaceStatus_Code int32

const (
	WorkspaceStatus_WORKSPACE_STATUS_UNKNOWN    WorkspaceStatus_Code = 0
	WorkspaceStatus_NON_ZERO_EXIT               WorkspaceStatus_Code = 1
	WorkspaceStatus_ABNORMAL_TERMINATION        WorkspaceStatus_Code = 2
	WorkspaceStatus_EXEC_FAILED                 WorkspaceStatus_Code = 3
	WorkspaceStatus_PARSE_FAILURE               WorkspaceStatus_Code = 4
	WorkspaceStatus_VALIDATION_FAILURE          WorkspaceStatus_Code = 5
	WorkspaceStatus_CONTENT_UPDATE_IO_EXCEPTION WorkspaceStatus_Code = 6
	WorkspaceStatus_STDERR_IO_EXCEPTION         WorkspaceStatus_Code = 7
)

var WorkspaceStatus_Code_name = map[int32]string{
	0: "WORKSPACE_STATUS_UNKNOWN",
	1: "NON_ZERO_EXIT",
	2: "ABNORMAL_TERMINATION",
	3: "EXEC_FAILED",
	4: "PARSE_FAILURE",
	5: "VALIDATION_FAILURE",
	6: "CONTENT_UPDATE_IO_EXCEPTION",
	7: "STDERR_IO_EXCEPTION",
}

var WorkspaceStatus_Code_value = map[string]int32{
	"WORKSPACE_STATUS_UNKNOWN":    0,
	"NON_ZERO_EXIT":               1,
	"ABNORMAL_TERMINATION":        2,
	"EXEC_FAILED":                 3,
	"PARSE_FAILURE":               4,
	"VALIDATION_FAILURE":          5,
	"CONTENT_UPDATE_IO_EXCEPTION": 6,
	"STDERR_IO_EXCEPTION":         7,
}

func (x WorkspaceStatus_Code) String() string {
	return proto.EnumName(WorkspaceStatus_Code_name, int32(x))
}

func (WorkspaceStatus_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{44, 0}
}

type JavaCompile_Code int32

const (
	JavaCompile_JAVA_COMPILE_UNKNOWN                       JavaCompile_Code = 0
	JavaCompile_REDUCED_CLASSPATH_FAILURE                  JavaCompile_Code = 1
	JavaCompile_COMMAND_LINE_EXPANSION_FAILURE             JavaCompile_Code = 2
	JavaCompile_JDEPS_READ_IO_EXCEPTION                    JavaCompile_Code = 3
	JavaCompile_REDUCED_CLASSPATH_FALLBACK_CLEANUP_FAILURE JavaCompile_Code = 4
)

var JavaCompile_Code_name = map[int32]string{
	0: "JAVA_COMPILE_UNKNOWN",
	1: "REDUCED_CLASSPATH_FAILURE",
	2: "COMMAND_LINE_EXPANSION_FAILURE",
	3: "JDEPS_READ_IO_EXCEPTION",
	4: "REDUCED_CLASSPATH_FALLBACK_CLEANUP_FAILURE",
}

var JavaCompile_Code_value = map[string]int32{
	"JAVA_COMPILE_UNKNOWN":                       0,
	"REDUCED_CLASSPATH_FAILURE":                  1,
	"COMMAND_LINE_EXPANSION_FAILURE":             2,
	"JDEPS_READ_IO_EXCEPTION":                    3,
	"REDUCED_CLASSPATH_FALLBACK_CLEANUP_FAILURE": 4,
}

func (x JavaCompile_Code) String() string {
	return proto.EnumName(JavaCompile_Code_name, int32(x))
}

func (JavaCompile_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{45, 0}
}

type ActionRewinding_Code int32

const (
	ActionRewinding_ACTION_REWINDING_UNKNOWN  ActionRewinding_Code = 0
	ActionRewinding_LOST_INPUT_TOO_MANY_TIMES ActionRewinding_Code = 1
	ActionRewinding_LOST_INPUT_IS_SOURCE      ActionRewinding_Code = 2
)

var ActionRewinding_Code_name = map[int32]string{
	0: "ACTION_REWINDING_UNKNOWN",
	1: "LOST_INPUT_TOO_MANY_TIMES",
	2: "LOST_INPUT_IS_SOURCE",
}

var ActionRewinding_Code_value = map[string]int32{
	"ACTION_REWINDING_UNKNOWN":  0,
	"LOST_INPUT_TOO_MANY_TIMES": 1,
	"LOST_INPUT_IS_SOURCE":      2,
}

func (x ActionRewinding_Code) String() string {
	return proto.EnumName(ActionRewinding_Code_name, int32(x))
}

func (ActionRewinding_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{46, 0}
}

type CppCompile_Code int32

const (
	CppCompile_CPP_COMPILE_UNKNOWN             CppCompile_Code = 0
	CppCompile_FIND_USED_HEADERS_IO_EXCEPTION  CppCompile_Code = 1
	CppCompile_COPY_OUT_ERR_FAILURE            CppCompile_Code = 2
	CppCompile_D_FILE_READ_FAILURE             CppCompile_Code = 3
	CppCompile_COMMAND_GENERATION_FAILURE      CppCompile_Code = 4
	CppCompile_MODULE_EXPANSION_TIMEOUT        CppCompile_Code = 5
	CppCompile_INCLUDE_PATH_OUTSIDE_EXEC_ROOT  CppCompile_Code = 6
	CppCompile_FAKE_COMMAND_GENERATION_FAILURE CppCompile_Code = 7
	CppCompile_UNDECLARED_INCLUSIONS           CppCompile_Code = 8
	CppCompile_D_FILE_PARSE_FAILURE            CppCompile_Code = 9
	CppCompile_COVERAGE_NOTES_CREATION_FAILURE CppCompile_Code = 10
	CppCompile_MODULE_EXPANSION_MISSING_DATA   CppCompile_Code = 11
)

var CppCompile_Code_name = map[int32]string{
	0:  "CPP_COMPILE_UNKNOWN",
	1:  "FIND_USED_HEADERS_IO_EXCEPTION",
	2:  "COPY_OUT_ERR_FAILURE",
	3:  "D_FILE_READ_FAILURE",
	4:  "COMMAND_GENERATION_FAILURE",
	5:  "MODULE_EXPANSION_TIMEOUT",
	6:  "INCLUDE_PATH_OUTSIDE_EXEC_ROOT",
	7:  "FAKE_COMMAND_GENERATION_FAILURE",
	8:  "UNDECLARED_INCLUSIONS",
	9:  "D_FILE_PARSE_FAILURE",
	10: "COVERAGE_NOTES_CREATION_FAILURE",
	11: "MODULE_EXPANSION_MISSING_DATA",
}

var CppCompile_Code_value = map[string]int32{
	"CPP_COMPILE_UNKNOWN":             0,
	"FIND_USED_HEADERS_IO_EXCEPTION":  1,
	"COPY_OUT_ERR_FAILURE":            2,
	"D_FILE_READ_FAILURE":             3,
	"COMMAND_GENERATION_FAILURE":      4,
	"MODULE_EXPANSION_TIMEOUT":        5,
	"INCLUDE_PATH_OUTSIDE_EXEC_ROOT":  6,
	"FAKE_COMMAND_GENERATION_FAILURE": 7,
	"UNDECLARED_INCLUSIONS":           8,
	"D_FILE_PARSE_FAILURE":            9,
	"COVERAGE_NOTES_CREATION_FAILURE": 10,
	"MODULE_EXPANSION_MISSING_DATA":   11,
}

func (x CppCompile_Code) String() string {
	return proto.EnumName(CppCompile_Code_name, int32(x))
}

func (CppCompile_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{47, 0}
}

type StarlarkAction_Code int32

const (
	StarlarkAction_STARLARK_ACTION_UNKNOWN          StarlarkAction_Code = 0
	StarlarkAction_UNUSED_INPUT_LIST_READ_FAILURE   StarlarkAction_Code = 1
	StarlarkAction_UNUSED_INPUT_LIST_FILE_NOT_FOUND StarlarkAction_Code = 2
)

var StarlarkAction_Code_name = map[int32]string{
	0: "STARLARK_ACTION_UNKNOWN",
	1: "UNUSED_INPUT_LIST_READ_FAILURE",
	2: "UNUSED_INPUT_LIST_FILE_NOT_FOUND",
}

var StarlarkAction_Code_value = map[string]int32{
	"STARLARK_ACTION_UNKNOWN":          0,
	"UNUSED_INPUT_LIST_READ_FAILURE":   1,
	"UNUSED_INPUT_LIST_FILE_NOT_FOUND": 2,
}

func (x StarlarkAction_Code) String() string {
	return proto.EnumName(StarlarkAction_Code_name, int32(x))
}

func (StarlarkAction_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{48, 0}
}

type NinjaAction_Code int32

const (
	NinjaAction_NINJA_ACTION_UNKNOWN                NinjaAction_Code = 0
	NinjaAction_INVALID_DEPFILE_DECLARED_DEPENDENCY NinjaAction_Code = 1
	NinjaAction_D_FILE_PARSE_FAILURE                NinjaAction_Code = 2
)

var NinjaAction_Code_name = map[int32]string{
	0: "NINJA_ACTION_UNKNOWN",
	1: "INVALID_DEPFILE_DECLARED_DEPENDENCY",
	2: "D_FILE_PARSE_FAILURE",
}

var NinjaAction_Code_value = map[string]int32{
	"NINJA_ACTION_UNKNOWN":                0,
	"INVALID_DEPFILE_DECLARED_DEPENDENCY": 1,
	"D_FILE_PARSE_FAILURE":                2,
}

func (x NinjaAction_Code) String() string {
	return proto.EnumName(NinjaAction_Code_name, int32(x))
}

func (NinjaAction_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{49, 0}
}

type DynamicExecution_Code int32

const (
	DynamicExecution_DYNAMIC_EXECUTION_UNKNOWN  DynamicExecution_Code = 0
	DynamicExecution_XCODE_RELATED_PREREQ_UNMET DynamicExecution_Code = 1
	DynamicExecution_ACTION_LOG_MOVE_FAILURE    DynamicExecution_Code = 2
	DynamicExecution_RUN_FAILURE                DynamicExecution_Code = 3
	DynamicExecution_NO_USABLE_STRATEGY_FOUND   DynamicExecution_Code = 4
)

var DynamicExecution_Code_name = map[int32]string{
	0: "DYNAMIC_EXECUTION_UNKNOWN",
	1: "XCODE_RELATED_PREREQ_UNMET",
	2: "ACTION_LOG_MOVE_FAILURE",
	3: "RUN_FAILURE",
	4: "NO_USABLE_STRATEGY_FOUND",
}

var DynamicExecution_Code_value = map[string]int32{
	"DYNAMIC_EXECUTION_UNKNOWN":  0,
	"XCODE_RELATED_PREREQ_UNMET": 1,
	"ACTION_LOG_MOVE_FAILURE":    2,
	"RUN_FAILURE":                3,
	"NO_USABLE_STRATEGY_FOUND":   4,
}

func (x DynamicExecution_Code) String() string {
	return proto.EnumName(DynamicExecution_Code_name, int32(x))
}

func (DynamicExecution_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{50, 0}
}

type FailAction_Code int32

const (
	FailAction_FAIL_ACTION_UNKNOWN            FailAction_Code = 0
	FailAction_INTENTIONAL_FAILURE            FailAction_Code = 1
	FailAction_INCORRECT_PYTHON_VERSION       FailAction_Code = 2
	FailAction_PROGUARD_SPECS_MISSING         FailAction_Code = 3
	FailAction_DYNAMIC_LINKING_NOT_SUPPORTED  FailAction_Code = 4
	FailAction_SOURCE_FILES_MISSING           FailAction_Code = 5
	FailAction_INCORRECT_TOOLCHAIN            FailAction_Code = 6
	FailAction_FRAGMENT_CLASS_MISSING         FailAction_Code = 7
	FailAction_CANT_BUILD_INCOMPATIBLE_TARGET FailAction_Code = 10
)

var FailAction_Code_name = map[int32]string{
	0:  "FAIL_ACTION_UNKNOWN",
	1:  "INTENTIONAL_FAILURE",
	2:  "INCORRECT_PYTHON_VERSION",
	3:  "PROGUARD_SPECS_MISSING",
	4:  "DYNAMIC_LINKING_NOT_SUPPORTED",
	5:  "SOURCE_FILES_MISSING",
	6:  "INCORRECT_TOOLCHAIN",
	7:  "FRAGMENT_CLASS_MISSING",
	10: "CANT_BUILD_INCOMPATIBLE_TARGET",
}

var FailAction_Code_value = map[string]int32{
	"FAIL_ACTION_UNKNOWN":            0,
	"INTENTIONAL_FAILURE":            1,
	"INCORRECT_PYTHON_VERSION":       2,
	"PROGUARD_SPECS_MISSING":         3,
	"DYNAMIC_LINKING_NOT_SUPPORTED":  4,
	"SOURCE_FILES_MISSING":           5,
	"INCORRECT_TOOLCHAIN":            6,
	"FRAGMENT_CLASS_MISSING":         7,
	"CANT_BUILD_INCOMPATIBLE_TARGET": 10,
}

func (x FailAction_Code) String() string {
	return proto.EnumName(FailAction_Code_name, int32(x))
}

func (FailAction_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{51, 0}
}

type SymlinkAction_Code int32

const (
	SymlinkAction_SYMLINK_ACTION_UNKNOWN              SymlinkAction_Code = 0
	SymlinkAction_EXECUTABLE_INPUT_NOT_FILE           SymlinkAction_Code = 1
	SymlinkAction_EXECUTABLE_INPUT_IS_NOT             SymlinkAction_Code = 2
	SymlinkAction_EXECUTABLE_INPUT_CHECK_IO_EXCEPTION SymlinkAction_Code = 3
	SymlinkAction_LINK_CREATION_IO_EXCEPTION          SymlinkAction_Code = 4
	SymlinkAction_LINK_TOUCH_IO_EXCEPTION             SymlinkAction_Code = 5
)

var SymlinkAction_Code_name = map[int32]string{
	0: "SYMLINK_ACTION_UNKNOWN",
	1: "EXECUTABLE_INPUT_NOT_FILE",
	2: "EXECUTABLE_INPUT_IS_NOT",
	3: "EXECUTABLE_INPUT_CHECK_IO_EXCEPTION",
	4: "LINK_CREATION_IO_EXCEPTION",
	5: "LINK_TOUCH_IO_EXCEPTION",
}

var SymlinkAction_Code_value = map[string]int32{
	"SYMLINK_ACTION_UNKNOWN":              0,
	"EXECUTABLE_INPUT_NOT_FILE":           1,
	"EXECUTABLE_INPUT_IS_NOT":             2,
	"EXECUTABLE_INPUT_CHECK_IO_EXCEPTION": 3,
	"LINK_CREATION_IO_EXCEPTION":          4,
	"LINK_TOUCH_IO_EXCEPTION":             5,
}

func (x SymlinkAction_Code) String() string {
	return proto.EnumName(SymlinkAction_Code_name, int32(x))
}

func (SymlinkAction_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{52, 0}
}

type CppLink_Code int32

const (
	CppLink_CPP_LINK_UNKNOWN                CppLink_Code = 0
	CppLink_COMMAND_GENERATION_FAILURE      CppLink_Code = 1
	CppLink_FAKE_COMMAND_GENERATION_FAILURE CppLink_Code = 2
)

var CppLink_Code_name = map[int32]string{
	0: "CPP_LINK_UNKNOWN",
	1: "COMMAND_GENERATION_FAILURE",
	2: "FAKE_COMMAND_GENERATION_FAILURE",
}

var CppLink_Code_value = map[string]int32{
	"CPP_LINK_UNKNOWN":                0,
	"COMMAND_GENERATION_FAILURE":      1,
	"FAKE_COMMAND_GENERATION_FAILURE": 2,
}

func (x CppLink_Code) String() string {
	return proto.EnumName(CppLink_Code_name, int32(x))
}

func (CppLink_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{53, 0}
}

type LtoAction_Code int32

const (
	LtoAction_LTO_ACTION_UNKNOWN               LtoAction_Code = 0
	LtoAction_INVALID_ABSOLUTE_PATH_IN_IMPORTS LtoAction_Code = 1
	LtoAction_MISSING_BITCODE_FILES            LtoAction_Code = 2
	LtoAction_IMPORTS_READ_IO_EXCEPTION        LtoAction_Code = 3
)

var LtoAction_Code_name = map[int32]string{
	0: "LTO_ACTION_UNKNOWN",
	1: "INVALID_ABSOLUTE_PATH_IN_IMPORTS",
	2: "MISSING_BITCODE_FILES",
	3: "IMPORTS_READ_IO_EXCEPTION",
}

var LtoAction_Code_value = map[string]int32{
	"LTO_ACTION_UNKNOWN":               0,
	"INVALID_ABSOLUTE_PATH_IN_IMPORTS": 1,
	"MISSING_BITCODE_FILES":            2,
	"IMPORTS_READ_IO_EXCEPTION":        3,
}

func (x LtoAction_Code) String() string {
	return proto.EnumName(LtoAction_Code_name, int32(x))
}

func (LtoAction_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{54, 0}
}

type TestAction_Code int32

const (
	TestAction_TEST_ACTION_UNKNOWN            TestAction_Code = 0
	TestAction_NO_KEEP_GOING_TEST_FAILURE     TestAction_Code = 1
	TestAction_LOCAL_TEST_PREREQ_UNMET        TestAction_Code = 2
	TestAction_COMMAND_LINE_EXPANSION_FAILURE TestAction_Code = 3
	TestAction_DUPLICATE_CPU_TAGS             TestAction_Code = 4
	TestAction_INVALID_CPU_TAG                TestAction_Code = 5
)

var TestAction_Code_name = map[int32]string{
	0: "TEST_ACTION_UNKNOWN",
	1: "NO_KEEP_GOING_TEST_FAILURE",
	2: "LOCAL_TEST_PREREQ_UNMET",
	3: "COMMAND_LINE_EXPANSION_FAILURE",
	4: "DUPLICATE_CPU_TAGS",
	5: "INVALID_CPU_TAG",
}

var TestAction_Code_value = map[string]int32{
	"TEST_ACTION_UNKNOWN":            0,
	"NO_KEEP_GOING_TEST_FAILURE":     1,
	"LOCAL_TEST_PREREQ_UNMET":        2,
	"COMMAND_LINE_EXPANSION_FAILURE": 3,
	"DUPLICATE_CPU_TAGS":             4,
	"INVALID_CPU_TAG":                5,
}

func (x TestAction_Code) String() string {
	return proto.EnumName(TestAction_Code_name, int32(x))
}

func (TestAction_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{55, 0}
}

type Worker_Code int32

const (
	Worker_WORKER_UNKNOWN                        Worker_Code = 0
	Worker_MULTIPLEXER_INSTANCE_REMOVAL_FAILURE  Worker_Code = 1
	Worker_MULTIPLEXER_DOES_NOT_EXIST            Worker_Code = 2
	Worker_NO_TOOLS                              Worker_Code = 3
	Worker_NO_FLAGFILE                           Worker_Code = 4
	Worker_VIRTUAL_INPUT_MATERIALIZATION_FAILURE Worker_Code = 5
	Worker_BORROW_FAILURE                        Worker_Code = 6
	Worker_PREFETCH_FAILURE                      Worker_Code = 7
	Worker_PREPARE_FAILURE                       Worker_Code = 8
	Worker_REQUEST_FAILURE                       Worker_Code = 9
	Worker_PARSE_RESPONSE_FAILURE                Worker_Code = 10
	Worker_NO_RESPONSE                           Worker_Code = 11
	Worker_FINISH_FAILURE                        Worker_Code = 12
	Worker_FORBIDDEN_INPUT                       Worker_Code = 13
)

var Worker_Code_name = map[int32]string{
	0:  "WORKER_UNKNOWN",
	1:  "MULTIPLEXER_INSTANCE_REMOVAL_FAILURE",
	2:  "MULTIPLEXER_DOES_NOT_EXIST",
	3:  "NO_TOOLS",
	4:  "NO_FLAGFILE",
	5:  "VIRTUAL_INPUT_MATERIALIZATION_FAILURE",
	6:  "BORROW_FAILURE",
	7:  "PREFETCH_FAILURE",
	8:  "PREPARE_FAILURE",
	9:  "REQUEST_FAILURE",
	10: "PARSE_RESPONSE_FAILURE",
	11: "NO_RESPONSE",
	12: "FINISH_FAILURE",
	13: "FORBIDDEN_INPUT",
}

var Worker_Code_value = map[string]int32{
	"WORKER_UNKNOWN":                        0,
	"MULTIPLEXER_INSTANCE_REMOVAL_FAILURE":  1,
	"MULTIPLEXER_DOES_NOT_EXIST":            2,
	"NO_TOOLS":                              3,
	"NO_FLAGFILE":                           4,
	"VIRTUAL_INPUT_MATERIALIZATION_FAILURE": 5,
	"BORROW_FAILURE":                        6,
	"PREFETCH_FAILURE":                      7,
	"PREPARE_FAILURE":                       8,
	"REQUEST_FAILURE":                       9,
	"PARSE_RESPONSE_FAILURE":                10,
	"NO_RESPONSE":                           11,
	"FINISH_FAILURE":                        12,
	"FORBIDDEN_INPUT":                       13,
}

func (x Worker_Code) String() string {
	return proto.EnumName(Worker_Code_name, int32(x))
}

func (Worker_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{56, 0}
}

type Analysis_Code int32

const (
	Analysis_ANALYSIS_UNKNOWN Analysis_Code = 0
	Analysis_LOAD_FAILURE     Analysis_Code = 1
	// TODO(b/138456686): this code should be deprecated in favor of more finely
	//   resolved loading-phase codes.
	Analysis_GENERIC_LOADING_PHASE_FAILURE          Analysis_Code = 2
	Analysis_NOT_ALL_TARGETS_ANALYZED               Analysis_Code = 3
	Analysis_CYCLE                                  Analysis_Code = 4
	Analysis_PARAMETERIZED_TOP_LEVEL_ASPECT_INVALID Analysis_Code = 5
	Analysis_ASPECT_LABEL_SYNTAX_ERROR              Analysis_Code = 6
	Analysis_ASPECT_PREREQ_UNMET                    Analysis_Code = 7
	Analysis_ASPECT_NOT_FOUND                       Analysis_Code = 8
	Analysis_ACTION_CONFLICT                        Analysis_Code = 9
	Analysis_ARTIFACT_PREFIX_CONFLICT               Analysis_Code = 10
	Analysis_UNEXPECTED_ANALYSIS_EXCEPTION          Analysis_Code = 11
	Analysis_TARGETS_MISSING_ENVIRONMENTS           Analysis_Code = 12
	Analysis_INVALID_ENVIRONMENT                    Analysis_Code = 13
	Analysis_ENVIRONMENT_MISSING_FROM_GROUPS        Analysis_Code = 14
	Analysis_EXEC_GROUP_MISSING                     Analysis_Code = 15
	Analysis_INVALID_EXECUTION_PLATFORM             Analysis_Code = 16
	Analysis_ASPECT_CREATION_FAILED                 Analysis_Code = 17
	Analysis_CONFIGURED_VALUE_CREATION_FAILED       Analysis_Code = 18
	Analysis_INCOMPATIBLE_TARGET_REQUESTED          Analysis_Code = 19
)

var Analysis_Code_name = map[int32]string{
	0:  "ANALYSIS_UNKNOWN",
	1:  "LOAD_FAILURE",
	2:  "GENERIC_LOADING_PHASE_FAILURE",
	3:  "NOT_ALL_TARGETS_ANALYZED",
	4:  "CYCLE",
	5:  "PARAMETERIZED_TOP_LEVEL_ASPECT_INVALID",
	6:  "ASPECT_LABEL_SYNTAX_ERROR",
	7:  "ASPECT_PREREQ_UNMET",
	8:  "ASPECT_NOT_FOUND",
	9:  "ACTION_CONFLICT",
	10: "ARTIFACT_PREFIX_CONFLICT",
	11: "UNEXPECTED_ANALYSIS_EXCEPTION",
	12: "TARGETS_MISSING_ENVIRONMENTS",
	13: "INVALID_ENVIRONMENT",
	14: "ENVIRONMENT_MISSING_FROM_GROUPS",
	15: "EXEC_GROUP_MISSING",
	16: "INVALID_EXECUTION_PLATFORM",
	17: "ASPECT_CREATION_FAILED",
	18: "CONFIGURED_VALUE_CREATION_FAILED",
	19: "INCOMPATIBLE_TARGET_REQUESTED",
}

var Analysis_Code_value = map[string]int32{
	"ANALYSIS_UNKNOWN":                       0,
	"LOAD_FAILURE":                           1,
	"GENERIC_LOADING_PHASE_FAILURE":          2,
	"NOT_ALL_TARGETS_ANALYZED":               3,
	"CYCLE":                                  4,
	"PARAMETERIZED_TOP_LEVEL_ASPECT_INVALID": 5,
	"ASPECT_LABEL_SYNTAX_ERROR":              6,
	"ASPECT_PREREQ_UNMET":                    7,
	"ASPECT_NOT_FOUND":                       8,
	"ACTION_CONFLICT":                        9,
	"ARTIFACT_PREFIX_CONFLICT":               10,
	"UNEXPECTED_ANALYSIS_EXCEPTION":          11,
	"TARGETS_MISSING_ENVIRONMENTS":           12,
	"INVALID_ENVIRONMENT":                    13,
	"ENVIRONMENT_MISSING_FROM_GROUPS":        14,
	"EXEC_GROUP_MISSING":                     15,
	"INVALID_EXECUTION_PLATFORM":             16,
	"ASPECT_CREATION_FAILED":                 17,
	"CONFIGURED_VALUE_CREATION_FAILED":       18,
	"INCOMPATIBLE_TARGET_REQUESTED":          19,
}

func (x Analysis_Code) String() string {
	return proto.EnumName(Analysis_Code_name, int32(x))
}

func (Analysis_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{57, 0}
}

type PackageLoading_Code int32

const (
	PackageLoading_PACKAGE_LOADING_UNKNOWN                  PackageLoading_Code = 0
	PackageLoading_WORKSPACE_FILE_ERROR                     PackageLoading_Code = 1
	PackageLoading_MAX_COMPUTATION_STEPS_EXCEEDED           PackageLoading_Code = 2
	PackageLoading_BUILD_FILE_MISSING                       PackageLoading_Code = 3
	PackageLoading_REPOSITORY_MISSING                       PackageLoading_Code = 4
	PackageLoading_PERSISTENT_INCONSISTENT_FILESYSTEM_ERROR PackageLoading_Code = 5
	PackageLoading_TRANSIENT_INCONSISTENT_FILESYSTEM_ERROR  PackageLoading_Code = 6
	PackageLoading_INVALID_NAME                             PackageLoading_Code = 7
	PackageLoading_EVAL_GLOBS_SYMLINK_ERROR                 PackageLoading_Code = 9
	PackageLoading_IMPORT_STARLARK_FILE_ERROR               PackageLoading_Code = 10
	PackageLoading_PACKAGE_MISSING                          PackageLoading_Code = 11
	PackageLoading_TARGET_MISSING                           PackageLoading_Code = 12
	PackageLoading_NO_SUCH_THING                            PackageLoading_Code = 13
	PackageLoading_GLOB_IO_EXCEPTION                        PackageLoading_Code = 14
	PackageLoading_DUPLICATE_LABEL                          PackageLoading_Code = 15
	PackageLoading_INVALID_PACKAGE_SPECIFICATION            PackageLoading_Code = 16
	PackageLoading_SYNTAX_ERROR                             PackageLoading_Code = 17
	PackageLoading_ENVIRONMENT_IN_DIFFERENT_PACKAGE         PackageLoading_Code = 18
	PackageLoading_DEFAULT_ENVIRONMENT_UNDECLARED           PackageLoading_Code = 19
	PackageLoading_ENVIRONMENT_IN_MULTIPLE_GROUPS           PackageLoading_Code = 20
	PackageLoading_ENVIRONMENT_DOES_NOT_EXIST               PackageLoading_Code = 21
	PackageLoading_ENVIRONMENT_INVALID                      PackageLoading_Code = 22
	PackageLoading_ENVIRONMENT_NOT_IN_GROUP                 PackageLoading_Code = 23
	PackageLoading_PACKAGE_NAME_INVALID                     PackageLoading_Code = 24
	PackageLoading_STARLARK_EVAL_ERROR                      PackageLoading_Code = 25
	PackageLoading_LICENSE_PARSE_FAILURE                    PackageLoading_Code = 26
	PackageLoading_DISTRIBUTIONS_PARSE_FAILURE              PackageLoading_Code = 27
	PackageLoading_LABEL_CROSSES_PACKAGE_BOUNDARY           PackageLoading_Code = 28
	// Failure while evaluating or applying @_builtins injection. Since the
	// builtins .bzl files are always packaged with Blaze in production, a
	// failure here generally indicates a bug in Blaze.
	PackageLoading_BUILTINS_INJECTION_FAILURE          PackageLoading_Code = 29
	PackageLoading_SYMLINK_CYCLE_OR_INFINITE_EXPANSION PackageLoading_Code = 30
	PackageLoading_OTHER_IO_EXCEPTION                  PackageLoading_Code = 31
)

var PackageLoading_Code_name = map[int32]string{
	0:  "PACKAGE_LOADING_UNKNOWN",
	1:  "WORKSPACE_FILE_ERROR",
	2:  "MAX_COMPUTATION_STEPS_EXCEEDED",
	3:  "BUILD_FILE_MISSING",
	4:  "REPOSITORY_MISSING",
	5:  "PERSISTENT_INCONSISTENT_FILESYSTEM_ERROR",
	6:  "TRANSIENT_INCONSISTENT_FILESYSTEM_ERROR",
	7:  "INVALID_NAME",
	9:  "EVAL_GLOBS_SYMLINK_ERROR",
	10: "IMPORT_STARLARK_FILE_ERROR",
	11: "PACKAGE_MISSING",
	12: "TARGET_MISSING",
	13: "NO_SUCH_THING",
	14: "GLOB_IO_EXCEPTION",
	15: "DUPLICATE_LABEL",
	16: "INVALID_PACKAGE_SPECIFICATION",
	17: "SYNTAX_ERROR",
	18: "ENVIRONMENT_IN_DIFFERENT_PACKAGE",
	19: "DEFAULT_ENVIRONMENT_UNDECLARED",
	20: "ENVIRONMENT_IN_MULTIPLE_GROUPS",
	21: "ENVIRONMENT_DOES_NOT_EXIST",
	22: "ENVIRONMENT_INVALID",
	23: "ENVIRONMENT_NOT_IN_GROUP",
	24: "PACKAGE_NAME_INVALID",
	25: "STARLARK_EVAL_ERROR",
	26: "LICENSE_PARSE_FAILURE",
	27: "DISTRIBUTIONS_PARSE_FAILURE",
	28: "LABEL_CROSSES_PACKAGE_BOUNDARY",
	29: "BUILTINS_INJECTION_FAILURE",
	30: "SYMLINK_CYCLE_OR_INFINITE_EXPANSION",
	31: "OTHER_IO_EXCEPTION",
}

var PackageLoading_Code_value = map[string]int32{
	"PACKAGE_LOADING_UNKNOWN":                  0,
	"WORKSPACE_FILE_ERROR":                     1,
	"MAX_COMPUTATION_STEPS_EXCEEDED":           2,
	"BUILD_FILE_MISSING":                       3,
	"REPOSITORY_MISSING":                       4,
	"PERSISTENT_INCONSISTENT_FILESYSTEM_ERROR": 5,
	"TRANSIENT_INCONSISTENT_FILESYSTEM_ERROR":  6,
	"INVALID_NAME":                             7,
	"EVAL_GLOBS_SYMLINK_ERROR":                 9,
	"IMPORT_STARLARK_FILE_ERROR":               10,
	"PACKAGE_MISSING":                          11,
	"TARGET_MISSING":                           12,
	"NO_SUCH_THING":                            13,
	"GLOB_IO_EXCEPTION":                        14,
	"DUPLICATE_LABEL":                          15,
	"INVALID_PACKAGE_SPECIFICATION":            16,
	"SYNTAX_ERROR":                             17,
	"ENVIRONMENT_IN_DIFFERENT_PACKAGE":         18,
	"DEFAULT_ENVIRONMENT_UNDECLARED":           19,
	"ENVIRONMENT_IN_MULTIPLE_GROUPS":           20,
	"ENVIRONMENT_DOES_NOT_EXIST":               21,
	"ENVIRONMENT_INVALID":                      22,
	"ENVIRONMENT_NOT_IN_GROUP":                 23,
	"PACKAGE_NAME_INVALID":                     24,
	"STARLARK_EVAL_ERROR":                      25,
	"LICENSE_PARSE_FAILURE":                    26,
	"DISTRIBUTIONS_PARSE_FAILURE":              27,
	"LABEL_CROSSES_PACKAGE_BOUNDARY":           28,
	"BUILTINS_INJECTION_FAILURE":               29,
	"SYMLINK_CYCLE_OR_INFINITE_EXPANSION":      30,
	"OTHER_IO_EXCEPTION":                       31,
}

func (x PackageLoading_Code) String() string {
	return proto.EnumName(PackageLoading_Code_name, int32(x))
}

func (PackageLoading_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{58, 0}
}

type Toolchain_Code int32

const (
	Toolchain_TOOLCHAIN_UNKNOWN              Toolchain_Code = 0
	Toolchain_MISSING_PROVIDER               Toolchain_Code = 1
	Toolchain_INVALID_CONSTRAINT_VALUE       Toolchain_Code = 2
	Toolchain_INVALID_PLATFORM_VALUE         Toolchain_Code = 3
	Toolchain_INVALID_TOOLCHAIN              Toolchain_Code = 4
	Toolchain_NO_MATCHING_EXECUTION_PLATFORM Toolchain_Code = 5
	Toolchain_NO_MATCHING_TOOLCHAIN          Toolchain_Code = 6
	Toolchain_INVALID_TOOLCHAIN_TYPE         Toolchain_Code = 7
)

var Toolchain_Code_name = map[int32]string{
	0: "TOOLCHAIN_UNKNOWN",
	1: "MISSING_PROVIDER",
	2: "INVALID_CONSTRAINT_VALUE",
	3: "INVALID_PLATFORM_VALUE",
	4: "INVALID_TOOLCHAIN",
	5: "NO_MATCHING_EXECUTION_PLATFORM",
	6: "NO_MATCHING_TOOLCHAIN",
	7: "INVALID_TOOLCHAIN_TYPE",
}

var Toolchain_Code_value = map[string]int32{
	"TOOLCHAIN_UNKNOWN":              0,
	"MISSING_PROVIDER":               1,
	"INVALID_CONSTRAINT_VALUE":       2,
	"INVALID_PLATFORM_VALUE":         3,
	"INVALID_TOOLCHAIN":              4,
	"NO_MATCHING_EXECUTION_PLATFORM": 5,
	"NO_MATCHING_TOOLCHAIN":          6,
	"INVALID_TOOLCHAIN_TYPE":         7,
}

func (x Toolchain_Code) String() string {
	return proto.EnumName(Toolchain_Code_name, int32(x))
}

func (Toolchain_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{59, 0}
}

type StarlarkLoading_Code int32

const (
	StarlarkLoading_STARLARK_LOADING_UNKNOWN       StarlarkLoading_Code = 0
	StarlarkLoading_CYCLE                          StarlarkLoading_Code = 1
	StarlarkLoading_COMPILE_ERROR                  StarlarkLoading_Code = 2
	StarlarkLoading_PARSE_ERROR                    StarlarkLoading_Code = 3
	StarlarkLoading_EVAL_ERROR                     StarlarkLoading_Code = 4
	StarlarkLoading_CONTAINING_PACKAGE_NOT_FOUND   StarlarkLoading_Code = 5
	StarlarkLoading_PACKAGE_NOT_FOUND              StarlarkLoading_Code = 6
	StarlarkLoading_IO_ERROR                       StarlarkLoading_Code = 7
	StarlarkLoading_LABEL_CROSSES_PACKAGE_BOUNDARY StarlarkLoading_Code = 8
	StarlarkLoading_BUILTINS_ERROR                 StarlarkLoading_Code = 9
	StarlarkLoading_VISIBILITY_ERROR               StarlarkLoading_Code = 10
)

var StarlarkLoading_Code_name = map[int32]string{
	0:  "STARLARK_LOADING_UNKNOWN",
	1:  "CYCLE",
	2:  "COMPILE_ERROR",
	3:  "PARSE_ERROR",
	4:  "EVAL_ERROR",
	5:  "CONTAINING_PACKAGE_NOT_FOUND",
	6:  "PACKAGE_NOT_FOUND",
	7:  "IO_ERROR",
	8:  "LABEL_CROSSES_PACKAGE_BOUNDARY",
	9:  "BUILTINS_ERROR",
	10: "VISIBILITY_ERROR",
}

var StarlarkLoading_Code_value = map[string]int32{
	"STARLARK_LOADING_UNKNOWN":       0,
	"CYCLE":                          1,
	"COMPILE_ERROR":                  2,
	"PARSE_ERROR":                    3,
	"EVAL_ERROR":                     4,
	"CONTAINING_PACKAGE_NOT_FOUND":   5,
	"PACKAGE_NOT_FOUND":              6,
	"IO_ERROR":                       7,
	"LABEL_CROSSES_PACKAGE_BOUNDARY": 8,
	"BUILTINS_ERROR":                 9,
	"VISIBILITY_ERROR":               10,
}

func (x StarlarkLoading_Code) String() string {
	return proto.EnumName(StarlarkLoading_Code_name, int32(x))
}

func (StarlarkLoading_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{60, 0}
}

type ExternalDeps_Code int32

const (
	ExternalDeps_EXTERNAL_DEPS_UNKNOWN    ExternalDeps_Code = 0
	ExternalDeps_MODULE_NOT_FOUND         ExternalDeps_Code = 1
	ExternalDeps_BAD_MODULE               ExternalDeps_Code = 2
	ExternalDeps_VERSION_RESOLUTION_ERROR ExternalDeps_Code = 3
	ExternalDeps_INVALID_REGISTRY_URL     ExternalDeps_Code = 4
	ExternalDeps_ERROR_ACCESSING_REGISTRY ExternalDeps_Code = 5
)

var ExternalDeps_Code_name = map[int32]string{
	0: "EXTERNAL_DEPS_UNKNOWN",
	1: "MODULE_NOT_FOUND",
	2: "BAD_MODULE",
	3: "VERSION_RESOLUTION_ERROR",
	4: "INVALID_REGISTRY_URL",
	5: "ERROR_ACCESSING_REGISTRY",
}

var ExternalDeps_Code_value = map[string]int32{
	"EXTERNAL_DEPS_UNKNOWN":    0,
	"MODULE_NOT_FOUND":         1,
	"BAD_MODULE":               2,
	"VERSION_RESOLUTION_ERROR": 3,
	"INVALID_REGISTRY_URL":     4,
	"ERROR_ACCESSING_REGISTRY": 5,
}

func (x ExternalDeps_Code) String() string {
	return proto.EnumName(ExternalDeps_Code_name, int32(x))
}

func (ExternalDeps_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{61, 0}
}

type DiffAwareness_Code int32

const (
	DiffAwareness_DIFF_AWARENESS_UNKNOWN DiffAwareness_Code = 0
	DiffAwareness_DIFF_STAT_FAILED       DiffAwareness_Code = 1
)

var DiffAwareness_Code_name = map[int32]string{
	0: "DIFF_AWARENESS_UNKNOWN",
	1: "DIFF_STAT_FAILED",
}

var DiffAwareness_Code_value = map[string]int32{
	"DIFF_AWARENESS_UNKNOWN": 0,
	"DIFF_STAT_FAILED":       1,
}

func (x DiffAwareness_Code) String() string {
	return proto.EnumName(DiffAwareness_Code_name, int32(x))
}

func (DiffAwareness_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{62, 0}
}

type ModqueryCommand_Code int32

const (
	ModqueryCommand_MODQUERY_COMMAND_UNKNOWN ModqueryCommand_Code = 0
	ModqueryCommand_MISSING_ARGUMENTS        ModqueryCommand_Code = 1
	ModqueryCommand_TOO_MANY_ARGUMENTS       ModqueryCommand_Code = 2
	ModqueryCommand_INVALID_ARGUMENTS        ModqueryCommand_Code = 3
)

var ModqueryCommand_Code_name = map[int32]string{
	0: "MODQUERY_COMMAND_UNKNOWN",
	1: "MISSING_ARGUMENTS",
	2: "TOO_MANY_ARGUMENTS",
	3: "INVALID_ARGUMENTS",
}

var ModqueryCommand_Code_value = map[string]int32{
	"MODQUERY_COMMAND_UNKNOWN": 0,
	"MISSING_ARGUMENTS":        1,
	"TOO_MANY_ARGUMENTS":       2,
	"INVALID_ARGUMENTS":        3,
}

func (x ModqueryCommand_Code) String() string {
	return proto.EnumName(ModqueryCommand_Code_name, int32(x))
}

func (ModqueryCommand_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{63, 0}
}

type FailureDetailMetadata struct {
	ExitCode uint32 `protobuf:"varint,1,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
}

func (m *FailureDetailMetadata) Reset()         { *m = FailureDetailMetadata{} }
func (m *FailureDetailMetadata) String() string { return proto.CompactTextString(m) }
func (*FailureDetailMetadata) ProtoMessage()    {}
func (*FailureDetailMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{0}
}
func (m *FailureDetailMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FailureDetailMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FailureDetailMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailureDetailMetadata.Merge(m, src)
}
func (m *FailureDetailMetadata) XXX_Size() int {
	return m.Size()
}
func (m *FailureDetailMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_FailureDetailMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_FailureDetailMetadata proto.InternalMessageInfo

// The FailureDetail message type is designed such that consumers can extract a
// basic classification of a FailureDetail message even if the consumer was
// built with a stale definition. This forward compatibility is implemented via
// conventions on FailureDetail and its submessage types, as follows.
//
// *** FailureDetail field numbers
//
// Field numbers 1 through 100 (inclusive) are reserved for generally applicable
// values. Any number of these fields may be set on a FailureDetail message.
//
// Field numbers 101 through 10,000 (inclusive) are reserved for use inside the
// "oneof" structure. Only one of these values should be set on a FailureDetail
// message.
//
// Additional fields numbers are unlikely to be needed, but, for extreme future-
// proofing purposes, field numbers 10,001 through 1,000,000 (inclusive;
// excluding protobuf's reserved range 19000 through 19999) are reserved for
// additional generally applicable values.
//
// *** FailureDetail's "oneof" submessages
//
// Each field in the "oneof" structure is a submessage corresponding to a
// category of failure.
//
// In each of these submessage types, field number 1 is an enum whose values
// correspond to a subcategory of the failure. Generally, the enum's constant
// which maps to 0 should be interpreted as "unspecified", though this is not
// required.
//
// *** Recommended forward compatibility strategy
//
// The recommended forward compatibility strategy is to reduce a FailureDetail
// message to a pair of integers.
//
// The first integer corresponds to the field number of the submessage set
// inside FailureDetail's "oneof", which corresponds with the failure's
// category.
//
// The second integer corresponds to the value of the enum at field number 1
// within that submessage, which corresponds with the failure's subcategory.
//
// WARNING: This functionality is experimental and should not be relied on at
// this time.
// TODO(mschaller): remove experimental warning
type FailureDetail struct {
	// A short human-readable message describing the failure, for debugging.
	//
	// This value is *not* intended to be used algorithmically.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Types that are valid to be assigned to Category:
	//
	//	*FailureDetail_Interrupted
	//	*FailureDetail_ExternalRepository
	//	*FailureDetail_BuildProgress
	//	*FailureDetail_RemoteOptions
	//	*FailureDetail_ClientEnvironment
	//	*FailureDetail_Crash
	//	*FailureDetail_SymlinkForest
	//	*FailureDetail_PackageOptions
	//	*FailureDetail_RemoteExecution
	//	*FailureDetail_Execution
	//	*FailureDetail_Workspaces
	//	*FailureDetail_CrashOptions
	//	*FailureDetail_Filesystem
	//	*FailureDetail_ExecutionOptions
	//	*FailureDetail_Command
	//	*FailureDetail_Spawn
	//	*FailureDetail_GrpcServer
	//	*FailureDetail_CanonicalizeFlags
	//	*FailureDetail_BuildConfiguration
	//	*FailureDetail_InfoCommand
	//	*FailureDetail_MemoryOptions
	//	*FailureDetail_Query
	//	*FailureDetail_LocalExecution
	//	*FailureDetail_ActionCache
	//	*FailureDetail_FetchCommand
	//	*FailureDetail_SyncCommand
	//	*FailureDetail_Sandbox
	//	*FailureDetail_IncludeScanning
	//	*FailureDetail_TestCommand
	//	*FailureDetail_ActionQuery
	//	*FailureDetail_TargetPatterns
	//	*FailureDetail_CleanCommand
	//	*FailureDetail_ConfigCommand
	//	*FailureDetail_ConfigurableQuery
	//	*FailureDetail_DumpCommand
	//	*FailureDetail_HelpCommand
	//	*FailureDetail_MobileInstall
	//	*FailureDetail_ProfileCommand
	//	*FailureDetail_RunCommand
	//	*FailureDetail_VersionCommand
	//	*FailureDetail_PrintActionCommand
	//	*FailureDetail_WorkspaceStatus
	//	*FailureDetail_JavaCompile
	//	*FailureDetail_ActionRewinding
	//	*FailureDetail_CppCompile
	//	*FailureDetail_StarlarkAction
	//	*FailureDetail_NinjaAction
	//	*FailureDetail_DynamicExecution
	//	*FailureDetail_FailAction
	//	*FailureDetail_SymlinkAction
	//	*FailureDetail_CppLink
	//	*FailureDetail_LtoAction
	//	*FailureDetail_TestAction
	//	*FailureDetail_Worker
	//	*FailureDetail_Analysis
	//	*FailureDetail_PackageLoading
	//	*FailureDetail_Toolchain
	//	*FailureDetail_StarlarkLoading
	//	*FailureDetail_ExternalDeps
	//	*FailureDetail_DiffAwareness
	//	*FailureDetail_ModqueryCommand
	Category isFailureDetail_Category `protobuf_oneof:"category"`
}

func (m *FailureDetail) Reset()         { *m = FailureDetail{} }
func (m *FailureDetail) String() string { return proto.CompactTextString(m) }
func (*FailureDetail) ProtoMessage()    {}
func (*FailureDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{1}
}
func (m *FailureDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FailureDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FailureDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailureDetail.Merge(m, src)
}
func (m *FailureDetail) XXX_Size() int {
	return m.Size()
}
func (m *FailureDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_FailureDetail.DiscardUnknown(m)
}

var xxx_messageInfo_FailureDetail proto.InternalMessageInfo

type isFailureDetail_Category interface {
	isFailureDetail_Category()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FailureDetail_Interrupted struct {
	Interrupted *Interrupted `protobuf:"bytes,101,opt,name=interrupted,proto3,oneof" json:"interrupted,omitempty"`
}
type FailureDetail_ExternalRepository struct {
	ExternalRepository *ExternalRepository `protobuf:"bytes,103,opt,name=external_repository,json=externalRepository,proto3,oneof" json:"external_repository,omitempty"`
}
type FailureDetail_BuildProgress struct {
	BuildProgress *BuildProgress `protobuf:"bytes,104,opt,name=build_progress,json=buildProgress,proto3,oneof" json:"build_progress,omitempty"`
}
type FailureDetail_RemoteOptions struct {
	RemoteOptions *RemoteOptions `protobuf:"bytes,106,opt,name=remote_options,json=remoteOptions,proto3,oneof" json:"remote_options,omitempty"`
}
type FailureDetail_ClientEnvironment struct {
	ClientEnvironment *ClientEnvironment `protobuf:"bytes,107,opt,name=client_environment,json=clientEnvironment,proto3,oneof" json:"client_environment,omitempty"`
}
type FailureDetail_Crash struct {
	Crash *Crash `protobuf:"bytes,108,opt,name=crash,proto3,oneof" json:"crash,omitempty"`
}
type FailureDetail_SymlinkForest struct {
	SymlinkForest *SymlinkForest `protobuf:"bytes,110,opt,name=symlink_forest,json=symlinkForest,proto3,oneof" json:"symlink_forest,omitempty"`
}
type FailureDetail_PackageOptions struct {
	PackageOptions *PackageOptions `protobuf:"bytes,114,opt,name=package_options,json=packageOptions,proto3,oneof" json:"package_options,omitempty"`
}
type FailureDetail_RemoteExecution struct {
	RemoteExecution *RemoteExecution `protobuf:"bytes,115,opt,name=remote_execution,json=remoteExecution,proto3,oneof" json:"remote_execution,omitempty"`
}
type FailureDetail_Execution struct {
	Execution *Execution `protobuf:"bytes,116,opt,name=execution,proto3,oneof" json:"execution,omitempty"`
}
type FailureDetail_Workspaces struct {
	Workspaces *Workspaces `protobuf:"bytes,117,opt,name=workspaces,proto3,oneof" json:"workspaces,omitempty"`
}
type FailureDetail_CrashOptions struct {
	CrashOptions *CrashOptions `protobuf:"bytes,118,opt,name=crash_options,json=crashOptions,proto3,oneof" json:"crash_options,omitempty"`
}
type FailureDetail_Filesystem struct {
	Filesystem *Filesystem `protobuf:"bytes,119,opt,name=filesystem,proto3,oneof" json:"filesystem,omitempty"`
}
type FailureDetail_ExecutionOptions struct {
	ExecutionOptions *ExecutionOptions `protobuf:"bytes,121,opt,name=execution_options,json=executionOptions,proto3,oneof" json:"execution_options,omitempty"`
}
type FailureDetail_Command struct {
	Command *Command `protobuf:"bytes,122,opt,name=command,proto3,oneof" json:"command,omitempty"`
}
type FailureDetail_Spawn struct {
	Spawn *Spawn `protobuf:"bytes,123,opt,name=spawn,proto3,oneof" json:"spawn,omitempty"`
}
type FailureDetail_GrpcServer struct {
	GrpcServer *GrpcServer `protobuf:"bytes,124,opt,name=grpc_server,json=grpcServer,proto3,oneof" json:"grpc_server,omitempty"`
}
type FailureDetail_CanonicalizeFlags struct {
	CanonicalizeFlags *CanonicalizeFlags `protobuf:"bytes,125,opt,name=canonicalize_flags,json=canonicalizeFlags,proto3,oneof" json:"canonicalize_flags,omitempty"`
}
type FailureDetail_BuildConfiguration struct {
	BuildConfiguration *BuildConfiguration `protobuf:"bytes,126,opt,name=build_configuration,json=buildConfiguration,proto3,oneof" json:"build_configuration,omitempty"`
}
type FailureDetail_InfoCommand struct {
	InfoCommand *InfoCommand `protobuf:"bytes,127,opt,name=info_command,json=infoCommand,proto3,oneof" json:"info_command,omitempty"`
}
type FailureDetail_MemoryOptions struct {
	MemoryOptions *MemoryOptions `protobuf:"bytes,129,opt,name=memory_options,json=memoryOptions,proto3,oneof" json:"memory_options,omitempty"`
}
type FailureDetail_Query struct {
	Query *Query `protobuf:"bytes,130,opt,name=query,proto3,oneof" json:"query,omitempty"`
}
type FailureDetail_LocalExecution struct {
	LocalExecution *LocalExecution `protobuf:"bytes,132,opt,name=local_execution,json=localExecution,proto3,oneof" json:"local_execution,omitempty"`
}
type FailureDetail_ActionCache struct {
	ActionCache *ActionCache `protobuf:"bytes,134,opt,name=action_cache,json=actionCache,proto3,oneof" json:"action_cache,omitempty"`
}
type FailureDetail_FetchCommand struct {
	FetchCommand *FetchCommand `protobuf:"bytes,135,opt,name=fetch_command,json=fetchCommand,proto3,oneof" json:"fetch_command,omitempty"`
}
type FailureDetail_SyncCommand struct {
	SyncCommand *SyncCommand `protobuf:"bytes,136,opt,name=sync_command,json=syncCommand,proto3,oneof" json:"sync_command,omitempty"`
}
type FailureDetail_Sandbox struct {
	Sandbox *Sandbox `protobuf:"bytes,137,opt,name=sandbox,proto3,oneof" json:"sandbox,omitempty"`
}
type FailureDetail_IncludeScanning struct {
	IncludeScanning *IncludeScanning `protobuf:"bytes,139,opt,name=include_scanning,json=includeScanning,proto3,oneof" json:"include_scanning,omitempty"`
}
type FailureDetail_TestCommand struct {
	TestCommand *TestCommand `protobuf:"bytes,140,opt,name=test_command,json=testCommand,proto3,oneof" json:"test_command,omitempty"`
}
type FailureDetail_ActionQuery struct {
	ActionQuery *ActionQuery `protobuf:"bytes,141,opt,name=action_query,json=actionQuery,proto3,oneof" json:"action_query,omitempty"`
}
type FailureDetail_TargetPatterns struct {
	TargetPatterns *TargetPatterns `protobuf:"bytes,142,opt,name=target_patterns,json=targetPatterns,proto3,oneof" json:"target_patterns,omitempty"`
}
type FailureDetail_CleanCommand struct {
	CleanCommand *CleanCommand `protobuf:"bytes,144,opt,name=clean_command,json=cleanCommand,proto3,oneof" json:"clean_command,omitempty"`
}
type FailureDetail_ConfigCommand struct {
	ConfigCommand *ConfigCommand `protobuf:"bytes,145,opt,name=config_command,json=configCommand,proto3,oneof" json:"config_command,omitempty"`
}
type FailureDetail_ConfigurableQuery struct {
	ConfigurableQuery *ConfigurableQuery `protobuf:"bytes,146,opt,name=configurable_query,json=configurableQuery,proto3,oneof" json:"configurable_query,omitempty"`
}
type FailureDetail_DumpCommand struct {
	DumpCommand *DumpCommand `protobuf:"bytes,147,opt,name=dump_command,json=dumpCommand,proto3,oneof" json:"dump_command,omitempty"`
}
type FailureDetail_HelpCommand struct {
	HelpCommand *HelpCommand `protobuf:"bytes,148,opt,name=help_command,json=helpCommand,proto3,oneof" json:"help_command,omitempty"`
}
type FailureDetail_MobileInstall struct {
	MobileInstall *MobileInstall `protobuf:"bytes,150,opt,name=mobile_install,json=mobileInstall,proto3,oneof" json:"mobile_install,omitempty"`
}
type FailureDetail_ProfileCommand struct {
	ProfileCommand *ProfileCommand `protobuf:"bytes,151,opt,name=profile_command,json=profileCommand,proto3,oneof" json:"profile_command,omitempty"`
}
type FailureDetail_RunCommand struct {
	RunCommand *RunCommand `protobuf:"bytes,152,opt,name=run_command,json=runCommand,proto3,oneof" json:"run_command,omitempty"`
}
type FailureDetail_VersionCommand struct {
	VersionCommand *VersionCommand `protobuf:"bytes,153,opt,name=version_command,json=versionCommand,proto3,oneof" json:"version_command,omitempty"`
}
type FailureDetail_PrintActionCommand struct {
	PrintActionCommand *PrintActionCommand `protobuf:"bytes,154,opt,name=print_action_command,json=printActionCommand,proto3,oneof" json:"print_action_command,omitempty"`
}
type FailureDetail_WorkspaceStatus struct {
	WorkspaceStatus *WorkspaceStatus `protobuf:"bytes,158,opt,name=workspace_status,json=workspaceStatus,proto3,oneof" json:"workspace_status,omitempty"`
}
type FailureDetail_JavaCompile struct {
	JavaCompile *JavaCompile `protobuf:"bytes,159,opt,name=java_compile,json=javaCompile,proto3,oneof" json:"java_compile,omitempty"`
}
type FailureDetail_ActionRewinding struct {
	ActionRewinding *ActionRewinding `protobuf:"bytes,160,opt,name=action_rewinding,json=actionRewinding,proto3,oneof" json:"action_rewinding,omitempty"`
}
type FailureDetail_CppCompile struct {
	CppCompile *CppCompile `protobuf:"bytes,161,opt,name=cpp_compile,json=cppCompile,proto3,oneof" json:"cpp_compile,omitempty"`
}
type FailureDetail_StarlarkAction struct {
	StarlarkAction *StarlarkAction `protobuf:"bytes,162,opt,name=starlark_action,json=starlarkAction,proto3,oneof" json:"starlark_action,omitempty"`
}
type FailureDetail_NinjaAction struct {
	NinjaAction *NinjaAction `protobuf:"bytes,163,opt,name=ninja_action,json=ninjaAction,proto3,oneof" json:"ninja_action,omitempty"`
}
type FailureDetail_DynamicExecution struct {
	DynamicExecution *DynamicExecution `protobuf:"bytes,164,opt,name=dynamic_execution,json=dynamicExecution,proto3,oneof" json:"dynamic_execution,omitempty"`
}
type FailureDetail_FailAction struct {
	FailAction *FailAction `protobuf:"bytes,166,opt,name=fail_action,json=failAction,proto3,oneof" json:"fail_action,omitempty"`
}
type FailureDetail_SymlinkAction struct {
	SymlinkAction *SymlinkAction `protobuf:"bytes,167,opt,name=symlink_action,json=symlinkAction,proto3,oneof" json:"symlink_action,omitempty"`
}
type FailureDetail_CppLink struct {
	CppLink *CppLink `protobuf:"bytes,168,opt,name=cpp_link,json=cppLink,proto3,oneof" json:"cpp_link,omitempty"`
}
type FailureDetail_LtoAction struct {
	LtoAction *LtoAction `protobuf:"bytes,169,opt,name=lto_action,json=ltoAction,proto3,oneof" json:"lto_action,omitempty"`
}
type FailureDetail_TestAction struct {
	TestAction *TestAction `protobuf:"bytes,172,opt,name=test_action,json=testAction,proto3,oneof" json:"test_action,omitempty"`
}
type FailureDetail_Worker struct {
	Worker *Worker `protobuf:"bytes,173,opt,name=worker,proto3,oneof" json:"worker,omitempty"`
}
type FailureDetail_Analysis struct {
	Analysis *Analysis `protobuf:"bytes,174,opt,name=analysis,proto3,oneof" json:"analysis,omitempty"`
}
type FailureDetail_PackageLoading struct {
	PackageLoading *PackageLoading `protobuf:"bytes,175,opt,name=package_loading,json=packageLoading,proto3,oneof" json:"package_loading,omitempty"`
}
type FailureDetail_Toolchain struct {
	Toolchain *Toolchain `protobuf:"bytes,177,opt,name=toolchain,proto3,oneof" json:"toolchain,omitempty"`
}
type FailureDetail_StarlarkLoading struct {
	StarlarkLoading *StarlarkLoading `protobuf:"bytes,179,opt,name=starlark_loading,json=starlarkLoading,proto3,oneof" json:"starlark_loading,omitempty"`
}
type FailureDetail_ExternalDeps struct {
	ExternalDeps *ExternalDeps `protobuf:"bytes,181,opt,name=external_deps,json=externalDeps,proto3,oneof" json:"external_deps,omitempty"`
}
type FailureDetail_DiffAwareness struct {
	DiffAwareness *DiffAwareness `protobuf:"bytes,182,opt,name=diff_awareness,json=diffAwareness,proto3,oneof" json:"diff_awareness,omitempty"`
}
type FailureDetail_ModqueryCommand struct {
	ModqueryCommand *ModqueryCommand `protobuf:"bytes,183,opt,name=modquery_command,json=modqueryCommand,proto3,oneof" json:"modquery_command,omitempty"`
}

func (*FailureDetail_Interrupted) isFailureDetail_Category()        {}
func (*FailureDetail_ExternalRepository) isFailureDetail_Category() {}
func (*FailureDetail_BuildProgress) isFailureDetail_Category()      {}
func (*FailureDetail_RemoteOptions) isFailureDetail_Category()      {}
func (*FailureDetail_ClientEnvironment) isFailureDetail_Category()  {}
func (*FailureDetail_Crash) isFailureDetail_Category()              {}
func (*FailureDetail_SymlinkForest) isFailureDetail_Category()      {}
func (*FailureDetail_PackageOptions) isFailureDetail_Category()     {}
func (*FailureDetail_RemoteExecution) isFailureDetail_Category()    {}
func (*FailureDetail_Execution) isFailureDetail_Category()          {}
func (*FailureDetail_Workspaces) isFailureDetail_Category()         {}
func (*FailureDetail_CrashOptions) isFailureDetail_Category()       {}
func (*FailureDetail_Filesystem) isFailureDetail_Category()         {}
func (*FailureDetail_ExecutionOptions) isFailureDetail_Category()   {}
func (*FailureDetail_Command) isFailureDetail_Category()            {}
func (*FailureDetail_Spawn) isFailureDetail_Category()              {}
func (*FailureDetail_GrpcServer) isFailureDetail_Category()         {}
func (*FailureDetail_CanonicalizeFlags) isFailureDetail_Category()  {}
func (*FailureDetail_BuildConfiguration) isFailureDetail_Category() {}
func (*FailureDetail_InfoCommand) isFailureDetail_Category()        {}
func (*FailureDetail_MemoryOptions) isFailureDetail_Category()      {}
func (*FailureDetail_Query) isFailureDetail_Category()              {}
func (*FailureDetail_LocalExecution) isFailureDetail_Category()     {}
func (*FailureDetail_ActionCache) isFailureDetail_Category()        {}
func (*FailureDetail_FetchCommand) isFailureDetail_Category()       {}
func (*FailureDetail_SyncCommand) isFailureDetail_Category()        {}
func (*FailureDetail_Sandbox) isFailureDetail_Category()            {}
func (*FailureDetail_IncludeScanning) isFailureDetail_Category()    {}
func (*FailureDetail_TestCommand) isFailureDetail_Category()        {}
func (*FailureDetail_ActionQuery) isFailureDetail_Category()        {}
func (*FailureDetail_TargetPatterns) isFailureDetail_Category()     {}
func (*FailureDetail_CleanCommand) isFailureDetail_Category()       {}
func (*FailureDetail_ConfigCommand) isFailureDetail_Category()      {}
func (*FailureDetail_ConfigurableQuery) isFailureDetail_Category()  {}
func (*FailureDetail_DumpCommand) isFailureDetail_Category()        {}
func (*FailureDetail_HelpCommand) isFailureDetail_Category()        {}
func (*FailureDetail_MobileInstall) isFailureDetail_Category()      {}
func (*FailureDetail_ProfileCommand) isFailureDetail_Category()     {}
func (*FailureDetail_RunCommand) isFailureDetail_Category()         {}
func (*FailureDetail_VersionCommand) isFailureDetail_Category()     {}
func (*FailureDetail_PrintActionCommand) isFailureDetail_Category() {}
func (*FailureDetail_WorkspaceStatus) isFailureDetail_Category()    {}
func (*FailureDetail_JavaCompile) isFailureDetail_Category()        {}
func (*FailureDetail_ActionRewinding) isFailureDetail_Category()    {}
func (*FailureDetail_CppCompile) isFailureDetail_Category()         {}
func (*FailureDetail_StarlarkAction) isFailureDetail_Category()     {}
func (*FailureDetail_NinjaAction) isFailureDetail_Category()        {}
func (*FailureDetail_DynamicExecution) isFailureDetail_Category()   {}
func (*FailureDetail_FailAction) isFailureDetail_Category()         {}
func (*FailureDetail_SymlinkAction) isFailureDetail_Category()      {}
func (*FailureDetail_CppLink) isFailureDetail_Category()            {}
func (*FailureDetail_LtoAction) isFailureDetail_Category()          {}
func (*FailureDetail_TestAction) isFailureDetail_Category()         {}
func (*FailureDetail_Worker) isFailureDetail_Category()             {}
func (*FailureDetail_Analysis) isFailureDetail_Category()           {}
func (*FailureDetail_PackageLoading) isFailureDetail_Category()     {}
func (*FailureDetail_Toolchain) isFailureDetail_Category()          {}
func (*FailureDetail_StarlarkLoading) isFailureDetail_Category()    {}
func (*FailureDetail_ExternalDeps) isFailureDetail_Category()       {}
func (*FailureDetail_DiffAwareness) isFailureDetail_Category()      {}
func (*FailureDetail_ModqueryCommand) isFailureDetail_Category()    {}

func (m *FailureDetail) GetCategory() isFailureDetail_Category {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *FailureDetail) GetInterrupted() *Interrupted {
	if x, ok := m.GetCategory().(*FailureDetail_Interrupted); ok {
		return x.Interrupted
	}
	return nil
}

func (m *FailureDetail) GetExternalRepository() *ExternalRepository {
	if x, ok := m.GetCategory().(*FailureDetail_ExternalRepository); ok {
		return x.ExternalRepository
	}
	return nil
}

func (m *FailureDetail) GetBuildProgress() *BuildProgress {
	if x, ok := m.GetCategory().(*FailureDetail_BuildProgress); ok {
		return x.BuildProgress
	}
	return nil
}

func (m *FailureDetail) GetRemoteOptions() *RemoteOptions {
	if x, ok := m.GetCategory().(*FailureDetail_RemoteOptions); ok {
		return x.RemoteOptions
	}
	return nil
}

func (m *FailureDetail) GetClientEnvironment() *ClientEnvironment {
	if x, ok := m.GetCategory().(*FailureDetail_ClientEnvironment); ok {
		return x.ClientEnvironment
	}
	return nil
}

func (m *FailureDetail) GetCrash() *Crash {
	if x, ok := m.GetCategory().(*FailureDetail_Crash); ok {
		return x.Crash
	}
	return nil
}

func (m *FailureDetail) GetSymlinkForest() *SymlinkForest {
	if x, ok := m.GetCategory().(*FailureDetail_SymlinkForest); ok {
		return x.SymlinkForest
	}
	return nil
}

func (m *FailureDetail) GetPackageOptions() *PackageOptions {
	if x, ok := m.GetCategory().(*FailureDetail_PackageOptions); ok {
		return x.PackageOptions
	}
	return nil
}

func (m *FailureDetail) GetRemoteExecution() *RemoteExecution {
	if x, ok := m.GetCategory().(*FailureDetail_RemoteExecution); ok {
		return x.RemoteExecution
	}
	return nil
}

func (m *FailureDetail) GetExecution() *Execution {
	if x, ok := m.GetCategory().(*FailureDetail_Execution); ok {
		return x.Execution
	}
	return nil
}

func (m *FailureDetail) GetWorkspaces() *Workspaces {
	if x, ok := m.GetCategory().(*FailureDetail_Workspaces); ok {
		return x.Workspaces
	}
	return nil
}

func (m *FailureDetail) GetCrashOptions() *CrashOptions {
	if x, ok := m.GetCategory().(*FailureDetail_CrashOptions); ok {
		return x.CrashOptions
	}
	return nil
}

func (m *FailureDetail) GetFilesystem() *Filesystem {
	if x, ok := m.GetCategory().(*FailureDetail_Filesystem); ok {
		return x.Filesystem
	}
	return nil
}

func (m *FailureDetail) GetExecutionOptions() *ExecutionOptions {
	if x, ok := m.GetCategory().(*FailureDetail_ExecutionOptions); ok {
		return x.ExecutionOptions
	}
	return nil
}

func (m *FailureDetail) GetCommand() *Command {
	if x, ok := m.GetCategory().(*FailureDetail_Command); ok {
		return x.Command
	}
	return nil
}

func (m *FailureDetail) GetSpawn() *Spawn {
	if x, ok := m.GetCategory().(*FailureDetail_Spawn); ok {
		return x.Spawn
	}
	return nil
}

func (m *FailureDetail) GetGrpcServer() *GrpcServer {
	if x, ok := m.GetCategory().(*FailureDetail_GrpcServer); ok {
		return x.GrpcServer
	}
	return nil
}

func (m *FailureDetail) GetCanonicalizeFlags() *CanonicalizeFlags {
	if x, ok := m.GetCategory().(*FailureDetail_CanonicalizeFlags); ok {
		return x.CanonicalizeFlags
	}
	return nil
}

func (m *FailureDetail) GetBuildConfiguration() *BuildConfiguration {
	if x, ok := m.GetCategory().(*FailureDetail_BuildConfiguration); ok {
		return x.BuildConfiguration
	}
	return nil
}

func (m *FailureDetail) GetInfoCommand() *InfoCommand {
	if x, ok := m.GetCategory().(*FailureDetail_InfoCommand); ok {
		return x.InfoCommand
	}
	return nil
}

func (m *FailureDetail) GetMemoryOptions() *MemoryOptions {
	if x, ok := m.GetCategory().(*FailureDetail_MemoryOptions); ok {
		return x.MemoryOptions
	}
	return nil
}

func (m *FailureDetail) GetQuery() *Query {
	if x, ok := m.GetCategory().(*FailureDetail_Query); ok {
		return x.Query
	}
	return nil
}

func (m *FailureDetail) GetLocalExecution() *LocalExecution {
	if x, ok := m.GetCategory().(*FailureDetail_LocalExecution); ok {
		return x.LocalExecution
	}
	return nil
}

func (m *FailureDetail) GetActionCache() *ActionCache {
	if x, ok := m.GetCategory().(*FailureDetail_ActionCache); ok {
		return x.ActionCache
	}
	return nil
}

func (m *FailureDetail) GetFetchCommand() *FetchCommand {
	if x, ok := m.GetCategory().(*FailureDetail_FetchCommand); ok {
		return x.FetchCommand
	}
	return nil
}

func (m *FailureDetail) GetSyncCommand() *SyncCommand {
	if x, ok := m.GetCategory().(*FailureDetail_SyncCommand); ok {
		return x.SyncCommand
	}
	return nil
}

func (m *FailureDetail) GetSandbox() *Sandbox {
	if x, ok := m.GetCategory().(*FailureDetail_Sandbox); ok {
		return x.Sandbox
	}
	return nil
}

func (m *FailureDetail) GetIncludeScanning() *IncludeScanning {
	if x, ok := m.GetCategory().(*FailureDetail_IncludeScanning); ok {
		return x.IncludeScanning
	}
	return nil
}

func (m *FailureDetail) GetTestCommand() *TestCommand {
	if x, ok := m.GetCategory().(*FailureDetail_TestCommand); ok {
		return x.TestCommand
	}
	return nil
}

func (m *FailureDetail) GetActionQuery() *ActionQuery {
	if x, ok := m.GetCategory().(*FailureDetail_ActionQuery); ok {
		return x.ActionQuery
	}
	return nil
}

func (m *FailureDetail) GetTargetPatterns() *TargetPatterns {
	if x, ok := m.GetCategory().(*FailureDetail_TargetPatterns); ok {
		return x.TargetPatterns
	}
	return nil
}

func (m *FailureDetail) GetCleanCommand() *CleanCommand {
	if x, ok := m.GetCategory().(*FailureDetail_CleanCommand); ok {
		return x.CleanCommand
	}
	return nil
}

func (m *FailureDetail) GetConfigCommand() *ConfigCommand {
	if x, ok := m.GetCategory().(*FailureDetail_ConfigCommand); ok {
		return x.ConfigCommand
	}
	return nil
}

func (m *FailureDetail) GetConfigurableQuery() *ConfigurableQuery {
	if x, ok := m.GetCategory().(*FailureDetail_ConfigurableQuery); ok {
		return x.ConfigurableQuery
	}
	return nil
}

func (m *FailureDetail) GetDumpCommand() *DumpCommand {
	if x, ok := m.GetCategory().(*FailureDetail_DumpCommand); ok {
		return x.DumpCommand
	}
	return nil
}

func (m *FailureDetail) GetHelpCommand() *HelpCommand {
	if x, ok := m.GetCategory().(*FailureDetail_HelpCommand); ok {
		return x.HelpCommand
	}
	return nil
}

func (m *FailureDetail) GetMobileInstall() *MobileInstall {
	if x, ok := m.GetCategory().(*FailureDetail_MobileInstall); ok {
		return x.MobileInstall
	}
	return nil
}

func (m *FailureDetail) GetProfileCommand() *ProfileCommand {
	if x, ok := m.GetCategory().(*FailureDetail_ProfileCommand); ok {
		return x.ProfileCommand
	}
	return nil
}

func (m *FailureDetail) GetRunCommand() *RunCommand {
	if x, ok := m.GetCategory().(*FailureDetail_RunCommand); ok {
		return x.RunCommand
	}
	return nil
}

func (m *FailureDetail) GetVersionCommand() *VersionCommand {
	if x, ok := m.GetCategory().(*FailureDetail_VersionCommand); ok {
		return x.VersionCommand
	}
	return nil
}

func (m *FailureDetail) GetPrintActionCommand() *PrintActionCommand {
	if x, ok := m.GetCategory().(*FailureDetail_PrintActionCommand); ok {
		return x.PrintActionCommand
	}
	return nil
}

func (m *FailureDetail) GetWorkspaceStatus() *WorkspaceStatus {
	if x, ok := m.GetCategory().(*FailureDetail_WorkspaceStatus); ok {
		return x.WorkspaceStatus
	}
	return nil
}

func (m *FailureDetail) GetJavaCompile() *JavaCompile {
	if x, ok := m.GetCategory().(*FailureDetail_JavaCompile); ok {
		return x.JavaCompile
	}
	return nil
}

func (m *FailureDetail) GetActionRewinding() *ActionRewinding {
	if x, ok := m.GetCategory().(*FailureDetail_ActionRewinding); ok {
		return x.ActionRewinding
	}
	return nil
}

func (m *FailureDetail) GetCppCompile() *CppCompile {
	if x, ok := m.GetCategory().(*FailureDetail_CppCompile); ok {
		return x.CppCompile
	}
	return nil
}

func (m *FailureDetail) GetStarlarkAction() *StarlarkAction {
	if x, ok := m.GetCategory().(*FailureDetail_StarlarkAction); ok {
		return x.StarlarkAction
	}
	return nil
}

func (m *FailureDetail) GetNinjaAction() *NinjaAction {
	if x, ok := m.GetCategory().(*FailureDetail_NinjaAction); ok {
		return x.NinjaAction
	}
	return nil
}

func (m *FailureDetail) GetDynamicExecution() *DynamicExecution {
	if x, ok := m.GetCategory().(*FailureDetail_DynamicExecution); ok {
		return x.DynamicExecution
	}
	return nil
}

func (m *FailureDetail) GetFailAction() *FailAction {
	if x, ok := m.GetCategory().(*FailureDetail_FailAction); ok {
		return x.FailAction
	}
	return nil
}

func (m *FailureDetail) GetSymlinkAction() *SymlinkAction {
	if x, ok := m.GetCategory().(*FailureDetail_SymlinkAction); ok {
		return x.SymlinkAction
	}
	return nil
}

func (m *FailureDetail) GetCppLink() *CppLink {
	if x, ok := m.GetCategory().(*FailureDetail_CppLink); ok {
		return x.CppLink
	}
	return nil
}

func (m *FailureDetail) GetLtoAction() *LtoAction {
	if x, ok := m.GetCategory().(*FailureDetail_LtoAction); ok {
		return x.LtoAction
	}
	return nil
}

func (m *FailureDetail) GetTestAction() *TestAction {
	if x, ok := m.GetCategory().(*FailureDetail_TestAction); ok {
		return x.TestAction
	}
	return nil
}

func (m *FailureDetail) GetWorker() *Worker {
	if x, ok := m.GetCategory().(*FailureDetail_Worker); ok {
		return x.Worker
	}
	return nil
}

func (m *FailureDetail) GetAnalysis() *Analysis {
	if x, ok := m.GetCategory().(*FailureDetail_Analysis); ok {
		return x.Analysis
	}
	return nil
}

func (m *FailureDetail) GetPackageLoading() *PackageLoading {
	if x, ok := m.GetCategory().(*FailureDetail_PackageLoading); ok {
		return x.PackageLoading
	}
	return nil
}

func (m *FailureDetail) GetToolchain() *Toolchain {
	if x, ok := m.GetCategory().(*FailureDetail_Toolchain); ok {
		return x.Toolchain
	}
	return nil
}

func (m *FailureDetail) GetStarlarkLoading() *StarlarkLoading {
	if x, ok := m.GetCategory().(*FailureDetail_StarlarkLoading); ok {
		return x.StarlarkLoading
	}
	return nil
}

func (m *FailureDetail) GetExternalDeps() *ExternalDeps {
	if x, ok := m.GetCategory().(*FailureDetail_ExternalDeps); ok {
		return x.ExternalDeps
	}
	return nil
}

func (m *FailureDetail) GetDiffAwareness() *DiffAwareness {
	if x, ok := m.GetCategory().(*FailureDetail_DiffAwareness); ok {
		return x.DiffAwareness
	}
	return nil
}

func (m *FailureDetail) GetModqueryCommand() *ModqueryCommand {
	if x, ok := m.GetCategory().(*FailureDetail_ModqueryCommand); ok {
		return x.ModqueryCommand
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FailureDetail) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FailureDetail_Interrupted)(nil),
		(*FailureDetail_ExternalRepository)(nil),
		(*FailureDetail_BuildProgress)(nil),
		(*FailureDetail_RemoteOptions)(nil),
		(*FailureDetail_ClientEnvironment)(nil),
		(*FailureDetail_Crash)(nil),
		(*FailureDetail_SymlinkForest)(nil),
		(*FailureDetail_PackageOptions)(nil),
		(*FailureDetail_RemoteExecution)(nil),
		(*FailureDetail_Execution)(nil),
		(*FailureDetail_Workspaces)(nil),
		(*FailureDetail_CrashOptions)(nil),
		(*FailureDetail_Filesystem)(nil),
		(*FailureDetail_ExecutionOptions)(nil),
		(*FailureDetail_Command)(nil),
		(*FailureDetail_Spawn)(nil),
		(*FailureDetail_GrpcServer)(nil),
		(*FailureDetail_CanonicalizeFlags)(nil),
		(*FailureDetail_BuildConfiguration)(nil),
		(*FailureDetail_InfoCommand)(nil),
		(*FailureDetail_MemoryOptions)(nil),
		(*FailureDetail_Query)(nil),
		(*FailureDetail_LocalExecution)(nil),
		(*FailureDetail_ActionCache)(nil),
		(*FailureDetail_FetchCommand)(nil),
		(*FailureDetail_SyncCommand)(nil),
		(*FailureDetail_Sandbox)(nil),
		(*FailureDetail_IncludeScanning)(nil),
		(*FailureDetail_TestCommand)(nil),
		(*FailureDetail_ActionQuery)(nil),
		(*FailureDetail_TargetPatterns)(nil),
		(*FailureDetail_CleanCommand)(nil),
		(*FailureDetail_ConfigCommand)(nil),
		(*FailureDetail_ConfigurableQuery)(nil),
		(*FailureDetail_DumpCommand)(nil),
		(*FailureDetail_HelpCommand)(nil),
		(*FailureDetail_MobileInstall)(nil),
		(*FailureDetail_ProfileCommand)(nil),
		(*FailureDetail_RunCommand)(nil),
		(*FailureDetail_VersionCommand)(nil),
		(*FailureDetail_PrintActionCommand)(nil),
		(*FailureDetail_WorkspaceStatus)(nil),
		(*FailureDetail_JavaCompile)(nil),
		(*FailureDetail_ActionRewinding)(nil),
		(*FailureDetail_CppCompile)(nil),
		(*FailureDetail_StarlarkAction)(nil),
		(*FailureDetail_NinjaAction)(nil),
		(*FailureDetail_DynamicExecution)(nil),
		(*FailureDetail_FailAction)(nil),
		(*FailureDetail_SymlinkAction)(nil),
		(*FailureDetail_CppLink)(nil),
		(*FailureDetail_LtoAction)(nil),
		(*FailureDetail_TestAction)(nil),
		(*FailureDetail_Worker)(nil),
		(*FailureDetail_Analysis)(nil),
		(*FailureDetail_PackageLoading)(nil),
		(*FailureDetail_Toolchain)(nil),
		(*FailureDetail_StarlarkLoading)(nil),
		(*FailureDetail_ExternalDeps)(nil),
		(*FailureDetail_DiffAwareness)(nil),
		(*FailureDetail_ModqueryCommand)(nil),
	}
}

type Interrupted struct {
	Code Interrupted_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Interrupted_Code" json:"code,omitempty"`
}

func (m *Interrupted) Reset()         { *m = Interrupted{} }
func (m *Interrupted) String() string { return proto.CompactTextString(m) }
func (*Interrupted) ProtoMessage()    {}
func (*Interrupted) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{2}
}
func (m *Interrupted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Interrupted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Interrupted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interrupted.Merge(m, src)
}
func (m *Interrupted) XXX_Size() int {
	return m.Size()
}
func (m *Interrupted) XXX_DiscardUnknown() {
	xxx_messageInfo_Interrupted.DiscardUnknown(m)
}

var xxx_messageInfo_Interrupted proto.InternalMessageInfo

type Spawn struct {
	Code Spawn_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Spawn_Code" json:"code,omitempty"`
	// For Codes describing generic failure to spawn (eg. EXECUTION_FAILED and
	// EXECUTION_DENIED) the `catastrophic` field may be set to true indicating a
	// failure that immediately terminated the entire build tool.
	Catastrophic bool `protobuf:"varint,2,opt,name=catastrophic,proto3" json:"catastrophic,omitempty"`
	// If Code is NON_ZERO_EXIT, the `spawn_exit_code` field may be set to the
	// non-zero exit code returned by the spawned process to the OS.
	//
	// NOTE: This field must not be confused with the build tool's overall
	// exit code.
	SpawnExitCode int32 `protobuf:"varint,3,opt,name=spawn_exit_code,json=spawnExitCode,proto3" json:"spawn_exit_code,omitempty"`
}

func (m *Spawn) Reset()         { *m = Spawn{} }
func (m *Spawn) String() string { return proto.CompactTextString(m) }
func (*Spawn) ProtoMessage()    {}
func (*Spawn) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{3}
}
func (m *Spawn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Spawn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Spawn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Spawn.Merge(m, src)
}
func (m *Spawn) XXX_Size() int {
	return m.Size()
}
func (m *Spawn) XXX_DiscardUnknown() {
	xxx_messageInfo_Spawn.DiscardUnknown(m)
}

var xxx_messageInfo_Spawn proto.InternalMessageInfo

type ExternalRepository struct {
	Code ExternalRepository_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ExternalRepository_Code" json:"code,omitempty"`
}

func (m *ExternalRepository) Reset()         { *m = ExternalRepository{} }
func (m *ExternalRepository) String() string { return proto.CompactTextString(m) }
func (*ExternalRepository) ProtoMessage()    {}
func (*ExternalRepository) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{4}
}
func (m *ExternalRepository) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalRepository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExternalRepository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalRepository.Merge(m, src)
}
func (m *ExternalRepository) XXX_Size() int {
	return m.Size()
}
func (m *ExternalRepository) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalRepository.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalRepository proto.InternalMessageInfo

type BuildProgress struct {
	Code BuildProgress_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.BuildProgress_Code" json:"code,omitempty"`
}

func (m *BuildProgress) Reset()         { *m = BuildProgress{} }
func (m *BuildProgress) String() string { return proto.CompactTextString(m) }
func (*BuildProgress) ProtoMessage()    {}
func (*BuildProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{5}
}
func (m *BuildProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildProgress.Merge(m, src)
}
func (m *BuildProgress) XXX_Size() int {
	return m.Size()
}
func (m *BuildProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildProgress.DiscardUnknown(m)
}

var xxx_messageInfo_BuildProgress proto.InternalMessageInfo

type RemoteOptions struct {
	Code RemoteOptions_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.RemoteOptions_Code" json:"code,omitempty"`
}

func (m *RemoteOptions) Reset()         { *m = RemoteOptions{} }
func (m *RemoteOptions) String() string { return proto.CompactTextString(m) }
func (*RemoteOptions) ProtoMessage()    {}
func (*RemoteOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{6}
}
func (m *RemoteOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoteOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RemoteOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteOptions.Merge(m, src)
}
func (m *RemoteOptions) XXX_Size() int {
	return m.Size()
}
func (m *RemoteOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteOptions proto.InternalMessageInfo

type ClientEnvironment struct {
	Code ClientEnvironment_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ClientEnvironment_Code" json:"code,omitempty"`
}

func (m *ClientEnvironment) Reset()         { *m = ClientEnvironment{} }
func (m *ClientEnvironment) String() string { return proto.CompactTextString(m) }
func (*ClientEnvironment) ProtoMessage()    {}
func (*ClientEnvironment) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{7}
}
func (m *ClientEnvironment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientEnvironment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClientEnvironment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientEnvironment.Merge(m, src)
}
func (m *ClientEnvironment) XXX_Size() int {
	return m.Size()
}
func (m *ClientEnvironment) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientEnvironment.DiscardUnknown(m)
}

var xxx_messageInfo_ClientEnvironment proto.InternalMessageInfo

type Crash struct {
	Code Crash_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Crash_Code" json:"code,omitempty"`
	// The cause chain of the crash, with the outermost throwable first. Limited
	// to the outermost exception and at most 4 nested causes (so, max size of 5).
	Causes []*Throwable `protobuf:"bytes,2,rep,name=causes,proto3" json:"causes,omitempty"`
}

func (m *Crash) Reset()         { *m = Crash{} }
func (m *Crash) String() string { return proto.CompactTextString(m) }
func (*Crash) ProtoMessage()    {}
func (*Crash) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{8}
}
func (m *Crash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Crash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Crash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Crash.Merge(m, src)
}
func (m *Crash) XXX_Size() int {
	return m.Size()
}
func (m *Crash) XXX_DiscardUnknown() {
	xxx_messageInfo_Crash.DiscardUnknown(m)
}

var xxx_messageInfo_Crash proto.InternalMessageInfo

type Throwable struct {
	// The class name of the java.lang.Throwable.
	ThrowableClass string `protobuf:"bytes,1,opt,name=throwable_class,json=throwableClass,proto3" json:"throwable_class,omitempty"`
	// The throwable's message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The result of calling toString on the deepest (i.e. closest to the
	// throwable's construction site) 1000 (or fewer) StackTraceElements.
	// Unstructured to simplify string matching.
	StackTrace []string `protobuf:"bytes,3,rep,name=stack_trace,json=stackTrace,proto3" json:"stack_trace,omitempty"`
}

func (m *Throwable) Reset()         { *m = Throwable{} }
func (m *Throwable) String() string { return proto.CompactTextString(m) }
func (*Throwable) ProtoMessage()    {}
func (*Throwable) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{9}
}
func (m *Throwable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Throwable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Throwable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Throwable.Merge(m, src)
}
func (m *Throwable) XXX_Size() int {
	return m.Size()
}
func (m *Throwable) XXX_DiscardUnknown() {
	xxx_messageInfo_Throwable.DiscardUnknown(m)
}

var xxx_messageInfo_Throwable proto.InternalMessageInfo

type SymlinkForest struct {
	Code SymlinkForest_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.SymlinkForest_Code" json:"code,omitempty"`
}

func (m *SymlinkForest) Reset()         { *m = SymlinkForest{} }
func (m *SymlinkForest) String() string { return proto.CompactTextString(m) }
func (*SymlinkForest) ProtoMessage()    {}
func (*SymlinkForest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{10}
}
func (m *SymlinkForest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SymlinkForest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SymlinkForest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SymlinkForest.Merge(m, src)
}
func (m *SymlinkForest) XXX_Size() int {
	return m.Size()
}
func (m *SymlinkForest) XXX_DiscardUnknown() {
	xxx_messageInfo_SymlinkForest.DiscardUnknown(m)
}

var xxx_messageInfo_SymlinkForest proto.InternalMessageInfo

type PackageOptions struct {
	Code PackageOptions_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.PackageOptions_Code" json:"code,omitempty"`
}

func (m *PackageOptions) Reset()         { *m = PackageOptions{} }
func (m *PackageOptions) String() string { return proto.CompactTextString(m) }
func (*PackageOptions) ProtoMessage()    {}
func (*PackageOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{11}
}
func (m *PackageOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackageOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PackageOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageOptions.Merge(m, src)
}
func (m *PackageOptions) XXX_Size() int {
	return m.Size()
}
func (m *PackageOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageOptions.DiscardUnknown(m)
}

var xxx_messageInfo_PackageOptions proto.InternalMessageInfo

type RemoteExecution struct {
	Code RemoteExecution_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.RemoteExecution_Code" json:"code,omitempty"`
}

func (m *RemoteExecution) Reset()         { *m = RemoteExecution{} }
func (m *RemoteExecution) String() string { return proto.CompactTextString(m) }
func (*RemoteExecution) ProtoMessage()    {}
func (*RemoteExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{12}
}
func (m *RemoteExecution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoteExecution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RemoteExecution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteExecution.Merge(m, src)
}
func (m *RemoteExecution) XXX_Size() int {
	return m.Size()
}
func (m *RemoteExecution) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteExecution.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteExecution proto.InternalMessageInfo

type Execution struct {
	Code Execution_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Execution_Code" json:"code,omitempty"`
}

func (m *Execution) Reset()         { *m = Execution{} }
func (m *Execution) String() string { return proto.CompactTextString(m) }
func (*Execution) ProtoMessage()    {}
func (*Execution) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{13}
}
func (m *Execution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Execution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Execution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Execution.Merge(m, src)
}
func (m *Execution) XXX_Size() int {
	return m.Size()
}
func (m *Execution) XXX_DiscardUnknown() {
	xxx_messageInfo_Execution.DiscardUnknown(m)
}

var xxx_messageInfo_Execution proto.InternalMessageInfo

// Failure details about Bazel's WORKSPACE features.
type Workspaces struct {
	Code Workspaces_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Workspaces_Code" json:"code,omitempty"`
}

func (m *Workspaces) Reset()         { *m = Workspaces{} }
func (m *Workspaces) String() string { return proto.CompactTextString(m) }
func (*Workspaces) ProtoMessage()    {}
func (*Workspaces) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{14}
}
func (m *Workspaces) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Workspaces) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Workspaces) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workspaces.Merge(m, src)
}
func (m *Workspaces) XXX_Size() int {
	return m.Size()
}
func (m *Workspaces) XXX_DiscardUnknown() {
	xxx_messageInfo_Workspaces.DiscardUnknown(m)
}

var xxx_messageInfo_Workspaces proto.InternalMessageInfo

type CrashOptions struct {
	Code CrashOptions_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.CrashOptions_Code" json:"code,omitempty"`
}

func (m *CrashOptions) Reset()         { *m = CrashOptions{} }
func (m *CrashOptions) String() string { return proto.CompactTextString(m) }
func (*CrashOptions) ProtoMessage()    {}
func (*CrashOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{15}
}
func (m *CrashOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrashOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CrashOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrashOptions.Merge(m, src)
}
func (m *CrashOptions) XXX_Size() int {
	return m.Size()
}
func (m *CrashOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CrashOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CrashOptions proto.InternalMessageInfo

type Filesystem struct {
	Code Filesystem_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Filesystem_Code" json:"code,omitempty"`
}

func (m *Filesystem) Reset()         { *m = Filesystem{} }
func (m *Filesystem) String() string { return proto.CompactTextString(m) }
func (*Filesystem) ProtoMessage()    {}
func (*Filesystem) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{16}
}
func (m *Filesystem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Filesystem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Filesystem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filesystem.Merge(m, src)
}
func (m *Filesystem) XXX_Size() int {
	return m.Size()
}
func (m *Filesystem) XXX_DiscardUnknown() {
	xxx_messageInfo_Filesystem.DiscardUnknown(m)
}

var xxx_messageInfo_Filesystem proto.InternalMessageInfo

type ExecutionOptions struct {
	Code ExecutionOptions_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ExecutionOptions_Code" json:"code,omitempty"`
}

func (m *ExecutionOptions) Reset()         { *m = ExecutionOptions{} }
func (m *ExecutionOptions) String() string { return proto.CompactTextString(m) }
func (*ExecutionOptions) ProtoMessage()    {}
func (*ExecutionOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{17}
}
func (m *ExecutionOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExecutionOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionOptions.Merge(m, src)
}
func (m *ExecutionOptions) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionOptions proto.InternalMessageInfo

type Command struct {
	Code Command_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Command_Code" json:"code,omitempty"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{18}
}
func (m *Command) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return m.Size()
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

type GrpcServer struct {
	Code GrpcServer_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.GrpcServer_Code" json:"code,omitempty"`
}

func (m *GrpcServer) Reset()         { *m = GrpcServer{} }
func (m *GrpcServer) String() string { return proto.CompactTextString(m) }
func (*GrpcServer) ProtoMessage()    {}
func (*GrpcServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{19}
}
func (m *GrpcServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrpcServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GrpcServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpcServer.Merge(m, src)
}
func (m *GrpcServer) XXX_Size() int {
	return m.Size()
}
func (m *GrpcServer) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpcServer.DiscardUnknown(m)
}

var xxx_messageInfo_GrpcServer proto.InternalMessageInfo

type CanonicalizeFlags struct {
	Code CanonicalizeFlags_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.CanonicalizeFlags_Code" json:"code,omitempty"`
}

func (m *CanonicalizeFlags) Reset()         { *m = CanonicalizeFlags{} }
func (m *CanonicalizeFlags) String() string { return proto.CompactTextString(m) }
func (*CanonicalizeFlags) ProtoMessage()    {}
func (*CanonicalizeFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{20}
}
func (m *CanonicalizeFlags) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanonicalizeFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CanonicalizeFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanonicalizeFlags.Merge(m, src)
}
func (m *CanonicalizeFlags) XXX_Size() int {
	return m.Size()
}
func (m *CanonicalizeFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_CanonicalizeFlags.DiscardUnknown(m)
}

var xxx_messageInfo_CanonicalizeFlags proto.InternalMessageInfo

// Failure modes described by this category pertain to the Bazel invocation
// configuration consumed by Bazel's analysis phase. This category is not
// intended as a grab-bag for all Bazel flag value constraint violations, which
// instead generally belong in the category for the subsystem whose flag values
// participate in the constraint.
type BuildConfiguration struct {
	Code BuildConfiguration_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.BuildConfiguration_Code" json:"code,omitempty"`
}

func (m *BuildConfiguration) Reset()         { *m = BuildConfiguration{} }
func (m *BuildConfiguration) String() string { return proto.CompactTextString(m) }
func (*BuildConfiguration) ProtoMessage()    {}
func (*BuildConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{21}
}
func (m *BuildConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BuildConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildConfiguration.Merge(m, src)
}
func (m *BuildConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *BuildConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_BuildConfiguration proto.InternalMessageInfo

type InfoCommand struct {
	Code InfoCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.InfoCommand_Code" json:"code,omitempty"`
}

func (m *InfoCommand) Reset()         { *m = InfoCommand{} }
func (m *InfoCommand) String() string { return proto.CompactTextString(m) }
func (*InfoCommand) ProtoMessage()    {}
func (*InfoCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{22}
}
func (m *InfoCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InfoCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoCommand.Merge(m, src)
}
func (m *InfoCommand) XXX_Size() int {
	return m.Size()
}
func (m *InfoCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoCommand.DiscardUnknown(m)
}

var xxx_messageInfo_InfoCommand proto.InternalMessageInfo

type MemoryOptions struct {
	Code MemoryOptions_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.MemoryOptions_Code" json:"code,omitempty"`
}

func (m *MemoryOptions) Reset()         { *m = MemoryOptions{} }
func (m *MemoryOptions) String() string { return proto.CompactTextString(m) }
func (*MemoryOptions) ProtoMessage()    {}
func (*MemoryOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{23}
}
func (m *MemoryOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemoryOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MemoryOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemoryOptions.Merge(m, src)
}
func (m *MemoryOptions) XXX_Size() int {
	return m.Size()
}
func (m *MemoryOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_MemoryOptions.DiscardUnknown(m)
}

var xxx_messageInfo_MemoryOptions proto.InternalMessageInfo

type Query struct {
	Code Query_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Query_Code" json:"code,omitempty"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{24}
}
func (m *Query) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return m.Size()
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

type LocalExecution struct {
	Code LocalExecution_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.LocalExecution_Code" json:"code,omitempty"`
}

func (m *LocalExecution) Reset()         { *m = LocalExecution{} }
func (m *LocalExecution) String() string { return proto.CompactTextString(m) }
func (*LocalExecution) ProtoMessage()    {}
func (*LocalExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{25}
}
func (m *LocalExecution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalExecution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LocalExecution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalExecution.Merge(m, src)
}
func (m *LocalExecution) XXX_Size() int {
	return m.Size()
}
func (m *LocalExecution) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalExecution.DiscardUnknown(m)
}

var xxx_messageInfo_LocalExecution proto.InternalMessageInfo

type ActionCache struct {
	Code ActionCache_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ActionCache_Code" json:"code,omitempty"`
}

func (m *ActionCache) Reset()         { *m = ActionCache{} }
func (m *ActionCache) String() string { return proto.CompactTextString(m) }
func (*ActionCache) ProtoMessage()    {}
func (*ActionCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{26}
}
func (m *ActionCache) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ActionCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionCache.Merge(m, src)
}
func (m *ActionCache) XXX_Size() int {
	return m.Size()
}
func (m *ActionCache) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionCache.DiscardUnknown(m)
}

var xxx_messageInfo_ActionCache proto.InternalMessageInfo

type FetchCommand struct {
	Code FetchCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.FetchCommand_Code" json:"code,omitempty"`
}

func (m *FetchCommand) Reset()         { *m = FetchCommand{} }
func (m *FetchCommand) String() string { return proto.CompactTextString(m) }
func (*FetchCommand) ProtoMessage()    {}
func (*FetchCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{27}
}
func (m *FetchCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FetchCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchCommand.Merge(m, src)
}
func (m *FetchCommand) XXX_Size() int {
	return m.Size()
}
func (m *FetchCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchCommand.DiscardUnknown(m)
}

var xxx_messageInfo_FetchCommand proto.InternalMessageInfo

type SyncCommand struct {
	Code SyncCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.SyncCommand_Code" json:"code,omitempty"`
}

func (m *SyncCommand) Reset()         { *m = SyncCommand{} }
func (m *SyncCommand) String() string { return proto.CompactTextString(m) }
func (*SyncCommand) ProtoMessage()    {}
func (*SyncCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{28}
}
func (m *SyncCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SyncCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncCommand.Merge(m, src)
}
func (m *SyncCommand) XXX_Size() int {
	return m.Size()
}
func (m *SyncCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncCommand.DiscardUnknown(m)
}

var xxx_messageInfo_SyncCommand proto.InternalMessageInfo

type Sandbox struct {
	Code Sandbox_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Sandbox_Code" json:"code,omitempty"`
}

func (m *Sandbox) Reset()         { *m = Sandbox{} }
func (m *Sandbox) String() string { return proto.CompactTextString(m) }
func (*Sandbox) ProtoMessage()    {}
func (*Sandbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{29}
}
func (m *Sandbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sandbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Sandbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sandbox.Merge(m, src)
}
func (m *Sandbox) XXX_Size() int {
	return m.Size()
}
func (m *Sandbox) XXX_DiscardUnknown() {
	xxx_messageInfo_Sandbox.DiscardUnknown(m)
}

var xxx_messageInfo_Sandbox proto.InternalMessageInfo

type IncludeScanning struct {
	Code               IncludeScanning_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.IncludeScanning_Code" json:"code,omitempty"`
	PackageLoadingCode PackageLoading_Code  `protobuf:"varint,2,opt,name=package_loading_code,json=packageLoadingCode,proto3,enum=failure_details.PackageLoading_Code" json:"package_loading_code,omitempty"`
}

func (m *IncludeScanning) Reset()         { *m = IncludeScanning{} }
func (m *IncludeScanning) String() string { return proto.CompactTextString(m) }
func (*IncludeScanning) ProtoMessage()    {}
func (*IncludeScanning) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{30}
}
func (m *IncludeScanning) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncludeScanning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IncludeScanning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncludeScanning.Merge(m, src)
}
func (m *IncludeScanning) XXX_Size() int {
	return m.Size()
}
func (m *IncludeScanning) XXX_DiscardUnknown() {
	xxx_messageInfo_IncludeScanning.DiscardUnknown(m)
}

var xxx_messageInfo_IncludeScanning proto.InternalMessageInfo

type TestCommand struct {
	Code TestCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.TestCommand_Code" json:"code,omitempty"`
}

func (m *TestCommand) Reset()         { *m = TestCommand{} }
func (m *TestCommand) String() string { return proto.CompactTextString(m) }
func (*TestCommand) ProtoMessage()    {}
func (*TestCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{31}
}
func (m *TestCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TestCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestCommand.Merge(m, src)
}
func (m *TestCommand) XXX_Size() int {
	return m.Size()
}
func (m *TestCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_TestCommand.DiscardUnknown(m)
}

var xxx_messageInfo_TestCommand proto.InternalMessageInfo

type ActionQuery struct {
	Code ActionQuery_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ActionQuery_Code" json:"code,omitempty"`
}

func (m *ActionQuery) Reset()         { *m = ActionQuery{} }
func (m *ActionQuery) String() string { return proto.CompactTextString(m) }
func (*ActionQuery) ProtoMessage()    {}
func (*ActionQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{32}
}
func (m *ActionQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ActionQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionQuery.Merge(m, src)
}
func (m *ActionQuery) XXX_Size() int {
	return m.Size()
}
func (m *ActionQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ActionQuery proto.InternalMessageInfo

type TargetPatterns struct {
	Code TargetPatterns_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.TargetPatterns_Code" json:"code,omitempty"`
}

func (m *TargetPatterns) Reset()         { *m = TargetPatterns{} }
func (m *TargetPatterns) String() string { return proto.CompactTextString(m) }
func (*TargetPatterns) ProtoMessage()    {}
func (*TargetPatterns) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{33}
}
func (m *TargetPatterns) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TargetPatterns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TargetPatterns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetPatterns.Merge(m, src)
}
func (m *TargetPatterns) XXX_Size() int {
	return m.Size()
}
func (m *TargetPatterns) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetPatterns.DiscardUnknown(m)
}

var xxx_messageInfo_TargetPatterns proto.InternalMessageInfo

type CleanCommand struct {
	Code CleanCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.CleanCommand_Code" json:"code,omitempty"`
}

func (m *CleanCommand) Reset()         { *m = CleanCommand{} }
func (m *CleanCommand) String() string { return proto.CompactTextString(m) }
func (*CleanCommand) ProtoMessage()    {}
func (*CleanCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{34}
}
func (m *CleanCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CleanCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CleanCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanCommand.Merge(m, src)
}
func (m *CleanCommand) XXX_Size() int {
	return m.Size()
}
func (m *CleanCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanCommand.DiscardUnknown(m)
}

var xxx_messageInfo_CleanCommand proto.InternalMessageInfo

type ConfigCommand struct {
	Code ConfigCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ConfigCommand_Code" json:"code,omitempty"`
}

func (m *ConfigCommand) Reset()         { *m = ConfigCommand{} }
func (m *ConfigCommand) String() string { return proto.CompactTextString(m) }
func (*ConfigCommand) ProtoMessage()    {}
func (*ConfigCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{35}
}
func (m *ConfigCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConfigCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigCommand.Merge(m, src)
}
func (m *ConfigCommand) XXX_Size() int {
	return m.Size()
}
func (m *ConfigCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigCommand.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigCommand proto.InternalMessageInfo

type ConfigurableQuery struct {
	Code ConfigurableQuery_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ConfigurableQuery_Code" json:"code,omitempty"`
}

func (m *ConfigurableQuery) Reset()         { *m = ConfigurableQuery{} }
func (m *ConfigurableQuery) String() string { return proto.CompactTextString(m) }
func (*ConfigurableQuery) ProtoMessage()    {}
func (*ConfigurableQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{36}
}
func (m *ConfigurableQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigurableQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConfigurableQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigurableQuery.Merge(m, src)
}
func (m *ConfigurableQuery) XXX_Size() int {
	return m.Size()
}
func (m *ConfigurableQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigurableQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigurableQuery proto.InternalMessageInfo

type DumpCommand struct {
	Code DumpCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.DumpCommand_Code" json:"code,omitempty"`
}

func (m *DumpCommand) Reset()         { *m = DumpCommand{} }
func (m *DumpCommand) String() string { return proto.CompactTextString(m) }
func (*DumpCommand) ProtoMessage()    {}
func (*DumpCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{37}
}
func (m *DumpCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DumpCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DumpCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DumpCommand.Merge(m, src)
}
func (m *DumpCommand) XXX_Size() int {
	return m.Size()
}
func (m *DumpCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_DumpCommand.DiscardUnknown(m)
}

var xxx_messageInfo_DumpCommand proto.InternalMessageInfo

type HelpCommand struct {
	Code HelpCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.HelpCommand_Code" json:"code,omitempty"`
}

func (m *HelpCommand) Reset()         { *m = HelpCommand{} }
func (m *HelpCommand) String() string { return proto.CompactTextString(m) }
func (*HelpCommand) ProtoMessage()    {}
func (*HelpCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{38}
}
func (m *HelpCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelpCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HelpCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelpCommand.Merge(m, src)
}
func (m *HelpCommand) XXX_Size() int {
	return m.Size()
}
func (m *HelpCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_HelpCommand.DiscardUnknown(m)
}

var xxx_messageInfo_HelpCommand proto.InternalMessageInfo

type MobileInstall struct {
	Code MobileInstall_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.MobileInstall_Code" json:"code,omitempty"`
}

func (m *MobileInstall) Reset()         { *m = MobileInstall{} }
func (m *MobileInstall) String() string { return proto.CompactTextString(m) }
func (*MobileInstall) ProtoMessage()    {}
func (*MobileInstall) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{39}
}
func (m *MobileInstall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MobileInstall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MobileInstall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MobileInstall.Merge(m, src)
}
func (m *MobileInstall) XXX_Size() int {
	return m.Size()
}
func (m *MobileInstall) XXX_DiscardUnknown() {
	xxx_messageInfo_MobileInstall.DiscardUnknown(m)
}

var xxx_messageInfo_MobileInstall proto.InternalMessageInfo

type ProfileCommand struct {
	Code ProfileCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ProfileCommand_Code" json:"code,omitempty"`
}

func (m *ProfileCommand) Reset()         { *m = ProfileCommand{} }
func (m *ProfileCommand) String() string { return proto.CompactTextString(m) }
func (*ProfileCommand) ProtoMessage()    {}
func (*ProfileCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{40}
}
func (m *ProfileCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfileCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProfileCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileCommand.Merge(m, src)
}
func (m *ProfileCommand) XXX_Size() int {
	return m.Size()
}
func (m *ProfileCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileCommand.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileCommand proto.InternalMessageInfo

type RunCommand struct {
	Code RunCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.RunCommand_Code" json:"code,omitempty"`
}

func (m *RunCommand) Reset()         { *m = RunCommand{} }
func (m *RunCommand) String() string { return proto.CompactTextString(m) }
func (*RunCommand) ProtoMessage()    {}
func (*RunCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{41}
}
func (m *RunCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RunCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunCommand.Merge(m, src)
}
func (m *RunCommand) XXX_Size() int {
	return m.Size()
}
func (m *RunCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_RunCommand.DiscardUnknown(m)
}

var xxx_messageInfo_RunCommand proto.InternalMessageInfo

type VersionCommand struct {
	Code VersionCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.VersionCommand_Code" json:"code,omitempty"`
}

func (m *VersionCommand) Reset()         { *m = VersionCommand{} }
func (m *VersionCommand) String() string { return proto.CompactTextString(m) }
func (*VersionCommand) ProtoMessage()    {}
func (*VersionCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{42}
}
func (m *VersionCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VersionCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionCommand.Merge(m, src)
}
func (m *VersionCommand) XXX_Size() int {
	return m.Size()
}
func (m *VersionCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionCommand.DiscardUnknown(m)
}

var xxx_messageInfo_VersionCommand proto.InternalMessageInfo

type PrintActionCommand struct {
	Code PrintActionCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.PrintActionCommand_Code" json:"code,omitempty"`
}

func (m *PrintActionCommand) Reset()         { *m = PrintActionCommand{} }
func (m *PrintActionCommand) String() string { return proto.CompactTextString(m) }
func (*PrintActionCommand) ProtoMessage()    {}
func (*PrintActionCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{43}
}
func (m *PrintActionCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrintActionCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PrintActionCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrintActionCommand.Merge(m, src)
}
func (m *PrintActionCommand) XXX_Size() int {
	return m.Size()
}
func (m *PrintActionCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_PrintActionCommand.DiscardUnknown(m)
}

var xxx_messageInfo_PrintActionCommand proto.InternalMessageInfo

type WorkspaceStatus struct {
	Code WorkspaceStatus_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.WorkspaceStatus_Code" json:"code,omitempty"`
}

func (m *WorkspaceStatus) Reset()         { *m = WorkspaceStatus{} }
func (m *WorkspaceStatus) String() string { return proto.CompactTextString(m) }
func (*WorkspaceStatus) ProtoMessage()    {}
func (*WorkspaceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{44}
}
func (m *WorkspaceStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkspaceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WorkspaceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkspaceStatus.Merge(m, src)
}
func (m *WorkspaceStatus) XXX_Size() int {
	return m.Size()
}
func (m *WorkspaceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkspaceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WorkspaceStatus proto.InternalMessageInfo

type JavaCompile struct {
	Code JavaCompile_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.JavaCompile_Code" json:"code,omitempty"`
}

func (m *JavaCompile) Reset()         { *m = JavaCompile{} }
func (m *JavaCompile) String() string { return proto.CompactTextString(m) }
func (*JavaCompile) ProtoMessage()    {}
func (*JavaCompile) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{45}
}
func (m *JavaCompile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JavaCompile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *JavaCompile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JavaCompile.Merge(m, src)
}
func (m *JavaCompile) XXX_Size() int {
	return m.Size()
}
func (m *JavaCompile) XXX_DiscardUnknown() {
	xxx_messageInfo_JavaCompile.DiscardUnknown(m)
}

var xxx_messageInfo_JavaCompile proto.InternalMessageInfo

type ActionRewinding struct {
	Code ActionRewinding_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ActionRewinding_Code" json:"code,omitempty"`
}

func (m *ActionRewinding) Reset()         { *m = ActionRewinding{} }
func (m *ActionRewinding) String() string { return proto.CompactTextString(m) }
func (*ActionRewinding) ProtoMessage()    {}
func (*ActionRewinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{46}
}
func (m *ActionRewinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionRewinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ActionRewinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionRewinding.Merge(m, src)
}
func (m *ActionRewinding) XXX_Size() int {
	return m.Size()
}
func (m *ActionRewinding) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionRewinding.DiscardUnknown(m)
}

var xxx_messageInfo_ActionRewinding proto.InternalMessageInfo

type CppCompile struct {
	Code CppCompile_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.CppCompile_Code" json:"code,omitempty"`
}

func (m *CppCompile) Reset()         { *m = CppCompile{} }
func (m *CppCompile) String() string { return proto.CompactTextString(m) }
func (*CppCompile) ProtoMessage()    {}
func (*CppCompile) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{47}
}
func (m *CppCompile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CppCompile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CppCompile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CppCompile.Merge(m, src)
}
func (m *CppCompile) XXX_Size() int {
	return m.Size()
}
func (m *CppCompile) XXX_DiscardUnknown() {
	xxx_messageInfo_CppCompile.DiscardUnknown(m)
}

var xxx_messageInfo_CppCompile proto.InternalMessageInfo

type StarlarkAction struct {
	Code StarlarkAction_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.StarlarkAction_Code" json:"code,omitempty"`
}

func (m *StarlarkAction) Reset()         { *m = StarlarkAction{} }
func (m *StarlarkAction) String() string { return proto.CompactTextString(m) }
func (*StarlarkAction) ProtoMessage()    {}
func (*StarlarkAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{48}
}
func (m *StarlarkAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StarlarkAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StarlarkAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StarlarkAction.Merge(m, src)
}
func (m *StarlarkAction) XXX_Size() int {
	return m.Size()
}
func (m *StarlarkAction) XXX_DiscardUnknown() {
	xxx_messageInfo_StarlarkAction.DiscardUnknown(m)
}

var xxx_messageInfo_StarlarkAction proto.InternalMessageInfo

type NinjaAction struct {
	Code NinjaAction_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.NinjaAction_Code" json:"code,omitempty"`
}

func (m *NinjaAction) Reset()         { *m = NinjaAction{} }
func (m *NinjaAction) String() string { return proto.CompactTextString(m) }
func (*NinjaAction) ProtoMessage()    {}
func (*NinjaAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{49}
}
func (m *NinjaAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NinjaAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NinjaAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NinjaAction.Merge(m, src)
}
func (m *NinjaAction) XXX_Size() int {
	return m.Size()
}
func (m *NinjaAction) XXX_DiscardUnknown() {
	xxx_messageInfo_NinjaAction.DiscardUnknown(m)
}

var xxx_messageInfo_NinjaAction proto.InternalMessageInfo

type DynamicExecution struct {
	Code DynamicExecution_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.DynamicExecution_Code" json:"code,omitempty"`
}

func (m *DynamicExecution) Reset()         { *m = DynamicExecution{} }
func (m *DynamicExecution) String() string { return proto.CompactTextString(m) }
func (*DynamicExecution) ProtoMessage()    {}
func (*DynamicExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{50}
}
func (m *DynamicExecution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamicExecution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DynamicExecution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicExecution.Merge(m, src)
}
func (m *DynamicExecution) XXX_Size() int {
	return m.Size()
}
func (m *DynamicExecution) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicExecution.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicExecution proto.InternalMessageInfo

type FailAction struct {
	Code FailAction_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.FailAction_Code" json:"code,omitempty"`
}

func (m *FailAction) Reset()         { *m = FailAction{} }
func (m *FailAction) String() string { return proto.CompactTextString(m) }
func (*FailAction) ProtoMessage()    {}
func (*FailAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{51}
}
func (m *FailAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FailAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FailAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailAction.Merge(m, src)
}
func (m *FailAction) XXX_Size() int {
	return m.Size()
}
func (m *FailAction) XXX_DiscardUnknown() {
	xxx_messageInfo_FailAction.DiscardUnknown(m)
}

var xxx_messageInfo_FailAction proto.InternalMessageInfo

type SymlinkAction struct {
	Code SymlinkAction_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.SymlinkAction_Code" json:"code,omitempty"`
}

func (m *SymlinkAction) Reset()         { *m = SymlinkAction{} }
func (m *SymlinkAction) String() string { return proto.CompactTextString(m) }
func (*SymlinkAction) ProtoMessage()    {}
func (*SymlinkAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{52}
}
func (m *SymlinkAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SymlinkAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SymlinkAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SymlinkAction.Merge(m, src)
}
func (m *SymlinkAction) XXX_Size() int {
	return m.Size()
}
func (m *SymlinkAction) XXX_DiscardUnknown() {
	xxx_messageInfo_SymlinkAction.DiscardUnknown(m)
}

var xxx_messageInfo_SymlinkAction proto.InternalMessageInfo

type CppLink struct {
	Code CppLink_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.CppLink_Code" json:"code,omitempty"`
}

func (m *CppLink) Reset()         { *m = CppLink{} }
func (m *CppLink) String() string { return proto.CompactTextString(m) }
func (*CppLink) ProtoMessage()    {}
func (*CppLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{53}
}
func (m *CppLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CppLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CppLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CppLink.Merge(m, src)
}
func (m *CppLink) XXX_Size() int {
	return m.Size()
}
func (m *CppLink) XXX_DiscardUnknown() {
	xxx_messageInfo_CppLink.DiscardUnknown(m)
}

var xxx_messageInfo_CppLink proto.InternalMessageInfo

type LtoAction struct {
	Code LtoAction_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.LtoAction_Code" json:"code,omitempty"`
}

func (m *LtoAction) Reset()         { *m = LtoAction{} }
func (m *LtoAction) String() string { return proto.CompactTextString(m) }
func (*LtoAction) ProtoMessage()    {}
func (*LtoAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{54}
}
func (m *LtoAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LtoAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LtoAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LtoAction.Merge(m, src)
}
func (m *LtoAction) XXX_Size() int {
	return m.Size()
}
func (m *LtoAction) XXX_DiscardUnknown() {
	xxx_messageInfo_LtoAction.DiscardUnknown(m)
}

var xxx_messageInfo_LtoAction proto.InternalMessageInfo

type TestAction struct {
	Code TestAction_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.TestAction_Code" json:"code,omitempty"`
}

func (m *TestAction) Reset()         { *m = TestAction{} }
func (m *TestAction) String() string { return proto.CompactTextString(m) }
func (*TestAction) ProtoMessage()    {}
func (*TestAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{55}
}
func (m *TestAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TestAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestAction.Merge(m, src)
}
func (m *TestAction) XXX_Size() int {
	return m.Size()
}
func (m *TestAction) XXX_DiscardUnknown() {
	xxx_messageInfo_TestAction.DiscardUnknown(m)
}

var xxx_messageInfo_TestAction proto.InternalMessageInfo

type Worker struct {
	Code Worker_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Worker_Code" json:"code,omitempty"`
}

func (m *Worker) Reset()         { *m = Worker{} }
func (m *Worker) String() string { return proto.CompactTextString(m) }
func (*Worker) ProtoMessage()    {}
func (*Worker) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{56}
}
func (m *Worker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Worker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Worker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Worker.Merge(m, src)
}
func (m *Worker) XXX_Size() int {
	return m.Size()
}
func (m *Worker) XXX_DiscardUnknown() {
	xxx_messageInfo_Worker.DiscardUnknown(m)
}

var xxx_messageInfo_Worker proto.InternalMessageInfo

type Analysis struct {
	Code Analysis_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Analysis_Code" json:"code,omitempty"`
}

func (m *Analysis) Reset()         { *m = Analysis{} }
func (m *Analysis) String() string { return proto.CompactTextString(m) }
func (*Analysis) ProtoMessage()    {}
func (*Analysis) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{57}
}
func (m *Analysis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Analysis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Analysis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Analysis.Merge(m, src)
}
func (m *Analysis) XXX_Size() int {
	return m.Size()
}
func (m *Analysis) XXX_DiscardUnknown() {
	xxx_messageInfo_Analysis.DiscardUnknown(m)
}

var xxx_messageInfo_Analysis proto.InternalMessageInfo

type PackageLoading struct {
	Code PackageLoading_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.PackageLoading_Code" json:"code,omitempty"`
}

func (m *PackageLoading) Reset()         { *m = PackageLoading{} }
func (m *PackageLoading) String() string { return proto.CompactTextString(m) }
func (*PackageLoading) ProtoMessage()    {}
func (*PackageLoading) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{58}
}
func (m *PackageLoading) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackageLoading) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PackageLoading) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageLoading.Merge(m, src)
}
func (m *PackageLoading) XXX_Size() int {
	return m.Size()
}
func (m *PackageLoading) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageLoading.DiscardUnknown(m)
}

var xxx_messageInfo_PackageLoading proto.InternalMessageInfo

type Toolchain struct {
	Code Toolchain_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Toolchain_Code" json:"code,omitempty"`
}

func (m *Toolchain) Reset()         { *m = Toolchain{} }
func (m *Toolchain) String() string { return proto.CompactTextString(m) }
func (*Toolchain) ProtoMessage()    {}
func (*Toolchain) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{59}
}
func (m *Toolchain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Toolchain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Toolchain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Toolchain.Merge(m, src)
}
func (m *Toolchain) XXX_Size() int {
	return m.Size()
}
func (m *Toolchain) XXX_DiscardUnknown() {
	xxx_messageInfo_Toolchain.DiscardUnknown(m)
}

var xxx_messageInfo_Toolchain proto.InternalMessageInfo

type StarlarkLoading struct {
	Code StarlarkLoading_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.StarlarkLoading_Code" json:"code,omitempty"`
}

func (m *StarlarkLoading) Reset()         { *m = StarlarkLoading{} }
func (m *StarlarkLoading) String() string { return proto.CompactTextString(m) }
func (*StarlarkLoading) ProtoMessage()    {}
func (*StarlarkLoading) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{60}
}
func (m *StarlarkLoading) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StarlarkLoading) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StarlarkLoading) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StarlarkLoading.Merge(m, src)
}
func (m *StarlarkLoading) XXX_Size() int {
	return m.Size()
}
func (m *StarlarkLoading) XXX_DiscardUnknown() {
	xxx_messageInfo_StarlarkLoading.DiscardUnknown(m)
}

var xxx_messageInfo_StarlarkLoading proto.InternalMessageInfo

type ExternalDeps struct {
	Code ExternalDeps_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ExternalDeps_Code" json:"code,omitempty"`
}

func (m *ExternalDeps) Reset()         { *m = ExternalDeps{} }
func (m *ExternalDeps) String() string { return proto.CompactTextString(m) }
func (*ExternalDeps) ProtoMessage()    {}
func (*ExternalDeps) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{61}
}
func (m *ExternalDeps) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalDeps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExternalDeps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalDeps.Merge(m, src)
}
func (m *ExternalDeps) XXX_Size() int {
	return m.Size()
}
func (m *ExternalDeps) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalDeps.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalDeps proto.InternalMessageInfo

type DiffAwareness struct {
	Code DiffAwareness_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.DiffAwareness_Code" json:"code,omitempty"`
}

func (m *DiffAwareness) Reset()         { *m = DiffAwareness{} }
func (m *DiffAwareness) String() string { return proto.CompactTextString(m) }
func (*DiffAwareness) ProtoMessage()    {}
func (*DiffAwareness) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{62}
}
func (m *DiffAwareness) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiffAwareness) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DiffAwareness) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiffAwareness.Merge(m, src)
}
func (m *DiffAwareness) XXX_Size() int {
	return m.Size()
}
func (m *DiffAwareness) XXX_DiscardUnknown() {
	xxx_messageInfo_DiffAwareness.DiscardUnknown(m)
}

var xxx_messageInfo_DiffAwareness proto.InternalMessageInfo

type ModqueryCommand struct {
	Code ModqueryCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ModqueryCommand_Code" json:"code,omitempty"`
}

func (m *ModqueryCommand) Reset()         { *m = ModqueryCommand{} }
func (m *ModqueryCommand) String() string { return proto.CompactTextString(m) }
func (*ModqueryCommand) ProtoMessage()    {}
func (*ModqueryCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_4201f039844cb9a6, []int{63}
}
func (m *ModqueryCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModqueryCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModqueryCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModqueryCommand.Merge(m, src)
}
func (m *ModqueryCommand) XXX_Size() int {
	return m.Size()
}
func (m *ModqueryCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_ModqueryCommand.DiscardUnknown(m)
}

var xxx_messageInfo_ModqueryCommand proto.InternalMessageInfo

var E_Metadata = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumValueOptions)(nil),
	ExtensionType: (*FailureDetailMetadata)(nil),
	Field:         1078,
	Name:          "failure_details.metadata",
	Tag:           "bytes,1078,opt,name=metadata",
	Filename:      "src/main/protobuf/failure_details.proto",
}

func init() {
	proto.RegisterEnum("failure_details.Interrupted_Code", Interrupted_Code_name, Interrupted_Code_value)
	proto.RegisterEnum("failure_details.Spawn_Code", Spawn_Code_name, Spawn_Code_value)
	proto.RegisterEnum("failure_details.ExternalRepository_Code", ExternalRepository_Code_name, ExternalRepository_Code_value)
	proto.RegisterEnum("failure_details.BuildProgress_Code", BuildProgress_Code_name, BuildProgress_Code_value)
	proto.RegisterEnum("failure_details.RemoteOptions_Code", RemoteOptions_Code_name, RemoteOptions_Code_value)
	proto.RegisterEnum("failure_details.ClientEnvironment_Code", ClientEnvironment_Code_name, ClientEnvironment_Code_value)
	proto.RegisterEnum("failure_details.Crash_Code", Crash_Code_name, Crash_Code_value)
	proto.RegisterEnum("failure_details.SymlinkForest_Code", SymlinkForest_Code_name, SymlinkForest_Code_value)
	proto.RegisterEnum("failure_details.PackageOptions_Code", PackageOptions_Code_name, PackageOptions_Code_value)
	proto.RegisterEnum("failure_details.RemoteExecution_Code", RemoteExecution_Code_name, RemoteExecution_Code_value)
	proto.RegisterEnum("failure_details.Execution_Code", Execution_Code_name, Execution_Code_value)
	proto.RegisterEnum("failure_details.Workspaces_Code", Workspaces_Code_name, Workspaces_Code_value)
	proto.RegisterEnum("failure_details.CrashOptions_Code", CrashOptions_Code_name, CrashOptions_Code_value)
	proto.RegisterEnum("failure_details.Filesystem_Code", Filesystem_Code_name, Filesystem_Code_value)
	proto.RegisterEnum("failure_details.ExecutionOptions_Code", ExecutionOptions_Code_name, ExecutionOptions_Code_value)
	proto.RegisterEnum("failure_details.Command_Code", Command_Code_name, Command_Code_value)
	proto.RegisterEnum("failure_details.GrpcServer_Code", GrpcServer_Code_name, GrpcServer_Code_value)
	proto.RegisterEnum("failure_details.CanonicalizeFlags_Code", CanonicalizeFlags_Code_name, CanonicalizeFlags_Code_value)
	proto.RegisterEnum("failure_details.BuildConfiguration_Code", BuildConfiguration_Code_name, BuildConfiguration_Code_value)
	proto.RegisterEnum("failure_details.InfoCommand_Code", InfoCommand_Code_name, InfoCommand_Code_value)
	proto.RegisterEnum("failure_details.MemoryOptions_Code", MemoryOptions_Code_name, MemoryOptions_Code_value)
	proto.RegisterEnum("failure_details.Query_Code", Query_Code_name, Query_Code_value)
	proto.RegisterEnum("failure_details.LocalExecution_Code", LocalExecution_Code_name, LocalExecution_Code_value)
	proto.RegisterEnum("failure_details.ActionCache_Code", ActionCache_Code_name, ActionCache_Code_value)
	proto.RegisterEnum("failure_details.FetchCommand_Code", FetchCommand_Code_name, FetchCommand_Code_value)
	proto.RegisterEnum("failure_details.SyncCommand_Code", SyncCommand_Code_name, SyncCommand_Code_value)
	proto.RegisterEnum("failure_details.Sandbox_Code", Sandbox_Code_name, Sandbox_Code_value)
	proto.RegisterEnum("failure_details.IncludeScanning_Code", IncludeScanning_Code_name, IncludeScanning_Code_value)
	proto.RegisterEnum("failure_details.TestCommand_Code", TestCommand_Code_name, TestCommand_Code_value)
	proto.RegisterEnum("failure_details.ActionQuery_Code", ActionQuery_Code_name, ActionQuery_Code_value)
	proto.RegisterEnum("failure_details.TargetPatterns_Code", TargetPatterns_Code_name, TargetPatterns_Code_value)
	proto.RegisterEnum("failure_details.CleanCommand_Code", CleanCommand_Code_name, CleanCommand_Code_value)
	proto.RegisterEnum("failure_details.ConfigCommand_Code", ConfigCommand_Code_name, ConfigCommand_Code_value)
	proto.RegisterEnum("failure_details.ConfigurableQuery_Code", ConfigurableQuery_Code_name, ConfigurableQuery_Code_value)
	proto.RegisterEnum("failure_details.DumpCommand_Code", DumpCommand_Code_name, DumpCommand_Code_value)
	proto.RegisterEnum("failure_details.HelpCommand_Code", HelpCommand_Code_name, HelpCommand_Code_value)
	proto.RegisterEnum("failure_details.MobileInstall_Code", MobileInstall_Code_name, MobileInstall_Code_value)
	proto.RegisterEnum("failure_details.ProfileCommand_Code", ProfileCommand_Code_name, ProfileCommand_Code_value)
	proto.RegisterEnum("failure_details.RunCommand_Code", RunCommand_Code_name, RunCommand_Code_value)
	proto.RegisterEnum("failure_details.VersionCommand_Code", VersionCommand_Code_name, VersionCommand_Code_value)
	proto.RegisterEnum("failure_details.PrintActionCommand_Code", PrintActionCommand_Code_name, PrintActionCommand_Code_value)
	proto.RegisterEnum("failure_details.WorkspaceStatus_Code", WorkspaceStatus_Code_name, WorkspaceStatus_Code_value)
	proto.RegisterEnum("failure_details.JavaCompile_Code", JavaCompile_Code_name, JavaCompile_Code_value)
	proto.RegisterEnum("failure_details.ActionRewinding_Code", ActionRewinding_Code_name, ActionRewinding_Code_value)
	proto.RegisterEnum("failure_details.CppCompile_Code", CppCompile_Code_name, CppCompile_Code_value)
	proto.RegisterEnum("failure_details.StarlarkAction_Code", StarlarkAction_Code_name, StarlarkAction_Code_value)
	proto.RegisterEnum("failure_details.NinjaAction_Code", NinjaAction_Code_name, NinjaAction_Code_value)
	proto.RegisterEnum("failure_details.DynamicExecution_Code", DynamicExecution_Code_name, DynamicExecution_Code_value)
	proto.RegisterEnum("failure_details.FailAction_Code", FailAction_Code_name, FailAction_Code_value)
	proto.RegisterEnum("failure_details.SymlinkAction_Code", SymlinkAction_Code_name, SymlinkAction_Code_value)
	proto.RegisterEnum("failure_details.CppLink_Code", CppLink_Code_name, CppLink_Code_value)
	proto.RegisterEnum("failure_details.LtoAction_Code", LtoAction_Code_name, LtoAction_Code_value)
	proto.RegisterEnum("failure_details.TestAction_Code", TestAction_Code_name, TestAction_Code_value)
	proto.RegisterEnum("failure_details.Worker_Code", Worker_Code_name, Worker_Code_value)
	proto.RegisterEnum("failure_details.Analysis_Code", Analysis_Code_name, Analysis_Code_value)
	proto.RegisterEnum("failure_details.PackageLoading_Code", PackageLoading_Code_name, PackageLoading_Code_value)
	proto.RegisterEnum("failure_details.Toolchain_Code", Toolchain_Code_name, Toolchain_Code_value)
	proto.RegisterEnum("failure_details.StarlarkLoading_Code", StarlarkLoading_Code_name, StarlarkLoading_Code_value)
	proto.RegisterEnum("failure_details.ExternalDeps_Code", ExternalDeps_Code_name, ExternalDeps_Code_value)
	proto.RegisterEnum("failure_details.DiffAwareness_Code", DiffAwareness_Code_name, DiffAwareness_Code_value)
	proto.RegisterEnum("failure_details.ModqueryCommand_Code", ModqueryCommand_Code_name, ModqueryCommand_Code_value)
	proto.RegisterType((*FailureDetailMetadata)(nil), "failure_details.FailureDetailMetadata")
	proto.RegisterType((*FailureDetail)(nil), "failure_details.FailureDetail")
	proto.RegisterType((*Interrupted)(nil), "failure_details.Interrupted")
	proto.RegisterType((*Spawn)(nil), "failure_details.Spawn")
	proto.RegisterType((*ExternalRepository)(nil), "failure_details.ExternalRepository")
	proto.RegisterType((*BuildProgress)(nil), "failure_details.BuildProgress")
	proto.RegisterType((*RemoteOptions)(nil), "failure_details.RemoteOptions")
	proto.RegisterType((*ClientEnvironment)(nil), "failure_details.ClientEnvironment")
	proto.RegisterType((*Crash)(nil), "failure_details.Crash")
	proto.RegisterType((*Throwable)(nil), "failure_details.Throwable")
	proto.RegisterType((*SymlinkForest)(nil), "failure_details.SymlinkForest")
	proto.RegisterType((*PackageOptions)(nil), "failure_details.PackageOptions")
	proto.RegisterType((*RemoteExecution)(nil), "failure_details.RemoteExecution")
	proto.RegisterType((*Execution)(nil), "failure_details.Execution")
	proto.RegisterType((*Workspaces)(nil), "failure_details.Workspaces")
	proto.RegisterType((*CrashOptions)(nil), "failure_details.CrashOptions")
	proto.RegisterType((*Filesystem)(nil), "failure_details.Filesystem")
	proto.RegisterType((*ExecutionOptions)(nil), "failure_details.ExecutionOptions")
	proto.RegisterType((*Command)(nil), "failure_details.Command")
	proto.RegisterType((*GrpcServer)(nil), "failure_details.GrpcServer")
	proto.RegisterType((*CanonicalizeFlags)(nil), "failure_details.CanonicalizeFlags")
	proto.RegisterType((*BuildConfiguration)(nil), "failure_details.BuildConfiguration")
	proto.RegisterType((*InfoCommand)(nil), "failure_details.InfoCommand")
	proto.RegisterType((*MemoryOptions)(nil), "failure_details.MemoryOptions")
	proto.RegisterType((*Query)(nil), "failure_details.Query")
	proto.RegisterType((*LocalExecution)(nil), "failure_details.LocalExecution")
	proto.RegisterType((*ActionCache)(nil), "failure_details.ActionCache")
	proto.RegisterType((*FetchCommand)(nil), "failure_details.FetchCommand")
	proto.RegisterType((*SyncCommand)(nil), "failure_details.SyncCommand")
	proto.RegisterType((*Sandbox)(nil), "failure_details.Sandbox")
	proto.RegisterType((*IncludeScanning)(nil), "failure_details.IncludeScanning")
	proto.RegisterType((*TestCommand)(nil), "failure_details.TestCommand")
	proto.RegisterType((*ActionQuery)(nil), "failure_details.ActionQuery")
	proto.RegisterType((*TargetPatterns)(nil), "failure_details.TargetPatterns")
	proto.RegisterType((*CleanCommand)(nil), "failure_details.CleanCommand")
	proto.RegisterType((*ConfigCommand)(nil), "failure_details.ConfigCommand")
	proto.RegisterType((*ConfigurableQuery)(nil), "failure_details.ConfigurableQuery")
	proto.RegisterType((*DumpCommand)(nil), "failure_details.DumpCommand")
	proto.RegisterType((*HelpCommand)(nil), "failure_details.HelpCommand")
	proto.RegisterType((*MobileInstall)(nil), "failure_details.MobileInstall")
	proto.RegisterType((*ProfileCommand)(nil), "failure_details.ProfileCommand")
	proto.RegisterType((*RunCommand)(nil), "failure_details.RunCommand")
	proto.RegisterType((*VersionCommand)(nil), "failure_details.VersionCommand")
	proto.RegisterType((*PrintActionCommand)(nil), "failure_details.PrintActionCommand")
	proto.RegisterType((*WorkspaceStatus)(nil), "failure_details.WorkspaceStatus")
	proto.RegisterType((*JavaCompile)(nil), "failure_details.JavaCompile")
	proto.RegisterType((*ActionRewinding)(nil), "failure_details.ActionRewinding")
	proto.RegisterType((*CppCompile)(nil), "failure_details.CppCompile")
	proto.RegisterType((*StarlarkAction)(nil), "failure_details.StarlarkAction")
	proto.RegisterType((*NinjaAction)(nil), "failure_details.NinjaAction")
	proto.RegisterType((*DynamicExecution)(nil), "failure_details.DynamicExecution")
	proto.RegisterType((*FailAction)(nil), "failure_details.FailAction")
	proto.RegisterType((*SymlinkAction)(nil), "failure_details.SymlinkAction")
	proto.RegisterType((*CppLink)(nil), "failure_details.CppLink")
	proto.RegisterType((*LtoAction)(nil), "failure_details.LtoAction")
	proto.RegisterType((*TestAction)(nil), "failure_details.TestAction")
	proto.RegisterType((*Worker)(nil), "failure_details.Worker")
	proto.RegisterType((*Analysis)(nil), "failure_details.Analysis")
	proto.RegisterType((*PackageLoading)(nil), "failure_details.PackageLoading")
	proto.RegisterType((*Toolchain)(nil), "failure_details.Toolchain")
	proto.RegisterType((*StarlarkLoading)(nil), "failure_details.StarlarkLoading")
	proto.RegisterType((*ExternalDeps)(nil), "failure_details.ExternalDeps")
	proto.RegisterType((*DiffAwareness)(nil), "failure_details.DiffAwareness")
	proto.RegisterType((*ModqueryCommand)(nil), "failure_details.ModqueryCommand")
	proto.RegisterExtension(E_Metadata)
}

func init() {
	proto.RegisterFile("src/main/protobuf/failure_details.proto", fileDescriptor_4201f039844cb9a6)
}

var fileDescriptor_4201f039844cb9a6 = []byte{
	// 9413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0xbd, 0x6b, 0x8c, 0x1c, 0xd9,
	0x75, 0x1f, 0xce, 0xea, 0xe9, 0x79, 0x9d, 0xe1, 0xcc, 0x34, 0x8b, 0xaf, 0x26, 0x87, 0x9c, 0x19,
	0x36, 0x87, 0x8f, 0xdd, 0xd5, 0x92, 0x2b, 0xae, 0x76, 0xf5, 0xf2, 0x5f, 0x56, 0x4d, 0xf5, 0xed,
	0xe9, 0xe2, 0x54, 0x57, 0xf5, 0x56, 0x55, 0x0f, 0x39, 0xfa, 0x52, 0x68, 0xf6, 0x34, 0xb9, 0xa3,
	0x9d, 0x99, 0x9e, 0x7f, 0x77, 0x93, 0xbb, 0x74, 0x9c, 0x87, 0x1c, 0x49, 0x4e, 0xa2, 0xc4, 0xd9,
	0xc4, 0x8a, 0xed, 0xc8, 0x86, 0xe5, 0xd8, 0x8a, 0xa3, 0x04, 0x52, 0x1c, 0xc9, 0x0f, 0x45, 0x01,
	0x22, 0x24, 0x06, 0x82, 0xc8, 0x41, 0xe0, 0x18, 0x08, 0x82, 0x38, 0x01, 0x14, 0xc4, 0x12, 0x02,
	0x04, 0x41, 0xec, 0xbc, 0x3e, 0x24, 0x40, 0x02, 0x27, 0xb8, 0xb7, 0xee, 0xe3, 0xdc, 0x7a, 0x4c,
	0x53, 0x5f, 0x96, 0xdb, 0x55, 0xbf, 0x7b, 0xeb, 0x3e, 0xce, 0xfb, 0x9c, 0x7b, 0x07, 0x6e, 0x8d,
	0x86, 0xbd, 0xbb, 0x87, 0xdd, 0xfd, 0xa3, 0xbb, 0xc7, 0xc3, 0xc1, 0x78, 0xf0, 0xe8, 0xe9, 0xe3,
	0xbb, 0x8f, 0xbb, 0xfb, 0x07, 0x4f, 0x87, 0xfd, 0x78, 0xaf, 0x3f, 0xee, 0xee, 0x1f, 0x8c, 0xee,
	0xb0, 0x17, 0xe6, 0x72, 0xea, 0xf1, 0xe5, 0xf5, 0x27, 0x83, 0xc1, 0x93, 0x83, 0xbe, 0x6a, 0xb7,
	0xd7, 0x1f, 0xf5, 0x86, 0xfb, 0xc7, 0xe3, 0xc1, 0x30, 0x69, 0x52, 0xfb, 0x10, 0x9c, 0x6f, 0x24,
	0x8d, 0xea, 0xac, 0x4d, 0xab, 0x3f, 0xee, 0xee, 0x75, 0xc7, 0x5d, 0x73, 0x05, 0xe6, 0xfb, 0xef,
	0xed, 0x8f, 0xe3, 0xde, 0x60, 0xaf, 0x5f, 0x35, 0xd6, 0x8d, 0xdb, 0x8b, 0xc1, 0x1c, 0x7d, 0x60,
	0x0f, 0xf6, 0xfa, 0xb5, 0x2f, 0x5c, 0x87, 0x45, 0xad, 0x99, 0x59, 0x85, 0xd9, 0xc3, 0xfe, 0x68,
	0xd4, 0x7d, 0x92, 0x80, 0xe7, 0x03, 0xf1, 0xd3, 0xfc, 0x24, 0x2c, 0xec, 0x1f, 0x8d, 0xfb, 0xc3,
	0xe1, 0xd3, 0xe3, 0x71, 0x7f, 0xaf, 0xda, 0x5f, 0x37, 0x6e, 0x2f, 0xdc, 0xbb, 0x72, 0x27, 0x3d,
	0x03, 0x47, 0x61, 0x9a, 0xa7, 0x02, 0xdc, 0xc4, 0xdc, 0x81, 0xb3, 0xfd, 0xf7, 0xc6, 0xfd, 0xe1,
	0x51, 0xf7, 0x20, 0x1e, 0xf6, 0x8f, 0x07, 0xa3, 0xfd, 0xf1, 0x60, 0xf8, 0xbc, 0xfa, 0x84, 0xf5,
	0x74, 0x3d, 0xd3, 0x13, 0xe1, 0xd8, 0x40, 0x42, 0x9b, 0xa7, 0x02, 0xb3, 0x9f, 0x79, 0x6a, 0x6e,
	0xc1, 0xd2, 0xa3, 0xa7, 0xfb, 0x07, 0x7b, 0xf1, 0xf1, 0x70, 0xf0, 0x64, 0xd8, 0x1f, 0x8d, 0xaa,
	0x6f, 0xb3, 0x2e, 0x57, 0x33, 0x5d, 0x6e, 0x52, 0x58, 0x9b, 0xa3, 0x9a, 0xa7, 0x82, 0xc5, 0x47,
	0xf8, 0x01, 0xed, 0x68, 0xd8, 0x3f, 0x1c, 0x8c, 0xfb, 0xf1, 0xe0, 0x78, 0xbc, 0x3f, 0x38, 0x1a,
	0x55, 0x3f, 0x5d, 0xd0, 0x51, 0xc0, 0x60, 0x7e, 0x82, 0xa2, 0x1d, 0x0d, 0xf1, 0x03, 0x33, 0x04,
	0xb3, 0x77, 0xb0, 0xdf, 0x3f, 0x1a, 0xc7, 0xfd, 0xa3, 0x67, 0xfb, 0xc3, 0xc1, 0xd1, 0x61, 0xff,
	0x68, 0x5c, 0x7d, 0x87, 0x75, 0x56, 0xcb, 0x74, 0x66, 0x33, 0x28, 0x51, 0xc8, 0xe6, 0xa9, 0xe0,
	0x4c, 0x2f, 0xfd, 0xd0, 0xbc, 0x03, 0xd3, 0xbd, 0x61, 0x77, 0xf4, 0x76, 0xf5, 0x80, 0xf5, 0x73,
	0x21, 0xdb, 0x0f, 0x7d, 0xdb, 0x3c, 0x15, 0x24, 0x30, 0x3a, 0x9b, 0xd1, 0xf3, 0xc3, 0x83, 0xfd,
	0xa3, 0x77, 0xe2, 0xc7, 0x83, 0x61, 0x7f, 0x34, 0xae, 0x1e, 0x15, 0xcc, 0x26, 0x4c, 0x60, 0x0d,
	0x86, 0xa2, 0xb3, 0x19, 0xe1, 0x07, 0xe6, 0x7d, 0x58, 0x3e, 0xee, 0xf6, 0xde, 0xe9, 0x3e, 0x51,
	0xeb, 0x32, 0x64, 0x3d, 0xad, 0x65, 0x7a, 0x6a, 0x27, 0x38, 0xb5, 0x30, 0x4b, 0xc7, 0xda, 0x13,
	0xb3, 0x05, 0x15, 0xbe, 0xc4, 0xfd, 0xf7, 0xfa, 0xbd, 0xa7, 0xf4, 0x61, 0x75, 0xc4, 0x3a, 0x5b,
	0x2f, 0x58, 0x64, 0x22, 0x70, 0xcd, 0x53, 0xc1, 0xf2, 0x50, 0x7f, 0x64, 0x7e, 0x8c, 0x52, 0xb7,
	0xe8, 0x67, 0xcc, 0xfa, 0xb9, 0x9c, 0x43, 0x48, 0xaa, 0x07, 0x05, 0x37, 0xff, 0x3f, 0x80, 0x77,
	0x07, 0xc3, 0x77, 0x46, 0xc7, 0xdd, 0x5e, 0x7f, 0x54, 0x7d, 0xca, 0x1a, 0xaf, 0x64, 0x1a, 0x3f,
	0x90, 0x90, 0xe6, 0xa9, 0x00, 0x35, 0x30, 0xeb, 0xb0, 0xc8, 0xd6, 0x59, 0xae, 0xc9, 0x33, 0xd6,
	0xc3, 0xd5, 0xfc, 0x6d, 0x51, 0x2b, 0x72, 0xba, 0x87, 0x7e, 0xd3, 0x41, 0x3c, 0xde, 0x3f, 0xe8,
	0x8f, 0x9e, 0x8f, 0xc6, 0xfd, 0xc3, 0xea, 0xbb, 0x05, 0x83, 0x68, 0x48, 0x08, 0x1d, 0x84, 0x6a,
	0x60, 0xb6, 0xe1, 0x8c, 0x9c, 0x90, 0x1c, 0xc8, 0x73, 0xd6, 0xcb, 0xb5, 0xe2, 0x75, 0x50, 0x83,
	0xa9, 0xf4, 0x53, 0xcf, 0xcc, 0x0f, 0xc1, 0x6c, 0x6f, 0x70, 0x78, 0xd8, 0x3d, 0xda, 0xab, 0xfe,
	0x18, 0xeb, 0xa7, 0x9a, 0x9d, 0x50, 0xf2, 0xbe, 0x79, 0x2a, 0x10, 0x50, 0x4a, 0x9b, 0xa3, 0xe3,
	0xee, 0xbb, 0x47, 0xd5, 0x3f, 0x51, 0x40, 0x9b, 0x21, 0x7d, 0x4b, 0x69, 0x93, 0xc1, 0xcc, 0x4f,
	0xc0, 0xc2, 0x93, 0xe1, 0x71, 0x2f, 0x1e, 0xf5, 0x87, 0xcf, 0xfa, 0xc3, 0xea, 0x8f, 0x17, 0xcc,
	0x7b, 0x6b, 0x78, 0xdc, 0x0b, 0x19, 0x84, 0xce, 0xfb, 0x89, 0xfc, 0xc5, 0x18, 0xac, 0x7b, 0x34,
	0x38, 0xda, 0xef, 0x75, 0x0f, 0xf6, 0x7f, 0xac, 0x1f, 0x3f, 0x3e, 0xe8, 0x3e, 0x19, 0x55, 0xff,
	0x64, 0x11, 0x83, 0x21, 0x68, 0x83, 0x22, 0x19, 0x83, 0xa5, 0x1f, 0x52, 0xf9, 0x94, 0xc8, 0x91,
	0xde, 0xe0, 0xe8, 0xf1, 0xfe, 0x93, 0xa7, 0xc3, 0x2e, 0x23, 0xab, 0x3f, 0x55, 0x20, 0x9f, 0x98,
	0x30, 0xb1, 0x31, 0x94, 0xca, 0xa7, 0x47, 0x99, 0xa7, 0xa6, 0x05, 0xa7, 0xf7, 0x8f, 0x1e, 0x0f,
	0x62, 0xb1, 0xae, 0x7f, 0xba, 0x50, 0x74, 0x3e, 0x1e, 0xa8, 0xb5, 0x5d, 0xd8, 0x57, 0x3f, 0xcd,
	0x26, 0x2c, 0x1d, 0xf6, 0x0f, 0x07, 0xc3, 0xe7, 0x72, 0x93, 0x3f, 0x63, 0x14, 0x30, 0x73, 0x8b,
	0xe1, 0x90, 0x68, 0x3a, 0xc4, 0x0f, 0xcc, 0xbb, 0x30, 0xfd, 0xff, 0x3f, 0xed, 0x0f, 0x9f, 0x57,
	0x7f, 0xc2, 0x28, 0xd8, 0xaa, 0xb7, 0xe8, 0x6b, 0xba, 0x55, 0x0c, 0x67, 0x6e, 0xc3, 0xf2, 0xc1,
	0xa0, 0xd7, 0x3d, 0x40, 0x0c, 0xfb, 0x59, 0xa3, 0x80, 0xfd, 0x5d, 0x0a, 0xc4, 0xec, 0xb6, 0x74,
	0xa0, 0x3d, 0x31, 0x37, 0xe1, 0x74, 0xb7, 0xc7, 0x88, 0xb5, 0xd7, 0xed, 0xbd, 0xdd, 0xaf, 0x7e,
	0xde, 0x28, 0x58, 0x0b, 0x8b, 0xa1, 0x6c, 0x0a, 0xa2, 0x6b, 0xd1, 0x55, 0x3f, 0x4d, 0x02, 0x8b,
	0x8f, 0xfb, 0xe3, 0xde, 0xdb, 0x72, 0x3d, 0x7f, 0xd2, 0x28, 0xe0, 0xbc, 0x06, 0x85, 0xa9, 0x15,
	0x3d, 0xfd, 0x18, 0xfd, 0xa6, 0x43, 0x19, 0x3d, 0x3f, 0xea, 0xc9, 0x5e, 0xfe, 0x5c, 0xd1, 0x50,
	0xc2, 0xe7, 0x47, 0x3d, 0xb4, 0x2d, 0x23, 0xf5, 0xd3, 0x7c, 0x03, 0x66, 0x47, 0xdd, 0xa3, 0xbd,
	0x47, 0x83, 0xf7, 0xaa, 0x7f, 0xde, 0x28, 0xe0, 0x96, 0x30, 0x01, 0x50, 0x6e, 0xe1, 0x58, 0xd3,
	0x83, 0xca, 0xfe, 0x51, 0xef, 0xe0, 0xe9, 0x5e, 0x3f, 0x1e, 0xf5, 0xba, 0x47, 0x47, 0xfb, 0x47,
	0x4f, 0xaa, 0x5f, 0x30, 0x0a, 0xa4, 0xa0, 0x93, 0x20, 0x43, 0x0e, 0xa4, 0x52, 0x70, 0x5f, 0x7f,
	0x44, 0xa7, 0x32, 0xee, 0x8f, 0xc6, 0x72, 0x2a, 0x7f, 0xb1, 0x68, 0x2a, 0x51, 0x7f, 0x34, 0x46,
	0x53, 0x19, 0xab, 0x9f, 0x68, 0x67, 0x12, 0xf2, 0xf8, 0x4b, 0x27, 0xef, 0x8c, 0x20, 0x12, 0xbe,
	0x33, 0x6f, 0x09, 0x52, 0x19, 0x77, 0x87, 0x4f, 0xfa, 0xe3, 0xf8, 0xb8, 0x3b, 0xa6, 0x6a, 0x7a,
	0x54, 0xfd, 0xa9, 0x22, 0x52, 0x89, 0x18, 0xb0, 0xcd, 0x71, 0x94, 0x54, 0xc6, 0xda, 0x13, 0xba,
	0xcd, 0xbd, 0x83, 0x7e, 0xf7, 0x48, 0xce, 0xea, 0xfd, 0xa2, 0x6d, 0xb6, 0x29, 0x0c, 0x6d, 0x73,
	0x0f, 0xfd, 0xa6, 0x9c, 0x93, 0xb0, 0xb3, 0xec, 0xe7, 0xaf, 0x14, 0x71, 0x4e, 0xc2, 0xb5, 0xaa,
	0xa3, 0xc5, 0x1e, 0x7e, 0x60, 0x46, 0x60, 0x4a, 0xc1, 0xf0, 0xe8, 0xa0, 0xcf, 0xd7, 0xe9, 0xaf,
	0x1a, 0x45, 0x42, 0x07, 0x61, 0xc5, 0x6a, 0x9d, 0xe9, 0xa5, 0x1f, 0xd2, 0x75, 0xdf, 0x7b, 0x7a,
	0x78, 0x2c, 0x47, 0xf7, 0xd3, 0x45, 0xeb, 0x5e, 0x7f, 0x7a, 0x78, 0x8c, 0xf6, 0x6e, 0x4f, 0xfd,
	0xa4, 0x7d, 0xbc, 0xdd, 0x3f, 0x50, 0x7d, 0x7c, 0xb1, 0xa8, 0x8f, 0x66, 0xff, 0x00, 0xf7, 0xf1,
	0xb6, 0xfa, 0xc9, 0x24, 0xcc, 0xe0, 0xd1, 0xfe, 0x41, 0x3f, 0xde, 0x3f, 0x1a, 0x8d, 0xbb, 0x07,
	0x07, 0xd5, 0x9f, 0x29, 0x94, 0x30, 0x0c, 0xe7, 0x24, 0x30, 0x26, 0x61, 0xf0, 0x03, 0x4a, 0x05,
	0xc7, 0xc3, 0x01, 0x55, 0x52, 0x72, 0x40, 0x3f, 0x5b, 0x44, 0x05, 0xed, 0x04, 0xa8, 0xc6, 0xb4,
	0x74, 0xac, 0x3d, 0x31, 0x7f, 0x14, 0x16, 0x86, 0x4f, 0x15, 0x0d, 0xfc, 0x9c, 0x51, 0xa0, 0x29,
	0x82, 0xa7, 0x88, 0x02, 0x60, 0x28, 0x7f, 0xd1, 0xd1, 0x3c, 0xeb, 0x0f, 0x47, 0x4c, 0xe4, 0xf0,
	0x4e, 0xfe, 0x7a, 0xd1, 0x68, 0x76, 0x12, 0x20, 0x1a, 0xcd, 0x33, 0xed, 0x89, 0xf9, 0x10, 0xce,
	0x1d, 0x0f, 0xf7, 0x8f, 0xc6, 0xb1, 0x10, 0x62, 0xbc, 0xc7, 0x2f, 0x19, 0x05, 0x3a, 0xa2, 0x4d,
	0xd1, 0x5c, 0x96, 0xc9, 0x5e, 0xcd, 0xe3, 0xcc, 0x53, 0x2a, 0x12, 0xa4, 0x6d, 0x11, 0x8f, 0xc6,
	0xdd, 0xf1, 0xd3, 0x51, 0xf5, 0x17, 0x8b, 0x44, 0x82, 0xb4, 0x49, 0x42, 0x06, 0xa4, 0x22, 0xe1,
	0x5d, 0xfd, 0x11, 0x25, 0x89, 0x4f, 0x77, 0x9f, 0x75, 0xe9, 0x08, 0x8f, 0xf7, 0x0f, 0xfa, 0xd5,
	0x2f, 0x17, 0x91, 0xc4, 0xfd, 0xee, 0xb3, 0xae, 0x9d, 0x80, 0x28, 0x49, 0x7c, 0x5a, 0xfd, 0xa4,
	0x63, 0xe2, 0xf3, 0x1c, 0xf6, 0xdf, 0xdd, 0x3f, 0xda, 0xa3, 0x62, 0xea, 0x97, 0x8a, 0xc6, 0x94,
	0x4c, 0x27, 0x10, 0x40, 0x3a, 0xa6, 0xae, 0xfe, 0x88, 0xee, 0x65, 0xef, 0xf8, 0x58, 0x0e, 0xe9,
	0x6f, 0x14, 0xed, 0xa5, 0x7d, 0x7c, 0xac, 0x46, 0x04, 0x3d, 0xf9, 0x8b, 0xee, 0xe5, 0x68, 0xdc,
	0x1d, 0x1e, 0x74, 0x87, 0xef, 0xf0, 0x1d, 0xa8, 0xfe, 0x72, 0xd1, 0x5e, 0x86, 0x1c, 0x98, 0x8c,
	0x8b, 0xee, 0xe5, 0x48, 0x7b, 0x42, 0x57, 0xe8, 0x68, 0xff, 0xe8, 0xd3, 0x5d, 0xd1, 0xd3, 0xaf,
	0x14, 0xad, 0x90, 0x47, 0x51, 0xb2, 0x9b, 0x85, 0x23, 0xf5, 0xd3, 0x7c, 0x0b, 0xce, 0xec, 0x3d,
	0x3f, 0xea, 0x1e, 0xee, 0xf7, 0x90, 0x76, 0xfc, 0x8a, 0x51, 0x60, 0x7f, 0xd5, 0x13, 0x28, 0xd6,
	0x8f, 0x95, 0xbd, 0xd4, 0x33, 0xba, 0x48, 0xb4, 0x9d, 0x18, 0xd5, 0xaf, 0x16, 0x2d, 0x12, 0x75,
	0xdb, 0xe4, 0xa0, 0xe0, 0xb1, 0xfc, 0x45, 0x19, 0x59, 0x98, 0xfd, 0xbc, 0x8f, 0xbf, 0x65, 0x9c,
	0x6c, 0xf7, 0xcb, 0x6e, 0x84, 0xdd, 0xcf, 0x7b, 0x7a, 0x13, 0xe6, 0xe8, 0x7e, 0xd1, 0x27, 0xd5,
	0xaf, 0x16, 0xa9, 0x37, 0xfb, 0xf8, 0xd8, 0xdd, 0x3f, 0x7a, 0x87, 0x19, 0x83, 0xc9, 0xff, 0x9a,
	0x3f, 0x02, 0x70, 0x30, 0x1e, 0x88, 0xaf, 0xff, 0x6d, 0xa3, 0xc0, 0x2c, 0x77, 0xc7, 0x03, 0xf9,
	0xe5, 0xf9, 0x03, 0xf1, 0x83, 0x2e, 0x00, 0x53, 0x66, 0xbc, 0xf9, 0xd7, 0x8a, 0x16, 0x80, 0xea,
	0x32, 0xb5, 0x00, 0x63, 0xf9, 0xcb, 0xbc, 0x07, 0x33, 0x94, 0x1b, 0xfa, 0xc3, 0xea, 0xd7, 0x93,
	0xb6, 0x17, 0x73, 0x19, 0x88, 0xd9, 0x94, 0x1c, 0x69, 0x7e, 0x04, 0xe6, 0xba, 0x47, 0xdd, 0x83,
	0xe7, 0xa3, 0xfd, 0x51, 0xf5, 0xef, 0x26, 0xad, 0x2e, 0x65, 0x49, 0x9c, 0x23, 0x9a, 0xa7, 0x02,
	0x89, 0x66, 0xd2, 0x8e, 0x3b, 0x47, 0x07, 0x83, 0x2e, 0xe3, 0x91, 0x5f, 0x33, 0x4e, 0xf6, 0x8e,
	0xdc, 0x04, 0x87, 0xbc, 0x23, 0xfe, 0xc4, 0xfc, 0x38, 0xcc, 0x8f, 0x07, 0x83, 0x83, 0xde, 0xdb,
	0xdd, 0xfd, 0xa3, 0xea, 0x37, 0x8a, 0x16, 0x2e, 0x12, 0x10, 0xba, 0x70, 0x12, 0x4f, 0xd9, 0x55,
	0x72, 0x87, 0x18, 0xca, 0xaf, 0x17, 0xb1, 0xab, 0x60, 0x0f, 0x35, 0x16, 0xc9, 0x5a, 0x62, 0x30,
	0x04, 0x16, 0xa5, 0xbb, 0xbe, 0xd7, 0x3f, 0x1e, 0x55, 0x7f, 0xb3, 0x48, 0x01, 0x0b, 0x4f, 0xbd,
	0xde, 0x3f, 0x66, 0x1e, 0x4e, 0x1f, 0xfd, 0xa6, 0xf4, 0xb8, 0xb7, 0xff, 0xf8, 0x71, 0xdc, 0x7d,
	0xb7, 0x3b, 0xec, 0x1f, 0x51, 0xef, 0xfc, 0xb7, 0x8a, 0xe8, 0xb1, 0xbe, 0xff, 0xf8, 0xb1, 0x25,
	0x60, 0x94, 0x1e, 0xf7, 0xf0, 0x03, 0x3a, 0xc1, 0xc3, 0xc1, 0x1e, 0x53, 0xbb, 0x52, 0xf2, 0x7e,
	0xab, 0x68, 0x82, 0x2d, 0x8e, 0x54, 0x62, 0x77, 0xf9, 0x50, 0x7f, 0xb4, 0x09, 0x30, 0xd7, 0xeb,
	0x8e, 0xfb, 0x4f, 0x06, 0xc3, 0xe7, 0xf7, 0xcb, 0x73, 0xa5, 0x4a, 0xff, 0x7e, 0x79, 0xee, 0x71,
	0xe5, 0xc9, 0xfd, 0xf2, 0xdc, 0x7e, 0xe5, 0xd3, 0xf7, 0xcb, 0x73, 0x87, 0x95, 0xa3, 0xfb, 0xe5,
	0xb9, 0x41, 0x65, 0x78, 0xbf, 0x3c, 0xf7, 0x5e, 0xe5, 0xf9, 0xfd, 0x99, 0xb9, 0x3f, 0x63, 0x54,
	0x3e, 0x63, 0xdc, 0x9f, 0x99, 0xfb, 0xb3, 0x46, 0xe5, 0xb3, 0xf4, 0xdf, 0xcf, 0x19, 0x95, 0xcf,
	0xd3, 0x7f, 0xff, 0x82, 0x51, 0xf9, 0x02, 0xfd, 0xf7, 0x2f, 0x1b, 0x95, 0xf7, 0xe9, 0xbf, 0x7f,
	0xcd, 0xa8, 0xfc, 0x0c, 0xfd, 0xf7, 0xe7, 0x8d, 0xca, 0x2f, 0xd2, 0x7f, 0xff, 0xa6, 0x51, 0xf9,
	0x55, 0xfa, 0xef, 0xdf, 0x31, 0x2a, 0x5f, 0xa3, 0xff, 0xfe, 0x3d, 0xa3, 0xf2, 0x0d, 0xfa, 0xef,
	0x37, 0x8d, 0xca, 0xaf, 0xd3, 0x7f, 0x7f, 0xc3, 0xa8, 0xfc, 0xa6, 0x51, 0xfb, 0xea, 0x34, 0x2c,
	0xa0, 0xf0, 0x89, 0xf9, 0x06, 0x94, 0x65, 0xd4, 0x66, 0x29, 0x47, 0x9e, 0x20, 0xec, 0x1d, 0x7b,
	0xb0, 0xd7, 0x0f, 0x18, 0xbc, 0xf6, 0x07, 0x65, 0x28, 0xd3, 0x9f, 0xe6, 0x2a, 0x9c, 0x75, 0xbc,
	0x88, 0x04, 0x41, 0xa7, 0x1d, 0x91, 0x7a, 0xdc, 0xf1, 0xb6, 0x3d, 0xff, 0x81, 0x57, 0x39, 0x75,
	0x79, 0xfa, 0x9b, 0x76, 0x69, 0x6e, 0xce, 0xbc, 0x00, 0x0b, 0xe8, 0x7d, 0xe5, 0x8a, 0x78, 0xbe,
	0x02, 0x95, 0x3a, 0x69, 0x07, 0xc4, 0xb6, 0x68, 0xb3, 0xcd, 0x8e, 0xe3, 0xd6, 0x2b, 0x65, 0xf1,
	0xf2, 0x26, 0xac, 0xa4, 0x5f, 0xc6, 0xb6, 0xdf, 0x6a, 0xbb, 0x24, 0x72, 0x7c, 0xaf, 0x32, 0x2d,
	0x70, 0x2f, 0xc3, 0x1a, 0xc2, 0xb5, 0x2d, 0x7b, 0xdb, 0xda, 0x22, 0xb1, 0xeb, 0x5b, 0x75, 0xc7,
	0xdb, 0x8a, 0xc3, 0x5d, 0xcf, 0xae, 0xcc, 0x08, 0xec, 0x4b, 0xb0, 0x8a, 0xb0, 0xe4, 0x21, 0xb1,
	0x3b, 0x91, 0x1f, 0xe0, 0x6e, 0x67, 0xf3, 0x3f, 0x6f, 0xfb, 0xad, 0x96, 0xe5, 0xd5, 0xe3, 0xba,
	0x13, 0xb6, 0xad, 0xc8, 0x6e, 0x56, 0xe6, 0x04, 0x6e, 0x0d, 0xce, 0x21, 0x9c, 0xe3, 0x35, 0xfc,
	0xd8, 0x89, 0x48, 0xab, 0x32, 0x2f, 0x00, 0xd7, 0xe0, 0x02, 0x02, 0x58, 0x8d, 0x88, 0x04, 0xf1,
	0x5b, 0x1d, 0x12, 0xec, 0x56, 0x40, 0x40, 0xae, 0x43, 0x15, 0x41, 0x1a, 0x24, 0xb2, 0x9b, 0xe2,
	0x8b, 0x95, 0x33, 0x02, 0x54, 0x83, 0x8b, 0x08, 0x44, 0xe7, 0x25, 0x31, 0x66, 0x7e, 0x47, 0xb6,
	0x4b, 0x2c, 0x4f, 0x82, 0xce, 0x09, 0xd0, 0x07, 0xe0, 0x1a, 0x02, 0xb5, 0xfc, 0x4d, 0xc7, 0x25,
	0xb1, 0xe3, 0x85, 0x91, 0xe5, 0xba, 0x12, 0x7d, 0x3e, 0x7f, 0x8f, 0x92, 0x81, 0x5f, 0xc8, 0x9f,
	0x5b, 0xd0, 0x51, 0x5f, 0xbb, 0x28, 0x20, 0x37, 0xe0, 0x32, 0x82, 0xf8, 0x6d, 0xba, 0xca, 0x61,
	0xdc, 0xb6, 0x82, 0xd0, 0xf1, 0xb6, 0x2a, 0x2b, 0x1c, 0x56, 0x2b, 0xcf, 0x19, 0x95, 0xa9, 0x5a,
	0x79, 0x6e, 0xa1, 0x52, 0xa9, 0x95, 0xe7, 0xce, 0x56, 0xce, 0xd6, 0xca, 0x73, 0xd5, 0xca, 0xe5,
	0xda, 0xef, 0x94, 0x61, 0x9a, 0xb9, 0xf4, 0xe6, 0x5d, 0x8d, 0x48, 0x57, 0xf2, 0x1d, 0x7f, 0x44,
	0x9e, 0x66, 0x0d, 0x4e, 0xf7, 0xba, 0xe3, 0xee, 0x68, 0x3c, 0x1c, 0x1c, 0xbf, 0xbd, 0xdf, 0xab,
	0x96, 0xd6, 0x8d, 0xdb, 0x73, 0x81, 0xf6, 0xcc, 0xbc, 0x09, 0xcb, 0x2c, 0x4e, 0x10, 0xab, 0xd0,
	0xe5, 0xd4, 0xba, 0x71, 0x7b, 0x3a, 0x58, 0x64, 0x8f, 0x89, 0x88, 0x5f, 0xfe, 0xf6, 0x14, 0x27,
	0xf5, 0x2a, 0x2c, 0x86, 0x6d, 0xeb, 0x81, 0x97, 0x26, 0xf2, 0x1b, 0xf4, 0x8d, 0xe7, 0x7b, 0xf1,
	0xa7, 0x48, 0xe0, 0xc7, 0xe4, 0xa1, 0x13, 0x55, 0x8c, 0xe4, 0x8d, 0x61, 0x9a, 0x30, 0x1b, 0x39,
	0x2d, 0xe2, 0x77, 0xa2, 0x4a, 0x49, 0x3c, 0xab, 0xc2, 0xa2, 0xdf, 0x89, 0x62, 0xbf, 0x11, 0xb7,
	0x48, 0xcb, 0x0f, 0x76, 0x2b, 0x53, 0xe2, 0xcd, 0x0a, 0x54, 0x12, 0xc2, 0x74, 0x7c, 0x2f, 0x6e,
	0x58, 0x8e, 0x4b, 0x24, 0x53, 0xd4, 0xf4, 0x97, 0x75, 0xe2, 0x39, 0xa4, 0x2e, 0x38, 0xc1, 0xa0,
	0x6c, 0x18, 0x90, 0x96, 0x1f, 0x91, 0xd8, 0xb6, 0xec, 0x26, 0x11, 0x8d, 0x67, 0x44, 0xe3, 0x97,
	0x60, 0x55, 0xd0, 0xb1, 0xeb, 0x78, 0x24, 0x26, 0x0f, 0xdb, 0x96, 0x17, 0x8a, 0xcf, 0x74, 0x02,
	0x22, 0xa8, 0xdf, 0x30, 0xaf, 0xc0, 0x19, 0xfa, 0x9d, 0xd8, 0xa1, 0x73, 0xb1, 0x09, 0xdb, 0x35,
	0x41, 0xf3, 0x1b, 0xe6, 0x65, 0x58, 0x76, 0xbc, 0x1d, 0xcb, 0x75, 0xea, 0xb1, 0x98, 0xd8, 0xbc,
	0x68, 0x79, 0x07, 0xae, 0x8b, 0x77, 0x7c, 0x30, 0x6a, 0xc0, 0xed, 0xc0, 0x6f, 0x93, 0x20, 0x72,
	0x48, 0x28, 0x68, 0xdf, 0xa0, 0x24, 0xeb, 0xf9, 0x71, 0x27, 0xb4, 0x36, 0x5d, 0x12, 0x87, 0x51,
	0x60, 0x45, 0x64, 0x6b, 0x37, 0x6e, 0xf8, 0x1d, 0xaf, 0x5e, 0x59, 0x10, 0xa0, 0xdb, 0x70, 0xb5,
	0xe3, 0x85, 0x6d, 0x62, 0x3b, 0x0d, 0x47, 0x32, 0x2e, 0x1e, 0xf8, 0x69, 0x81, 0xbc, 0x0c, 0xcb,
	0x0d, 0x3f, 0xd8, 0x74, 0xea, 0x75, 0xe2, 0xc5, 0x8e, 0xd7, 0xee, 0x44, 0x95, 0x45, 0xfe, 0xae,
	0xf6, 0x6f, 0x0c, 0x30, 0xb3, 0xb1, 0x5e, 0xf3, 0x47, 0x34, 0xc2, 0xba, 0xfd, 0x02, 0xe1, 0x61,
	0x2c, 0x04, 0x3f, 0x6b, 0x70, 0xca, 0xb8, 0x09, 0x2b, 0xe4, 0x61, 0x44, 0x02, 0xcf, 0x72, 0xe3,
	0x80, 0xb4, 0xfd, 0xd0, 0x89, 0xfc, 0x60, 0x37, 0x4b, 0x27, 0xf7, 0xe0, 0x96, 0xbf, 0x43, 0x82,
	0xc0, 0xa9, 0x13, 0x2a, 0x4e, 0x2c, 0xd7, 0xf5, 0x1f, 0x50, 0x3e, 0xb4, 0x3c, 0x6b, 0x8b, 0x50,
	0x09, 0x13, 0x10, 0x3b, 0xf2, 0x03, 0xba, 0x48, 0x9c, 0x82, 0x4a, 0xe6, 0x3a, 0x9c, 0xdf, 0xb4,
	0xea, 0x71, 0xdd, 0x7f, 0xe0, 0x51, 0xc1, 0x46, 0xa8, 0xc8, 0xf2, 0x1a, 0xce, 0x96, 0xa0, 0xa7,
	0x52, 0xed, 0xeb, 0x33, 0xb0, 0xa8, 0x05, 0x9d, 0xcd, 0x0f, 0x6b, 0xd3, 0xba, 0x7e, 0x72, 0x88,
	0x1a, 0xcf, 0xe8, 0xfb, 0xd3, 0x7c, 0x46, 0xd7, 0xe0, 0x42, 0x22, 0x76, 0xdb, 0x81, 0xbf, 0x15,
	0x90, 0x30, 0xcc, 0x4e, 0x66, 0x1d, 0xce, 0xfb, 0x9d, 0xa8, 0xdd, 0x89, 0x62, 0xc7, 0x73, 0x22,
	0xc7, 0x72, 0x9d, 0x4f, 0x59, 0x8c, 0x56, 0xa6, 0x04, 0xad, 0xdc, 0x81, 0xeb, 0x9b, 0x24, 0xa4,
	0xb2, 0x21, 0x8c, 0xdb, 0x24, 0x88, 0x23, 0x12, 0x46, 0xb1, 0xeb, 0xb4, 0x9c, 0x28, 0xee, 0x78,
	0x61, 0xa7, 0xdd, 0xf6, 0x83, 0x48, 0x51, 0x78, 0x32, 0x55, 0x12, 0xc6, 0xae, 0x6f, 0x5b, 0x6e,
	0xfc, 0x20, 0x70, 0x28, 0x01, 0x05, 0x81, 0x1f, 0x08, 0x32, 0xdf, 0xa0, 0x14, 0x43, 0x11, 0xfa,
	0x07, 0x39, 0x68, 0x26, 0x05, 0xea, 0xb4, 0xe9, 0x7a, 0x09, 0x2a, 0xe5, 0x20, 0x4e, 0xe5, 0x37,
	0xd9, 0x04, 0x49, 0x18, 0x37, 0xa8, 0x00, 0x4c, 0x3e, 0x25, 0xc8, 0x79, 0x4e, 0x40, 0x6a, 0x70,
	0x31, 0x05, 0xa1, 0x2c, 0xc1, 0xba, 0x99, 0x17, 0x98, 0x1b, 0x70, 0x39, 0x8d, 0x41, 0xda, 0x0e,
	0x8a, 0xbb, 0xb2, 0x2d, 0xcf, 0x26, 0x94, 0x45, 0x17, 0x04, 0xe6, 0x16, 0x5c, 0x49, 0x61, 0xf8,
	0x92, 0xf3, 0x6f, 0x9e, 0x16, 0xc0, 0x9b, 0xb0, 0x82, 0xe6, 0x97, 0xac, 0x16, 0x6b, 0x95, 0xe0,
	0x16, 0x05, 0xee, 0x65, 0x58, 0xa3, 0xb8, 0x30, 0x0a, 0x88, 0xd5, 0x8a, 0x3d, 0x3f, 0x8a, 0x03,
	0x12, 0x05, 0xbb, 0x54, 0x35, 0x0a, 0xde, 0x59, 0x4a, 0xb0, 0xaf, 0x9a, 0x1f, 0x86, 0x0f, 0x20,
	0x2c, 0x57, 0x8a, 0xa4, 0x1e, 0x3f, 0x70, 0xa2, 0x66, 0xdc, 0xf1, 0x2c, 0x7b, 0x3b, 0x26, 0x3b,
	0xc4, 0x8b, 0x42, 0xfe, 0x91, 0x65, 0xd1, 0xf0, 0x23, 0xf0, 0xea, 0x49, 0x0d, 0x43, 0xe2, 0x45,
	0x7a, 0xcb, 0x8a, 0x68, 0xf9, 0x41, 0xb8, 0x59, 0xdc, 0x52, 0xc8, 0x0f, 0xd6, 0xe4, 0xac, 0x68,
	0x72, 0x0f, 0x6e, 0xa1, 0x99, 0xb3, 0xd9, 0x70, 0x7a, 0xa2, 0x92, 0x8a, 0xd4, 0xa9, 0x06, 0xe5,
	0x33, 0xe3, 0xba, 0xf3, 0x26, 0xd3, 0x2e, 0x46, 0x8d, 0x9a, 0x5e, 0xa5, 0x5a, 0x79, 0xce, 0xac,
	0x98, 0xb5, 0xdf, 0x29, 0xc1, 0xa2, 0x96, 0x5b, 0x99, 0xc8, 0x2f, 0x1a, 0x1a, 0xf3, 0xcb, 0x1f,
	0x1b, 0x8a, 0x5f, 0xf8, 0x90, 0x85, 0x9a, 0xcb, 0xf0, 0xcb, 0x1b, 0xf0, 0x32, 0x87, 0xd4, 0x49,
	0xc3, 0xea, 0xb8, 0x11, 0x93, 0x65, 0x48, 0x30, 0xc6, 0xae, 0xbf, 0xe5, 0xd8, 0x7c, 0xce, 0x92,
	0xff, 0xaf, 0x43, 0xd5, 0x0e, 0x48, 0x9d, 0x78, 0x94, 0xe2, 0xc3, 0x38, 0x20, 0x96, 0x9a, 0x64,
	0x49, 0x90, 0xfc, 0x06, 0x5c, 0xc2, 0xa0, 0x84, 0x7c, 0x04, 0x4a, 0xf2, 0xe3, 0x6d, 0xb8, 0x8a,
	0xc4, 0x08, 0x5d, 0x67, 0xca, 0x18, 0x5b, 0x41, 0xdb, 0x4e, 0xb4, 0x86, 0xe2, 0xc4, 0x5b, 0x70,
	0x45, 0x09, 0x5a, 0xb6, 0x21, 0x42, 0xb0, 0x27, 0xc0, 0x69, 0x21, 0x7b, 0x7e, 0xc9, 0x80, 0x33,
	0x99, 0xd4, 0x92, 0xf9, 0x71, 0x6d, 0x3d, 0x6f, 0x4d, 0x4e, 0x46, 0xe1, 0x35, 0xf5, 0xf8, 0x92,
	0xde, 0x80, 0xcb, 0xb6, 0xeb, 0x30, 0xfa, 0xf1, 0x76, 0x9c, 0xc0, 0xf7, 0x5a, 0xf4, 0xff, 0x33,
	0xcb, 0xba, 0x06, 0xe7, 0x38, 0xcc, 0x7e, 0x40, 0x45, 0xa9, 0xdb, 0xf0, 0x83, 0x16, 0xa9, 0xcb,
	0x05, 0xac, 0x7d, 0xc5, 0x80, 0x69, 0x96, 0x1e, 0x99, 0x68, 0x46, 0x30, 0x14, 0x36, 0x23, 0xee,
	0xc1, 0x4c, 0xaf, 0xfb, 0x74, 0xd4, 0x1f, 0x55, 0x4b, 0xeb, 0x53, 0xf9, 0x6e, 0xd2, 0xdb, 0xc3,
	0xc1, 0xbb, 0xdd, 0x47, 0x07, 0xfd, 0x80, 0x23, 0x6b, 0x6f, 0x2a, 0x6b, 0xc1, 0x0e, 0xac, 0xb0,
	0x99, 0x1d, 0xf1, 0x39, 0x98, 0x4f, 0xde, 0xf8, 0x7e, 0x4b, 0x0c, 0xf3, 0x5a, 0x6d, 0x00, 0xf3,
	0xb2, 0x33, 0xf3, 0x16, 0x2c, 0x8f, 0xc5, 0x8f, 0xb8, 0x77, 0xd0, 0x1d, 0x8d, 0x78, 0xa6, 0x74,
	0x49, 0x3e, 0xb6, 0xe9, 0x53, 0x9c, 0x4a, 0x2d, 0xe9, 0xa9, 0xd4, 0x35, 0x58, 0x18, 0x8d, 0xbb,
	0xbd, 0x77, 0xe2, 0xf1, 0xb0, 0xdb, 0xa3, 0xa6, 0xcd, 0xd4, 0xed, 0xf9, 0x00, 0xd8, 0xa3, 0x88,
	0x3e, 0xa9, 0xfd, 0xa1, 0x01, 0x8b, 0x5a, 0x52, 0x6e, 0x22, 0x1b, 0x68, 0x68, 0xbc, 0x65, 0xbf,
	0x8c, 0xd8, 0x20, 0xdc, 0x6d, 0xb9, 0x8e, 0xb7, 0x1d, 0x37, 0xfc, 0x80, 0x8a, 0xfb, 0xcc, 0xec,
	0x5f, 0x83, 0x1b, 0x91, 0xdf, 0x76, 0xc9, 0x0e, 0x71, 0x63, 0xbf, 0x13, 0xd5, 0x9d, 0x40, 0x1a,
	0xee, 0x6d, 0x2b, 0x6a, 0x32, 0xed, 0xe6, 0x3a, 0x76, 0xa4, 0x38, 0xe0, 0x25, 0x58, 0x4d, 0xb7,
	0xe8, 0x84, 0xd4, 0x9e, 0x0e, 0xe3, 0xd0, 0xef, 0x04, 0xb6, 0xe4, 0x83, 0x12, 0x35, 0x01, 0xec,
	0x80, 0x58, 0xd8, 0x7e, 0x9a, 0x12, 0x74, 0xf0, 0x2b, 0x06, 0x2c, 0xe9, 0xa9, 0x43, 0xf3, 0x23,
	0xda, 0x84, 0x37, 0x26, 0x64, 0x1a, 0xf1, 0x8c, 0x1f, 0xf0, 0x09, 0xd7, 0xe0, 0xa2, 0x18, 0x7d,
	0x21, 0xe3, 0xaf, 0xc1, 0x39, 0x6d, 0x86, 0x9c, 0x95, 0x14, 0x85, 0x0a, 0xe1, 0x34, 0x55, 0x99,
	0xaa, 0x7d, 0x7b, 0x06, 0x96, 0x53, 0x39, 0x49, 0xf3, 0xa3, 0xda, 0x30, 0x6f, 0x4c, 0xca, 0x61,
	0xe2, 0x71, 0xfe, 0x27, 0xa1, 0xd0, 0xaf, 0x43, 0x35, 0x63, 0x93, 0x65, 0x46, 0x4a, 0x59, 0xce,
	0x6a, 0x5b, 0x9b, 0x8e, 0xeb, 0x30, 0x81, 0xc4, 0x4c, 0x7e, 0x29, 0x47, 0x0c, 0x61, 0x4c, 0xa6,
	0x44, 0x12, 0xd5, 0xc6, 0x69, 0x91, 0x54, 0x32, 0xaf, 0x82, 0x99, 0x98, 0xa2, 0xda, 0xeb, 0x29,
	0xb4, 0x53, 0x54, 0xee, 0xb8, 0xbe, 0x52, 0x46, 0x52, 0xfa, 0x6c, 0xc0, 0x25, 0x26, 0x1a, 0xed,
	0xa6, 0xe5, 0x79, 0xc4, 0xd5, 0x7b, 0x10, 0xa2, 0x27, 0x19, 0x2c, 0xfd, 0x40, 0x2e, 0x6c, 0x46,
	0xc0, 0xa8, 0x8f, 0x88, 0x6c, 0xa7, 0x3c, 0xec, 0xac, 0xc0, 0xd6, 0xe0, 0x22, 0x1d, 0x10, 0xa5,
	0x30, 0xe6, 0x40, 0x75, 0xda, 0x12, 0x23, 0x0d, 0x60, 0x25, 0x96, 0x42, 0x12, 0xec, 0x90, 0x20,
	0x76, 0x3c, 0xaa, 0xbb, 0xac, 0xc8, 0xd9, 0x74, 0x89, 0x30, 0x0c, 0x6a, 0xe6, 0xab, 0x50, 0x93,
	0x9f, 0xad, 0x27, 0xd6, 0x68, 0x18, 0xd7, 0x49, 0xe2, 0x6a, 0xca, 0x5e, 0x41, 0xc0, 0x3f, 0x09,
	0x6f, 0x08, 0xe5, 0xc0, 0x5b, 0xc5, 0x89, 0x71, 0x15, 0xc6, 0x2d, 0xc7, 0x73, 0x5a, 0xd4, 0x20,
	0xe2, 0xf2, 0xda, 0xf1, 0x12, 0xb7, 0x21, 0xae, 0xfb, 0x91, 0x34, 0x1f, 0x4a, 0xa6, 0x05, 0x6f,
	0xfe, 0xd0, 0x3d, 0xdc, 0xaf, 0x93, 0x76, 0x28, 0x0c, 0x8b, 0x12, 0xd5, 0x50, 0xc9, 0x64, 0xa8,
	0x22, 0xe6, 0xad, 0x55, 0x6f, 0xe9, 0x15, 0x59, 0x14, 0x2b, 0xf2, 0x71, 0x78, 0x2d, 0xa5, 0xd8,
	0xda, 0xae, 0x15, 0x51, 0x31, 0x8c, 0x95, 0x1b, 0x75, 0xfb, 0x48, 0xda, 0xf0, 0x30, 0xcc, 0x4b,
	0xb0, 0xe4, 0xb8, 0x2e, 0xd9, 0xb2, 0x5c, 0xfe, 0x41, 0x61, 0x5a, 0x18, 0xe6, 0x5d, 0xd8, 0x10,
	0x5a, 0x87, 0x91, 0x03, 0x75, 0x5e, 0x72, 0x7a, 0x16, 0x16, 0x85, 0x51, 0xfb, 0x77, 0x8b, 0x30,
	0xaf, 0xb8, 0xe6, 0x75, 0x8d, 0x6b, 0xd6, 0x8a, 0x33, 0xd5, 0x98, 0x5f, 0x7e, 0x7e, 0x91, 0xf3,
	0x0b, 0xf7, 0x82, 0x0a, 0x18, 0xe5, 0x2e, 0x6c, 0xa8, 0xb7, 0x94, 0x64, 0x52, 0x16, 0x69, 0x8a,
	0x65, 0x4a, 0x89, 0x87, 0x80, 0x1b, 0xe8, 0x2a, 0x1a, 0x2b, 0x72, 0x8a, 0x0b, 0x7c, 0x3f, 0x8a,
	0x35, 0x49, 0xa6, 0x29, 0xf2, 0x8f, 0xc0, 0xab, 0x11, 0x69, 0xb5, 0x63, 0xcb, 0x66, 0xef, 0xc5,
	0x4e, 0x71, 0xf7, 0x61, 0x37, 0x4b, 0x67, 0xe5, 0x17, 0x6d, 0x99, 0xf9, 0xa6, 0x34, 0xbd, 0x3f,
	0x01, 0xaf, 0xb7, 0x49, 0x10, 0x3a, 0x61, 0x44, 0x69, 0xff, 0x85, 0xdb, 0x4b, 0xab, 0xfc, 0x83,
	0x70, 0x33, 0x31, 0x55, 0x33, 0x6d, 0xa4, 0xc6, 0xd0, 0xd9, 0x71, 0xc3, 0x7c, 0x05, 0xd6, 0x93,
	0x26, 0x74, 0xc8, 0xae, 0x15, 0xe5, 0xb9, 0xad, 0xf3, 0x02, 0xfc, 0x2a, 0xd4, 0x18, 0x97, 0xe1,
	0xc1, 0x34, 0x89, 0xbd, 0xad, 0xfb, 0xb1, 0x20, 0xe0, 0x6c, 0x07, 0xa3, 0xc0, 0x4a, 0xcd, 0x24,
	0x33, 0xfe, 0x05, 0xe4, 0x55, 0x30, 0xff, 0x25, 0xe8, 0x78, 0x1e, 0xe5, 0x7a, 0xdc, 0xeb, 0x69,
	0x01, 0xaa, 0xc1, 0xc5, 0x94, 0xbb, 0x20, 0x31, 0x8b, 0x68, 0x8b, 0x59, 0x47, 0xdc, 0x29, 0xd1,
	0x51, 0x4b, 0x02, 0x75, 0x0f, 0x6e, 0x89, 0x75, 0x89, 0x02, 0x42, 0xa8, 0x8f, 0xe8, 0x34, 0x68,
	0x33, 0xdb, 0x6f, 0xef, 0xea, 0x6d, 0x96, 0x27, 0xb6, 0x61, 0x8f, 0xb4, 0x36, 0x15, 0xb4, 0x6c,
	0x5a, 0x1b, 0xb9, 0x00, 0x1a, 0xfc, 0x4c, 0xd1, 0x27, 0x24, 0x5c, 0x44, 0x17, 0x54, 0x1b, 0x53,
	0xb4, 0x79, 0x09, 0x56, 0xf9, 0x22, 0x27, 0x1b, 0xc4, 0x4c, 0x58, 0xad, 0xfb, 0xb3, 0x02, 0xba,
	0x0e, 0xe7, 0x39, 0x94, 0xba, 0x2b, 0x9d, 0x76, 0x1c, 0xf9, 0x71, 0xdd, 0x8a, 0x88, 0x88, 0x60,
	0x19, 0x74, 0xbc, 0xed, 0x90, 0x74, 0xea, 0xbe, 0xd8, 0x38, 0x2d, 0xc4, 0xd0, 0x74, 0x36, 0x1d,
	0xea, 0x78, 0x9d, 0x17, 0x70, 0x2a, 0xfd, 0x9d, 0xd0, 0xa6, 0x5e, 0xb7, 0x10, 0xc3, 0x71, 0xdd,
	0x27, 0x21, 0xeb, 0x9f, 0x3c, 0x74, 0xc2, 0x48, 0x44, 0xb4, 0x36, 0x28, 0x56, 0x23, 0x86, 0x1c,
	0x79, 0x7d, 0x51, 0xf4, 0x7b, 0x03, 0x2e, 0xa7, 0xb0, 0x9e, 0xe0, 0x58, 0x52, 0xaf, 0x54, 0x05,
	0xec, 0x26, 0xac, 0x70, 0x58, 0xc3, 0xf1, 0xb2, 0xe2, 0xe1, 0x12, 0x8a, 0xb9, 0x68, 0x4b, 0xe4,
	0xfa, 0x61, 0x54, 0xb9, 0x2c, 0xde, 0x7e, 0x00, 0xae, 0x51, 0xaa, 0x0a, 0x77, 0xc3, 0x88, 0x50,
	0x4f, 0xc9, 0x8b, 0xc8, 0x43, 0xba, 0x3a, 0x74, 0x65, 0x64, 0x5f, 0x2b, 0xd9, 0x6f, 0x0a, 0x9a,
	0x76, 0x7d, 0x24, 0x79, 0xaf, 0x08, 0xdc, 0x2d, 0xb8, 0x22, 0x18, 0x26, 0x59, 0xa0, 0x14, 0x59,
	0x5d, 0x15, 0xc0, 0xd7, 0xe1, 0x36, 0xdb, 0x6b, 0x2b, 0x88, 0x9c, 0x86, 0x65, 0x9f, 0xc8, 0xee,
	0xab, 0xa8, 0xd1, 0x0b, 0xcb, 0x88, 0x35, 0xd1, 0xe8, 0x4d, 0x78, 0x45, 0x2c, 0x57, 0xf8, 0x02,
	0xed, 0xd6, 0x45, 0xbb, 0x0f, 0xc3, 0x07, 0xb4, 0x76, 0x8c, 0xaf, 0x4e, 0x68, 0x78, 0x0d, 0xad,
	0x81, 0xe7, 0x7b, 0x59, 0x52, 0x12, 0xc0, 0x9a, 0x00, 0x56, 0x60, 0xda, 0xde, 0xb5, 0x5d, 0x52,
	0xb9, 0x2e, 0x9e, 0xac, 0xc1, 0xb9, 0xc4, 0xfa, 0xe4, 0x5b, 0xd6, 0x72, 0x42, 0x16, 0xd6, 0xdc,
	0x40, 0x80, 0x8e, 0x47, 0x1e, 0xb6, 0x89, 0x9d, 0x04, 0x9c, 0xc5, 0xba, 0xde, 0x10, 0x80, 0x0d,
	0xb8, 0xa4, 0xf5, 0xa0, 0xad, 0xfe, 0x2d, 0xa1, 0xd4, 0xca, 0x73, 0x73, 0x95, 0xb9, 0x5a, 0x79,
	0xee, 0x66, 0xe5, 0x66, 0xed, 0x9f, 0x95, 0x00, 0x54, 0xad, 0x98, 0xf9, 0x21, 0x4d, 0xc3, 0x9d,
	0x90, 0xc2, 0xd5, 0x4c, 0xd7, 0xcf, 0x95, 0xb8, 0x8a, 0xbb, 0x0a, 0xe6, 0x03, 0x3f, 0xd8, 0x0e,
	0xdb, 0x96, 0x4d, 0xc2, 0x5c, 0x43, 0x1d, 0xbd, 0x7e, 0x11, 0x25, 0x77, 0x0b, 0xae, 0xa4, 0x5a,
	0x14, 0x68, 0xb9, 0x4d, 0xf8, 0xb0, 0x50, 0xfa, 0xb2, 0x41, 0x12, 0xc2, 0x10, 0xc2, 0x85, 0xf9,
	0x9c, 0x79, 0x71, 0x31, 0x19, 0x2b, 0xfd, 0x51, 0xf8, 0x50, 0xaa, 0x2d, 0x76, 0x8d, 0x8b, 0x3b,
	0x28, 0x8b, 0x85, 0x7d, 0x06, 0xa7, 0x71, 0xd5, 0x9c, 0xf9, 0xa6, 0xb6, 0x9a, 0xb5, 0x13, 0x4b,
	0xec, 0xf0, 0x7a, 0xde, 0xe1, 0xcb, 0xb9, 0x0e, 0xe7, 0xb9, 0x5b, 0x57, 0xe0, 0x08, 0xf0, 0x50,
	0xc4, 0xdf, 0x2f, 0x01, 0xa8, 0x5a, 0xbb, 0x89, 0x9b, 0xa8, 0xa0, 0xf8, 0xa3, 0xff, 0xc3, 0x50,
	0x9b, 0x88, 0x64, 0x43, 0xde, 0x26, 0x92, 0xd6, 0x26, 0xa9, 0x53, 0x23, 0x74, 0xd3, 0xf1, 0x2c,
	0xba, 0x04, 0x31, 0xf1, 0x3a, 0x2d, 0x12, 0x14, 0xd8, 0x16, 0xaf, 0xc0, 0x3a, 0x37, 0x6c, 0xdb,
	0x4e, 0x3d, 0x8e, 0x1e, 0x46, 0xd9, 0xc5, 0x55, 0xe6, 0x04, 0x25, 0xe1, 0x04, 0x8c, 0xd4, 0x5e,
	0xc6, 0x74, 0x78, 0x03, 0x5e, 0x16, 0x96, 0x61, 0xdd, 0xd9, 0xa2, 0x0a, 0xa9, 0x49, 0xd7, 0xa9,
	0xd1, 0xf1, 0x84, 0xcc, 0x4b, 0xac, 0xbc, 0x1d, 0xcb, 0xed, 0x28, 0xcb, 0x3d, 0x15, 0xb9, 0x99,
	0xad, 0xcc, 0xd6, 0xfe, 0xeb, 0x14, 0x54, 0xd2, 0x05, 0x86, 0xe6, 0xc7, 0xb4, 0x05, 0xbc, 0x39,
	0xb1, 0x22, 0x11, 0x2f, 0xe3, 0x97, 0x45, 0x6c, 0x9f, 0xdb, 0x5d, 0x09, 0xf7, 0x17, 0x7a, 0x72,
	0x2b, 0x50, 0x11, 0x63, 0x15, 0xe1, 0x6a, 0xe5, 0xd1, 0x7c, 0x0c, 0xee, 0x06, 0xe4, 0xad, 0x0e,
	0x09, 0x59, 0x8e, 0x46, 0x44, 0xb3, 0xb1, 0x77, 0x90, 0x10, 0x65, 0x68, 0x79, 0xf5, 0x4d, 0xff,
	0x21, 0x95, 0x15, 0x65, 0xa4, 0x7a, 0x50, 0xa6, 0x24, 0x31, 0x7a, 0x02, 0x92, 0x48, 0x87, 0x90,
	0x79, 0xbb, 0x6a, 0x35, 0x5f, 0x86, 0x35, 0x19, 0x8c, 0xd9, 0xb5, 0x5d, 0xc7, 0x8e, 0xeb, 0xbb,
	0x9e, 0xd5, 0x72, 0x6c, 0x35, 0xa6, 0x19, 0xa4, 0xae, 0xa9, 0x17, 0x1e, 0x38, 0x36, 0xb7, 0x63,
	0x5b, 0x56, 0x64, 0x37, 0x49, 0x9d, 0xea, 0x55, 0x2e, 0xf4, 0xb8, 0x3a, 0x51, 0x4e, 0xd0, 0x9b,
	0xf0, 0x0a, 0x37, 0xe7, 0x1b, 0x96, 0xeb, 0x6e, 0x5a, 0xf6, 0xb6, 0x9a, 0x0d, 0x55, 0x72, 0xd6,
	0x26, 0xfd, 0x69, 0x47, 0x31, 0x4b, 0x86, 0x08, 0xc7, 0x88, 0x39, 0x7c, 0x1a, 0x2e, 0x89, 0xe3,
	0xcf, 0x23, 0x2f, 0x3e, 0x3d, 0x4e, 0x06, 0xe3, 0xcb, 0xa1, 0xa2, 0xa5, 0xfa, 0xc6, 0xff, 0xc2,
	0x34, 0xcc, 0x8a, 0xfa, 0x95, 0x0f, 0x6a, 0x3b, 0x7d, 0xb5, 0xa8, 0x66, 0x14, 0x6f, 0xf0, 0xf7,
	0xca, 0xca, 0x51, 0x17, 0x26, 0x8a, 0x10, 0x11, 0x99, 0xed, 0xbd, 0x02, 0x67, 0x04, 0x46, 0x4d,
	0xc0, 0x40, 0xce, 0xa1, 0xe5, 0xf9, 0x51, 0x93, 0x45, 0xe0, 0x13, 0x14, 0xb5, 0x05, 0xe9, 0x3e,
	0x72, 0xc1, 0x36, 0x6f, 0xae, 0xc2, 0xd9, 0x76, 0x40, 0x76, 0x1c, 0xbf, 0x13, 0xba, 0xbb, 0x71,
	0xd8, 0xec, 0x44, 0xd4, 0x7d, 0x52, 0xcc, 0xf5, 0x71, 0x78, 0x2d, 0x8c, 0xac, 0xc0, 0xb5, 0x82,
	0xed, 0xd8, 0x6e, 0x77, 0xa8, 0xc9, 0xc2, 0x18, 0xa7, 0x91, 0xe4, 0xe1, 0x72, 0xc5, 0x2b, 0xb6,
	0xdd, 0x73, 0x1a, 0x3b, 0x5e, 0xa1, 0x60, 0x9e, 0xc6, 0x56, 0x5b, 0xe1, 0x67, 0x75, 0xa6, 0x9d,
	0xd1, 0xc9, 0xcc, 0xb7, 0x93, 0x2e, 0xdb, 0xbe, 0xeb, 0xd8, 0xbb, 0x29, 0x27, 0x6e, 0x16, 0x39,
	0xec, 0x59, 0xac, 0x08, 0x73, 0xcc, 0xa1, 0xf0, 0x3e, 0xce, 0x01, 0x92, 0xb4, 0x0d, 0xcf, 0x68,
	0x44, 0x8e, 0x33, 0x1f, 0x0a, 0x28, 0x2c, 0x6a, 0x05, 0x5b, 0x9d, 0x16, 0x8b, 0x2c, 0x27, 0xb1,
	0x6d, 0xdb, 0xdf, 0xf2, 0x9c, 0x4f, 0x11, 0xe4, 0x13, 0xaf, 0x40, 0x85, 0xbe, 0x72, 0x3c, 0xa5,
	0x66, 0x94, 0xb7, 0x7b, 0x1d, 0xaa, 0x5c, 0x53, 0xe1, 0xf7, 0x2c, 0x44, 0xa3, 0x8c, 0x75, 0x96,
	0xde, 0xce, 0x98, 0x22, 0xc2, 0x4c, 0x2f, 0xd5, 0xfe, 0xbb, 0x01, 0xa0, 0x0a, 0x88, 0x27, 0x0a,
	0x73, 0x05, 0xc5, 0x44, 0xfa, 0x75, 0x43, 0x25, 0xd3, 0x59, 0x34, 0x96, 0xcb, 0xd4, 0x0c, 0x81,
	0xde, 0x84, 0x15, 0xfc, 0x9e, 0x99, 0x9c, 0x7e, 0xab, 0xed, 0xb8, 0xcc, 0xb6, 0x15, 0xa4, 0x7a,
	0x83, 0xf6, 0xc3, 0x21, 0x9b, 0x8e, 0x97, 0x09, 0x17, 0x1b, 0xe6, 0x79, 0x80, 0x4d, 0xea, 0xd1,
	0xfb, 0xfe, 0xb6, 0x83, 0x44, 0xff, 0x3a, 0x9c, 0xf7, 0xfc, 0x98, 0x47, 0x37, 0xea, 0x24, 0xb4,
	0x03, 0x27, 0x31, 0x46, 0x04, 0x09, 0xd6, 0xca, 0x73, 0xd3, 0x95, 0xe9, 0xda, 0x97, 0x0d, 0x38,
	0x93, 0x29, 0x77, 0x9e, 0x1c, 0xf4, 0x4d, 0xb7, 0xc0, 0x4b, 0xd0, 0x42, 0x41, 0x5f, 0xcb, 0xf3,
	0x3d, 0xc7, 0xa6, 0xe4, 0x4c, 0xe2, 0x86, 0x6b, 0x6d, 0xe5, 0x08, 0xe2, 0x55, 0x38, 0xdb, 0xf0,
	0x15, 0x1f, 0x66, 0x22, 0x6a, 0xdf, 0x2d, 0x83, 0x99, 0x2d, 0x9d, 0x9e, 0x98, 0xee, 0xcb, 0x36,
	0xd1, 0x74, 0xee, 0x94, 0x4a, 0xf7, 0x89, 0x9a, 0x04, 0xaf, 0xe1, 0x6c, 0x75, 0xb8, 0x2a, 0xcd,
	0x8c, 0xf2, 0x0e, 0x5c, 0x97, 0xf1, 0x8a, 0x96, 0xd5, 0x6e, 0x53, 0x56, 0x25, 0x54, 0xc9, 0x15,
	0xd8, 0x4f, 0x39, 0x78, 0x9e, 0x0f, 0x72, 0x42, 0x44, 0x7c, 0x72, 0x1b, 0x5f, 0x81, 0xf5, 0x02,
	0xbc, 0x12, 0x5f, 0x53, 0xd8, 0x8a, 0xf7, 0xdb, 0x71, 0x12, 0x46, 0xd5, 0x07, 0x9e, 0xb1, 0x8f,
	0x85, 0x8d, 0x44, 0x29, 0x42, 0xea, 0x1a, 0xdc, 0x44, 0x45, 0xe1, 0x10, 0x22, 0x59, 0x13, 0xce,
	0xb7, 0x2a, 0x00, 0x77, 0x0d, 0x2e, 0xb4, 0x3a, 0x6e, 0xe4, 0x70, 0xc9, 0x43, 0x02, 0xf2, 0x16,
	0x55, 0x44, 0x04, 0xa9, 0x9c, 0xd7, 0xe1, 0x76, 0x93, 0x74, 0x02, 0x27, 0x8c, 0x1c, 0x9b, 0x95,
	0x23, 0x04, 0x8c, 0xb1, 0xf9, 0xa0, 0x1c, 0x37, 0x62, 0x61, 0xb6, 0x94, 0x38, 0x91, 0x26, 0xf9,
	0x3c, 0x8e, 0x08, 0xf2, 0xe8, 0x31, 0x5d, 0x6a, 0x6d, 0xc4, 0xa1, 0x12, 0x1d, 0x1f, 0x80, 0x6b,
	0x62, 0xc8, 0x19, 0x1f, 0xa3, 0xe5, 0x91, 0x16, 0xa5, 0x3e, 0x29, 0x43, 0x6a, 0xff, 0xc5, 0x80,
	0x05, 0x54, 0x34, 0xff, 0x02, 0x05, 0x33, 0x12, 0x8b, 0x89, 0xe7, 0xab, 0x82, 0xc7, 0xd7, 0xe0,
	0x1c, 0xab, 0x14, 0x11, 0xb4, 0x9b, 0x57, 0x4c, 0x10, 0xf9, 0x3e, 0xb5, 0x5d, 0x77, 0xe3, 0x6d,
	0xb2, 0x8b, 0x52, 0xc1, 0x57, 0xc1, 0xdc, 0x26, 0xbb, 0x69, 0x69, 0x57, 0x42, 0x02, 0x8d, 0xf5,
	0xbc, 0xe9, 0xfa, 0xf6, 0x76, 0x7e, 0x0e, 0x68, 0x96, 0xee, 0x86, 0xe5, 0xba, 0x49, 0xb1, 0x8a,
	0x0e, 0x91, 0x4c, 0xfe, 0x7f, 0x0c, 0x58, 0xd4, 0x0a, 0xfc, 0x27, 0x26, 0x06, 0x34, 0x34, 0x9e,
	0xf5, 0x37, 0x50, 0x62, 0x80, 0xc7, 0x1c, 0x0b, 0x8d, 0xab, 0x4f, 0xc2, 0x1b, 0xd4, 0x5b, 0x0a,
	0x1c, 0xb6, 0xf5, 0x6e, 0xec, 0xfb, 0xad, 0xb8, 0xe5, 0x07, 0x24, 0x26, 0xd6, 0x16, 0x09, 0xdc,
	0xdd, 0x38, 0x6a, 0x06, 0x24, 0x6c, 0xfa, 0x6e, 0x3d, 0x65, 0x30, 0xca, 0xf5, 0xa9, 0xc3, 0x47,
	0x4f, 0xee, 0xc1, 0xf3, 0xe3, 0x88, 0x78, 0x9d, 0x80, 0x55, 0xf5, 0xb8, 0x2e, 0xdb, 0xf3, 0x90,
	0x33, 0x8a, 0x4c, 0xa7, 0xff, 0xaf, 0x05, 0x98, 0x4e, 0xca, 0xa6, 0x27, 0xe5, 0x8b, 0x18, 0x0a,
	0x4f, 0xf7, 0x1f, 0x2e, 0xa8, 0xe4, 0x4f, 0x12, 0x3b, 0xcf, 0x2b, 0x01, 0xe0, 0x51, 0x75, 0x47,
	0x18, 0x84, 0xe9, 0xc2, 0x8c, 0x80, 0x84, 0x21, 0xe5, 0x31, 0x6c, 0x79, 0xa0, 0x36, 0x79, 0x19,
	0x40, 0x16, 0xe6, 0x2e, 0xe8, 0x47, 0x7a, 0xa6, 0x53, 0x58, 0x11, 0x27, 0x84, 0x4f, 0x45, 0x87,
	0x15, 0x49, 0xde, 0x2a, 0x23, 0x9e, 0xdd, 0x0a, 0xac, 0x76, 0xd3, 0x25, 0x61, 0xa8, 0xf3, 0x2c,
	0x0e, 0xbf, 0x27, 0x83, 0xe2, 0x5d, 0x15, 0x98, 0x11, 0x12, 0x16, 0x46, 0x75, 0xea, 0x99, 0x37,
	0xdc, 0x0e, 0x35, 0xfd, 0xd3, 0x31, 0xe4, 0x9b, 0xb0, 0x62, 0x79, 0x96, 0xbb, 0x1b, 0x3a, 0x22,
	0xeb, 0xa0, 0x7d, 0x75, 0x09, 0xc5, 0x51, 0x93, 0xd7, 0x01, 0x09, 0x3b, 0x6e, 0x14, 0xa6, 0xfa,
	0x93, 0xa1, 0xb0, 0x8f, 0xc2, 0x1d, 0x64, 0x50, 0x77, 0x3c, 0x16, 0x03, 0xa9, 0xc7, 0x6f, 0x75,
	0x7c, 0x2e, 0x55, 0xd0, 0xfa, 0x68, 0x79, 0x69, 0xb6, 0x3a, 0x3b, 0x56, 0xe0, 0xb0, 0xa2, 0x14,
	0xcf, 0x6a, 0x11, 0xb9, 0x3a, 0x67, 0x04, 0x0f, 0x5d, 0x05, 0x53, 0x22, 0x3a, 0x5e, 0x9d, 0x34,
	0x1c, 0x8f, 0xc8, 0x4a, 0xac, 0x59, 0x4a, 0x86, 0x4c, 0x14, 0x32, 0xbf, 0x8c, 0x45, 0xad, 0x5d,
	0xdf, 0xe2, 0xbf, 0x6c, 0xcb, 0x63, 0x91, 0xad, 0x50, 0xc6, 0xd7, 0x5d, 0x61, 0x36, 0x69, 0xb9,
	0x6e, 0x66, 0xbb, 0x24, 0x02, 0x15, 0xa5, 0xf6, 0xcf, 0x89, 0x4f, 0x48, 0xd9, 0x77, 0x5e, 0x3c,
	0x79, 0x05, 0xd6, 0x3b, 0x9e, 0xf3, 0x56, 0x87, 0xc4, 0xe1, 0xf6, 0x2e, 0x95, 0x12, 0x8a, 0x5b,
	0x44, 0x6e, 0x5c, 0x44, 0xba, 0x66, 0xa9, 0xa3, 0x1e, 0x59, 0xc1, 0x16, 0x89, 0x62, 0x6e, 0x1e,
	0x75, 0x3c, 0x67, 0x87, 0x50, 0x3b, 0x2b, 0xb4, 0xfd, 0xb6, 0x0c, 0x73, 0x95, 0x68, 0xaf, 0x82,
	0xd7, 0x1a, 0x1d, 0xd7, 0x55, 0x38, 0x44, 0xa6, 0x55, 0xd1, 0x2b, 0xab, 0xd4, 0xc1, 0xfd, 0xa4,
	0x72, 0xf3, 0x22, 0xdc, 0x35, 0x4b, 0x77, 0x91, 0x77, 0x9b, 0x4c, 0x3d, 0x85, 0xbb, 0x2c, 0x70,
	0x37, 0xe0, 0xb2, 0x4e, 0xa8, 0x1a, 0x51, 0xac, 0x88, 0x51, 0x5e, 0x81, 0x33, 0xca, 0x16, 0x14,
	0xd4, 0x7e, 0x45, 0x74, 0xf2, 0x41, 0xb8, 0x19, 0xa0, 0xfd, 0x90, 0x5e, 0x27, 0x75, 0xd6, 0x9c,
	0x80, 0x84, 0x74, 0xc1, 0x92, 0xda, 0xb6, 0xab, 0xe8, 0xbb, 0x6c, 0xba, 0xc9, 0x22, 0x25, 0xf6,
	0xa5, 0xaa, 0x57, 0x59, 0x15, 0x30, 0xbd, 0x9a, 0x0e, 0x05, 0x7b, 0x22, 0x7f, 0x9b, 0x88, 0x0d,
	0x5d, 0x13, 0xa3, 0x7c, 0x15, 0x6a, 0x5a, 0xb5, 0x60, 0x44, 0xb6, 0x48, 0x10, 0xbb, 0x4e, 0x44,
	0x02, 0xcb, 0x95, 0xc3, 0x5e, 0x47, 0x6e, 0x98, 0x06, 0x17, 0x6e, 0xa7, 0x15, 0x24, 0xca, 0xad,
	0x69, 0x51, 0x27, 0x8c, 0x04, 0xfc, 0x33, 0xd7, 0x44, 0xbb, 0x7b, 0x70, 0x0b, 0xd7, 0x44, 0x06,
	0xa4, 0x65, 0x45, 0xd4, 0xdb, 0x21, 0x5e, 0x3d, 0xf6, 0x1b, 0x3c, 0xd4, 0x94, 0xb4, 0xa9, 0x89,
	0x36, 0x17, 0xe1, 0x74, 0xb8, 0xeb, 0x45, 0xd6, 0x43, 0xfe, 0xe2, 0xba, 0x78, 0x71, 0x1b, 0xae,
	0x6a, 0x1b, 0x10, 0xa5, 0x23, 0xdf, 0x1b, 0x38, 0x6c, 0xc0, 0xd7, 0x31, 0x8e, 0x02, 0xcb, 0x0b,
	0x9d, 0xc8, 0xd9, 0x21, 0x7c, 0x05, 0x79, 0xb7, 0x37, 0xc4, 0xc2, 0x6d, 0xc0, 0x25, 0x05, 0xe6,
	0x08, 0xd9, 0xe5, 0xcd, 0x2c, 0x95, 0xc4, 0xae, 0xb5, 0xc9, 0x92, 0x76, 0x49, 0x09, 0x51, 0xd8,
	0x71, 0x22, 0x22, 0x22, 0x64, 0xb3, 0x4c, 0xef, 0xf1, 0x68, 0x12, 0x35, 0x17, 0xa9, 0x3c, 0xdd,
	0x74, 0xbc, 0xc4, 0x4e, 0xb9, 0x8d, 0x74, 0xa7, 0xc7, 0xea, 0xe6, 0x22, 0x96, 0x16, 0xe6, 0x23,
	0x7a, 0x49, 0x45, 0xd9, 0x66, 0x2b, 0xa7, 0xa9, 0x61, 0xbb, 0xa4, 0x1f, 0x2f, 0x9b, 0x98, 0x22,
	0xd6, 0xe1, 0x58, 0x19, 0x84, 0xca, 0xf3, 0x4c, 0x1c, 0xfa, 0x13, 0xf2, 0x49, 0xb7, 0xe0, 0x0a,
	0x55, 0xda, 0x8d, 0x80, 0x48, 0xb9, 0xa0, 0x91, 0xba, 0x34, 0x6c, 0xdf, 0x37, 0x60, 0x01, 0x1d,
	0x5b, 0x9b, 0x68, 0x8d, 0x20, 0x2c, 0x1e, 0xdb, 0x7d, 0x65, 0x8c, 0x88, 0x30, 0x00, 0x4b, 0xa5,
	0x66, 0x06, 0x76, 0x0d, 0x2e, 0x9c, 0x1c, 0xf5, 0xdb, 0xa8, 0xfd, 0xa1, 0x01, 0xa7, 0xf1, 0x21,
	0xb8, 0x89, 0x81, 0x34, 0x0c, 0xc6, 0x83, 0xfa, 0x8a, 0xa1, 0x22, 0x69, 0x5a, 0x21, 0x6c, 0x76,
	0x58, 0x57, 0xc1, 0xcc, 0x51, 0x70, 0x06, 0x4a, 0x2e, 0x0b, 0x33, 0x43, 0x08, 0xef, 0x12, 0x12,
	0x16, 0x5c, 0xc1, 0x30, 0xc7, 0x32, 0xa1, 0x83, 0x29, 0xa4, 0xf8, 0x92, 0xb7, 0xc8, 0x4e, 0x4f,
	0x20, 0x42, 0x37, 0xd6, 0xfe, 0xd8, 0x80, 0x85, 0x50, 0x3b, 0x9f, 0x77, 0xf2, 0x16, 0x20, 0x2c,
	0x9e, 0xed, 0xb7, 0x90, 0x41, 0x88, 0x2b, 0x7a, 0x4f, 0xac, 0x1f, 0x70, 0x7d, 0x7f, 0xbb, 0xd3,
	0xd6, 0x4b, 0x84, 0x98, 0xb8, 0x52, 0xfe, 0x6b, 0x66, 0xe0, 0x25, 0x01, 0xab, 0xc1, 0x45, 0x54,
	0x9c, 0x98, 0xac, 0x30, 0x83, 0x84, 0xca, 0x3c, 0xd4, 0x31, 0x9a, 0xfa, 0xe3, 0x0b, 0x30, 0x5b,
	0xfb, 0x4c, 0x19, 0x66, 0xf9, 0x81, 0xc3, 0x89, 0x21, 0x19, 0x8e, 0xc3, 0x13, 0x97, 0xf5, 0xb4,
	0x35, 0xb8, 0xc8, 0x83, 0x3f, 0xc5, 0x21, 0x99, 0xc9, 0xf4, 0x47, 0x21, 0x8a, 0xb3, 0x34, 0xe1,
	0x54, 0x42, 0x90, 0xba, 0x6f, 0x6f, 0xa3, 0xc8, 0x4d, 0xca, 0x2e, 0x66, 0xc5, 0xa3, 0x9e, 0x1f,
	0x73, 0x94, 0xd3, 0xb2, 0xb6, 0x90, 0x17, 0xf4, 0x0a, 0xac, 0xe3, 0x17, 0x94, 0x35, 0xdb, 0x56,
	0x90, 0x1b, 0x6b, 0x61, 0xe9, 0x17, 0xe6, 0x74, 0xb7, 0xfc, 0x8e, 0x17, 0xc5, 0xd2, 0xa8, 0x49,
	0x19, 0x46, 0x0c, 0x97, 0x40, 0x78, 0x0e, 0x20, 0x95, 0x95, 0x9a, 0x45, 0xc9, 0x1f, 0x0d, 0xc7,
	0xe5, 0x65, 0xb4, 0xdb, 0x26, 0x94, 0xf0, 0x5b, 0xb8, 0x24, 0x1d, 0xf5, 0xca, 0x61, 0xa9, 0x5e,
	0x65, 0xa9, 0x2e, 0x5d, 0xfb, 0xce, 0x66, 0x3b, 0xf0, 0x6d, 0x6a, 0xe1, 0x31, 0xad, 0x22, 0x0a,
	0x66, 0x00, 0x95, 0xfa, 0xa6, 0xeb, 0x69, 0x45, 0x55, 0x6e, 0xed, 0x5b, 0x65, 0x58, 0x4e, 0x1d,
	0x1a, 0x9d, 0x58, 0xa6, 0x92, 0xc2, 0xe3, 0x42, 0xab, 0x1d, 0x38, 0x97, 0x3a, 0xe0, 0x92, 0x14,
	0x64, 0x97, 0x4e, 0x2e, 0xcc, 0xe1, 0xa7, 0x48, 0x92, 0x9e, 0x4c, 0xfd, 0x9c, 0x0b, 0xab, 0xdd,
	0x7e, 0x7f, 0x4a, 0x95, 0xbf, 0x38, 0x9e, 0xed, 0x76, 0xea, 0xd4, 0x34, 0xb1, 0x58, 0xd4, 0x2e,
	0x4b, 0x6c, 0x2f, 0xc1, 0xaa, 0x24, 0x36, 0x4a, 0xf7, 0x09, 0xbe, 0xe9, 0xa8, 0xe2, 0x45, 0x03,
	0x85, 0x4a, 0x64, 0x3f, 0xf9, 0x34, 0xc7, 0xbc, 0x4c, 0xdc, 0x83, 0x74, 0xcc, 0x1d, 0x4f, 0x54,
	0x3c, 0xa9, 0xd0, 0xcb, 0x0d, 0xb8, 0xac, 0xa3, 0xf3, 0xe3, 0xed, 0xd4, 0xdb, 0xe6, 0xaa, 0xce,
	0xda, 0x0c, 0x7d, 0xb7, 0x13, 0xf1, 0x80, 0xd5, 0x34, 0xca, 0x3a, 0xe1, 0x73, 0x10, 0x59, 0xba,
	0xdb, 0x80, 0x4b, 0x9d, 0x90, 0x04, 0x71, 0x2e, 0x6a, 0x16, 0xd1, 0x11, 0x4f, 0x29, 0xe4, 0xe2,
	0x64, 0x35, 0xcc, 0x6b, 0x70, 0xa3, 0xe3, 0xd5, 0x9d, 0x46, 0x83, 0x04, 0xac, 0x1c, 0x28, 0x7d,
	0x0e, 0x23, 0x1d, 0xe3, 0x33, 0x6a, 0xbf, 0x6d, 0xc0, 0x02, 0x3a, 0x22, 0x3c, 0x51, 0x7c, 0x22,
	0x2c, 0x96, 0x22, 0x3f, 0xae, 0xa4, 0x67, 0x94, 0xa4, 0xc5, 0x0b, 0xa4, 0x67, 0xc2, 0xd8, 0x0c,
	0xc3, 0xcd, 0x39, 0xb1, 0x8b, 0x65, 0x73, 0x15, 0xce, 0xb2, 0x17, 0xcc, 0x0d, 0xf3, 0x7c, 0xc6,
	0xac, 0x9f, 0x42, 0x71, 0xb2, 0x8b, 0x70, 0x9a, 0xbe, 0x0f, 0x53, 0xb5, 0x64, 0x53, 0xb5, 0xaf,
	0x4d, 0x0b, 0x35, 0x9c, 0x78, 0x8a, 0x2f, 0xa6, 0x86, 0x33, 0xfe, 0xe2, 0x7f, 0x28, 0x67, 0xf4,
	0x70, 0x81, 0xdb, 0x38, 0xb9, 0x7e, 0x5f, 0x2a, 0xbf, 0x4b, 0xb0, 0x24, 0x6c, 0x36, 0xdd, 0x49,
	0x9c, 0xf9, 0xa1, 0x9c, 0xc4, 0xeb, 0x50, 0x45, 0xaf, 0xf5, 0x28, 0x6c, 0x19, 0x19, 0xa9, 0xe1,
	0xf6, 0x6e, 0x23, 0xa0, 0x7a, 0x22, 0x8c, 0xac, 0x68, 0x82, 0x47, 0x3b, 0xad, 0x07, 0x8c, 0x99,
	0x69, 0x67, 0x71, 0x7d, 0xab, 0x50, 0x58, 0x44, 0xa6, 0x7a, 0xcf, 0x0f, 0x1f, 0xad, 0xc3, 0x79,
	0x4b, 0xf3, 0x45, 0x23, 0xdf, 0x8f, 0x37, 0x9d, 0x2d, 0x41, 0xa6, 0x2c, 0xea, 0x21, 0xf8, 0xa6,
	0xcd, 0xac, 0x58, 0x2f, 0x4e, 0x0c, 0x5e, 0x15, 0x3c, 0x62, 0x91, 0x5e, 0xdb, 0x0f, 0x02, 0x62,
	0x47, 0xb1, 0x74, 0x27, 0x54, 0xd4, 0xe8, 0x13, 0xf0, 0xba, 0x8a, 0x9f, 0x09, 0xc7, 0x20, 0x49,
	0xe8, 0xe8, 0x63, 0xd4, 0x9d, 0x85, 0x05, 0x1c, 0xdb, 0xd6, 0x81, 0xc9, 0x79, 0x20, 0xa9, 0xbb,
	0xd4, 0x41, 0x86, 0xdb, 0x70, 0x95, 0x19, 0xbc, 0xc8, 0x59, 0xd1, 0x3b, 0x5d, 0x44, 0x4e, 0xf8,
	0x09, 0xb5, 0x31, 0x32, 0x4a, 0xfd, 0xbd, 0x19, 0x58, 0xd2, 0xcf, 0xc2, 0x4f, 0xb4, 0x6b, 0x75,
	0x38, 0x26, 0xda, 0xf7, 0x67, 0x94, 0xfe, 0xe6, 0x5a, 0x86, 0xaf, 0x69, 0x4e, 0x50, 0xe7, 0x23,
	0xf0, 0xaa, 0x8e, 0x29, 0x8a, 0x7b, 0xf0, 0xd7, 0x8a, 0x8c, 0x5f, 0x81, 0xf5, 0xbc, 0x96, 0xf9,
	0xd1, 0x0f, 0xe5, 0xd0, 0x0a, 0xb0, 0x4e, 0xb0, 0x53, 0xa8, 0xd0, 0x42, 0x88, 0x27, 0x15, 0x23,
	0xc5, 0xe1, 0x4e, 0xde, 0x4d, 0x2a, 0x30, 0x32, 0x8d, 0xea, 0x49, 0xa4, 0xe0, 0x4d, 0x7d, 0x51,
	0x60, 0x25, 0xf9, 0xbe, 0x06, 0x37, 0xb8, 0xbb, 0x5f, 0x27, 0x11, 0x09, 0x5a, 0x74, 0x9a, 0xa2,
	0xfb, 0xc0, 0x6f, 0xb1, 0xf9, 0x50, 0x0b, 0x4b, 0x49, 0xdd, 0xab, 0x60, 0x26, 0x9e, 0x8e, 0xe6,
	0x8d, 0xcd, 0x21, 0xba, 0xe0, 0xed, 0x79, 0xbf, 0x9b, 0x24, 0x26, 0xad, 0x76, 0xb4, 0x1b, 0x87,
	0x51, 0x40, 0x99, 0x77, 0x1e, 0x47, 0x86, 0x65, 0xc9, 0x69, 0x20, 0xf1, 0x84, 0xc5, 0xca, 0xe3,
	0xd0, 0xb5, 0xc2, 0xa6, 0x3a, 0x86, 0x23, 0x83, 0x09, 0x0b, 0x68, 0x1d, 0x78, 0x8b, 0x76, 0x40,
	0x92, 0x53, 0x14, 0xec, 0xbb, 0xda, 0x59, 0x1b, 0xc1, 0x03, 0x42, 0x72, 0x2c, 0xa2, 0x79, 0x07,
	0xc4, 0xee, 0x04, 0x21, 0x72, 0x00, 0x25, 0x85, 0xb0, 0x0c, 0x62, 0x72, 0xee, 0x45, 0x15, 0x01,
	0xbe, 0x0c, 0x6b, 0x1d, 0xc1, 0x5a, 0x01, 0x61, 0xba, 0xc4, 0x26, 0x3a, 0x76, 0x19, 0x1d, 0x32,
	0xf2, 0xc8, 0x96, 0x15, 0x65, 0x3b, 0xd7, 0xf0, 0x95, 0xec, 0x9e, 0xb6, 0x3a, 0x21, 0x5b, 0x32,
	0x8b, 0xad, 0xbc, 0x08, 0xe7, 0x18, 0xfc, 0x18, 0x1f, 0xf1, 0xea, 0xc4, 0xb3, 0x71, 0xea, 0xd2,
	0xcc, 0xd1, 0xa9, 0x9a, 0x45, 0x7c, 0x56, 0xe8, 0xb4, 0xff, 0x3d, 0x05, 0xa7, 0xf1, 0x05, 0x11,
	0x93, 0x6b, 0x09, 0x10, 0x18, 0xf3, 0xd6, 0x37, 0xa7, 0x50, 0x31, 0x01, 0x3e, 0xc2, 0x97, 0xeb,
	0x32, 0x72, 0x69, 0x17, 0x92, 0x60, 0xc7, 0xb1, 0x09, 0x3f, 0xf3, 0x97, 0xd2, 0x07, 0x33, 0xa8,
	0x54, 0x89, 0x97, 0xcb, 0x6a, 0xb0, 0x12, 0x32, 0x2d, 0x44, 0xe5, 0x8c, 0x5e, 0x30, 0x84, 0x6d,
	0x14, 0xfe, 0xc5, 0x4d, 0x2b, 0x24, 0x49, 0x71, 0x54, 0x36, 0x7c, 0x8c, 0x62, 0x06, 0x0c, 0xc6,
	0xca, 0x0d, 0x5b, 0xfe, 0x4e, 0x4e, 0x5d, 0xc0, 0x2b, 0xb0, 0x6e, 0x31, 0xd7, 0xe7, 0x84, 0x6e,
	0x67, 0xc4, 0x34, 0x6a, 0x70, 0x51, 0x56, 0x46, 0xa6, 0x30, 0xb3, 0x68, 0x84, 0x12, 0x93, 0xfd,
	0xee, 0x1c, 0x1a, 0x61, 0xf2, 0xdd, 0xa2, 0x0e, 0xe7, 0xc5, 0x47, 0x4f, 0xca, 0x32, 0xca, 0x74,
	0xf5, 0xb7, 0x0c, 0x58, 0xd4, 0xae, 0xf5, 0x98, 0x18, 0x2f, 0xd7, 0xd0, 0x78, 0xff, 0x0f, 0x55,
	0xb8, 0x3c, 0xc9, 0x5e, 0x14, 0xef, 0x3f, 0xb5, 0x5d, 0x44, 0x9a, 0x80, 0x63, 0x9d, 0x7a, 0xa8,
	0x05, 0x8d, 0xf5, 0x2c, 0x8f, 0x22, 0x6c, 0x19, 0xea, 0xfe, 0xc7, 0x65, 0x38, 0x93, 0xb9, 0x42,
	0x64, 0x72, 0x22, 0x2f, 0xdd, 0x02, 0xcf, 0xe0, 0x8f, 0xa6, 0x50, 0x26, 0x4f, 0x7c, 0x7f, 0xd3,
	0x25, 0x45, 0x86, 0xcd, 0x0b, 0x98, 0x24, 0xc6, 0x8b, 0x98, 0x24, 0x25, 0x64, 0x0c, 0x24, 0x19,
	0xa3, 0x74, 0xd8, 0x6e, 0x0a, 0xe5, 0x7f, 0xf2, 0xe2, 0x81, 0x3a, 0xba, 0x8c, 0x02, 0xeb, 0xa1,
	0xb3, 0xe9, 0x26, 0xb9, 0xb5, 0x7c, 0xec, 0x34, 0xd2, 0xf1, 0x3b, 0x4e, 0xc8, 0x4a, 0x3d, 0x0a,
	0xa0, 0x33, 0x38, 0x66, 0x19, 0x45, 0x81, 0xb3, 0x49, 0x35, 0x89, 0x98, 0xe9, 0x2c, 0xfa, 0xa8,
	0x32, 0x46, 0xf8, 0xee, 0x0a, 0x42, 0xd4, 0xb5, 0x02, 0xb3, 0xf7, 0x84, 0x80, 0xe3, 0xdd, 0xcc,
	0xa3, 0xb5, 0x90, 0xf9, 0x74, 0x4d, 0xa5, 0x00, 0xb2, 0x7a, 0x24, 0x82, 0xec, 0x58, 0x2e, 0x7f,
	0xbf, 0x80, 0x57, 0x33, 0x51, 0x85, 0x72, 0x42, 0xda, 0x69, 0xb4, 0x52, 0xed, 0xd7, 0x4a, 0xb0,
	0x80, 0xae, 0x8d, 0x99, 0x68, 0x0a, 0x23, 0x2c, 0xa6, 0x9b, 0xff, 0x88, 0xc2, 0x21, 0xf5, 0x4e,
	0xab, 0x7d, 0x22, 0xe1, 0x7b, 0xbe, 0x10, 0x19, 0xf2, 0x60, 0xa8, 0x8a, 0x86, 0x50, 0x9e, 0xc5,
	0xf2, 0x8e, 0xf5, 0xc6, 0x0d, 0x78, 0x19, 0x0b, 0x99, 0x6c, 0x4f, 0x4f, 0x65, 0xfb, 0x63, 0x29,
	0x11, 0xad, 0xbf, 0x32, 0x8e, 0x68, 0x8a, 0x75, 0x6c, 0x12, 0xab, 0xad, 0xa1, 0xa6, 0xd5, 0x49,
	0xe7, 0x99, 0xca, 0x4c, 0xed, 0xab, 0x06, 0x2c, 0xa0, 0x4b, 0x72, 0x26, 0xae, 0x18, 0xc2, 0xe2,
	0x15, 0x7b, 0xa4, 0x16, 0xac, 0x49, 0xdc, 0x13, 0x16, 0x6c, 0x05, 0x2a, 0x9c, 0x32, 0x24, 0x0d,
	0x29, 0x9e, 0xca, 0xad, 0x79, 0x91, 0x02, 0xe2, 0x5b, 0x25, 0x58, 0xd4, 0x6e, 0xe2, 0x99, 0x9c,
	0x0a, 0xc4, 0x68, 0x3c, 0xdc, 0xff, 0x8c, 0x53, 0x81, 0xfa, 0xc1, 0xf3, 0xbc, 0x2d, 0xb6, 0x5d,
	0x2b, 0x0c, 0x1d, 0x5b, 0x3b, 0x28, 0x6a, 0x20, 0xaa, 0xa5, 0x3e, 0x5d, 0x42, 0xf5, 0x8a, 0x04,
	0x4a, 0xc8, 0x2c, 0x66, 0x29, 0xe7, 0xb6, 0x4b, 0xa4, 0xa9, 0xae, 0x60, 0x53, 0xa8, 0x1b, 0x1c,
	0x4d, 0x49, 0x05, 0xba, 0x66, 0xb2, 0xc7, 0xba, 0xa7, 0xc5, 0x9b, 0x75, 0x38, 0xcf, 0xd8, 0x40,
	0x54, 0x00, 0x25, 0xc7, 0x64, 0xad, 0x96, 0x54, 0x57, 0xb5, 0xef, 0x18, 0xb0, 0xa4, 0x5f, 0x3c,
	0x34, 0xf9, 0xb4, 0x91, 0x06, 0xc7, 0x6b, 0x37, 0x44, 0xa7, 0x8d, 0x78, 0xe9, 0x4e, 0xe1, 0x6e,
	0x53, 0xf5, 0xeb, 0xf2, 0x62, 0xbf, 0x5d, 0x61, 0xc7, 0xe6, 0xac, 0x22, 0xb3, 0x85, 0x0b, 0x4d,
	0x6a, 0xa3, 0xf6, 0xcf, 0xa7, 0x01, 0xd4, 0x85, 0x47, 0x13, 0x2b, 0x5b, 0x14, 0x14, 0x0f, 0xfc,
	0x27, 0xa7, 0x55, 0x65, 0x0b, 0xba, 0x22, 0xa0, 0x88, 0xa9, 0x33, 0x3b, 0x6a, 0x60, 0x47, 0x47,
	0x68, 0xbb, 0xec, 0x8e, 0x62, 0xe1, 0x8f, 0x12, 0x5b, 0x89, 0x6b, 0x45, 0xb5, 0x8f, 0xda, 0xf3,
	0xbb, 0xb0, 0xc1, 0x11, 0x54, 0x07, 0xd0, 0xff, 0x46, 0xc9, 0xa9, 0xac, 0x54, 0x03, 0xe9, 0x13,
	0xdc, 0x83, 0x5b, 0xf9, 0x0d, 0x50, 0xfe, 0x4a, 0xe7, 0x73, 0x66, 0x87, 0xd0, 0xd9, 0x76, 0xbc,
	0x3a, 0x09, 0x62, 0x34, 0x20, 0xd6, 0x83, 0xd2, 0x01, 0x2b, 0x50, 0xa1, 0xb0, 0x7c, 0xa7, 0x96,
	0xba, 0x34, 0x72, 0xc6, 0x2c, 0xeb, 0xd1, 0xb4, 0x82, 0x7a, 0x18, 0x27, 0x44, 0x17, 0x2a, 0xf9,
	0xff, 0x12, 0xac, 0xb2, 0xf7, 0xf8, 0x94, 0x64, 0x48, 0x22, 0x74, 0x52, 0x67, 0x1e, 0x55, 0xe2,
	0x4f, 0x90, 0x7a, 0x32, 0xf8, 0xc7, 0xf2, 0x25, 0x71, 0xd8, 0x24, 0xae, 0x8b, 0x16, 0x5a, 0xea,
	0x85, 0x35, 0x38, 0x97, 0x94, 0x07, 0xa5, 0xf2, 0xbe, 0xa7, 0x05, 0x87, 0x50, 0x27, 0xa0, 0xe3,
	0x25, 0x2a, 0x16, 0x95, 0xdf, 0x66, 0x6b, 0x4d, 0x16, 0xd1, 0x49, 0x04, 0xd9, 0x82, 0x97, 0x01,
	0xe7, 0xc0, 0x97, 0x10, 0xbc, 0x60, 0xda, 0xf8, 0x04, 0xf6, 0xb2, 0x10, 0xbd, 0xef, 0x1b, 0xb0,
	0xa4, 0x5f, 0xbd, 0x35, 0x91, 0x1f, 0x75, 0x38, 0x26, 0xeb, 0xba, 0xe2, 0xc7, 0x1d, 0x12, 0x84,
	0xf8, 0xfc, 0x43, 0xfe, 0xdd, 0x10, 0x51, 0x6c, 0xed, 0x58, 0x8e, 0xcb, 0x28, 0x4b, 0xe6, 0x72,
	0x7e, 0xaa, 0x04, 0x66, 0xf6, 0xee, 0xae, 0x89, 0x45, 0x4a, 0xd9, 0x26, 0x78, 0x68, 0xdf, 0x16,
	0x62, 0xf6, 0x16, 0x5c, 0x69, 0x07, 0x8e, 0x3a, 0xaa, 0x73, 0x92, 0x7a, 0x40, 0x24, 0xaa, 0x15,
	0x3d, 0x1a, 0x2f, 0x40, 0x31, 0x25, 0x14, 0x52, 0xe6, 0xfd, 0x6c, 0x3b, 0xec, 0x3b, 0x19, 0xd3,
	0x0b, 0x9d, 0x73, 0x08, 0x73, 0xdc, 0xef, 0xda, 0xef, 0x96, 0x60, 0x39, 0x75, 0xed, 0xd8, 0xc4,
	0xa0, 0x72, 0x0a, 0x8f, 0x97, 0xe2, 0xff, 0x1a, 0x2a, 0xf8, 0xab, 0xf2, 0x23, 0x61, 0x64, 0x45,
	0x9d, 0xf0, 0x87, 0xb9, 0xc3, 0x63, 0x0d, 0xce, 0x59, 0x9b, 0x1e, 0x15, 0xa4, 0x6e, 0x9c, 0xf8,
	0xf1, 0x16, 0x0e, 0xf5, 0x1a, 0xe6, 0x05, 0x58, 0x60, 0x07, 0xd4, 0xf4, 0x28, 0x21, 0xbb, 0xe8,
	0x23, 0x37, 0x6e, 0xb6, 0x91, 0x54, 0x10, 0x68, 0xe2, 0x23, 0x9d, 0x43, 0x60, 0x65, 0xb9, 0x9e,
	0x3c, 0xe5, 0xa1, 0xc5, 0x98, 0x67, 0xd0, 0xad, 0x1f, 0x61, 0x54, 0xcf, 0x1c, 0x22, 0x12, 0xf1,
	0x84, 0xda, 0x97, 0x4a, 0xb0, 0x80, 0xee, 0x5e, 0x9b, 0x68, 0x69, 0x20, 0x2c, 0x5e, 0xc8, 0x7f,
	0x89, 0x6c, 0xb3, 0xfb, 0xd6, 0x8e, 0x25, 0x8a, 0x0e, 0xb3, 0x8b, 0xb8, 0x01, 0x97, 0x02, 0x52,
	0xef, 0xd8, 0xec, 0x06, 0x1a, 0x2b, 0x0c, 0x99, 0xa0, 0x4c, 0x79, 0xa4, 0x3f, 0x2c, 0x51, 0xb1,
	0x43, 0x8a, 0x39, 0x87, 0x86, 0xa6, 0x50, 0x79, 0x79, 0xde, 0x47, 0x79, 0xed, 0x72, 0xfa, 0xd8,
	0xa2, 0x2c, 0x73, 0xfa, 0x47, 0x06, 0x2c, 0xa7, 0x2e, 0x94, 0x9b, 0x48, 0x6d, 0x29, 0x7c, 0x9e,
	0x8e, 0x56, 0xe6, 0x62, 0x40, 0x1e, 0x38, 0x5e, 0x3d, 0x37, 0xd3, 0xb0, 0x01, 0x97, 0x5c, 0x3f,
	0x8c, 0x78, 0x36, 0x5e, 0xc9, 0x79, 0xa7, 0xa5, 0xae, 0xfe, 0x60, 0x84, 0x87, 0x50, 0x4e, 0xfa,
	0xb8, 0xb3, 0x51, 0xfb, 0xe9, 0x32, 0x80, 0xba, 0xc8, 0x6e, 0xa2, 0x8e, 0x56, 0x50, 0x3c, 0xf0,
	0xdf, 0x9d, 0x52, 0x3a, 0xda, 0x6e, 0xb7, 0x8b, 0x37, 0xf7, 0x25, 0x58, 0x6d, 0x30, 0xce, 0x0e,
	0x49, 0x9d, 0x1a, 0xb9, 0x75, 0xea, 0x63, 0x69, 0x5b, 0x22, 0xd3, 0x23, 0x6b, 0x70, 0x8e, 0x9d,
	0x53, 0x13, 0x11, 0x85, 0x4c, 0xb4, 0x61, 0x15, 0xce, 0xd6, 0x73, 0x02, 0x7a, 0x38, 0xd6, 0x20,
	0x48, 0x64, 0x8b, 0x78, 0xe9, 0xc3, 0x0a, 0x65, 0x74, 0x83, 0x4c, 0xcb, 0xaf, 0x77, 0x5c, 0x4c,
	0x43, 0xe2, 0x1e, 0x8f, 0x69, 0x44, 0x6e, 0x22, 0xb7, 0xc2, 0x48, 0xc3, 0xef, 0x44, 0xa1, 0x53,
	0x4f, 0x0e, 0x42, 0xc7, 0xd4, 0xfd, 0x57, 0x0c, 0xf5, 0x32, 0xac, 0x35, 0xac, 0x6d, 0x65, 0x5d,
	0xe5, 0x7c, 0x7b, 0x16, 0x05, 0x96, 0xa8, 0x82, 0xb7, 0x5d, 0x2b, 0x39, 0x5a, 0x66, 0xbb, 0x9d,
	0x90, 0x15, 0x1a, 0xce, 0xe1, 0xc0, 0x52, 0x32, 0xc9, 0xdc, 0x7a, 0x67, 0x23, 0x71, 0x7e, 0x77,
	0x48, 0xc0, 0xc3, 0x91, 0x79, 0xea, 0x11, 0x50, 0xf0, 0x2f, 0x33, 0x55, 0x61, 0xd6, 0xd7, 0xad,
	0xc8, 0x52, 0xb9, 0xb9, 0x7f, 0x61, 0xc0, 0x92, 0x7e, 0x33, 0xe1, 0x44, 0x55, 0xa7, 0xc3, 0x31,
	0x75, 0xfc, 0x84, 0x81, 0xb2, 0xb5, 0xc2, 0xc3, 0xb1, 0xec, 0xfc, 0x32, 0x86, 0x97, 0x60, 0xb5,
	0xe3, 0x31, 0xf2, 0xe0, 0xc7, 0xd8, 0x9c, 0x30, 0xd2, 0x37, 0xd8, 0x40, 0xb1, 0x9f, 0x2c, 0x34,
	0x55, 0xbb, 0x2a, 0xe9, 0xfc, 0x3b, 0x06, 0x2c, 0xa0, 0x1b, 0x12, 0x27, 0xca, 0x31, 0x84, 0xc5,
	0x73, 0x79, 0x4f, 0x89, 0x31, 0xcf, 0xf1, 0xee, 0x5b, 0x85, 0xf3, 0x40, 0x17, 0x19, 0xd5, 0x49,
	0x9b, 0x8d, 0x4a, 0x6e, 0xb4, 0x0a, 0x15, 0x6a, 0xe4, 0x9e, 0xbb, 0xd1, 0x82, 0xdc, 0x6b, 0x9f,
	0x2b, 0x41, 0x25, 0x7d, 0x33, 0xe3, 0xc4, 0x83, 0x2b, 0xe9, 0x06, 0x78, 0x2a, 0xbf, 0x61, 0xa8,
	0x83, 0x2b, 0xe2, 0x58, 0xc5, 0xc9, 0x07, 0xfb, 0x1f, 0xda, 0x7e, 0x9d, 0x72, 0x9b, 0x2b, 0xea,
	0x82, 0x32, 0xd5, 0x25, 0xec, 0xf8, 0x2a, 0x5f, 0x12, 0xd7, 0xdf, 0xd2, 0x83, 0x67, 0x58, 0xd9,
	0x51, 0xa3, 0x35, 0x13, 0x59, 0x3f, 0xe9, 0x32, 0x27, 0x59, 0x3b, 0xf1, 0x73, 0x53, 0x00, 0xea,
	0x52, 0xc9, 0xc9, 0x67, 0x9f, 0x24, 0x54, 0x53, 0x47, 0x25, 0x25, 0xb0, 0xe8, 0x30, 0x0a, 0xb7,
	0x91, 0xdf, 0x4d, 0xe7, 0xd1, 0xb7, 0x96, 0x9b, 0xd5, 0x43, 0x49, 0x52, 0x98, 0x47, 0x59, 0xda,
	0xbb, 0x51, 0xd3, 0xf7, 0x62, 0x6e, 0xcf, 0xa9, 0xf9, 0x5e, 0x83, 0x0b, 0xd4, 0xb9, 0xeb, 0x58,
	0x41, 0x9d, 0x19, 0xc2, 0x61, 0x3a, 0x55, 0xc6, 0x58, 0x53, 0xec, 0x01, 0xb5, 0x5a, 0x29, 0x47,
	0xe6, 0x06, 0x93, 0xf0, 0xa1, 0xc1, 0xc4, 0xce, 0x15, 0x5d, 0xe1, 0x7b, 0xbc, 0xd4, 0x90, 0x22,
	0xdf, 0x77, 0xed, 0xa6, 0xe5, 0x20, 0x8d, 0x7f, 0x0d, 0x2e, 0x34, 0x02, 0x6b, 0x8b, 0x59, 0xbb,
	0x4c, 0xd9, 0xa5, 0x63, 0x47, 0x89, 0x76, 0xb5, 0xbc, 0x88, 0x97, 0x63, 0x6b, 0xe7, 0x8f, 0x78,
	0x14, 0x1f, 0xd2, 0x67, 0x0b, 0xe7, 0x2b, 0xf3, 0xb5, 0x6f, 0x97, 0xe4, 0x75, 0x20, 0x7c, 0x77,
	0x5e, 0xf0, 0x3a, 0x90, 0xec, 0x06, 0xfd, 0x51, 0xce, 0x75, 0x20, 0x45, 0x7b, 0x24, 0x0f, 0x5e,
	0x31, 0xba, 0x49, 0x64, 0x01, 0x93, 0x00, 0x8e, 0x8b, 0x76, 0x8a, 0x07, 0x7f, 0x35, 0x94, 0xc3,
	0x6c, 0x48, 0xb5, 0x51, 0x77, 0xe0, 0x7a, 0x06, 0x93, 0x73, 0x02, 0x7c, 0x0a, 0x1d, 0xe1, 0x65,
	0x23, 0xcb, 0x3f, 0xf1, 0x5c, 0x46, 0x9f, 0x4e, 0x8e, 0x3b, 0xfb, 0x1d, 0xbb, 0xa9, 0x63, 0xc4,
	0xae, 0x51, 0x6e, 0x9c, 0xe5, 0x77, 0x94, 0x4e, 0x3e, 0xa4, 0x94, 0xe0, 0xf0, 0x7a, 0x3d, 0xe3,
	0xcb, 0xb5, 0x02, 0x15, 0xaa, 0x80, 0xd9, 0xe7, 0x72, 0xef, 0xe6, 0x28, 0xd6, 0x4a, 0xc6, 0x0f,
	0xa1, 0xc1, 0xa4, 0x58, 0xfd, 0x9e, 0x01, 0xf3, 0xf2, 0x82, 0xd4, 0x89, 0xf7, 0x25, 0x48, 0x24,
	0x1e, 0xfa, 0x97, 0xd0, 0x39, 0x44, 0x57, 0x1d, 0x2a, 0xcb, 0x8c, 0x1e, 0x15, 0x92, 0x6a, 0x85,
	0x0b, 0xb1, 0xe3, 0xc5, 0x4e, 0x8b, 0xb2, 0x09, 0xb2, 0x7b, 0xd6, 0xe1, 0xbc, 0xd0, 0x6c, 0x9b,
	0x4e, 0xc4, 0xe4, 0x16, 0x63, 0x17, 0xb5, 0xd7, 0x1b, 0x70, 0x89, 0xb7, 0x2a, 0x36, 0x0c, 0x8d,
	0xda, 0x2f, 0x94, 0x00, 0xd4, 0x0d, 0xae, 0x13, 0xa5, 0x8d, 0x82, 0xe2, 0x19, 0xfe, 0x6b, 0x74,
	0x38, 0x87, 0x39, 0x9c, 0x45, 0x53, 0xbc, 0x01, 0x97, 0x3d, 0x3f, 0xde, 0x26, 0xa4, 0x1d, 0x6f,
	0xf9, 0x74, 0xec, 0x0c, 0x9d, 0xd9, 0x20, 0x59, 0x0e, 0xc8, 0x5e, 0x6b, 0x72, 0xb8, 0xf4, 0xe2,
	0x06, 0xf2, 0x14, 0x4a, 0x19, 0xd6, 0x3b, 0x6d, 0xd7, 0xb1, 0xa9, 0x97, 0x60, 0xb7, 0x3b, 0x71,
	0x64, 0x6d, 0xa9, 0x43, 0xae, 0xf8, 0xba, 0x3e, 0xfe, 0x52, 0x51, 0xed, 0xff, 0x9c, 0x82, 0x99,
	0xe4, 0x92, 0x5a, 0xf3, 0x35, 0x6d, 0x69, 0xae, 0x14, 0xdc, 0x65, 0x8b, 0x97, 0xe5, 0x1f, 0x08,
	0xab, 0xf1, 0x12, 0x2c, 0x51, 0xe7, 0x2a, 0xef, 0xb8, 0xd2, 0x5d, 0xd8, 0x10, 0x61, 0xb8, 0x87,
	0xec, 0x04, 0x47, 0x18, 0x59, 0x9e, 0x4d, 0xd8, 0xe5, 0x5e, 0x3b, 0x79, 0x02, 0x19, 0xc5, 0xed,
	0x68, 0x83, 0x54, 0xf1, 0x92, 0x5c, 0x9e, 0xb3, 0x30, 0xe7, 0xf9, 0x4c, 0x3a, 0xa2, 0xf3, 0xc0,
	0x17, 0x60, 0xc1, 0xf3, 0x59, 0x01, 0x28, 0x13, 0x1d, 0x65, 0x94, 0x8d, 0xdc, 0x71, 0x82, 0xa8,
	0x63, 0xb9, 0xe2, 0xa0, 0xb6, 0x15, 0x91, 0xa0, 0xf8, 0xb4, 0x1c, 0xbb, 0x92, 0x64, 0xd3, 0x0f,
	0x02, 0xff, 0x41, 0xb6, 0x78, 0x66, 0x05, 0x2a, 0xed, 0x80, 0x24, 0xa5, 0x73, 0x99, 0xec, 0xd3,
	0x65, 0x58, 0x4e, 0x2a, 0xc3, 0x32, 0x29, 0x27, 0xb6, 0x0f, 0xfc, 0x70, 0x68, 0xd6, 0x0a, 0xa4,
	0x1a, 0x86, 0x99, 0x0d, 0x01, 0x09, 0xdb, 0xbe, 0x97, 0x3d, 0xed, 0x26, 0x26, 0x27, 0xde, 0xab,
	0x44, 0xed, 0x25, 0x58, 0x6a, 0x38, 0x9e, 0x83, 0x2a, 0xe0, 0x5f, 0xe8, 0x36, 0xc4, 0x2f, 0xce,
	0xc0, 0x9c, 0xb8, 0x68, 0xd8, 0xbc, 0xa7, 0xed, 0xfd, 0x6a, 0xe1, 0x8d, 0xc4, 0x9a, 0x0a, 0x9e,
	0x56, 0x22, 0x4b, 0x96, 0xb8, 0x65, 0xf6, 0xff, 0x22, 0x9c, 0xd6, 0x6a, 0x80, 0x0c, 0xa4, 0x30,
	0x99, 0x5c, 0xa2, 0x0a, 0x93, 0x5f, 0xd6, 0xda, 0x6e, 0x5a, 0x61, 0x8e, 0xb5, 0xc1, 0xac, 0x0a,
	0x96, 0xd5, 0x95, 0x61, 0x3f, 0x5e, 0xa5, 0x83, 0xfc, 0x6c, 0x99, 0xc0, 0x96, 0x9b, 0xfe, 0x41,
	0xb8, 0xd9, 0xb6, 0x02, 0xab, 0x45, 0xe8, 0x56, 0x7f, 0x8a, 0x55, 0x64, 0x8b, 0xfc, 0xb2, 0x45,
	0x95, 0x78, 0x4e, 0x66, 0x7f, 0x03, 0x2e, 0xf1, 0x57, 0x39, 0x29, 0x78, 0xec, 0x71, 0x73, 0x54,
	0x5e, 0xd4, 0x8e, 0x11, 0x08, 0x7f, 0xaf, 0xcc, 0x58, 0x4c, 0x04, 0xea, 0xd0, 0x6d, 0x72, 0xc9,
	0xd5, 0x3c, 0x9a, 0xa8, 0xbc, 0x5f, 0x81, 0x92, 0x98, 0xf3, 0x50, 0x81, 0x40, 0xbb, 0x0b, 0x53,
	0x56, 0x99, 0xcb, 0x85, 0x57, 0xa2, 0x6f, 0x01, 0x5d, 0x6c, 0x90, 0xca, 0xcf, 0xe3, 0x40, 0x59,
	0xa8, 0xc8, 0x84, 0x19, 0x1c, 0xfc, 0x92, 0x1d, 0x05, 0x50, 0xc9, 0xfc, 0x97, 0x61, 0x0d, 0x47,
	0xd8, 0x44, 0x67, 0xac, 0x80, 0x61, 0x2b, 0xf0, 0x3b, 0xed, 0x50, 0xa5, 0xf1, 0x59, 0x55, 0x2e,
	0xb1, 0x93, 0xe7, 0xd2, 0x30, 0x59, 0x46, 0xdc, 0x8d, 0xef, 0xf3, 0xe1, 0x97, 0x76, 0xf0, 0x03,
	0x6c, 0x2a, 0x61, 0x7f, 0x0d, 0x2e, 0xf0, 0x25, 0x4c, 0x5f, 0xe5, 0x75, 0x06, 0x95, 0x37, 0x88,
	0xdc, 0x22, 0xe1, 0xa7, 0x80, 0x32, 0x60, 0x13, 0x2d, 0x5a, 0x8e, 0x11, 0x14, 0xcb, 0xb3, 0xda,
	0x2a, 0x8d, 0xff, 0x9d, 0x79, 0x79, 0x43, 0x98, 0xb8, 0x9f, 0xfa, 0x05, 0x6f, 0x08, 0xd3, 0x0a,
	0x11, 0x13, 0x16, 0xf9, 0x6f, 0x73, 0xd9, 0x2b, 0xc2, 0x04, 0xb1, 0xe7, 0x95, 0xf8, 0xa6, 0x2e,
	0x33, 0xd0, 0xea, 0x0d, 0x99, 0x46, 0x68, 0x59, 0x0f, 0x99, 0x6f, 0xde, 0xe1, 0x27, 0x58, 0xc2,
	0x88, 0xb4, 0x43, 0x75, 0x68, 0xa2, 0x84, 0x76, 0x01, 0x1d, 0x1c, 0xc9, 0x18, 0xab, 0x57, 0xc1,
	0x44, 0x15, 0xbe, 0xe2, 0x75, 0x19, 0x1d, 0x13, 0x44, 0xd7, 0xfc, 0xd0, 0x85, 0xf3, 0xc4, 0x0f,
	0x74, 0xcf, 0x40, 0xea, 0x5a, 0xce, 0x7b, 0x70, 0x2b, 0xa9, 0xf9, 0x9f, 0xdc, 0x46, 0x1e, 0x0c,
	0xba, 0x08, 0xa7, 0x05, 0x35, 0xe8, 0x45, 0x30, 0xd7, 0xa1, 0xca, 0x32, 0x91, 0x5b, 0xae, 0xbf,
	0x29, 0x23, 0xc1, 0xfa, 0xbd, 0x9b, 0x09, 0x2d, 0x31, 0x03, 0x20, 0x96, 0x4e, 0x29, 0x5a, 0x36,
	0x40, 0x1c, 0x27, 0xd6, 0x5e, 0xcc, 0x14, 0xcb, 0xce, 0x54, 0xde, 0xf4, 0x34, 0x0a, 0xdc, 0x79,
	0x7e, 0x1c, 0x52, 0x83, 0x2f, 0x6a, 0x6a, 0xb5, 0x2d, 0x57, 0xe0, 0x0c, 0x1d, 0x57, 0xc1, 0xa5,
	0x3d, 0x97, 0x61, 0x59, 0x29, 0x63, 0x26, 0x46, 0x14, 0xf5, 0x33, 0x32, 0x4c, 0xe6, 0x2b, 0x86,
	0xc4, 0xe3, 0xea, 0xc9, 0xf9, 0x1f, 0xc5, 0x00, 0xe9, 0xd3, 0x18, 0x98, 0xec, 0x31, 0x2f, 0x3a,
	0x5e, 0x2c, 0x2b, 0x2f, 0x65, 0x45, 0xa9, 0x89, 0x28, 0x46, 0xde, 0x33, 0xa9, 0xdd, 0x9f, 0x28,
	0x3c, 0x59, 0x49, 0xf7, 0x14, 0x9a, 0xea, 0x57, 0x66, 0xcf, 0x38, 0x8b, 0x9f, 0x43, 0xeb, 0x8e,
	0xa1, 0x29, 0x0d, 0x7d, 0x1e, 0x49, 0x15, 0xbd, 0xc7, 0x44, 0xd8, 0x5e, 0xc0, 0x7b, 0x8c, 0xde,
	0xf3, 0xaa, 0x58, 0xf6, 0x31, 0x75, 0xc7, 0x4e, 0x51, 0xd9, 0x4d, 0x55, 0x0b, 0x7f, 0x66, 0x93,
	0xd7, 0x97, 0x90, 0x1d, 0xe9, 0x3a, 0x36, 0xa1, 0x1a, 0x55, 0xf7, 0xcb, 0x2f, 0xa3, 0x40, 0x6b,
	0xdd, 0x09, 0x93, 0x34, 0x7c, 0xce, 0x69, 0xf3, 0x15, 0xb4, 0x42, 0x89, 0x56, 0xb0, 0x03, 0x3f,
	0x0c, 0xd9, 0x6d, 0x66, 0xc9, 0xc0, 0x36, 0xa9, 0x84, 0xb7, 0x82, 0x5d, 0x75, 0xad, 0xce, 0x0d,
	0xb8, 0xcc, 0xd2, 0x3c, 0x0e, 0x3b, 0x7c, 0x70, 0x9f, 0xd8, 0x9a, 0x91, 0x71, 0x15, 0x79, 0x2b,
	0x82, 0xb4, 0x99, 0xee, 0x8a, 0x7d, 0x6a, 0x20, 0x51, 0x65, 0x8e, 0x4b, 0xf9, 0xd4, 0x7d, 0x3a,
	0x57, 0xc1, 0x4c, 0xee, 0x1e, 0xd0, 0x28, 0x6f, 0x4d, 0x1d, 0xcc, 0xa6, 0x9e, 0xdc, 0xbf, 0x2d,
	0xc1, 0xbc, 0xbc, 0xb8, 0x7f, 0xa2, 0x41, 0x2f, 0x91, 0x58, 0x6c, 0xfd, 0x6c, 0x49, 0x5d, 0x80,
	0x26, 0xfd, 0xcf, 0x13, 0x73, 0xca, 0xed, 0xc0, 0xdf, 0x71, 0xea, 0x24, 0x48, 0xf9, 0xd5, 0xf2,
	0xd4, 0x70, 0x18, 0x05, 0x96, 0xe3, 0x45, 0xfc, 0xb0, 0x26, 0xf6, 0xab, 0x25, 0x3f, 0x88, 0x43,
	0xcc, 0x09, 0x04, 0x67, 0x0b, 0xe4, 0x5d, 0xd3, 0xd2, 0x15, 0x2e, 0xa3, 0x3d, 0xf1, 0xfc, 0x98,
	0xd5, 0xbf, 0x33, 0xf5, 0x96, 0x55, 0x29, 0xd3, 0x88, 0x10, 0x30, 0x34, 0xdf, 0xaf, 0xce, 0x7c,
	0x8a, 0x65, 0x85, 0x55, 0x30, 0xfd, 0x8b, 0x53, 0xb0, 0x9c, 0xfa, 0x8b, 0x06, 0x13, 0xe3, 0xc5,
	0x29, 0x3c, 0x5e, 0xe8, 0x7f, 0x52, 0x52, 0x01, 0x63, 0x49, 0xc5, 0x85, 0x0a, 0x42, 0x9a, 0x38,
	0x06, 0x92, 0x51, 0x22, 0x52, 0xab, 0x9d, 0xf3, 0x60, 0xc6, 0x62, 0xce, 0xd9, 0x16, 0x76, 0xea,
	0x1f, 0x71, 0x49, 0x19, 0x99, 0x0a, 0xb6, 0xef, 0x45, 0x96, 0x93, 0x24, 0xb2, 0x33, 0xd5, 0x91,
	0xd3, 0x27, 0xd6, 0x4e, 0xce, 0x20, 0xa3, 0x5c, 0x5e, 0x8f, 0x3c, 0xfb, 0xe2, 0x7c, 0x33, 0x87,
	0xad, 0x6e, 0xc1, 0x37, 0x29, 0x61, 0xbf, 0x02, 0x15, 0x56, 0x56, 0xe3, 0xb8, 0x4e, 0xb4, 0x9b,
	0x12, 0xf1, 0xb5, 0xf7, 0x4b, 0x70, 0x1a, 0xff, 0x6d, 0x88, 0x89, 0xb5, 0x77, 0x18, 0x8c, 0x37,
	0xe4, 0x9f, 0xa2, 0xe3, 0x47, 0xf2, 0x36, 0x6f, 0x96, 0x7b, 0xc8, 0xa5, 0xfe, 0x24, 0x16, 0x9b,
	0x49, 0x99, 0xbd, 0x26, 0x2e, 0x57, 0x48, 0x00, 0x62, 0x57, 0x5e, 0xa3, 0xdb, 0x2c, 0x72, 0x85,
	0x01, 0x61, 0x1e, 0xb0, 0x2a, 0xa6, 0x99, 0x12, 0x20, 0x76, 0x38, 0x5c, 0xdc, 0xa0, 0xbe, 0x45,
	0x25, 0xd3, 0x6e, 0xdc, 0x09, 0x5c, 0xb1, 0x59, 0xac, 0x97, 0xa4, 0xf0, 0xc0, 0xb2, 0x6d, 0x92,
	0xf0, 0x9f, 0x00, 0x8a, 0x8d, 0x5a, 0xaf, 0xbd, 0x6f, 0xc0, 0xa2, 0xf6, 0x67, 0x2e, 0x26, 0x86,
	0x72, 0x34, 0x34, 0x5e, 0x94, 0x86, 0x8a, 0xe4, 0x50, 0x5d, 0x13, 0x5b, 0x0f, 0xac, 0x80, 0x78,
	0xb9, 0xf7, 0x81, 0xaf, 0x40, 0x85, 0x41, 0xc2, 0xc8, 0x92, 0x67, 0x49, 0xe4, 0x21, 0xb1, 0x7f,
	0x65, 0xc0, 0x72, 0xea, 0xaf, 0x65, 0x4c, 0x64, 0x9e, 0x14, 0x1e, 0x0f, 0xeb, 0xf3, 0x28, 0xb5,
	0xd7, 0xf2, 0xeb, 0x49, 0x6d, 0x59, 0x61, 0x86, 0xf3, 0x0a, 0x9c, 0x49, 0x17, 0xc0, 0xe8, 0xa7,
	0xea, 0x65, 0x02, 0x46, 0xbd, 0xc6, 0xe7, 0xc5, 0x64, 0xe4, 0x42, 0xbe, 0x15, 0xe5, 0x04, 0x1f,
	0x7b, 0x0c, 0x73, 0x87, 0xe2, 0xaf, 0xa0, 0x5e, 0xbb, 0x93, 0xfc, 0x05, 0xd5, 0x3b, 0xe2, 0x2f,
	0xa8, 0xde, 0x21, 0x47, 0x4f, 0x0f, 0x77, 0xba, 0x07, 0x4f, 0xc5, 0x0d, 0xb2, 0xd5, 0xdf, 0x9a,
	0x63, 0x7f, 0x49, 0xe4, 0x66, 0x6e, 0xa4, 0x33, 0xf3, 0x77, 0x55, 0x03, 0xd9, 0xf7, 0x66, 0xe3,
	0xbb, 0x7f, 0xb0, 0x7a, 0xea, 0xbb, 0xdf, 0x5f, 0x35, 0x7e, 0xef, 0xfb, 0xab, 0xc6, 0xef, 0x7f,
	0x7f, 0xd5, 0xf8, 0xf7, 0xdf, 0x5f, 0x35, 0xde, 0xff, 0xc1, 0xea, 0xa9, 0xdf, 0xfb, 0xc1, 0xea,
	0xa9, 0xdf, 0xff, 0xc1, 0xea, 0x29, 0xd8, 0xe8, 0x0d, 0x0e, 0xc5, 0x00, 0xf6, 0xfa, 0xcf, 0xc6,
	0x83, 0xc1, 0xc1, 0xe8, 0x0e, 0xfb, 0x43, 0x81, 0x77, 0x0e, 0xf6, 0x1f, 0xdd, 0x49, 0xfe, 0x08,
	0xe2, 0xa3, 0x19, 0x36, 0xb6, 0xd7, 0xff, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x98, 0xfa, 0x5b,
	0x24, 0x27, 0x76, 0x00, 0x00,
}

func (m *FailureDetailMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailureDetailMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetailMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExitCode != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.ExitCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FailureDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailureDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Category != nil {
		{
			size := m.Category.Size()
			i -= size
			if _, err := m.Category.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintFailureDetails(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FailureDetail_Interrupted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_Interrupted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Interrupted != nil {
		{
			size, err := m.Interrupted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_ExternalRepository) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_ExternalRepository) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExternalRepository != nil {
		{
			size, err := m.ExternalRepository.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_BuildProgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_BuildProgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BuildProgress != nil {
		{
			size, err := m.BuildProgress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_RemoteOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_RemoteOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RemoteOptions != nil {
		{
			size, err := m.RemoteOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_ClientEnvironment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_ClientEnvironment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientEnvironment != nil {
		{
			size, err := m.ClientEnvironment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_Crash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_Crash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Crash != nil {
		{
			size, err := m.Crash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_SymlinkForest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_SymlinkForest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SymlinkForest != nil {
		{
			size, err := m.SymlinkForest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_PackageOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_PackageOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PackageOptions != nil {
		{
			size, err := m.PackageOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_RemoteExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_RemoteExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RemoteExecution != nil {
		{
			size, err := m.RemoteExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_Execution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_Execution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Execution != nil {
		{
			size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_Workspaces) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_Workspaces) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Workspaces != nil {
		{
			size, err := m.Workspaces.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_CrashOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_CrashOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CrashOptions != nil {
		{
			size, err := m.CrashOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_Filesystem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_Filesystem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Filesystem != nil {
		{
			size, err := m.Filesystem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_ExecutionOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_ExecutionOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExecutionOptions != nil {
		{
			size, err := m.ExecutionOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_Spawn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_Spawn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Spawn != nil {
		{
			size, err := m.Spawn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_GrpcServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_GrpcServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GrpcServer != nil {
		{
			size, err := m.GrpcServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_CanonicalizeFlags) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_CanonicalizeFlags) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CanonicalizeFlags != nil {
		{
			size, err := m.CanonicalizeFlags.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_BuildConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_BuildConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BuildConfiguration != nil {
		{
			size, err := m.BuildConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_InfoCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_InfoCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InfoCommand != nil {
		{
			size, err := m.InfoCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_MemoryOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_MemoryOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MemoryOptions != nil {
		{
			size, err := m.MemoryOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_Query) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_Query) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_LocalExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_LocalExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LocalExecution != nil {
		{
			size, err := m.LocalExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_ActionCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_ActionCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActionCache != nil {
		{
			size, err := m.ActionCache.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_FetchCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_FetchCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FetchCommand != nil {
		{
			size, err := m.FetchCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_SyncCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_SyncCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncCommand != nil {
		{
			size, err := m.SyncCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_Sandbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_Sandbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sandbox != nil {
		{
			size, err := m.Sandbox.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_IncludeScanning) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_IncludeScanning) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IncludeScanning != nil {
		{
			size, err := m.IncludeScanning.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_TestCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_TestCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TestCommand != nil {
		{
			size, err := m.TestCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_ActionQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_ActionQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActionQuery != nil {
		{
			size, err := m.ActionQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_TargetPatterns) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_TargetPatterns) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TargetPatterns != nil {
		{
			size, err := m.TargetPatterns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_CleanCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_CleanCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CleanCommand != nil {
		{
			size, err := m.CleanCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_ConfigCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_ConfigCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConfigCommand != nil {
		{
			size, err := m.ConfigCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_ConfigurableQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_ConfigurableQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConfigurableQuery != nil {
		{
			size, err := m.ConfigurableQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_DumpCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_DumpCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DumpCommand != nil {
		{
			size, err := m.DumpCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_HelpCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_HelpCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HelpCommand != nil {
		{
			size, err := m.HelpCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_MobileInstall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_MobileInstall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MobileInstall != nil {
		{
			size, err := m.MobileInstall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_ProfileCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_ProfileCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProfileCommand != nil {
		{
			size, err := m.ProfileCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_RunCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_RunCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RunCommand != nil {
		{
			size, err := m.RunCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_VersionCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_VersionCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VersionCommand != nil {
		{
			size, err := m.VersionCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_PrintActionCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_PrintActionCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrintActionCommand != nil {
		{
			size, err := m.PrintActionCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_WorkspaceStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_WorkspaceStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkspaceStatus != nil {
		{
			size, err := m.WorkspaceStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_JavaCompile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_JavaCompile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JavaCompile != nil {
		{
			size, err := m.JavaCompile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_ActionRewinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_ActionRewinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActionRewinding != nil {
		{
			size, err := m.ActionRewinding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_CppCompile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_CppCompile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CppCompile != nil {
		{
			size, err := m.CppCompile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_StarlarkAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_StarlarkAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StarlarkAction != nil {
		{
			size, err := m.StarlarkAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_NinjaAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_NinjaAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NinjaAction != nil {
		{
			size, err := m.NinjaAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_DynamicExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_DynamicExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DynamicExecution != nil {
		{
			size, err := m.DynamicExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_FailAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_FailAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FailAction != nil {
		{
			size, err := m.FailAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_SymlinkAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_SymlinkAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SymlinkAction != nil {
		{
			size, err := m.SymlinkAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_CppLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_CppLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CppLink != nil {
		{
			size, err := m.CppLink.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_LtoAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_LtoAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LtoAction != nil {
		{
			size, err := m.LtoAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_TestAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_TestAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TestAction != nil {
		{
			size, err := m.TestAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_Worker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_Worker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Worker != nil {
		{
			size, err := m.Worker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_Analysis) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_Analysis) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Analysis != nil {
		{
			size, err := m.Analysis.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_PackageLoading) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_PackageLoading) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PackageLoading != nil {
		{
			size, err := m.PackageLoading.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_Toolchain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_Toolchain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Toolchain != nil {
		{
			size, err := m.Toolchain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_StarlarkLoading) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_StarlarkLoading) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StarlarkLoading != nil {
		{
			size, err := m.StarlarkLoading.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_ExternalDeps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_ExternalDeps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExternalDeps != nil {
		{
			size, err := m.ExternalDeps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_DiffAwareness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_DiffAwareness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DiffAwareness != nil {
		{
			size, err := m.DiffAwareness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *FailureDetail_ModqueryCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailureDetail_ModqueryCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModqueryCommand != nil {
		{
			size, err := m.ModqueryCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFailureDetails(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *Interrupted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interrupted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interrupted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Spawn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Spawn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Spawn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpawnExitCode != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.SpawnExitCode))
		i--
		dAtA[i] = 0x18
	}
	if m.Catastrophic {
		i--
		if m.Catastrophic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExternalRepository) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalRepository) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalRepository) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildProgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildProgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoteOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoteOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoteOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientEnvironment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientEnvironment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientEnvironment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Crash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Crash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Crash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Causes) > 0 {
		for iNdEx := len(m.Causes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Causes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFailureDetails(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Throwable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Throwable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Throwable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StackTrace) > 0 {
		for iNdEx := len(m.StackTrace) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StackTrace[iNdEx])
			copy(dAtA[i:], m.StackTrace[iNdEx])
			i = encodeVarintFailureDetails(dAtA, i, uint64(len(m.StackTrace[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintFailureDetails(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ThrowableClass) > 0 {
		i -= len(m.ThrowableClass)
		copy(dAtA[i:], m.ThrowableClass)
		i = encodeVarintFailureDetails(dAtA, i, uint64(len(m.ThrowableClass)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SymlinkForest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SymlinkForest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SymlinkForest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PackageOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackageOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PackageOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoteExecution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoteExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoteExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Execution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Execution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Execution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Workspaces) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Workspaces) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Workspaces) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CrashOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrashOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrashOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Filesystem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Filesystem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Filesystem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GrpcServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrpcServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrpcServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanonicalizeFlags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanonicalizeFlags) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanonicalizeFlags) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InfoCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MemoryOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemoryOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Query) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Query) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Query) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LocalExecution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionCache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FetchCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Sandbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sandbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sandbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IncludeScanning) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncludeScanning) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncludeScanning) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PackageLoadingCode != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.PackageLoadingCode))
		i--
		dAtA[i] = 0x10
	}
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TestCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TargetPatterns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetPatterns) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TargetPatterns) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CleanCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CleanCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CleanCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfigCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfigurableQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigurableQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigurableQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DumpCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DumpCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DumpCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HelpCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelpCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelpCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MobileInstall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MobileInstall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MobileInstall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProfileCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProfileCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RunCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VersionCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PrintActionCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrintActionCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrintActionCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkspaceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkspaceStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkspaceStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *JavaCompile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JavaCompile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JavaCompile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionRewinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionRewinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionRewinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CppCompile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CppCompile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CppCompile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StarlarkAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StarlarkAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StarlarkAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NinjaAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NinjaAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NinjaAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DynamicExecution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynamicExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FailAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SymlinkAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SymlinkAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SymlinkAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CppLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CppLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CppLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LtoAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LtoAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LtoAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TestAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Worker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Worker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Worker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Analysis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Analysis) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Analysis) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PackageLoading) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackageLoading) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PackageLoading) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Toolchain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Toolchain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Toolchain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StarlarkLoading) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StarlarkLoading) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StarlarkLoading) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExternalDeps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalDeps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalDeps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DiffAwareness) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiffAwareness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiffAwareness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModqueryCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModqueryCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModqueryCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintFailureDetails(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFailureDetails(dAtA []byte, offset int, v uint64) int {
	offset -= sovFailureDetails(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FailureDetailMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExitCode != 0 {
		n += 1 + sovFailureDetails(uint64(m.ExitCode))
	}
	return n
}

func (m *FailureDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovFailureDetails(uint64(l))
	}
	if m.Category != nil {
		n += m.Category.Size()
	}
	return n
}

func (m *FailureDetail_Interrupted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interrupted != nil {
		l = m.Interrupted.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_ExternalRepository) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExternalRepository != nil {
		l = m.ExternalRepository.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_BuildProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuildProgress != nil {
		l = m.BuildProgress.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_RemoteOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemoteOptions != nil {
		l = m.RemoteOptions.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_ClientEnvironment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientEnvironment != nil {
		l = m.ClientEnvironment.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_Crash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Crash != nil {
		l = m.Crash.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_SymlinkForest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SymlinkForest != nil {
		l = m.SymlinkForest.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_PackageOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PackageOptions != nil {
		l = m.PackageOptions.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_RemoteExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemoteExecution != nil {
		l = m.RemoteExecution.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_Execution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_Workspaces) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Workspaces != nil {
		l = m.Workspaces.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_CrashOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CrashOptions != nil {
		l = m.CrashOptions.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_Filesystem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filesystem != nil {
		l = m.Filesystem.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_ExecutionOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecutionOptions != nil {
		l = m.ExecutionOptions.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_Command) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Command != nil {
		l = m.Command.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_Spawn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Spawn != nil {
		l = m.Spawn.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_GrpcServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GrpcServer != nil {
		l = m.GrpcServer.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_CanonicalizeFlags) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanonicalizeFlags != nil {
		l = m.CanonicalizeFlags.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_BuildConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuildConfiguration != nil {
		l = m.BuildConfiguration.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_InfoCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InfoCommand != nil {
		l = m.InfoCommand.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_MemoryOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MemoryOptions != nil {
		l = m.MemoryOptions.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_Query) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_LocalExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocalExecution != nil {
		l = m.LocalExecution.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_ActionCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionCache != nil {
		l = m.ActionCache.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_FetchCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FetchCommand != nil {
		l = m.FetchCommand.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_SyncCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncCommand != nil {
		l = m.SyncCommand.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_Sandbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sandbox != nil {
		l = m.Sandbox.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_IncludeScanning) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncludeScanning != nil {
		l = m.IncludeScanning.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_TestCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TestCommand != nil {
		l = m.TestCommand.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_ActionQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionQuery != nil {
		l = m.ActionQuery.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_TargetPatterns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetPatterns != nil {
		l = m.TargetPatterns.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_CleanCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CleanCommand != nil {
		l = m.CleanCommand.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_ConfigCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigCommand != nil {
		l = m.ConfigCommand.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_ConfigurableQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigurableQuery != nil {
		l = m.ConfigurableQuery.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_DumpCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DumpCommand != nil {
		l = m.DumpCommand.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_HelpCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HelpCommand != nil {
		l = m.HelpCommand.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_MobileInstall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MobileInstall != nil {
		l = m.MobileInstall.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_ProfileCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProfileCommand != nil {
		l = m.ProfileCommand.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_RunCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RunCommand != nil {
		l = m.RunCommand.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_VersionCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VersionCommand != nil {
		l = m.VersionCommand.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_PrintActionCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrintActionCommand != nil {
		l = m.PrintActionCommand.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_WorkspaceStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkspaceStatus != nil {
		l = m.WorkspaceStatus.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_JavaCompile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JavaCompile != nil {
		l = m.JavaCompile.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_ActionRewinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionRewinding != nil {
		l = m.ActionRewinding.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_CppCompile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CppCompile != nil {
		l = m.CppCompile.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_StarlarkAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StarlarkAction != nil {
		l = m.StarlarkAction.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_NinjaAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NinjaAction != nil {
		l = m.NinjaAction.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_DynamicExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DynamicExecution != nil {
		l = m.DynamicExecution.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_FailAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FailAction != nil {
		l = m.FailAction.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_SymlinkAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SymlinkAction != nil {
		l = m.SymlinkAction.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_CppLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CppLink != nil {
		l = m.CppLink.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_LtoAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LtoAction != nil {
		l = m.LtoAction.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_TestAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TestAction != nil {
		l = m.TestAction.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_Worker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Worker != nil {
		l = m.Worker.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_Analysis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Analysis != nil {
		l = m.Analysis.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_PackageLoading) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PackageLoading != nil {
		l = m.PackageLoading.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_Toolchain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Toolchain != nil {
		l = m.Toolchain.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_StarlarkLoading) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StarlarkLoading != nil {
		l = m.StarlarkLoading.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_ExternalDeps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExternalDeps != nil {
		l = m.ExternalDeps.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_DiffAwareness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiffAwareness != nil {
		l = m.DiffAwareness.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *FailureDetail_ModqueryCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModqueryCommand != nil {
		l = m.ModqueryCommand.Size()
		n += 2 + l + sovFailureDetails(uint64(l))
	}
	return n
}
func (m *Interrupted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *Spawn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	if m.Catastrophic {
		n += 2
	}
	if m.SpawnExitCode != 0 {
		n += 1 + sovFailureDetails(uint64(m.SpawnExitCode))
	}
	return n
}

func (m *ExternalRepository) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *BuildProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *RemoteOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *ClientEnvironment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *Crash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	if len(m.Causes) > 0 {
		for _, e := range m.Causes {
			l = e.Size()
			n += 1 + l + sovFailureDetails(uint64(l))
		}
	}
	return n
}

func (m *Throwable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ThrowableClass)
	if l > 0 {
		n += 1 + l + sovFailureDetails(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovFailureDetails(uint64(l))
	}
	if len(m.StackTrace) > 0 {
		for _, s := range m.StackTrace {
			l = len(s)
			n += 1 + l + sovFailureDetails(uint64(l))
		}
	}
	return n
}

func (m *SymlinkForest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *PackageOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *RemoteExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *Execution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *Workspaces) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *CrashOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *Filesystem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *ExecutionOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *Command) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *GrpcServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *CanonicalizeFlags) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *BuildConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *InfoCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *MemoryOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *Query) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *LocalExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *ActionCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *FetchCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *SyncCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *Sandbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *IncludeScanning) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	if m.PackageLoadingCode != 0 {
		n += 1 + sovFailureDetails(uint64(m.PackageLoadingCode))
	}
	return n
}

func (m *TestCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *ActionQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *TargetPatterns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *CleanCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *ConfigCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *ConfigurableQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *DumpCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *HelpCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *MobileInstall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *ProfileCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *RunCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *VersionCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *PrintActionCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *WorkspaceStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *JavaCompile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *ActionRewinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *CppCompile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *StarlarkAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *NinjaAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *DynamicExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *FailAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *SymlinkAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *CppLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *LtoAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *TestAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *Worker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *Analysis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *PackageLoading) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *Toolchain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *StarlarkLoading) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *ExternalDeps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *DiffAwareness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func (m *ModqueryCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFailureDetails(uint64(m.Code))
	}
	return n
}

func sovFailureDetails(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozFailureDetails(x uint64) (n int) {
	return sovFailureDetails(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FailureDetailMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailureDetailMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailureDetailMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			m.ExitCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FailureDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailureDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailureDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interrupted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_Interrupted
				field Interrupted
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Interrupted = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalRepository", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_ExternalRepository
				field ExternalRepository
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.ExternalRepository = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildProgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_BuildProgress
				field BuildProgress
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.BuildProgress = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_RemoteOptions
				field RemoteOptions
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.RemoteOptions = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 107:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientEnvironment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_ClientEnvironment
				field ClientEnvironment
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.ClientEnvironment = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 108:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_Crash
				field Crash
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Crash = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymlinkForest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_SymlinkForest
				field SymlinkForest
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.SymlinkForest = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 114:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_PackageOptions
				field PackageOptions
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.PackageOptions = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 115:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_RemoteExecution
				field RemoteExecution
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.RemoteExecution = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 116:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_Execution
				field Execution
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Execution = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 117:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_Workspaces
				field Workspaces
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Workspaces = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 118:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrashOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_CrashOptions
				field CrashOptions
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.CrashOptions = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 119:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filesystem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_Filesystem
				field Filesystem
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Filesystem = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 121:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_ExecutionOptions
				field ExecutionOptions
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.ExecutionOptions = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 122:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_Command
				field Command
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Command = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 123:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spawn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_Spawn
				field Spawn
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Spawn = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 124:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_GrpcServer
				field GrpcServer
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.GrpcServer = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 125:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanonicalizeFlags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_CanonicalizeFlags
				field CanonicalizeFlags
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.CanonicalizeFlags = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 126:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_BuildConfiguration
				field BuildConfiguration
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.BuildConfiguration = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 127:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_InfoCommand
				field InfoCommand
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.InfoCommand = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 129:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_MemoryOptions
				field MemoryOptions
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.MemoryOptions = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 130:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_Query
				field Query
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Query = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 132:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_LocalExecution
				field LocalExecution
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.LocalExecution = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 134:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionCache", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_ActionCache
				field ActionCache
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.ActionCache = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 135:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_FetchCommand
				field FetchCommand
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.FetchCommand = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 136:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_SyncCommand
				field SyncCommand
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.SyncCommand = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 137:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sandbox", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_Sandbox
				field Sandbox
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Sandbox = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 139:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeScanning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_IncludeScanning
				field IncludeScanning
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.IncludeScanning = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 140:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_TestCommand
				field TestCommand
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.TestCommand = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 141:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_ActionQuery
				field ActionQuery
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.ActionQuery = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 142:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetPatterns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_TargetPatterns
				field TargetPatterns
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.TargetPatterns = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 144:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CleanCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_CleanCommand
				field CleanCommand
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.CleanCommand = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 145:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_ConfigCommand
				field ConfigCommand
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.ConfigCommand = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 146:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigurableQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_ConfigurableQuery
				field ConfigurableQuery
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.ConfigurableQuery = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 147:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DumpCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_DumpCommand
				field DumpCommand
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.DumpCommand = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 148:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_HelpCommand
				field HelpCommand
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.HelpCommand = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 150:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileInstall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_MobileInstall
				field MobileInstall
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.MobileInstall = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_ProfileCommand
				field ProfileCommand
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.ProfileCommand = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_RunCommand
				field RunCommand
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.RunCommand = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 153:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_VersionCommand
				field VersionCommand
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.VersionCommand = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 154:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrintActionCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_PrintActionCommand
				field PrintActionCommand
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.PrintActionCommand = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 158:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspaceStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_WorkspaceStatus
				field WorkspaceStatus
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.WorkspaceStatus = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 159:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavaCompile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_JavaCompile
				field JavaCompile
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.JavaCompile = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 160:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionRewinding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_ActionRewinding
				field ActionRewinding
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.ActionRewinding = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 161:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CppCompile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_CppCompile
				field CppCompile
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.CppCompile = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 162:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarlarkAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_StarlarkAction
				field StarlarkAction
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.StarlarkAction = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 163:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NinjaAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_NinjaAction
				field NinjaAction
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.NinjaAction = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 164:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_DynamicExecution
				field DynamicExecution
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.DynamicExecution = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 166:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_FailAction
				field FailAction
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.FailAction = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 167:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymlinkAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_SymlinkAction
				field SymlinkAction
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.SymlinkAction = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 168:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CppLink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_CppLink
				field CppLink
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.CppLink = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 169:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtoAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_LtoAction
				field LtoAction
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.LtoAction = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 172:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_TestAction
				field TestAction
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.TestAction = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 173:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_Worker
				field Worker
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Worker = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 174:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Analysis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_Analysis
				field Analysis
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Analysis = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 175:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageLoading", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_PackageLoading
				field PackageLoading
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.PackageLoading = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 177:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Toolchain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_Toolchain
				field Toolchain
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.Toolchain = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 179:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarlarkLoading", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_StarlarkLoading
				field StarlarkLoading
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.StarlarkLoading = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 181:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalDeps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_ExternalDeps
				field ExternalDeps
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.ExternalDeps = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 182:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffAwareness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_DiffAwareness
				field DiffAwareness
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.DiffAwareness = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		case 183:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModqueryCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			alloc := new(struct {
				value FailureDetail_ModqueryCommand
				field ModqueryCommand
			})
			if err := alloc.field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			alloc.value.ModqueryCommand = &alloc.field
			m.Category = &alloc.value
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Interrupted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interrupted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interrupted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Interrupted_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Spawn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Spawn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Spawn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Spawn_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Catastrophic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Catastrophic = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpawnExitCode", wireType)
			}
			m.SpawnExitCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpawnExitCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalRepository) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalRepository: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalRepository: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ExternalRepository_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= BuildProgress_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoteOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RemoteOptions_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientEnvironment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientEnvironment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientEnvironment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ClientEnvironment_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Crash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Crash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Crash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Crash_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Causes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Causes = append(m.Causes, &Throwable{})
			if err := m.Causes[len(m.Causes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Throwable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Throwable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Throwable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThrowableClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThrowableClass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackTrace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFailureDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StackTrace = append(m.StackTrace, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SymlinkForest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SymlinkForest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SymlinkForest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= SymlinkForest_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackageOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackageOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackageOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= PackageOptions_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoteExecution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteExecution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteExecution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RemoteExecution_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Execution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Execution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Execution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Execution_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Workspaces) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Workspaces: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Workspaces: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Workspaces_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrashOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrashOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrashOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= CrashOptions_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Filesystem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Filesystem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Filesystem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Filesystem_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ExecutionOptions_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Command_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrpcServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrpcServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrpcServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= GrpcServer_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanonicalizeFlags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanonicalizeFlags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanonicalizeFlags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= CanonicalizeFlags_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= BuildConfiguration_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= InfoCommand_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= MemoryOptions_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Query) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Query: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Query: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Query_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalExecution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalExecution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalExecution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= LocalExecution_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionCache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ActionCache_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= FetchCommand_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= SyncCommand_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sandbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sandbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sandbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Sandbox_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncludeScanning) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncludeScanning: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncludeScanning: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= IncludeScanning_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageLoadingCode", wireType)
			}
			m.PackageLoadingCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PackageLoadingCode |= PackageLoading_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= TestCommand_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ActionQuery_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetPatterns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetPatterns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetPatterns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= TargetPatterns_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CleanCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CleanCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CleanCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= CleanCommand_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ConfigCommand_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigurableQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigurableQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigurableQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ConfigurableQuery_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DumpCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DumpCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DumpCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= DumpCommand_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelpCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelpCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelpCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= HelpCommand_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MobileInstall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MobileInstall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MobileInstall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= MobileInstall_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ProfileCommand_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RunCommand_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= VersionCommand_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrintActionCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrintActionCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrintActionCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= PrintActionCommand_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkspaceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkspaceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkspaceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= WorkspaceStatus_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JavaCompile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JavaCompile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JavaCompile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= JavaCompile_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionRewinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionRewinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionRewinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ActionRewinding_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CppCompile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CppCompile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CppCompile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= CppCompile_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StarlarkAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StarlarkAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StarlarkAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= StarlarkAction_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NinjaAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NinjaAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NinjaAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= NinjaAction_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicExecution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicExecution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicExecution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= DynamicExecution_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FailAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= FailAction_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SymlinkAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SymlinkAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SymlinkAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= SymlinkAction_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CppLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CppLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CppLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= CppLink_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LtoAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LtoAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LtoAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= LtoAction_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= TestAction_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Worker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Worker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Worker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Worker_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Analysis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Analysis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Analysis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Analysis_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackageLoading) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackageLoading: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackageLoading: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= PackageLoading_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Toolchain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Toolchain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Toolchain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Toolchain_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StarlarkLoading) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StarlarkLoading: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StarlarkLoading: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= StarlarkLoading_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalDeps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalDeps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalDeps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ExternalDeps_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiffAwareness) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiffAwareness: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiffAwareness: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= DiffAwareness_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModqueryCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModqueryCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModqueryCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ModqueryCommand_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailureDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailureDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFailureDetails(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFailureDetails
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFailureDetails
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFailureDetails
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFailureDetails
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFailureDetails
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFailureDetails        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFailureDetails          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFailureDetails = fmt.Errorf("proto: unexpected end of group")
)

