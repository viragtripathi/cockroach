// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: roachpb/io-formats.proto

package roachpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	slices "slices"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IOFileFormat_FileFormat int32

const (
	IOFileFormat_Unknown      IOFileFormat_FileFormat = 0
	IOFileFormat_CSV          IOFileFormat_FileFormat = 1
	IOFileFormat_MysqlOutfile IOFileFormat_FileFormat = 2
	IOFileFormat_PgCopy       IOFileFormat_FileFormat = 4
	IOFileFormat_Avro         IOFileFormat_FileFormat = 6
	IOFileFormat_Parquet      IOFileFormat_FileFormat = 7
)

var IOFileFormat_FileFormat_name = map[int32]string{
	0: "Unknown",
	1: "CSV",
	2: "MysqlOutfile",
	4: "PgCopy",
	6: "Avro",
	7: "Parquet",
}

var IOFileFormat_FileFormat_value = map[string]int32{
	"Unknown":      0,
	"CSV":          1,
	"MysqlOutfile": 2,
	"PgCopy":       4,
	"Avro":         6,
	"Parquet":      7,
}

func (x IOFileFormat_FileFormat) Enum() *IOFileFormat_FileFormat {
	p := new(IOFileFormat_FileFormat)
	*p = x
	return p
}

func (x IOFileFormat_FileFormat) String() string {
	return proto.EnumName(IOFileFormat_FileFormat_name, int32(x))
}

func (x *IOFileFormat_FileFormat) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IOFileFormat_FileFormat_value, data, "IOFileFormat_FileFormat")
	if err != nil {
		return err
	}
	*x = IOFileFormat_FileFormat(value)
	return nil
}

func (IOFileFormat_FileFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c5b508d081359f, []int{0, 0}
}

type IOFileFormat_Compression int32

const (
	IOFileFormat_Auto   IOFileFormat_Compression = 0
	IOFileFormat_None   IOFileFormat_Compression = 1
	IOFileFormat_Gzip   IOFileFormat_Compression = 2
	IOFileFormat_Bzip   IOFileFormat_Compression = 3
	IOFileFormat_Snappy IOFileFormat_Compression = 4
)

var IOFileFormat_Compression_name = map[int32]string{
	0: "Auto",
	1: "None",
	2: "Gzip",
	3: "Bzip",
	4: "Snappy",
}

var IOFileFormat_Compression_value = map[string]int32{
	"Auto":   0,
	"None":   1,
	"Gzip":   2,
	"Bzip":   3,
	"Snappy": 4,
}

func (x IOFileFormat_Compression) Enum() *IOFileFormat_Compression {
	p := new(IOFileFormat_Compression)
	*p = x
	return p
}

func (x IOFileFormat_Compression) String() string {
	return proto.EnumName(IOFileFormat_Compression_name, int32(x))
}

func (x *IOFileFormat_Compression) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IOFileFormat_Compression_value, data, "IOFileFormat_Compression")
	if err != nil {
		return err
	}
	*x = IOFileFormat_Compression(value)
	return nil
}

func (IOFileFormat_Compression) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c5b508d081359f, []int{0, 1}
}

type MySQLOutfileOptions_Enclose int32

const (
	MySQLOutfileOptions_Never    MySQLOutfileOptions_Enclose = 0
	MySQLOutfileOptions_Always   MySQLOutfileOptions_Enclose = 1
	MySQLOutfileOptions_Optional MySQLOutfileOptions_Enclose = 2
)

var MySQLOutfileOptions_Enclose_name = map[int32]string{
	0: "Never",
	1: "Always",
	2: "Optional",
}

var MySQLOutfileOptions_Enclose_value = map[string]int32{
	"Never":    0,
	"Always":   1,
	"Optional": 2,
}

func (x MySQLOutfileOptions_Enclose) Enum() *MySQLOutfileOptions_Enclose {
	p := new(MySQLOutfileOptions_Enclose)
	*p = x
	return p
}

func (x MySQLOutfileOptions_Enclose) String() string {
	return proto.EnumName(MySQLOutfileOptions_Enclose_name, int32(x))
}

func (x *MySQLOutfileOptions_Enclose) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MySQLOutfileOptions_Enclose_value, data, "MySQLOutfileOptions_Enclose")
	if err != nil {
		return err
	}
	*x = MySQLOutfileOptions_Enclose(value)
	return nil
}

func (MySQLOutfileOptions_Enclose) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c5b508d081359f, []int{2, 0}
}

type AvroOptions_Format int32

const (
	// Avro object container file input
	AvroOptions_OCF AvroOptions_Format = 0
	// Input file contains avro binary encoded records; one record per line
	AvroOptions_BIN_RECORDS AvroOptions_Format = 1
	// Input file contains avro JSON encoded records; one record per line
	AvroOptions_JSON_RECORDS AvroOptions_Format = 2
)

var AvroOptions_Format_name = map[int32]string{
	0: "OCF",
	1: "BIN_RECORDS",
	2: "JSON_RECORDS",
}

var AvroOptions_Format_value = map[string]int32{
	"OCF":          0,
	"BIN_RECORDS":  1,
	"JSON_RECORDS": 2,
}

func (x AvroOptions_Format) Enum() *AvroOptions_Format {
	p := new(AvroOptions_Format)
	*p = x
	return p
}

func (x AvroOptions_Format) String() string {
	return proto.EnumName(AvroOptions_Format_name, int32(x))
}

func (x *AvroOptions_Format) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AvroOptions_Format_value, data, "AvroOptions_Format")
	if err != nil {
		return err
	}
	*x = AvroOptions_Format(value)
	return nil
}

func (AvroOptions_Format) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c5b508d081359f, []int{4, 0}
}

type IOFileFormat struct {
	Format      IOFileFormat_FileFormat  `protobuf:"varint,1,opt,name=format,enum=cockroach.roachpb.IOFileFormat_FileFormat" json:"format"`
	Csv         CSVOptions               `protobuf:"bytes,2,opt,name=csv" json:"csv"`
	MysqlOut    MySQLOutfileOptions      `protobuf:"bytes,3,opt,name=mysql_out,json=mysqlOut" json:"mysql_out"`
	PgCopy      PgCopyOptions            `protobuf:"bytes,4,opt,name=pg_copy,json=pgCopy" json:"pg_copy"`
	Avro        AvroOptions              `protobuf:"bytes,8,opt,name=avro" json:"avro"`
	Parquet     ParquetOptions           `protobuf:"bytes,10,opt,name=parquet" json:"parquet"`
	Compression IOFileFormat_Compression `protobuf:"varint,5,opt,name=compression,enum=cockroach.roachpb.IOFileFormat_Compression" json:"compression"`
	// If true, don't abort on failures but instead save the offending row and keep on.
	SaveRejected bool `protobuf:"varint,7,opt,name=save_rejected,json=saveRejected" json:"save_rejected"`
}

func (m *IOFileFormat) Reset()         { *m = IOFileFormat{} }
func (m *IOFileFormat) String() string { return proto.CompactTextString(m) }
func (*IOFileFormat) ProtoMessage()    {}
func (*IOFileFormat) Descriptor() ([]byte, []int) {
	return fileDescriptor_16c5b508d081359f, []int{0}
}
func (m *IOFileFormat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IOFileFormat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IOFileFormat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IOFileFormat.Merge(m, src)
}
func (m *IOFileFormat) XXX_Size() int {
	return m.Size()
}
func (m *IOFileFormat) XXX_DiscardUnknown() {
	xxx_messageInfo_IOFileFormat.DiscardUnknown(m)
}

var xxx_messageInfo_IOFileFormat proto.InternalMessageInfo

// CSVOptions describe the format of csv data (delimiter, comment, etc).
type CSVOptions struct {
	// comma is an delimiter used by the CSV file; defaults to a comma.
	Comma int32 `protobuf:"varint,1,opt,name=comma" json:"comma"`
	// comment is an comment rune; zero value means comments not enabled.
	Comment int32 `protobuf:"varint,2,opt,name=comment" json:"comment"`
	// null_encoding, if not nil, is the string which identifies a NULL. Can be the empty string.
	NullEncoding *string `protobuf:"bytes,3,opt,name=null_encoding,json=nullEncoding" json:"null_encoding,omitempty"`
	// skip the first N lines of the input (e.g. to ignore column headers) when reading.
	Skip uint32 `protobuf:"varint,4,opt,name=skip" json:"skip"`
	// If strict_quotes is true, a quote may NOT appear in an unquoted field and a
	// non-doubled quote may NOT appear in a quoted field.
	StrictQuotes bool `protobuf:"varint,5,opt,name=strict_quotes,json=strictQuotes" json:"strict_quotes"`
	// Indicates the number of rows to import per CSV file.
	// Must be a non-zero positive number.
	RowLimit int64 `protobuf:"varint,6,opt,name=row_limit,json=rowLimit" json:"row_limit"`
	// allow_quoted_null
	AllowQuotedNull bool `protobuf:"varint,7,opt,name=allow_quoted_null,json=allowQuotedNull" json:"allow_quoted_null"`
}

func (m *CSVOptions) Reset()         { *m = CSVOptions{} }
func (m *CSVOptions) String() string { return proto.CompactTextString(m) }
func (*CSVOptions) ProtoMessage()    {}
func (*CSVOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_16c5b508d081359f, []int{1}
}
func (m *CSVOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSVOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CSVOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSVOptions.Merge(m, src)
}
func (m *CSVOptions) XXX_Size() int {
	return m.Size()
}
func (m *CSVOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CSVOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CSVOptions proto.InternalMessageInfo

// MySQLOutfileOptions describe the format of mysql's outfile.
type MySQLOutfileOptions struct {
	// row_separator is the delimiter between rows (mysql's --rows-terminated-by)
	RowSeparator int32 `protobuf:"varint,1,opt,name=row_separator,json=rowSeparator" json:"row_separator"`
	// field_separator is the delimiter between fields (mysql's --fields-terminated-by)
	FieldSeparator int32 `protobuf:"varint,2,opt,name=field_separator,json=fieldSeparator" json:"field_separator"`
	// enclose is the enclosing (quoting) behavior (i.e. if specified and if optional).
	Enclose MySQLOutfileOptions_Enclose `protobuf:"varint,3,opt,name=enclose,enum=cockroach.roachpb.MySQLOutfileOptions_Enclose" json:"enclose"`
	// encloser is the character used to enclose (quote) fields (--fields-enclosed-by)
	Encloser int32 `protobuf:"varint,4,opt,name=encloser" json:"encloser"`
	// has_escape indicates that an escape character is set (mysql's default is not).
	HasEscape bool `protobuf:"varint,5,opt,name=has_escape,json=hasEscape" json:"has_escape"`
	// escape is the character used to prefix the other delimiters (--fields-escaped-by)
	Escape int32 `protobuf:"varint,6,opt,name=escape" json:"escape"`
	// skip the first N lines of the input (e.g. to ignore column headers) when reading.
	Skip uint32 `protobuf:"varint,7,opt,name=skip" json:"skip"`
	// null_encoding, if not nil, is the string which identifies a NULL. Can be the empty string.
	NullEncoding *string `protobuf:"bytes,8,opt,name=null_encoding,json=nullEncoding" json:"null_encoding,omitempty"`
	// limit the number of rows to import.
	RowLimit int64 `protobuf:"varint,10,opt,name=row_limit,json=rowLimit" json:"row_limit"`
}

func (m *MySQLOutfileOptions) Reset()         { *m = MySQLOutfileOptions{} }
func (m *MySQLOutfileOptions) String() string { return proto.CompactTextString(m) }
func (*MySQLOutfileOptions) ProtoMessage()    {}
func (*MySQLOutfileOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_16c5b508d081359f, []int{2}
}
func (m *MySQLOutfileOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MySQLOutfileOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MySQLOutfileOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MySQLOutfileOptions.Merge(m, src)
}
func (m *MySQLOutfileOptions) XXX_Size() int {
	return m.Size()
}
func (m *MySQLOutfileOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_MySQLOutfileOptions.DiscardUnknown(m)
}

var xxx_messageInfo_MySQLOutfileOptions proto.InternalMessageInfo

// PgCopyOptions describe the format of postgresql's COPY TO STDOUT.
type PgCopyOptions struct {
	// delimiter is the delimiter between columns (DELIMITER)
	Delimiter int32 `protobuf:"varint,1,opt,name=delimiter" json:"delimiter"`
	// null is the NULL value (NULL)
	Null string `protobuf:"bytes,2,opt,name=null" json:"null"`
	// maxRowSize is the maximum row size
	MaxRowSize int32 `protobuf:"varint,3,opt,name=maxRowSize" json:"maxRowSize"`
}

func (m *PgCopyOptions) Reset()         { *m = PgCopyOptions{} }
func (m *PgCopyOptions) String() string { return proto.CompactTextString(m) }
func (*PgCopyOptions) ProtoMessage()    {}
func (*PgCopyOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_16c5b508d081359f, []int{3}
}
func (m *PgCopyOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PgCopyOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PgCopyOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PgCopyOptions.Merge(m, src)
}
func (m *PgCopyOptions) XXX_Size() int {
	return m.Size()
}
func (m *PgCopyOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_PgCopyOptions.DiscardUnknown(m)
}

var xxx_messageInfo_PgCopyOptions proto.InternalMessageInfo

type AvroOptions struct {
	Format AvroOptions_Format `protobuf:"varint,1,opt,name=format,enum=cockroach.roachpb.AvroOptions_Format" json:"format"`
	// Strict mode import will reject avro records that do not have
	// a one-to-one mapping to our target schema.
	// The default is to ignore unknown avro fields, and to set any missing
	// columns to null value if they were not set in the avro record.
	StrictMode bool `protobuf:"varint,2,opt,name=strict_mode,json=strictMode" json:"strict_mode"`
	// Applicable for records only.
	SchemaJSON      string `protobuf:"bytes,3,opt,name=schemaJSON" json:"schemaJSON"`
	MaxRecordSize   int32  `protobuf:"varint,4,opt,name=max_record_size,json=maxRecordSize" json:"max_record_size"`
	RecordSeparator int32  `protobuf:"varint,5,opt,name=record_separator,json=recordSeparator" json:"record_separator"`
	RowLimit        int64  `protobuf:"varint,6,opt,name=row_limit,json=rowLimit" json:"row_limit"`
}

func (m *AvroOptions) Reset()         { *m = AvroOptions{} }
func (m *AvroOptions) String() string { return proto.CompactTextString(m) }
func (*AvroOptions) ProtoMessage()    {}
func (*AvroOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_16c5b508d081359f, []int{4}
}
func (m *AvroOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AvroOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AvroOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvroOptions.Merge(m, src)
}
func (m *AvroOptions) XXX_Size() int {
	return m.Size()
}
func (m *AvroOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_AvroOptions.DiscardUnknown(m)
}

var xxx_messageInfo_AvroOptions proto.InternalMessageInfo

type ParquetOptions struct {
	// col_nullability specifies which columns allow null values in the exported parquet file.
	ColNullability []bool `protobuf:"varint,1,rep,name=col_nullability,json=colNullability" json:"col_nullability,omitempty"`
}

func (m *ParquetOptions) Reset()         { *m = ParquetOptions{} }
func (m *ParquetOptions) String() string { return proto.CompactTextString(m) }
func (*ParquetOptions) ProtoMessage()    {}
func (*ParquetOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_16c5b508d081359f, []int{5}
}
func (m *ParquetOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParquetOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ParquetOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParquetOptions.Merge(m, src)
}
func (m *ParquetOptions) XXX_Size() int {
	return m.Size()
}
func (m *ParquetOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ParquetOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ParquetOptions proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.roachpb.IOFileFormat_FileFormat", IOFileFormat_FileFormat_name, IOFileFormat_FileFormat_value)
	proto.RegisterEnum("cockroach.roachpb.IOFileFormat_Compression", IOFileFormat_Compression_name, IOFileFormat_Compression_value)
	proto.RegisterEnum("cockroach.roachpb.MySQLOutfileOptions_Enclose", MySQLOutfileOptions_Enclose_name, MySQLOutfileOptions_Enclose_value)
	proto.RegisterEnum("cockroach.roachpb.AvroOptions_Format", AvroOptions_Format_name, AvroOptions_Format_value)
	proto.RegisterType((*IOFileFormat)(nil), "cockroach.roachpb.IOFileFormat")
	proto.RegisterType((*CSVOptions)(nil), "cockroach.roachpb.CSVOptions")
	proto.RegisterType((*MySQLOutfileOptions)(nil), "cockroach.roachpb.MySQLOutfileOptions")
	proto.RegisterType((*PgCopyOptions)(nil), "cockroach.roachpb.PgCopyOptions")
	proto.RegisterType((*AvroOptions)(nil), "cockroach.roachpb.AvroOptions")
	proto.RegisterType((*ParquetOptions)(nil), "cockroach.roachpb.ParquetOptions")
}

func init() { proto.RegisterFile("roachpb/io-formats.proto", fileDescriptor_16c5b508d081359f) }

var fileDescriptor_16c5b508d081359f = []byte{
	// 987 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x41, 0x73, 0xdb, 0x44,
	0x14, 0x96, 0x2c, 0xd9, 0x92, 0x9f, 0x9d, 0x58, 0x5d, 0x38, 0x68, 0x3a, 0x20, 0x5c, 0x41, 0x21,
	0x40, 0x2b, 0x33, 0x19, 0x98, 0x81, 0x13, 0x93, 0x98, 0x04, 0x92, 0x69, 0x6c, 0x6a, 0x0f, 0x3d,
	0x70, 0xd1, 0x6c, 0xa4, 0x8d, 0x23, 0x22, 0x69, 0x15, 0x49, 0xb6, 0xeb, 0xfe, 0x07, 0x66, 0xf8,
	0x4d, 0x9c, 0x72, 0xe0, 0xd0, 0x1b, 0x3d, 0x31, 0x90, 0xfc, 0x11, 0x66, 0x57, 0x2b, 0x5b, 0x02,
	0x43, 0x7b, 0x7b, 0xf3, 0xbe, 0xf7, 0xbd, 0xdd, 0x7d, 0xdf, 0xb7, 0xbb, 0x60, 0xa6, 0x14, 0x7b,
	0x97, 0xc9, 0xf9, 0x20, 0xa0, 0x8f, 0x2f, 0x68, 0x1a, 0xe1, 0x3c, 0x73, 0x92, 0x94, 0xe6, 0x14,
	0xdd, 0xf3, 0xa8, 0x77, 0xc5, 0x51, 0x47, 0xd4, 0xdc, 0x7f, 0x7b, 0x46, 0x67, 0x94, 0xa3, 0x03,
	0x16, 0x15, 0x85, 0xf6, 0x6f, 0x4d, 0xe8, 0x9e, 0x8c, 0x8f, 0x83, 0x90, 0x1c, 0xf3, 0x06, 0xe8,
	0x3b, 0x68, 0x15, 0xad, 0x4c, 0xb9, 0x2f, 0xef, 0xed, 0xee, 0x7f, 0xe2, 0xfc, 0xab, 0x95, 0x53,
	0x25, 0x38, 0x9b, 0xf0, 0x50, 0xbd, 0xf9, 0xe3, 0x3d, 0x69, 0x22, 0xf8, 0xe8, 0x0b, 0x50, 0xbc,
	0x6c, 0x61, 0x36, 0xfa, 0xf2, 0x5e, 0x67, 0xff, 0xdd, 0x2d, 0x6d, 0x86, 0xd3, 0x67, 0xe3, 0x24,
	0x0f, 0x68, 0x9c, 0x09, 0x26, 0xab, 0x47, 0x27, 0xd0, 0x8e, 0x56, 0xd9, 0x75, 0xe8, 0xd2, 0x79,
	0x6e, 0x2a, 0x9c, 0xfc, 0xe1, 0x16, 0xf2, 0xd9, 0x6a, 0xfa, 0xf4, 0xc9, 0x78, 0x9e, 0x5f, 0x04,
	0x21, 0xa9, 0x77, 0xd1, 0x39, 0x7d, 0x3c, 0xcf, 0xd1, 0xd7, 0xa0, 0x25, 0x33, 0xd7, 0xa3, 0xc9,
	0xca, 0x54, 0x79, 0xa3, 0xfe, 0x96, 0x46, 0xdf, 0xcf, 0x86, 0x34, 0x59, 0xd5, 0x5b, 0xb4, 0x12,
	0x9e, 0x44, 0x5f, 0x82, 0x8a, 0x17, 0x29, 0x35, 0x75, 0xce, 0xb6, 0xb6, 0xb0, 0x0f, 0x16, 0x29,
	0xad, 0x73, 0x39, 0x03, 0x1d, 0x80, 0x96, 0xe0, 0xf4, 0x7a, 0x4e, 0x72, 0x13, 0x38, 0xf9, 0xc1,
	0xb6, 0xa5, 0x8b, 0x8a, 0x3a, 0xbf, 0xe4, 0xa1, 0x29, 0x74, 0x3c, 0x1a, 0x25, 0x29, 0xc9, 0xb2,
	0x80, 0xc6, 0x66, 0x93, 0xcb, 0xf1, 0xe9, 0xeb, 0xe4, 0x18, 0x6e, 0x28, 0xa2, 0x61, 0xb5, 0x0b,
	0xfa, 0x18, 0x76, 0x32, 0xbc, 0x20, 0x6e, 0x4a, 0x7e, 0x22, 0x5e, 0x4e, 0x7c, 0x53, 0xeb, 0xcb,
	0x7b, 0xba, 0xa8, 0xec, 0x32, 0x68, 0x22, 0x10, 0xdb, 0x03, 0xa8, 0xf8, 0xa2, 0x03, 0xda, 0x0f,
	0xf1, 0x55, 0x4c, 0x97, 0xb1, 0x21, 0x21, 0x0d, 0x94, 0xe1, 0xf4, 0x99, 0x21, 0x23, 0x03, 0xba,
	0x67, 0x62, 0xda, 0x4c, 0x08, 0xa3, 0x81, 0x00, 0x5a, 0xc5, 0x44, 0x0d, 0x15, 0xe9, 0xa0, 0xb2,
	0xf9, 0x18, 0x2d, 0xc6, 0x16, 0x87, 0x35, 0x34, 0x5b, 0xd5, 0x15, 0x43, 0xb1, 0x55, 0xbd, 0x69,
	0x34, 0xed, 0x03, 0xe8, 0x54, 0x76, 0xcc, 0x19, 0xf3, 0x9c, 0x1a, 0x12, 0x8b, 0x46, 0x34, 0x26,
	0x86, 0xcc, 0xa2, 0x6f, 0x5f, 0x04, 0x89, 0xd1, 0x60, 0xd1, 0x21, 0x8b, 0x14, 0xb6, 0xca, 0x34,
	0xc6, 0x09, 0x5b, 0xe5, 0x54, 0xd5, 0x5b, 0x86, 0x76, 0xaa, 0xea, 0x6d, 0x03, 0xec, 0x9f, 0x1b,
	0x00, 0x1b, 0x5b, 0xa1, 0xfb, 0xd0, 0xf4, 0x68, 0x14, 0x61, 0xee, 0xe5, 0xa6, 0x38, 0x65, 0x91,
	0x42, 0x16, 0x68, 0x2c, 0x20, 0x71, 0xce, 0x2d, 0x5a, 0xa2, 0x65, 0x92, 0x4d, 0x2a, 0x9e, 0x87,
	0xa1, 0x4b, 0x62, 0x8f, 0xfa, 0x41, 0x3c, 0xe3, 0x5e, 0x6c, 0xf3, 0x2a, 0x79, 0xd2, 0x65, 0xd0,
	0x91, 0x40, 0x90, 0x09, 0x6a, 0x76, 0x15, 0x24, 0xdc, 0x64, 0x3b, 0xa5, 0x0d, 0x58, 0x86, 0x8f,
	0x3b, 0x4f, 0x03, 0x2f, 0x77, 0xaf, 0xe7, 0x34, 0x27, 0x19, 0x57, 0x71, 0x33, 0x6e, 0x0e, 0x3d,
	0xe5, 0x08, 0x7a, 0x00, 0xed, 0x94, 0x2e, 0xdd, 0x30, 0x88, 0x82, 0xdc, 0x6c, 0xf5, 0xe5, 0x3d,
	0xa5, 0xf4, 0x73, 0x4a, 0x97, 0x4f, 0x58, 0x16, 0x7d, 0x06, 0xf7, 0x70, 0x18, 0xd2, 0x65, 0xd1,
	0xcc, 0x77, 0xd9, 0x26, 0x6a, 0x02, 0xf6, 0x38, 0xcc, 0x1b, 0xfa, 0xa3, 0x79, 0x18, 0xda, 0xbf,
	0x2a, 0xf0, 0xd6, 0x96, 0x9b, 0xc2, 0xf6, 0xc5, 0x16, 0xcb, 0x48, 0x82, 0x53, 0x9c, 0xd3, 0xb4,
	0x36, 0xa0, 0x6e, 0x4a, 0x97, 0xd3, 0x12, 0x41, 0x8f, 0xa1, 0x77, 0x11, 0x90, 0xd0, 0xaf, 0x14,
	0x57, 0xe7, 0xb5, 0xcb, 0xc1, 0x4d, 0xf9, 0x08, 0x34, 0x12, 0x7b, 0x21, 0xcd, 0x08, 0x1f, 0xd8,
	0xee, 0xbe, 0xf3, 0x66, 0x97, 0xd7, 0x39, 0x2a, 0x58, 0xa5, 0x0c, 0xa2, 0x09, 0xea, 0x83, 0x2e,
	0xc2, 0x94, 0xcf, 0xb7, 0x5c, 0x77, 0x9d, 0x45, 0xef, 0x03, 0x5c, 0xe2, 0xcc, 0x25, 0x99, 0x87,
	0x13, 0x52, 0x1b, 0x70, 0xfb, 0x12, 0x67, 0x47, 0x3c, 0x8d, 0xde, 0x81, 0x96, 0x28, 0x68, 0x55,
	0x9a, 0x88, 0xdc, 0x5a, 0x40, 0x6d, 0x9b, 0x80, 0x75, 0x17, 0xe8, 0xff, 0xe9, 0x82, 0x9a, 0x80,
	0xb0, 0x4d, 0x40, 0xdb, 0x01, 0x4d, 0x1c, 0x13, 0xb5, 0xa1, 0x39, 0x22, 0x0b, 0x92, 0x1a, 0x12,
	0x33, 0xf3, 0x41, 0xb8, 0xc4, 0xab, 0xcc, 0x90, 0x51, 0x17, 0xf4, 0x62, 0x20, 0x38, 0x34, 0x1a,
	0xc2, 0xd4, 0x19, 0xec, 0xd4, 0x1e, 0x29, 0x64, 0x43, 0xdb, 0x27, 0x7c, 0x1d, 0x52, 0x57, 0x6e,
	0x93, 0x66, 0x47, 0xe2, 0xf6, 0x68, 0xac, 0xf7, 0x2b, 0x4d, 0x78, 0x06, 0x7d, 0x00, 0x10, 0xe1,
	0xe7, 0x13, 0xba, 0x9c, 0x06, 0x2f, 0x0a, 0x91, 0x4a, 0x7a, 0x25, 0x6f, 0xff, 0xde, 0x80, 0x4e,
	0xe5, 0x71, 0x43, 0xc3, 0x7f, 0xfc, 0x0b, 0x0f, 0xff, 0xff, 0x31, 0x74, 0xb6, 0x7e, 0x09, 0x0f,
	0xa1, 0x23, 0xae, 0x43, 0x44, 0x7d, 0xc2, 0xf7, 0x56, 0x6a, 0x05, 0x05, 0x70, 0x46, 0x7d, 0xc2,
	0x76, 0x98, 0x79, 0x97, 0x24, 0xc2, 0xa7, 0xd3, 0xf1, 0xa8, 0x72, 0xef, 0x58, 0xd5, 0x3a, 0x8f,
	0x1e, 0x41, 0x2f, 0xc2, 0xcf, 0xdd, 0x94, 0x78, 0x34, 0xf5, 0xdd, 0x8c, 0x1d, 0xa6, 0x6a, 0x90,
	0x1d, 0x76, 0x18, 0x8e, 0xb1, 0xf3, 0xa0, 0x01, 0x18, 0x65, 0xe5, 0xda, 0xc7, 0xcd, 0x4a, 0x79,
	0xaf, 0x40, 0x37, 0x46, 0x7e, 0xfd, 0x7d, 0xb4, 0x3f, 0x87, 0x96, 0x78, 0x1d, 0x35, 0x50, 0xc6,
	0xc3, 0x63, 0x43, 0x42, 0x3d, 0xe8, 0x1c, 0x9e, 0x8c, 0xdc, 0xc9, 0xd1, 0x70, 0x3c, 0xf9, 0x66,
	0x5a, 0xbc, 0x90, 0x6c, 0xb7, 0xeb, 0x4c, 0xc3, 0xfe, 0x0a, 0x76, 0xeb, 0x0f, 0x3f, 0xfa, 0x08,
	0x7a, 0x1e, 0x0d, 0xf9, 0x75, 0xc6, 0xe7, 0x41, 0x18, 0xe4, 0x2b, 0x53, 0xee, 0x2b, 0x7b, 0xfa,
	0x64, 0xd7, 0xa3, 0xe1, 0x68, 0x93, 0x3d, 0x1c, 0xdd, 0xfc, 0x65, 0x49, 0x37, 0xb7, 0x96, 0xfc,
	0xf2, 0xd6, 0x92, 0x5f, 0xdd, 0x5a, 0xf2, 0x9f, 0xb7, 0x96, 0xfc, 0xcb, 0x9d, 0x25, 0xbd, 0xbc,
	0xb3, 0xa4, 0x57, 0x77, 0x96, 0xf4, 0xe3, 0xa3, 0x59, 0x90, 0x5f, 0xce, 0xcf, 0x1d, 0x8f, 0x46,
	0x83, 0xb5, 0x40, 0xfe, 0xf9, 0x26, 0x1e, 0x24, 0x57, 0xb3, 0x81, 0x10, 0xec, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x62, 0xd7, 0x33, 0xf2, 0x41, 0x08, 0x00, 0x00,
}

func (m *IOFileFormat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IOFileFormat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IOFileFormat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Parquet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIoFormats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.Avro.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIoFormats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	i--
	if m.SaveRejected {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Compression))
	i--
	dAtA[i] = 0x28
	{
		size, err := m.PgCopy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIoFormats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.MysqlOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIoFormats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Csv.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIoFormats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Format))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CSVOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSVOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSVOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.AllowQuotedNull {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i = encodeVarintIoFormats(dAtA, i, uint64(m.RowLimit))
	i--
	dAtA[i] = 0x30
	i--
	if m.StrictQuotes {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Skip))
	i--
	dAtA[i] = 0x20
	if m.NullEncoding != nil {
		i -= len(*m.NullEncoding)
		copy(dAtA[i:], *m.NullEncoding)
		i = encodeVarintIoFormats(dAtA, i, uint64(len(*m.NullEncoding)))
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Comment))
	i--
	dAtA[i] = 0x10
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Comma))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MySQLOutfileOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MySQLOutfileOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MySQLOutfileOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintIoFormats(dAtA, i, uint64(m.RowLimit))
	i--
	dAtA[i] = 0x50
	if m.NullEncoding != nil {
		i -= len(*m.NullEncoding)
		copy(dAtA[i:], *m.NullEncoding)
		i = encodeVarintIoFormats(dAtA, i, uint64(len(*m.NullEncoding)))
		i--
		dAtA[i] = 0x42
	}
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Skip))
	i--
	dAtA[i] = 0x38
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Escape))
	i--
	dAtA[i] = 0x30
	i--
	if m.HasEscape {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Encloser))
	i--
	dAtA[i] = 0x20
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Enclose))
	i--
	dAtA[i] = 0x18
	i = encodeVarintIoFormats(dAtA, i, uint64(m.FieldSeparator))
	i--
	dAtA[i] = 0x10
	i = encodeVarintIoFormats(dAtA, i, uint64(m.RowSeparator))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PgCopyOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PgCopyOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PgCopyOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintIoFormats(dAtA, i, uint64(m.MaxRowSize))
	i--
	dAtA[i] = 0x18
	i -= len(m.Null)
	copy(dAtA[i:], m.Null)
	i = encodeVarintIoFormats(dAtA, i, uint64(len(m.Null)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Delimiter))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AvroOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AvroOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AvroOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintIoFormats(dAtA, i, uint64(m.RowLimit))
	i--
	dAtA[i] = 0x30
	i = encodeVarintIoFormats(dAtA, i, uint64(m.RecordSeparator))
	i--
	dAtA[i] = 0x28
	i = encodeVarintIoFormats(dAtA, i, uint64(m.MaxRecordSize))
	i--
	dAtA[i] = 0x20
	i -= len(m.SchemaJSON)
	copy(dAtA[i:], m.SchemaJSON)
	i = encodeVarintIoFormats(dAtA, i, uint64(len(m.SchemaJSON)))
	i--
	dAtA[i] = 0x1a
	i--
	if m.StrictMode {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintIoFormats(dAtA, i, uint64(m.Format))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ParquetOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParquetOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParquetOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ColNullability) > 0 {
		for iNdEx := len(m.ColNullability) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.ColNullability[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintIoFormats(dAtA []byte, offset int, v uint64) int {
	offset -= sovIoFormats(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IOFileFormat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovIoFormats(uint64(m.Format))
	l = m.Csv.Size()
	n += 1 + l + sovIoFormats(uint64(l))
	l = m.MysqlOut.Size()
	n += 1 + l + sovIoFormats(uint64(l))
	l = m.PgCopy.Size()
	n += 1 + l + sovIoFormats(uint64(l))
	n += 1 + sovIoFormats(uint64(m.Compression))
	n += 2
	l = m.Avro.Size()
	n += 1 + l + sovIoFormats(uint64(l))
	l = m.Parquet.Size()
	n += 1 + l + sovIoFormats(uint64(l))
	return n
}

func (m *CSVOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovIoFormats(uint64(m.Comma))
	n += 1 + sovIoFormats(uint64(m.Comment))
	if m.NullEncoding != nil {
		l = len(*m.NullEncoding)
		n += 1 + l + sovIoFormats(uint64(l))
	}
	n += 1 + sovIoFormats(uint64(m.Skip))
	n += 2
	n += 1 + sovIoFormats(uint64(m.RowLimit))
	n += 2
	return n
}

func (m *MySQLOutfileOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovIoFormats(uint64(m.RowSeparator))
	n += 1 + sovIoFormats(uint64(m.FieldSeparator))
	n += 1 + sovIoFormats(uint64(m.Enclose))
	n += 1 + sovIoFormats(uint64(m.Encloser))
	n += 2
	n += 1 + sovIoFormats(uint64(m.Escape))
	n += 1 + sovIoFormats(uint64(m.Skip))
	if m.NullEncoding != nil {
		l = len(*m.NullEncoding)
		n += 1 + l + sovIoFormats(uint64(l))
	}
	n += 1 + sovIoFormats(uint64(m.RowLimit))
	return n
}

func (m *PgCopyOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovIoFormats(uint64(m.Delimiter))
	l = len(m.Null)
	n += 1 + l + sovIoFormats(uint64(l))
	n += 1 + sovIoFormats(uint64(m.MaxRowSize))
	return n
}

func (m *AvroOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovIoFormats(uint64(m.Format))
	n += 2
	l = len(m.SchemaJSON)
	n += 1 + l + sovIoFormats(uint64(l))
	n += 1 + sovIoFormats(uint64(m.MaxRecordSize))
	n += 1 + sovIoFormats(uint64(m.RecordSeparator))
	n += 1 + sovIoFormats(uint64(m.RowLimit))
	return n
}

func (m *ParquetOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ColNullability) > 0 {
		n += 2 * len(m.ColNullability)
	}
	return n
}

func sovIoFormats(x uint64) (n int) {
	return int((uint32(math_bits.Len64(x|1)+6) * 37) >> 8)
}
func sozIoFormats(x uint64) (n int) {
	return sovIoFormats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IOFileFormat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIoFormats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IOFileFormat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IOFileFormat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			m.Format = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Format |= IOFileFormat_FileFormat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Csv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIoFormats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIoFormats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Csv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MysqlOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIoFormats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIoFormats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MysqlOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PgCopy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIoFormats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIoFormats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PgCopy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compression", wireType)
			}
			m.Compression = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Compression |= IOFileFormat_Compression(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveRejected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SaveRejected = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avro", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIoFormats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIoFormats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Avro.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parquet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIoFormats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIoFormats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Parquet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIoFormats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIoFormats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSVOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIoFormats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSVOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSVOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comma", wireType)
			}
			m.Comma = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Comma |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			m.Comment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Comment |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullEncoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIoFormats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIoFormats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NullEncoding = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skip", wireType)
			}
			m.Skip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Skip |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrictQuotes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StrictQuotes = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowLimit", wireType)
			}
			m.RowLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowQuotedNull", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowQuotedNull = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipIoFormats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIoFormats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MySQLOutfileOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIoFormats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MySQLOutfileOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MySQLOutfileOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowSeparator", wireType)
			}
			m.RowSeparator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowSeparator |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldSeparator", wireType)
			}
			m.FieldSeparator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldSeparator |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enclose", wireType)
			}
			m.Enclose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Enclose |= MySQLOutfileOptions_Enclose(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encloser", wireType)
			}
			m.Encloser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encloser |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasEscape", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasEscape = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Escape", wireType)
			}
			m.Escape = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Escape |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skip", wireType)
			}
			m.Skip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Skip |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullEncoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIoFormats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIoFormats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NullEncoding = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowLimit", wireType)
			}
			m.RowLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIoFormats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIoFormats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PgCopyOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIoFormats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PgCopyOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PgCopyOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delimiter", wireType)
			}
			m.Delimiter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delimiter |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Null", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIoFormats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIoFormats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Null = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRowSize", wireType)
			}
			m.MaxRowSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRowSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIoFormats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIoFormats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AvroOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIoFormats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AvroOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AvroOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			m.Format = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Format |= AvroOptions_Format(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrictMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StrictMode = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaJSON", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIoFormats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIoFormats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaJSON = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRecordSize", wireType)
			}
			m.MaxRecordSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRecordSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSeparator", wireType)
			}
			m.RecordSeparator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordSeparator |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowLimit", wireType)
			}
			m.RowLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIoFormats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIoFormats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParquetOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIoFormats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParquetOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParquetOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIoFormats
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColNullability = append(m.ColNullability, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIoFormats
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIoFormats
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthIoFormats
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 {
					if m.ColNullability == nil {
						m.ColNullability = make([]bool, 0, elementCount)
					} else {
						m.ColNullability = slices.Grow(m.ColNullability, elementCount)
					}
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIoFormats
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColNullability = append(m.ColNullability, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColNullability", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIoFormats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIoFormats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIoFormats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIoFormats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIoFormats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIoFormats
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIoFormats
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIoFormats
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIoFormats        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIoFormats          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIoFormats = fmt.Errorf("proto: unexpected end of group")
)

