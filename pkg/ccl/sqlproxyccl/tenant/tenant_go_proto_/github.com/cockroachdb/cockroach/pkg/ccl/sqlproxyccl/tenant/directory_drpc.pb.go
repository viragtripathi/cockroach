// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// source: ccl/sqlproxyccl/tenant/directory.proto

package tenant

import (
	bytes "bytes"
	context "context"
	errors "github.com/cockroachdb/errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto struct{}

func (drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCDirectoryClient interface {
	DRPCConn() drpc.Conn

	ListPods(ctx context.Context, in *ListPodsRequest) (*ListPodsResponse, error)
	WatchPods(ctx context.Context, in *WatchPodsRequest) (DRPCDirectory_WatchPodsClient, error)
	EnsurePod(ctx context.Context, in *EnsurePodRequest) (*EnsurePodResponse, error)
	GetTenant(ctx context.Context, in *GetTenantRequest) (*GetTenantResponse, error)
	WatchTenants(ctx context.Context, in *WatchTenantsRequest) (DRPCDirectory_WatchTenantsClient, error)
}

type drpcDirectoryClient struct {
	cc drpc.Conn
}

func NewDRPCDirectoryClient(cc drpc.Conn) DRPCDirectoryClient {
	return &drpcDirectoryClient{cc}
}

func (c *drpcDirectoryClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcDirectoryClient) ListPods(ctx context.Context, in *ListPodsRequest) (*ListPodsResponse, error) {
	out := new(ListPodsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.ccl.sqlproxyccl.tenant.Directory/ListPods", drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDirectoryClient) WatchPods(ctx context.Context, in *WatchPodsRequest) (DRPCDirectory_WatchPodsClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.ccl.sqlproxyccl.tenant.Directory/WatchPods", drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcDirectory_WatchPodsClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCDirectory_WatchPodsClient interface {
	drpc.Stream
	Recv() (*WatchPodsResponse, error)
}

type RPCDirectory_WatchPodsClient interface {
	Context() context.Context
	CloseSend() error
	Recv() (*WatchPodsResponse, error)
}

type drpcDirectory_WatchPodsClient struct {
	drpc.Stream
}

func (x *drpcDirectory_WatchPodsClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcDirectory_WatchPodsClient) Recv() (*WatchPodsResponse, error) {
	m := new(WatchPodsResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcDirectory_WatchPodsClient) RecvMsg(m *WatchPodsResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{})
}

func (c *drpcDirectoryClient) EnsurePod(ctx context.Context, in *EnsurePodRequest) (*EnsurePodResponse, error) {
	out := new(EnsurePodResponse)
	err := c.cc.Invoke(ctx, "/cockroach.ccl.sqlproxyccl.tenant.Directory/EnsurePod", drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDirectoryClient) GetTenant(ctx context.Context, in *GetTenantRequest) (*GetTenantResponse, error) {
	out := new(GetTenantResponse)
	err := c.cc.Invoke(ctx, "/cockroach.ccl.sqlproxyccl.tenant.Directory/GetTenant", drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDirectoryClient) WatchTenants(ctx context.Context, in *WatchTenantsRequest) (DRPCDirectory_WatchTenantsClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.ccl.sqlproxyccl.tenant.Directory/WatchTenants", drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcDirectory_WatchTenantsClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCDirectory_WatchTenantsClient interface {
	drpc.Stream
	Recv() (*WatchTenantsResponse, error)
}

type RPCDirectory_WatchTenantsClient interface {
	Context() context.Context
	CloseSend() error
	Recv() (*WatchTenantsResponse, error)
}

type drpcDirectory_WatchTenantsClient struct {
	drpc.Stream
}

func (x *drpcDirectory_WatchTenantsClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcDirectory_WatchTenantsClient) Recv() (*WatchTenantsResponse, error) {
	m := new(WatchTenantsResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcDirectory_WatchTenantsClient) RecvMsg(m *WatchTenantsResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{})
}

type DRPCDirectoryServer interface {
	ListPods(context.Context, *ListPodsRequest) (*ListPodsResponse, error)
	WatchPods(*WatchPodsRequest, DRPCDirectory_WatchPodsStream) error
	EnsurePod(context.Context, *EnsurePodRequest) (*EnsurePodResponse, error)
	GetTenant(context.Context, *GetTenantRequest) (*GetTenantResponse, error)
	WatchTenants(*WatchTenantsRequest, DRPCDirectory_WatchTenantsStream) error
}

type DRPCDirectoryUnimplementedServer struct{}

func (s *DRPCDirectoryUnimplementedServer) ListPods(context.Context, *ListPodsRequest) (*ListPodsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDirectoryUnimplementedServer) WatchPods(*WatchPodsRequest, DRPCDirectory_WatchPodsStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDirectoryUnimplementedServer) EnsurePod(context.Context, *EnsurePodRequest) (*EnsurePodResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDirectoryUnimplementedServer) GetTenant(context.Context, *GetTenantRequest) (*GetTenantResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDirectoryUnimplementedServer) WatchTenants(*WatchTenantsRequest, DRPCDirectory_WatchTenantsStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCDirectoryDescription struct{}

func (DRPCDirectoryDescription) NumMethods() int { return 5 }

func (DRPCDirectoryDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.ccl.sqlproxyccl.tenant.Directory/ListPods", drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDirectoryServer).
					ListPods(
						ctx,
						in1.(*ListPodsRequest),
					)
			}, DRPCDirectoryServer.ListPods, true
	case 1:
		return "/cockroach.ccl.sqlproxyccl.tenant.Directory/WatchPods", drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCDirectoryServer).
					WatchPods(
						in1.(*WatchPodsRequest),
						&drpcDirectory_WatchPodsStream{in2.(drpc.Stream)},
					)
			}, DRPCDirectoryServer.WatchPods, true
	case 2:
		return "/cockroach.ccl.sqlproxyccl.tenant.Directory/EnsurePod", drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDirectoryServer).
					EnsurePod(
						ctx,
						in1.(*EnsurePodRequest),
					)
			}, DRPCDirectoryServer.EnsurePod, true
	case 3:
		return "/cockroach.ccl.sqlproxyccl.tenant.Directory/GetTenant", drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDirectoryServer).
					GetTenant(
						ctx,
						in1.(*GetTenantRequest),
					)
			}, DRPCDirectoryServer.GetTenant, true
	case 4:
		return "/cockroach.ccl.sqlproxyccl.tenant.Directory/WatchTenants", drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCDirectoryServer).
					WatchTenants(
						in1.(*WatchTenantsRequest),
						&drpcDirectory_WatchTenantsStream{in2.(drpc.Stream)},
					)
			}, DRPCDirectoryServer.WatchTenants, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterDirectory(mux drpc.Mux, impl DRPCDirectoryServer) error {
	return mux.Register(impl, DRPCDirectoryDescription{})
}

type DRPCDirectory_ListPodsStream interface {
	drpc.Stream
	SendAndClose(*ListPodsResponse) error
}

type RPCDirectory_ListPodsStream interface {
	Context() context.Context
	SendAndClose(*ListPodsResponse) error
}

type drpcDirectory_ListPodsStream struct {
	drpc.Stream
}

func (x *drpcDirectory_ListPodsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcDirectory_ListPodsStream) SendAndClose(m *ListPodsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDirectory_WatchPodsStream interface {
	drpc.Stream
	Send(*WatchPodsResponse) error
}

type RPCDirectory_WatchPodsStream interface {
	Context() context.Context
	Send(*WatchPodsResponse) error
}

type drpcDirectory_WatchPodsStream struct {
	drpc.Stream
}

func (x *drpcDirectory_WatchPodsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcDirectory_WatchPodsStream) Send(m *WatchPodsResponse) error {
	return x.MsgSend(m, drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{})
}

type DRPCDirectory_EnsurePodStream interface {
	drpc.Stream
	SendAndClose(*EnsurePodResponse) error
}

type RPCDirectory_EnsurePodStream interface {
	Context() context.Context
	SendAndClose(*EnsurePodResponse) error
}

type drpcDirectory_EnsurePodStream struct {
	drpc.Stream
}

func (x *drpcDirectory_EnsurePodStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcDirectory_EnsurePodStream) SendAndClose(m *EnsurePodResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDirectory_GetTenantStream interface {
	drpc.Stream
	SendAndClose(*GetTenantResponse) error
}

type RPCDirectory_GetTenantStream interface {
	Context() context.Context
	SendAndClose(*GetTenantResponse) error
}

type drpcDirectory_GetTenantStream struct {
	drpc.Stream
}

func (x *drpcDirectory_GetTenantStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcDirectory_GetTenantStream) SendAndClose(m *GetTenantResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDirectory_WatchTenantsStream interface {
	drpc.Stream
	Send(*WatchTenantsResponse) error
}

type RPCDirectory_WatchTenantsStream interface {
	Context() context.Context
	Send(*WatchTenantsResponse) error
}

type drpcDirectory_WatchTenantsStream struct {
	drpc.Stream
}

func (x *drpcDirectory_WatchTenantsStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcDirectory_WatchTenantsStream) Send(m *WatchTenantsResponse) error {
	return x.MsgSend(m, drpcEncoding_File_ccl_sqlproxyccl_tenant_directory_proto{})
}

type RPCDirectoryClient interface {
	ListPods(ctx context.Context, in *ListPodsRequest) (*ListPodsResponse, error)
	WatchPods(ctx context.Context, in *WatchPodsRequest) (RPCDirectory_WatchPodsClient, error)
	EnsurePod(ctx context.Context, in *EnsurePodRequest) (*EnsurePodResponse, error)
	GetTenant(ctx context.Context, in *GetTenantRequest) (*GetTenantResponse, error)
	WatchTenants(ctx context.Context, in *WatchTenantsRequest) (RPCDirectory_WatchTenantsClient, error)
}

// Directory gRPC -> RPC adapter
type grpcDirectoryClientAdapter directoryClient

func NewGRPCDirectoryClientAdapter(conn *grpc.ClientConn) RPCDirectoryClient {
	return (*grpcDirectoryClientAdapter)(&directoryClient{conn})
}

func (a *grpcDirectoryClientAdapter) ListPods(ctx context.Context, in *ListPodsRequest) (*ListPodsResponse, error) {
	return (*directoryClient)(a).ListPods(ctx, in)
}

func (a *grpcDirectoryClientAdapter) WatchPods(ctx context.Context, in *WatchPodsRequest) (RPCDirectory_WatchPodsClient, error) {
	return (*directoryClient)(a).WatchPods(ctx, in)
}

func (a *grpcDirectoryClientAdapter) EnsurePod(ctx context.Context, in *EnsurePodRequest) (*EnsurePodResponse, error) {
	return (*directoryClient)(a).EnsurePod(ctx, in)
}

func (a *grpcDirectoryClientAdapter) GetTenant(ctx context.Context, in *GetTenantRequest) (*GetTenantResponse, error) {
	return (*directoryClient)(a).GetTenant(ctx, in)
}

func (a *grpcDirectoryClientAdapter) WatchTenants(ctx context.Context, in *WatchTenantsRequest) (RPCDirectory_WatchTenantsClient, error) {
	return (*directoryClient)(a).WatchTenants(ctx, in)
}

// compile-time assertion
var _ RPCDirectoryClient = (*grpcDirectoryClientAdapter)(nil)

// Directory DRPC -> RPC adapter
type drpcDirectoryClientAdapter drpcDirectoryClient

func NewDRPCDirectoryClientAdapter(conn drpc.Conn) RPCDirectoryClient {
	return (*drpcDirectoryClientAdapter)(&drpcDirectoryClient{conn})
}

func (a *drpcDirectoryClientAdapter) ListPods(ctx context.Context, in *ListPodsRequest) (*ListPodsResponse, error) {
	return (*drpcDirectoryClient)(a).ListPods(ctx, in)
}

func (a *drpcDirectoryClientAdapter) WatchPods(ctx context.Context, in *WatchPodsRequest) (RPCDirectory_WatchPodsClient, error) {
	return (*drpcDirectoryClient)(a).WatchPods(ctx, in)
}

func (a *drpcDirectoryClientAdapter) EnsurePod(ctx context.Context, in *EnsurePodRequest) (*EnsurePodResponse, error) {
	return (*drpcDirectoryClient)(a).EnsurePod(ctx, in)
}

func (a *drpcDirectoryClientAdapter) GetTenant(ctx context.Context, in *GetTenantRequest) (*GetTenantResponse, error) {
	return (*drpcDirectoryClient)(a).GetTenant(ctx, in)
}

func (a *drpcDirectoryClientAdapter) WatchTenants(ctx context.Context, in *WatchTenantsRequest) (RPCDirectory_WatchTenantsClient, error) {
	return (*drpcDirectoryClient)(a).WatchTenants(ctx, in)
}

// compile-time assertion
var _ RPCDirectoryClient = (*drpcDirectoryClientAdapter)(nil)
