//go:cgo_ldflag "external/archived_cdep_libjemalloc_macosarm/lib/libjemalloc.a"
//go:cgo_ldflag "-mmacosx-version-min=26.0"
//go:cgo_ldflag "-no-canonical-prefixes"
//go:cgo_ldflag "-fobjc-link-runtime"
//go:cgo_ldflag "-headerpad_max_install_names"
//go:cgo_ldflag "-lc++"
//go:cgo_ldflag "-lm"
//go:cgo_ldflag "-Xlinker"
//go:cgo_ldflag "-no_warn_duplicate_libraries"
// Code generated by cmd/cgo; DO NOT EDIT.

package cli

import "unsafe"

import "syscall"

import _cgopackage "runtime/cgo"

type _ _cgopackage.Incomplete
var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
//go:linkname _Cgo_no_callback runtime.cgoNoCallback
func _Cgo_no_callback(bool)
type _Ctype_JemallocOpts = _Ctype_struct___0

type _Ctype__Bool bool

type _Ctype__GoString_ string

type _Ctype_char int8

type _Ctype_int int32

type _Ctype_intgo = _Ctype_ptrdiff_t

type _Ctype_long int64

type _Ctype_ptrdiff_t = _Ctype_long

type _Ctype_size_t = _Ctype_ulong

type _Ctype_struct___0 struct {
	prof			_Ctype__Bool
	prof_active		_Ctype__Bool
	background_thread	_Ctype__Bool
	thp			*_Ctype_char
	metadata_thp		*_Ctype_char
	narenas			_Ctype_uint
	dirty_decay_ms		_Ctype_size_t
	muzzy_decay_ms		_Ctype_size_t
}

type _Ctype_uint uint32

type _Ctype_ulong uint64

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
//go:noescape
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
//go:noescape
func _cgoCheckResult(interface{})

//go:cgo_import_static _cgo_6699bd452661_C2func_jemalloc_get_opts
//go:linkname __cgofn__cgo_6699bd452661_C2func_jemalloc_get_opts _cgo_6699bd452661_C2func_jemalloc_get_opts
var __cgofn__cgo_6699bd452661_C2func_jemalloc_get_opts byte
var _cgo_6699bd452661_C2func_jemalloc_get_opts = unsafe.Pointer(&__cgofn__cgo_6699bd452661_C2func_jemalloc_get_opts)

//go:cgo_unsafe_args
func _C2func_jemalloc_get_opts(p0 *_Ctype_struct___0) (r1 _Ctype_int, r2 error) {
	errno := _cgo_runtime_cgocall(_cgo_6699bd452661_C2func_jemalloc_get_opts, uintptr(unsafe.Pointer(&p0)))
	if errno != 0 { r2 = syscall.Errno(errno) }
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}

// CString converts the Go string s to a C string.
//
// The C string is allocated in the C heap using malloc.
// It is the caller's responsibility to arrange for it to be
// freed, such as by calling C.free (be sure to include stdlib.h
// if C.free is needed).
func _Cfunc_CString(s string) *_Ctype_char {
	if len(s)+1 <= 0 {
		panic("string too large")
	}
	p := _cgo_cmalloc(uint64(len(s)+1))
	sliceHeader := struct {
		p   unsafe.Pointer
		len int
		cap int
	}{p, len(s)+1, len(s)+1}
	b := *(*[]byte)(unsafe.Pointer(&sliceHeader))
	copy(b, s)
	b[len(s)] = 0
	return (*_Ctype_char)(p)
}

//go:linkname _cgo_runtime_gostring runtime.gostring
func _cgo_runtime_gostring(*_Ctype_char) string

// GoString converts the C string p into a Go string.
func _Cfunc_GoString(p *_Ctype_char) string {
	return _cgo_runtime_gostring(p)
}
//go:cgo_import_static _cgo_6699bd452661_Cfunc_dump_heap_profile
//go:linkname __cgofn__cgo_6699bd452661_Cfunc_dump_heap_profile _cgo_6699bd452661_Cfunc_dump_heap_profile
var __cgofn__cgo_6699bd452661_Cfunc_dump_heap_profile byte
var _cgo_6699bd452661_Cfunc_dump_heap_profile = unsafe.Pointer(&__cgofn__cgo_6699bd452661_Cfunc_dump_heap_profile)

//go:cgo_unsafe_args
func _Cfunc_dump_heap_profile(p0 *_Ctype_char) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_6699bd452661_Cfunc_dump_heap_profile, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_6699bd452661_Cfunc_free
//go:linkname __cgofn__cgo_6699bd452661_Cfunc_free _cgo_6699bd452661_Cfunc_free
var __cgofn__cgo_6699bd452661_Cfunc_free byte
var _cgo_6699bd452661_Cfunc_free = unsafe.Pointer(&__cgofn__cgo_6699bd452661_Cfunc_free)

//go:cgo_unsafe_args
func _Cfunc_free(p0 unsafe.Pointer) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_6699bd452661_Cfunc_free, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_6699bd452661_Cfunc_is_profiling_enabled
//go:linkname __cgofn__cgo_6699bd452661_Cfunc_is_profiling_enabled _cgo_6699bd452661_Cfunc_is_profiling_enabled
var __cgofn__cgo_6699bd452661_Cfunc_is_profiling_enabled byte
var _cgo_6699bd452661_Cfunc_is_profiling_enabled = unsafe.Pointer(&__cgofn__cgo_6699bd452661_Cfunc_is_profiling_enabled)

//go:cgo_unsafe_args
func _Cfunc_is_profiling_enabled() (r1 _Ctype__Bool) {
	_cgo_runtime_cgocall(_cgo_6699bd452661_Cfunc_is_profiling_enabled, uintptr(unsafe.Pointer(&r1)))
	if _Cgo_always_false {
	}
	return
}
//go:cgo_import_static _cgo_6699bd452661_Cfunc_jemalloc_get_opts
//go:linkname __cgofn__cgo_6699bd452661_Cfunc_jemalloc_get_opts _cgo_6699bd452661_Cfunc_jemalloc_get_opts
var __cgofn__cgo_6699bd452661_Cfunc_jemalloc_get_opts byte
var _cgo_6699bd452661_Cfunc_jemalloc_get_opts = unsafe.Pointer(&__cgofn__cgo_6699bd452661_Cfunc_jemalloc_get_opts)

//go:cgo_unsafe_args
func _Cfunc_jemalloc_get_opts(p0 *_Ctype_struct___0) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_6699bd452661_Cfunc_jemalloc_get_opts, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}

//go:cgo_import_static _cgo_6699bd452661_Cfunc__Cmalloc
//go:linkname __cgofn__cgo_6699bd452661_Cfunc__Cmalloc _cgo_6699bd452661_Cfunc__Cmalloc
var __cgofn__cgo_6699bd452661_Cfunc__Cmalloc byte
var _cgo_6699bd452661_Cfunc__Cmalloc = unsafe.Pointer(&__cgofn__cgo_6699bd452661_Cfunc__Cmalloc)

//go:linkname runtime_throw runtime.throw
func runtime_throw(string)

//go:cgo_unsafe_args
func _cgo_cmalloc(p0 uint64) (r1 unsafe.Pointer) {
	_cgo_runtime_cgocall(_cgo_6699bd452661_Cfunc__Cmalloc, uintptr(unsafe.Pointer(&p0)))
	if r1 == nil {
		runtime_throw("runtime: C malloc failed")
	}
	return
}
