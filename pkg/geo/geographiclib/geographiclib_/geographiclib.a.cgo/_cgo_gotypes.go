//go:cgo_ldflag "-mmacosx-version-min=26.0"
//go:cgo_ldflag "-no-canonical-prefixes"
//go:cgo_ldflag "-fobjc-link-runtime"
//go:cgo_ldflag "-headerpad_max_install_names"
//go:cgo_ldflag "-lc++"
//go:cgo_ldflag "-lm"
//go:cgo_ldflag "-Xlinker"
//go:cgo_ldflag "-no_warn_duplicate_libraries"
//go:cgo_ldflag "-lm"
// Code generated by cmd/cgo; DO NOT EDIT.

package geographiclib

import "unsafe"

import "syscall"

import _cgopackage "runtime/cgo"

type _ _cgopackage.Incomplete
var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
//go:linkname _Cgo_no_callback runtime.cgoNoCallback
func _Cgo_no_callback(bool)
type _Ctype_double float64

type _Ctype_int int32

type _Ctype_struct_geod_geodesic struct {
	a	_Ctype_double
	f	_Ctype_double
	f1	_Ctype_double
	e2	_Ctype_double
	ep2	_Ctype_double
	n	_Ctype_double
	b	_Ctype_double
	c2	_Ctype_double
	etol2	_Ctype_double
	A3x	[6]_Ctype_double
	C3x	[15]_Ctype_double
	C4x	[21]_Ctype_double
}

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
//go:noescape
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
//go:noescape
func _cgoCheckResult(interface{})

//go:cgo_import_static _cgo_edf418c385dd_Cfunc_CR_GEOGRAPHICLIB_InverseBatch
//go:linkname __cgofn__cgo_edf418c385dd_Cfunc_CR_GEOGRAPHICLIB_InverseBatch _cgo_edf418c385dd_Cfunc_CR_GEOGRAPHICLIB_InverseBatch
var __cgofn__cgo_edf418c385dd_Cfunc_CR_GEOGRAPHICLIB_InverseBatch byte
var _cgo_edf418c385dd_Cfunc_CR_GEOGRAPHICLIB_InverseBatch = unsafe.Pointer(&__cgofn__cgo_edf418c385dd_Cfunc_CR_GEOGRAPHICLIB_InverseBatch)

//go:cgo_unsafe_args
func _Cfunc_CR_GEOGRAPHICLIB_InverseBatch(p0 *_Ctype_struct_geod_geodesic, p1 *_Ctype_double, p2 *_Ctype_double, p3 _Ctype_int, p4 *_Ctype_double) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_edf418c385dd_Cfunc_CR_GEOGRAPHICLIB_InverseBatch, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
		_Cgo_use(p3)
		_Cgo_use(p4)
	}
	return
}
//go:cgo_import_static _cgo_edf418c385dd_Cfunc_geod_direct
//go:linkname __cgofn__cgo_edf418c385dd_Cfunc_geod_direct _cgo_edf418c385dd_Cfunc_geod_direct
var __cgofn__cgo_edf418c385dd_Cfunc_geod_direct byte
var _cgo_edf418c385dd_Cfunc_geod_direct = unsafe.Pointer(&__cgofn__cgo_edf418c385dd_Cfunc_geod_direct)

//go:cgo_unsafe_args
func _Cfunc_geod_direct(p0 *_Ctype_struct_geod_geodesic, p1 _Ctype_double, p2 _Ctype_double, p3 _Ctype_double, p4 _Ctype_double, p5 *_Ctype_double, p6 *_Ctype_double, p7 *_Ctype_double) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_edf418c385dd_Cfunc_geod_direct, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
		_Cgo_use(p3)
		_Cgo_use(p4)
		_Cgo_use(p5)
		_Cgo_use(p6)
		_Cgo_use(p7)
	}
	return
}
//go:cgo_import_static _cgo_edf418c385dd_Cfunc_geod_init
//go:linkname __cgofn__cgo_edf418c385dd_Cfunc_geod_init _cgo_edf418c385dd_Cfunc_geod_init
var __cgofn__cgo_edf418c385dd_Cfunc_geod_init byte
var _cgo_edf418c385dd_Cfunc_geod_init = unsafe.Pointer(&__cgofn__cgo_edf418c385dd_Cfunc_geod_init)

//go:cgo_unsafe_args
func _Cfunc_geod_init(p0 *_Ctype_struct_geod_geodesic, p1 _Ctype_double, p2 _Ctype_double) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_edf418c385dd_Cfunc_geod_init, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
	}
	return
}
//go:cgo_import_static _cgo_edf418c385dd_Cfunc_geod_inverse
//go:linkname __cgofn__cgo_edf418c385dd_Cfunc_geod_inverse _cgo_edf418c385dd_Cfunc_geod_inverse
var __cgofn__cgo_edf418c385dd_Cfunc_geod_inverse byte
var _cgo_edf418c385dd_Cfunc_geod_inverse = unsafe.Pointer(&__cgofn__cgo_edf418c385dd_Cfunc_geod_inverse)

//go:cgo_unsafe_args
func _Cfunc_geod_inverse(p0 *_Ctype_struct_geod_geodesic, p1 _Ctype_double, p2 _Ctype_double, p3 _Ctype_double, p4 _Ctype_double, p5 *_Ctype_double, p6 *_Ctype_double, p7 *_Ctype_double) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_edf418c385dd_Cfunc_geod_inverse, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
		_Cgo_use(p3)
		_Cgo_use(p4)
		_Cgo_use(p5)
		_Cgo_use(p6)
		_Cgo_use(p7)
	}
	return
}
//go:cgo_import_static _cgo_edf418c385dd_Cfunc_geod_polygonarea
//go:linkname __cgofn__cgo_edf418c385dd_Cfunc_geod_polygonarea _cgo_edf418c385dd_Cfunc_geod_polygonarea
var __cgofn__cgo_edf418c385dd_Cfunc_geod_polygonarea byte
var _cgo_edf418c385dd_Cfunc_geod_polygonarea = unsafe.Pointer(&__cgofn__cgo_edf418c385dd_Cfunc_geod_polygonarea)

//go:cgo_unsafe_args
func _Cfunc_geod_polygonarea(p0 *_Ctype_struct_geod_geodesic, p1 *_Ctype_double, p2 *_Ctype_double, p3 _Ctype_int, p4 *_Ctype_double, p5 *_Ctype_double) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_edf418c385dd_Cfunc_geod_polygonarea, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
		_Cgo_use(p3)
		_Cgo_use(p4)
		_Cgo_use(p5)
	}
	return
}
