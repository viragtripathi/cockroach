// Code generated by cmd/cgo; DO NOT EDIT.

//line com_github_cockroachdb_cockroach/pkg/geo/geoproj/geoproj.go:1:1
// Copyright 2020 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

// Package geoproj contains functions that interface with the PROJ library.
package geoproj

// #cgo CXXFLAGS: -std=c++14
// #cgo CPPFLAGS: -I../../../c-deps/proj/src
// #cgo !windows LDFLAGS: -lproj
// #cgo linux LDFLAGS: -lrt -lm -lpthread
// #cgo windows LDFLAGS: -lproj_4_9 -lshlwapi -lrpcrt4
//
// #include "proj.h"
import _ "unsafe"
import (
	"math"
	"unsafe"

	"github.com/cockroachdb/cockroach/pkg/geo/geographiclib"
	"github.com/cockroachdb/cockroach/pkg/geo/geoprojbase"
	"github.com/cockroachdb/cockroach/pkg/sql/pgwire/pgcode"
	"github.com/cockroachdb/cockroach/pkg/sql/pgwire/pgerror"
)

// maxArrayLen is the maximum safe length for this architecture.
const maxArrayLen = 1<<31 - 1

func cStatusToUnsafeGoBytes(s  /*line :30:31*/_Ctype_CR_PROJ_Status /*line :30:47*/) []byte {
	if s.data == nil {
		return nil
	}
	// Interpret the C pointer as a pointer to a Go array, then slice.
	return (*[maxArrayLen]byte)(unsafe.Pointer(s.data))[:s.len:s.len]
}

// GetProjMetadata returns metadata about the given projection.
// The return arguments are a bool representing whether it is a latlng, a spheroid
// object and an error if anything was erroneous was found.
func GetProjMetadata(b geoprojbase.Proj4Text) (bool, *geographiclib.Spheroid, error) {
	var majorAxis, eccentricitySquared  /*line :42:37*/_Ctype_double /*line :42:45*/
	var isLatLng  /*line :43:15*/_Ctype_int /*line :43:20*/
	if err := cStatusToUnsafeGoBytes(
		( /*line :45:3*/_Cfunc_CR_PROJ_GetProjMetadata /*line :45:27*/)(
			(* /*line :46:6*/_Ctype_char /*line :46:12*/)(unsafe.Pointer(&b.Bytes()[0])),
			(* /*line :47:6*/_Ctype_int /*line :47:11*/)(unsafe.Pointer(&isLatLng)),
			(* /*line :48:6*/_Ctype_double /*line :48:14*/)(unsafe.Pointer(&majorAxis)),
			(* /*line :49:6*/_Ctype_double /*line :49:14*/)(unsafe.Pointer(&eccentricitySquared)),
		),
	); err != nil {
		return false, nil, pgerror.Newf(pgcode.InvalidParameterValue, "error from PROJ: %s", string(err))
	}
	// flattening = e^2 / 1 + sqrt(1-e^2).
	// See: https://en.wikipedia.org/wiki/Eccentricity_(mathematics), derived from
	// e = sqrt(f(2-f))
	flattening := float64(eccentricitySquared) / (1 + math.Sqrt(1-float64(eccentricitySquared)))
	return isLatLng != 0, geographiclib.NewSpheroid(float64(majorAxis), flattening), nil
}

// Project projects the given xCoords, yCoords and zCoords from one
// coordinate system to another using proj4text.
// Array elements are edited in place.
func Project(
	from geoprojbase.Proj4Text,
	to geoprojbase.Proj4Text,
	xCoords []float64,
	yCoords []float64,
	zCoords []float64,
) error {
	if len(xCoords) != len(yCoords) || len(xCoords) != len(zCoords) {
		return pgerror.Newf(
			pgcode.InvalidParameterValue,
			"len(xCoords) != len(yCoords) != len(zCoords): %d != %d != %d",
			len(xCoords),
			len(yCoords),
			len(zCoords),
		)
	}
	if len(xCoords) == 0 {
		return nil
	}
	if err := cStatusToUnsafeGoBytes(( /*line :83:35*/_Cfunc_CR_PROJ_Transform /*line :83:53*/)(
		(* /*line :84:5*/_Ctype_char /*line :84:11*/)(unsafe.Pointer(&from.Bytes()[0])),
		(* /*line :85:5*/_Ctype_char /*line :85:11*/)(unsafe.Pointer(&to.Bytes()[0])),
		 /*line :86:3*/_Ctype_long /*line :86:9*/(len(xCoords)),
		(* /*line :87:5*/_Ctype_double /*line :87:13*/)(unsafe.Pointer(&xCoords[0])),
		(* /*line :88:5*/_Ctype_double /*line :88:13*/)(unsafe.Pointer(&yCoords[0])),
		(* /*line :89:5*/_Ctype_double /*line :89:13*/)(unsafe.Pointer(&zCoords[0])),
	)); err != nil {
		return pgerror.Newf(pgcode.InvalidParameterValue, "error from PROJ: %s", string(err))
	}
	return nil
}
